{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.xml.deprecated.structure.Attribute"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode nextAttr=SNodeFactoryOperations.createNewNode("jetbrains.mps.xml.deprecated.structure.Attribute",null);
      SPropertyOperations.set(nextAttr,"name",((pattern == null ? null : pattern.trim())));
      SNodeOperations.insertNextSiblingChild(_context.getSourceNode(),nextAttr);
      return nextAttr;
    }
    public String getMatchingText(    String pattern){
      return pattern;
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
