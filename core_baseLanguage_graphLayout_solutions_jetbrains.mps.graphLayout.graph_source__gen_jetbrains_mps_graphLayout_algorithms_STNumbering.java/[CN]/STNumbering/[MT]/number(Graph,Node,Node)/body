{
  Edge stEdge=null;
  boolean deleteAfter=false;
  for (  Edge edge : ListSequence.fromList(source.getEdges())) {
    if (edge.getOpposite(source) == target) {
      stEdge=edge;
    }
  }
  if (stEdge == null) {
    stEdge=source.addEdgeTo(target);
    deleteAfter=true;
  }
  STNumbering.FirstDfs firstDfs=new STNumbering.FirstDfs();
  firstDfs.doDfs(graph,source,stEdge);
  Map<Node,Node> low=firstDfs.getLow();
  STNumbering.SecondDfs secondDfs=new STNumbering.SecondDfs();
  secondDfs.doDfs(graph,source,stEdge,low);
  Map<Node,Integer> res=new NodeMap<Integer>(graph);
  int curNum=0;
  for (  Node node : ListSequence.fromList(secondDfs.getList())) {
    MapSequence.fromMap(res).put(node,curNum++);
  }
  if (deleteAfter) {
    stEdge.removeFromGraph();
  }
  return res;
}
