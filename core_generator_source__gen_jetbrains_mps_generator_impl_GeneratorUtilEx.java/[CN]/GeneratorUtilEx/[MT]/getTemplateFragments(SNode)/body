{
  List<SNode> templateFragments=new LinkedList<SNode>();
  LinkedList<SNode> queue=new LinkedList<SNode>();
  queue.addFirst(template);
  do {
    SNode subnode=queue.removeFirst();
    boolean tfFound=false;
    final List<SNode> attributes=SLinkOperations.getTargets(subnode,"smodelAttribute",true);
    for (    SNode attr : ListSequence.fromList(attributes)) {
      if (SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(attr),"jetbrains.mps.lang.generator.structure.TemplateFragment")) {
        templateFragments.add(SNodeOperations.cast(attr,"jetbrains.mps.lang.generator.structure.TemplateFragment"));
        tfFound=true;
        break;
      }
    }
    if (!(tfFound)) {
      queue.addAll(ListSequence.fromList(SNodeOperations.getChildren(subnode)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return !(ListSequence.fromList(attributes).contains(it));
        }
      }
).toListSequence());
    }
  }
 while (!(queue.isEmpty()));
  return templateFragments;
}
