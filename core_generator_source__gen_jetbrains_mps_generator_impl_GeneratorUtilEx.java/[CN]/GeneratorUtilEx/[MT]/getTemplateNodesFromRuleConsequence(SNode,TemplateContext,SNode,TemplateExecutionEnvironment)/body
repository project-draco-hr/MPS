{
  final ITemplateGenerator generator=env.getGenerator();
  if (ruleConsequence == null) {
    generator.showErrorMessage(context.getInput(),null,ruleNode,"no rule consequence");
    return null;
  }
  env.getTracer().pushRuleConsequence(new SNodePointer(ruleConsequence));
  if (SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.TemplateDeclarationReference") || SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
    SNode templateContainer;
    if (SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.TemplateDeclarationReference")) {
      templateContainer=SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence,"jetbrains.mps.lang.generator.structure.TemplateDeclarationReference"),"template",false);
    }
 else {
      templateContainer=ruleConsequence;
    }
    if (templateContainer == null) {
      generator.showErrorMessage(context.getInput(),ruleConsequence,ruleNode,"error processing template consequence: no 'template'");
      return null;
    }
    List<SNode> fragments=getTemplateFragments(templateContainer);
    if (GeneratorUtilEx.checkIfOneOrMaryAdjacentFragments(fragments,templateContainer,context.getInput(),ruleNode,generator)) {
      List<Pair<SNode,String>> result=new ArrayList<Pair<SNode,String>>(fragments.size());
      for (      SNode fragment : fragments) {
        result.add(new Pair<SNode,String>(SNodeOperations.getParent(fragment),getMappingName_TemplateFragment(fragment,null)));
      }
      return result;
    }
  }
 else   if (SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence")) {
    SNode templateNode=SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence,"jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"),"templateNode",true);
    if (templateNode != null) {
      return Collections.singletonList(new Pair<SNode,String>(templateNode,null));
    }
 else {
      generator.showErrorMessage(context.getInput(),null,ruleConsequence,"no template node");
    }
  }
 else   if (SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence")) {
    SNode inlineSwitch=SNodeOperations.cast(ruleConsequence,"jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence");
    for (    SNode switchCase : SLinkOperations.getTargets(inlineSwitch,"case",true)) {
      if (env.getQueryExecutor().checkCondition(SLinkOperations.getTarget(switchCase,"conditionFunction",true),true,context,switchCase)) {
        return GeneratorUtilEx.getTemplateNodesFromRuleConsequence(SLinkOperations.getTarget(switchCase,"caseConsequence",true),context,switchCase,env);
      }
    }
    SNode defaultConsequence=SLinkOperations.getTarget(inlineSwitch,"defaultConsequence",true);
    if (defaultConsequence == null) {
      generator.showErrorMessage(context.getInput(),null,inlineSwitch,"no default consequence in switch");
    }
 else {
      return GeneratorUtilEx.getTemplateNodesFromRuleConsequence(defaultConsequence,context,defaultConsequence,env);
    }
  }
 else   if (SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.DismissTopMappingRule")) {
    SNode message=SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence,"jetbrains.mps.lang.generator.structure.DismissTopMappingRule"),"generatorMessage",true);
    DismissTopMappingRuleException.MessageType messageType=processGeneratorMessage(message,context.getInput(),null,ruleNode,generator);
    throw new DismissTopMappingRuleException(messageType);
  }
 else   if (SNodeOperations.isInstanceOf(ruleConsequence,"jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence")) {
    throw new AbandonRuleInputException();
  }
 else {
    generator.showErrorMessage(context.getInput(),null,ruleConsequence,"unsupported rule consequence");
  }
  return null;
}
