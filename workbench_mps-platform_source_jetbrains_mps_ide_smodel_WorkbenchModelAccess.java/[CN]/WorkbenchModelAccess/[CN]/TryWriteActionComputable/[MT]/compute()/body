{
  Thread.interrupted();
  final DelayedInterrupt delayedInterrupt=interruptLater(Thread.currentThread(),WAIT_FOR_WRITE_LOCK_MILLIS,MILLISECONDS);
  try {
    myWritesScheduled.incrementAndGet();
    return ApplicationManager.getApplication().runWriteAction(new com.intellij.openapi.util.Computable<T>(){
      @Override public T compute(){
        cancelInterrupt(delayedInterrupt);
        return myComputable.compute();
      }
    }
);
  }
 catch (  RuntimeException re) {
    while (re.getCause() instanceof RuntimeException) {
      re=(RuntimeException)re.getCause();
    }
    if (!(re.getCause() instanceof InterruptedException)) {
      throw re;
    }
    cancelInterrupt(delayedInterrupt);
    return null;
  }
 finally {
    myWritesScheduled.decrementAndGet();
  }
}
