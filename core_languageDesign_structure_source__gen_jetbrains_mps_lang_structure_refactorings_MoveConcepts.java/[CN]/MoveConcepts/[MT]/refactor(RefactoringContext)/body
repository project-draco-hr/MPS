{
  Language targetLanguage=Language.getLanguageFor(SModelRepository.getInstance().getModelDescriptor(((SModelReference)refactoringContext.getParameter("targetModel"))));
  Map<LanguageAspect,List<SNode>> aspectNodes=ConceptMoveUtil.getAspectNodes(((Language)refactoringContext.getParameter("sourceLanguage")),refactoringContext.getSelectedNodes());
  for (  SNode node : refactoringContext.getSelectedNodes()) {
    refactoringContext.changeFeatureName(node,((SModelReference)refactoringContext.getParameter("targetModel")).getSModelFqName().toString() + "." + SPropertyOperations.getString(node,"name"),SPropertyOperations.getString(node,"name"));
  }
  refactoringContext.moveNodesToModel(refactoringContext.getSelectedNodes(),SModelRepository.getInstance().getModelDescriptor(((SModelReference)refactoringContext.getParameter("targetModel"))).getSModel());
  for (  LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectNodes).keySet())) {
    SModel fromModel=aspect.get(((Language)refactoringContext.getParameter("sourceLanguage"))).getSModel();
    SModel toModel=aspect.getOrCreate(targetLanguage).getSModel();
    refactoringContext.updateByDefault(fromModel);
    refactoringContext.moveNodesToModel(MapSequence.fromMap(aspectNodes).get(aspect),toModel);
    refactoringContext.updateByDefault(toModel);
  }
}
