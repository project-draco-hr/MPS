{
  refactoringContext.setParameter("sourceModel",SNodeOperations.getModel(ListSequence.fromList(refactoringContext.getSelectedNodes()).first()).getModelDescriptor());
  Language sourceLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("sourceModel")));
  Language targetLanguage=Language.getLanguageFor(((SModelDescriptor)refactoringContext.getParameter("targetModel")));
  List<SNode> editors=new ArrayList<SNode>();
  List<SNode> behaviors=new ArrayList<SNode>();
  List<SNode> constraints=new ArrayList<SNode>();
  List<SNode> dataFlows=new ArrayList<SNode>();
  SModelDescriptor editorModelDescriptor=sourceLanguage.getEditorModelDescriptor();
  if (editorModelDescriptor != null) {
    for (    SNode node : refactoringContext.getSelectedNodes()) {
      SNode editor=((SNode)AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498069412(node,editorModelDescriptor.getSModel()));
      if (editor != null) {
        ListSequence.fromList(editors).addElement(editor);
      }
    }
  }
  SModelDescriptor behaviorModelDescriptor=sourceLanguage.getBehaviorModelDescriptor();
  if (behaviorModelDescriptor != null) {
    for (    SNode node : refactoringContext.getSelectedNodes()) {
      SNode behavior=((SNode)AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498069412(node,behaviorModelDescriptor.getSModel()));
      if (behavior != null) {
        ListSequence.fromList(behaviors).addElement(behavior);
      }
    }
  }
  SModelDescriptor constraintsModelDescriptor=sourceLanguage.getConstraintsModelDescriptor();
  if (constraintsModelDescriptor != null) {
    for (    SNode node : refactoringContext.getSelectedNodes()) {
      SNode constraint=SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498069412(node,constraintsModelDescriptor.getSModel()),"jetbrains.mps.lang.constraints.structure.ConceptConstraints");
      if (constraint != null) {
        ListSequence.fromList(constraints).addElement(constraint);
      }
    }
  }
  SModelDescriptor dataflowModelDescriptor=sourceLanguage.getDataFlowModelDescriptor();
  if (dataflowModelDescriptor != null) {
    for (    SNode node : refactoringContext.getSelectedNodes()) {
      SNode dataFlow=((SNode)AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498069412(node,dataflowModelDescriptor.getSModel()));
      if (dataFlow != null) {
        ListSequence.fromList(dataFlows).addElement(dataFlow);
      }
    }
  }
  for (  SNode node : refactoringContext.getSelectedNodes()) {
    refactoringContext.changeFeatureName(node,((SModelDescriptor)refactoringContext.getParameter("targetModel")).getSModelReference().getSModelFqName().toString() + "." + SPropertyOperations.getString(node,"name"),SPropertyOperations.getString(node,"name"));
  }
  refactoringContext.moveNodesToModel(refactoringContext.getSelectedNodes(),((SModelDescriptor)refactoringContext.getParameter("targetModel")).getSModel());
  if (ListSequence.fromList(editors).isNotEmpty()) {
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(editorModelDescriptor.getSModel());
    SModelDescriptor targetEditorModelDescriptor=targetLanguage.getEditorModelDescriptor();
    if (targetEditorModelDescriptor == null) {
      targetEditorModelDescriptor=LanguageAspect.EDITOR.createNew(targetLanguage);
    }
    SModel editorModel=targetEditorModelDescriptor.getSModel();
    refactoringContext.moveNodesToModel(editors,editorModel);
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(editorModel);
  }
  if (ListSequence.fromList(behaviors).isNotEmpty()) {
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(behaviorModelDescriptor.getSModel());
    SModelDescriptor targetBehaviorModelDescriptor=targetLanguage.getBehaviorModelDescriptor();
    if (targetBehaviorModelDescriptor == null) {
      targetBehaviorModelDescriptor=LanguageAspect.BEHAVIOR.createNew(targetLanguage);
    }
    SModel behaviorModel=targetBehaviorModelDescriptor.getSModel();
    refactoringContext.moveNodesToModel(behaviors,behaviorModel);
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(behaviorModel);
  }
  if (ListSequence.fromList(constraints).isNotEmpty()) {
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(constraintsModelDescriptor.getSModel());
    SModelDescriptor targetConstraintsModelDescriptor=targetLanguage.getConstraintsModelDescriptor();
    if (targetConstraintsModelDescriptor == null) {
      targetConstraintsModelDescriptor=LanguageAspect.CONSTRAINTS.createNew(targetLanguage);
    }
    SModel constraintsModel=targetConstraintsModelDescriptor.getSModel();
    refactoringContext.moveNodesToModel(constraints,constraintsModel);
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(constraintsModel);
  }
  if (ListSequence.fromList(dataFlows).isNotEmpty()) {
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(dataflowModelDescriptor.getSModel());
    SModelDescriptor targetDataFlowModelDescriptor=targetLanguage.getDataFlowModelDescriptor();
    if (targetDataFlowModelDescriptor == null) {
      targetDataFlowModelDescriptor=LanguageAspect.DATA_FLOW.createNew(targetLanguage);
    }
    SModel dataFlowModel=targetDataFlowModelDescriptor.getSModel();
    refactoringContext.moveNodesToModel(dataFlows,dataFlowModel);
    refactoringContext.computeCaches();
    refactoringContext.updateModelWithMaps(dataFlowModel);
  }
}
