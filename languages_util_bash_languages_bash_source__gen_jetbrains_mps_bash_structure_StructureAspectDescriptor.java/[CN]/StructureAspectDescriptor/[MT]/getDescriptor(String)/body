{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command",false,new String[]{"jetbrains.mps.bash.structure.Command"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AddExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AndAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AndCombiningComditionalExpression","jetbrains.mps.bash.structure.CombiningConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AndOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AppendingOutputRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Argument","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArgumentList","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArgumentListReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArgumentReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{"arg"});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArithmeticCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand","jetbrains.mps.bash.structure.IArithmeticHolder"},new String[]{},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArithmeticExpansion","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IArithmeticHolder"},new String[]{},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AsyncOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.AsyncTerminator","jetbrains.mps.bash.structure.CommandTerminator",false,new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BaseAssingmentExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{},new String[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BaseVariableAssingment","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BasedIntegerLiteral","jetbrains.mps.bash.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"value","base"},new String[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BasicParameterExpansion","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{"variable"});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{},new String[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseAndExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseNegationExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseOrExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BitwiseXorExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BlockFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BraceGrouping","jetbrains.mps.bash.structure.GroupingCommand",false,new String[]{"jetbrains.mps.bash.structure.GroupingCommand"},new String[]{},new String[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BracketConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BracketExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BracketGrouping","jetbrains.mps.bash.structure.GroupingCommand",false,new String[]{"jetbrains.mps.bash.structure.GroupingCommand"},new String[]{},new String[]{});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.BuckCommandSubstitution","jetbrains.mps.bash.structure.BaseCommandSubstitution",false,new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution"},new String[]{},new String[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CaseClause","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CaseCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CaseTerminator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CharFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CombiningConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommaExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Command","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommandList","jetbrains.mps.bash.structure.InputLine",false,new String[]{"jetbrains.mps.bash.structure.InputLine"},new String[]{},new String[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommandTerminator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommentedCommandList","jetbrains.mps.bash.structure.InputLine",false,new String[]{"jetbrains.mps.bash.structure.InputLine","jetbrains.mps.bash.structure.IComment"},new String[]{},new String[]{});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommentedFollowingCommandList","jetbrains.mps.bash.structure.AbstractFollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.IComment"},new String[]{},new String[]{});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.CommentedText","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IComment"},new String[]{"comment"},new String[]{});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ConditionalCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ConditionalOperation","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DecimalConstant","jetbrains.mps.bash.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"value"},new String[]{});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DirectoryConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DivAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DivExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DoubleQuote","jetbrains.mps.bash.structure.QuotedWord",false,new String[]{"jetbrains.mps.bash.structure.QuotedWord"},new String[]{},new String[]{});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DoubleSemicolon","jetbrains.mps.bash.structure.CaseTerminator",false,new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{},new String[]{});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DoubleSemicolonEt","jetbrains.mps.bash.structure.CaseTerminator",false,new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{},new String[]{});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{});
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{});
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ElifCommand","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityStrings","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.EqualityStrings2","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExecTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExistConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExpExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalCommandCall","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{"declaration"});
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalCommandDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ExternalOptionReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FollowingCommandList","jetbrains.mps.bash.structure.AbstractFollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList"},new String[]{},new String[]{});
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FollowingPipeline","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 76:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ForCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{});
case 77:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ForeachCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{});
case 78:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FreeCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{});
case 79:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FunctionCallCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{"function"});
case 80:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.FunctionDeclaration","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 81:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GeneralizedWord","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 82:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 83:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 84:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqual","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 85:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 86:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GreaterThanString","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 87:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GroupIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 88:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.GroupingCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{});
case 89:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HeadCommandList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 90:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HeadPipeline","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 91:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HereDocumentRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection"},new String[]{"striptabs"},new String[]{});
case 92:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HereStringRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{},new String[]{});
case 93:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.HexIntegerLiteral","jetbrains.mps.bash.structure.IntegerLiteral",false,new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"value"},new String[]{});
case 94:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IArithmeticHolder",null,true,new String[]{},new String[]{},new String[]{});
case 95:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ICommandParameter",null,true,new String[]{},new String[]{},new String[]{});
case 96:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IComment",null,true,new String[]{},new String[]{},new String[]{});
case 97:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ICompoundCommand",null,true,new String[]{},new String[]{},new String[]{});
case 98:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IConcreteWordUnit",null,true,new String[]{},new String[]{},new String[]{});
case 99:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IDescribedConcept",null,true,new String[]{},new String[]{"description"},new String[]{});
case 100:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IGeneralizedWordUnit",null,true,new String[]{},new String[]{},new String[]{});
case 101:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{"n"},new String[]{});
case 102:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IPriorityExpression",null,true,new String[]{},new String[]{},new String[]{});
case 103:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ISymbolConcept",null,true,new String[]{},new String[]{"symbol"},new String[]{});
case 104:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IToWordRedirection",null,true,new String[]{},new String[]{},new String[]{});
case 105:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IfCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{});
case 106:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InequalityExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 107:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InequalityNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 108:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InequalityStrings","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 109:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InputLine","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 110:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InputLines","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 111:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.InputRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{});
case 112:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.IntegerLiteral","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{});
case 113:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 114:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LastReadConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 115:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 116:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 117:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 118:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 119:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 120:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualNumber","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 121:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LessThanString","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 122:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LogicalAndExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 123:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LogicalNegationExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{});
case 124:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.LogicalOrExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 125:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.MinusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 126:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ModAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 127:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ModExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 128:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.MulExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 129:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.MusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 130:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.NewerThan","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 131:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 132:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.NotCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{});
case 133:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OlderThan","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 134:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Option","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{},new String[]{});
case 135:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"option"});
case 136:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionSet","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{},new String[]{});
case 137:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionSetReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{});
case 138:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionWithParam","jetbrains.mps.bash.structure.ExternalOptionDeclaration",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{},new String[]{});
case 139:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptionWithParamReference","jetbrains.mps.bash.structure.ExternalOptionReference",false,new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{},new String[]{"optionWithParam"});
case 140:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OptnameStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 141:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OrAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 142:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OrCombiningConditionalExpression","jetbrains.mps.bash.structure.CombiningConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"},new String[]{},new String[]{});
case 143:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OrOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{});
case 144:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OtherExistConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 145:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 146:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OutputErrorRedirection","jetbrains.mps.bash.structure.Redirection",false,new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{},new String[]{});
case 147:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.OutputRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"noclobber"},new String[]{});
case 148:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PipeConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 149:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PipelineOperatorConnection","jetbrains.mps.bash.structure.FollowingPipeline",false,new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{},new String[]{});
case 150:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection","jetbrains.mps.bash.structure.FollowingPipeline",false,new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{},new String[]{});
case 151:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PlusAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 152:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PostDecExpression","jetbrains.mps.bash.structure.PostVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"},new String[]{},new String[]{});
case 153:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PostIncExpression","jetbrains.mps.bash.structure.PostVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"},new String[]{},new String[]{});
case 154:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PostVariableExpression","jetbrains.mps.bash.structure.WordExpression",false,new String[]{"jetbrains.mps.bash.structure.WordExpression"},new String[]{},new String[]{});
case 155:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PreDecExpression","jetbrains.mps.bash.structure.PreVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"},new String[]{},new String[]{});
case 156:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PreIncExpression","jetbrains.mps.bash.structure.PreVariableExpression",false,new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"},new String[]{},new String[]{});
case 157:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.PreVariableExpression","jetbrains.mps.bash.structure.WordExpression",false,new String[]{"jetbrains.mps.bash.structure.WordExpression"},new String[]{},new String[]{});
case 158:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.QuotedWord","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{});
case 159:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.QuotesCommandSubstitution","jetbrains.mps.bash.structure.BaseCommandSubstitution",false,new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{});
case 160:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ReadTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 161:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ReadingWritingRedirection","jetbrains.mps.bash.structure.IORedirection",false,new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{},new String[]{});
case 162:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RedirectedCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{},new String[]{});
case 163:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.Redirection","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 164:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RegularFileConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 165:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RightBitwiseShiftExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 166:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.RightShiftAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 167:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SameReference","jetbrains.mps.bash.structure.BinaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{},new String[]{});
case 168:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SelectCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{},new String[]{});
case 169:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SemicolonEt","jetbrains.mps.bash.structure.CaseTerminator",false,new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{},new String[]{});
case 170:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SemicolonOperator","jetbrains.mps.bash.structure.FollowingCommandList",false,new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{},new String[]{});
case 171:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SemicolonTerminator","jetbrains.mps.bash.structure.CommandTerminator",false,new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{},new String[]{});
case 172:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ShellScript","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 173:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SimpleCommand","jetbrains.mps.bash.structure.AbstractCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 174:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SimpleWord","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"word"},new String[]{});
case 175:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SingleQuote","jetbrains.mps.bash.structure.QuotedWord",false,new String[]{"jetbrains.mps.bash.structure.QuotedWord"},new String[]{},new String[]{});
case 176:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SizeConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 177:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SocketConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 178:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.StickyBitConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 179:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.StringConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{});
case 180:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SubExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{},new String[]{});
case 181:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.SymlinkConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 182:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.TerminalConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 183:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.TildeExpansion","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{},new String[]{});
case 184:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryArithmeticExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{});
case 185:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{},new String[]{});
case 186:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryMinusExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{});
case 187:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UnaryPlusExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{},new String[]{});
case 188:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UntilLoopCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{});
case 189:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.UserIdConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 190:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableAddAssingment","jetbrains.mps.bash.structure.BaseVariableAssingment",false,new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"},new String[]{},new String[]{});
case 191:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableAssingment","jetbrains.mps.bash.structure.BaseVariableAssingment",false,new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"},new String[]{},new String[]{});
case 192:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableNameDeclaration","jetbrains.mps.bash.structure.LValue",false,new String[]{"jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 193:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.VariableReference","jetbrains.mps.bash.structure.LValue",false,new String[]{"jetbrains.mps.bash.structure.LValue","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{},new String[]{"variable"});
case 194:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WhileLoopCommand","jetbrains.mps.bash.structure.AbstractLoopCommand",false,new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{},new String[]{});
case 195:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WordExpression","jetbrains.mps.bash.structure.ArithmeticExpression",false,new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{},new String[]{});
case 196:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WordList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 197:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.WriteTestConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
case 198:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.XorAssingmentExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression",false,new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{},new String[]{});
case 199:
return new CompiledConceptDescriptor("jetbrains.mps.bash.structure.ZeroStringConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression",false,new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
