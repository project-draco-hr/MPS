{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractCommand",new String[]{"jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 1:
  return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractFollowingCommandList",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 2:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractLoopCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 3:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AddExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 4:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 5:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndCombiningComditionalExpression",new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 6:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndOperator",new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 7:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection",new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{"jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 8:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AppendingOutputRedirection",new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 9:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Argument",new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 10:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentList",new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 11:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentListReference",new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 12:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentReference",new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 13:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand","jetbrains.mps.bash.structure.IArithmeticHolder"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.IArithmeticHolder","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 14:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticExpansion",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IArithmeticHolder"},new String[]{"jetbrains.mps.bash.structure.IArithmeticHolder","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 15:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticExpression",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 16:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 17:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AsyncOperator",new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 18:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AsyncTerminator",new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 19:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 20:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseCommandSubstitution",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 21:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseVariableAssingment",new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 22:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BasedIntegerLiteral",new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 23:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BasicParameterExpansion",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 24:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BinaryArithmeticExpression",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 25:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BinaryConditionalExpression",new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 26:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseAndExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 27:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseNegationExpression",new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 28:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseOrExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 29:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseXorExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 30:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BlockFileConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 31:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BraceGrouping",new String[]{"jetbrains.mps.bash.structure.GroupingCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.GroupingCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 32:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketConditionalExpression",new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 33:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketExpression",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 34:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketGrouping",new String[]{"jetbrains.mps.bash.structure.GroupingCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.GroupingCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 35:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BuckCommandSubstitution",new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution"},new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 36:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseClause",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 37:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 38:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseTerminator",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 39:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CharFileConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 40:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CombiningConditionalExpression",new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 41:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommaExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 42:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Command",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 43:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommandList",new String[]{"jetbrains.mps.bash.structure.InputLine"},new String[]{"jetbrains.mps.bash.structure.InputLine"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 44:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommandTerminator",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 45:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedCommandList",new String[]{"jetbrains.mps.bash.structure.InputLine","jetbrains.mps.bash.structure.IComment"},new String[]{"jetbrains.mps.bash.structure.IComment","jetbrains.mps.bash.structure.InputLine"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 46:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedFollowingCommandList",new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.IComment"},new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.IComment"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 47:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedText",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IComment"},new String[]{"jetbrains.mps.bash.structure.IComment"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 48:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 49:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalExpression",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 50:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalOperation",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 51:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DecimalConstant",new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 52:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DirectoryConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 53:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DivAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 54:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DivExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 55:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleQuote",new String[]{"jetbrains.mps.bash.structure.QuotedWord"},new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.QuotedWord"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 56:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleSemicolon",new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 57:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleSemicolonEt",new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 58:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor",new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 59:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor",new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 60:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 61:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 62:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ElifCommand",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 63:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 64:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityNumber",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 65:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityStrings",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 66:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityStrings2",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 67:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExecTestConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 68:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExistConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 69:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExpExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 70:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalCommandCall",new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 71:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalCommandDeclaration",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 72:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalOptionDeclaration",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 73:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalOptionReference",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 74:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FollowingCommandList",new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList"},new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 75:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FollowingPipeline",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 76:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ForCommand",new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 77:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ForeachCommand",new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 78:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FreeCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 79:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FunctionCallCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 80:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FunctionDeclaration",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 81:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GeneralizedWord",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 82:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 83:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanNumber",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 84:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqual",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 85:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 86:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanString",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 87:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GroupIdConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 88:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GroupingCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 89:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HeadCommandList",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 90:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HeadPipeline",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 91:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HereDocumentRedirection",new String[]{"jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 92:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HereStringRedirection",new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{"jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 93:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HexIntegerLiteral",new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.IntegerLiteral"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 94:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IArithmeticHolder",new String[]{},new String[]{},new String[]{});
case 95:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ICommandParameter",new String[]{},new String[]{},new String[]{});
case 96:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IComment",new String[]{},new String[]{},new String[]{});
case 97:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ICompoundCommand",new String[]{},new String[]{},new String[]{});
case 98:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IConcreteWordUnit",new String[]{},new String[]{},new String[]{});
case 99:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IDescribedConcept",new String[]{},new String[]{},new String[]{});
case 100:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IGeneralizedWordUnit",new String[]{},new String[]{},new String[]{});
case 101:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IORedirection",new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{"jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 102:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IPriorityExpression",new String[]{},new String[]{},new String[]{});
case 103:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ISymbolConcept",new String[]{},new String[]{},new String[]{});
case 104:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IToWordRedirection",new String[]{},new String[]{},new String[]{});
case 105:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IfCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 106:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 107:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityNumber",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 108:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityStrings",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 109:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputLine",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 110:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputLines",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 111:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputRedirection",new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 112:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IntegerLiteral",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 113:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LValue",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 114:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LastReadConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 115:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 116:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 117:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 118:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanNumber",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 119:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 120:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualNumber",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 121:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanString",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 122:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalAndExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 123:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalNegationExpression",new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 124:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalOrExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 125:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MinusAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 126:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ModAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 127:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ModExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 128:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MulExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 129:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MusAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 130:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NewerThan",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 131:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 132:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NotCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 133:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OlderThan",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 134:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Option",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{"jetbrains.mps.bash.structure.IDescribedConcept","jetbrains.mps.bash.structure.ISymbolConcept"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 135:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionReference",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 136:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionSet",new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 137:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionSetReference",new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 138:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionWithParam",new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.ISymbolConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.bash.structure.IDescribedConcept"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration","jetbrains.mps.bash.structure.IDescribedConcept","jetbrains.mps.bash.structure.ISymbolConcept"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 139:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionWithParamReference",new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 140:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptnameStringConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 141:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 142:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrCombiningConditionalExpression",new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 143:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrOperator",new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 144:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OtherExistConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 145:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 146:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OutputErrorRedirection",new String[]{"jetbrains.mps.bash.structure.Redirection","jetbrains.mps.bash.structure.IToWordRedirection"},new String[]{"jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 147:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OutputRedirection",new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 148:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipeConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 149:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipelineOperatorConnection",new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 150:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection",new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 151:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PlusAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 152:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostDecExpression",new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.PostVariableExpression","jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 153:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostIncExpression",new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.PostVariableExpression","jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 154:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostVariableExpression",new String[]{"jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 155:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreDecExpression",new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.PreVariableExpression","jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 156:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreIncExpression",new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.PreVariableExpression","jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 157:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreVariableExpression",new String[]{"jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.WordExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 158:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.QuotedWord",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 159:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.QuotesCommandSubstitution",new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution","jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 160:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ReadTestConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 161:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ReadingWritingRedirection",new String[]{"jetbrains.mps.bash.structure.IORedirection"},new String[]{"jetbrains.mps.bash.structure.IORedirection","jetbrains.mps.bash.structure.IToWordRedirection","jetbrains.mps.bash.structure.Redirection"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 162:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RedirectedCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 163:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Redirection",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 164:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RegularFileConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 165:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RightBitwiseShiftExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 166:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RightShiftAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 167:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SameReference",new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression","jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 168:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SelectCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 169:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonEt",new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{"jetbrains.mps.bash.structure.CaseTerminator"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 170:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonOperator",new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList","jetbrains.mps.bash.structure.FollowingCommandList"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 171:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonTerminator",new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{"jetbrains.mps.bash.structure.CommandTerminator"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 172:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ShellScript",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 173:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SimpleCommand",new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 174:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SimpleWord",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 175:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SingleQuote",new String[]{"jetbrains.mps.bash.structure.QuotedWord"},new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.QuotedWord"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 176:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SizeConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 177:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SocketConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 178:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.StickyBitConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 179:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.StringConditionalExpression",new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 180:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SubExpression",new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BinaryArithmeticExpression","jetbrains.mps.bash.structure.IPriorityExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 181:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SymlinkConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 182:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.TerminalConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 183:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.TildeExpansion",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.IConcreteWordUnit"},new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 184:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryArithmeticExpression",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 185:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryConditionalExpression",new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 186:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryMinusExpression",new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 187:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryPlusExpression",new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.UnaryArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 188:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UntilLoopCommand",new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 189:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UserIdConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 190:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableAddAssingment",new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.BaseVariableAssingment","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 191:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableAssingment",new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.BaseVariableAssingment","jetbrains.mps.bash.structure.Command"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 192:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableNameDeclaration",new String[]{"jetbrains.mps.bash.structure.LValue","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"jetbrains.mps.bash.structure.LValue"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"});
case 193:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableReference",new String[]{"jetbrains.mps.bash.structure.LValue","jetbrains.mps.bash.structure.IGeneralizedWordUnit"},new String[]{"jetbrains.mps.bash.structure.IGeneralizedWordUnit","jetbrains.mps.bash.structure.LValue"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 194:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WhileLoopCommand",new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"},new String[]{"jetbrains.mps.bash.structure.AbstractCommand","jetbrains.mps.bash.structure.AbstractLoopCommand","jetbrains.mps.bash.structure.Command","jetbrains.mps.bash.structure.ICompoundCommand"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 195:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WordExpression",new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 196:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WordList",new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 197:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WriteTestConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 198:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.XorAssingmentExpression",new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression","jetbrains.mps.bash.structure.BaseAssingmentExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
case 199:
return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ZeroStringConditionalExpression",new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.bash.structure.ConditionalExpression","jetbrains.mps.bash.structure.UnaryConditionalExpression"},new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
default :
return null;
}
}
