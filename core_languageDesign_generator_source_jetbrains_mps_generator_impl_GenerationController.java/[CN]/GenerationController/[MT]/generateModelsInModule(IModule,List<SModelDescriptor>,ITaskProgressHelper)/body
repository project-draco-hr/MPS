{
  boolean currentGenerationOK=true;
  IOperationContext invocationContext=myModulesToContexts.get(module);
  myGenerationHandler.startModule(module,inputModels,getProjectHandler(),progressHelper);
  String wasLoggingThreshold=null;
  GenerationSession generationSession=new GenerationSession(invocationContext,mySaveTransientModels,myProgress,myMessages,mySettings.isUseNewGenerator());
  try {
    if (mySettings.isShowErrorsOnly()) {
      wasLoggingThreshold=Logger.setThreshold("ERROR");
    }
    Logger.addLoggingHandler(generationSession.getLoggingHandler());
    for (    SModelDescriptor inputModel : inputModels) {
      TypeChecker.getInstance().setIsGeneration(true);
      try {
        if (!myGenerationHandler.canHandle(inputModel)) {
          LOG.error("Can't generate " + inputModel.getSModelFqName());
          continue;
        }
        info("");
        String taskName=ModelsProgressUtil.generationModelTaskName(inputModel);
        progressHelper.setText2("model " + inputModel.getSModelFqName());
        progressHelper.startLeafTask(taskName);
        GenerationStatus status=generationSession.generateModel(inputModel);
        status.setOriginalInputModel(inputModel);
        currentGenerationOK=currentGenerationOK && status.isOk();
        checkMonitorCanceled();
        currentGenerationOK=currentGenerationOK && myGenerationHandler.handleOutput(module,inputModel,status,invocationContext,progressHelper);
      }
  finally {
        generationSession.discardTransients();
        CleanupManager.getInstance().cleanup();
        progressHelper.finishTask();
        TypeChecker.getInstance().setIsGeneration(false);
        progressHelper.setText2("");
      }
    }
  }
  finally {
    if (wasLoggingThreshold != null) {
      Logger.setThreshold(wasLoggingThreshold);
    }
    Logger.removeLoggingHandler(generationSession.getLoggingHandler());
  }
  checkMonitorCanceled();
  info("");
  progressHelper.setText2("");
  return currentGenerationOK;
}
