{
  boolean currentGenerationOK=true;
  IOperationContext invocationContext=myModulesToContexts.get(module);
  myGenerationHandler.startModule(module,inputModels,getProjectHandler(),progressHelper);
  String wasLoggingThreshold=null;
  try {
    if (myGenerationContext.isShowErrorsOnly()) {
      wasLoggingThreshold=Logger.setThreshold("ERROR");
    }
    for (    SModelDescriptor inputModel : inputModels) {
      IPerformanceTracer ttrace=myGenerationContext.getTracingMode() != GenerationProcessContext.TRACE_OFF ? new PerformanceTracer("model " + NameUtil.shortNameFromLongName(inputModel.getLongName())) : new NullPerformanceTracer();
      boolean traceTypes=myGenerationContext.getTracingMode() == GenerationProcessContext.TRACE_TYPES;
      TypeChecker.getInstance().setIsGeneration(true,traceTypes ? ttrace : null);
      GenerationSession generationSession=new GenerationSession(inputModel,invocationContext,myProgress,myLogger,ttrace,myGenerationContext);
      try {
        Logger.addLoggingHandler(generationSession.getLoggingHandler());
        if (!myGenerationHandler.canHandle(inputModel)) {
          LOG.error("Can't generate " + inputModel.getSModelFqName());
          continue;
        }
        myLogger.info("");
        String taskName=ModelsProgressUtil.generationModelTaskName(inputModel);
        progressHelper.setText2("model " + inputModel.getSModelFqName());
        progressHelper.startLeafTask(taskName);
        GenerationStatus status=generationSession.generateModel();
        status.setOriginalInputModel(inputModel);
        currentGenerationOK=currentGenerationOK && status.isOk();
        checkMonitorCanceled();
        currentGenerationOK=currentGenerationOK && myGenerationHandler.handleOutput(module,inputModel,status,invocationContext,progressHelper);
      }
  finally {
        Logger.removeLoggingHandler(generationSession.getLoggingHandler());
        generationSession.discardTransients();
        CleanupManager.getInstance().cleanup();
        progressHelper.finishTask();
        TypeChecker.getInstance().setIsGeneration(false);
        progressHelper.setText2("");
      }
      String report=ttrace.report();
      if (report != null) {
        myLogger.trace(report);
      }
    }
  }
  finally {
    if (wasLoggingThreshold != null) {
      Logger.setThreshold(wasLoggingThreshold);
    }
  }
  checkMonitorCanceled();
  myLogger.info("");
  progressHelper.setText2("");
  return currentGenerationOK;
}
