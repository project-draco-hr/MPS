{
  Set<SNode> unknownUsages=SetSequence.fromSet(new HashSet<SNode>());
  Set<SNode> nodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(nodes).addElement(oldNode);
  Set<SReference> usages=FindUsagesFacade.getInstance().findUsages(scope,nodes,new EmptyProgressMonitor());
  final Set<SNode> changedClassUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<Tuples._2<SNode,SReference>> changedClassUsagesInTemplates=SetSequence.fromSet(new HashSet<Tuples._2<SNode,SReference>>());
  final Set<Tuples._2<SNode,SReference>> changedClassUsagesInTypes=SetSequence.fromSet(new HashSet<Tuples._2<SNode,SReference>>());
  for (  SReference ref : SetSequence.fromSet(usages)) {
    SNode rNode=((SNode)ref.getSourceNode());
    if (SModelOperations.isReadOnly(rNode.getModel())) {
      continue;
    }
    SNode n=(SNode)rNode;
    if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.ClassifierType") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.CastExpression"))) {
      SetSequence.fromSet(changedClassUsages).addElement(rNode);
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator","typeParameter")) {
      SetSequence.fromSet(changedClassUsagesInTemplates).addElement(MultiTuple.<SNode,SReference>from(rNode,((SReference)new StaticReference(ref.getRole(),rNode,newNode))));
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","parameter")) {
      SetSequence.fromSet(changedClassUsagesInTypes).addElement(MultiTuple.<SNode,SReference>from(rNode,((SReference)new StaticReference(ref.getRole(),rNode,newNode))));
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  Set<SNode> methods=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(methods).addSequence(Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(oldNode)));
  Set<SReference> musages=FindUsagesFacade.getInstance().findUsages(scope,((Set)methods),new EmptyProgressMonitor());
  final Set<Tuples._2<SNode,SReference>> changedMethodCalls=SetSequence.fromSet(new HashSet<Tuples._2<SNode,SReference>>());
  final Set<SNode> castedMethodCalls=SetSequence.fromSet(new HashSet<SNode>());
  for (  SReference ref : SetSequence.fromSet(musages)) {
    SNode rNode=ref.getSourceNode();
    if (!(needMigration(rNode))) {
      continue;
    }
    SNode newMethod=getNewMethod((SNode)ref.getTargetNode(),newNode);
    if (newMethod != null) {
      SetSequence.fromSet(changedMethodCalls).addElement(MultiTuple.<SNode,SReference>from(rNode,((SReference)new StaticReference(ref.getRole(),rNode,newMethod))));
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(((SNode)rNode)) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression","operation")) {
      SetSequence.fromSet(castedMethodCalls).addElement(rNode);
      continue;
    }
 else     if (SNodeOperations.getContainingLinkDeclaration(((SNode)rNode)) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression","operation")) {
      SetSequence.fromSet(castedMethodCalls).addElement(rNode);
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  if (SNodeOperations.isInstanceOf(oldNode,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    Set<SNode> smethods=SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(smethods).addSequence(Sequence.fromIterable(ClassConcept_Behavior.call_staticMethods_5292274854859435867(SNodeOperations.cast(oldNode,"jetbrains.mps.baseLanguage.structure.ClassConcept"))));
    Set<SReference> smusages=FindUsagesFacade.getInstance().findUsages(scope,((Set)smethods),new EmptyProgressMonitor());
    for (    SReference ref : SetSequence.fromSet(smusages)) {
      SNode rNode=ref.getSourceNode();
      if (SModelOperations.isReadOnly(rNode.getModel())) {
        continue;
      }
      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }
  }
  Iterable<SearchResult<SNode>> results=SetSequence.fromSet(changedClassUsages).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"replaced Clazz occurences");
    }
  }
).union(SetSequence.fromSet(changedClassUsagesInTemplates).select(new ISelector<Tuples._2<SNode,SReference>,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    Tuples._2<SNode,SReference> it){
      return new SearchResult<SNode>(it._0(),"replaced Clazz in new XYZ<Clazz,...>");
    }
  }
)).union(SetSequence.fromSet(changedClassUsagesInTypes).select(new ISelector<Tuples._2<SNode,SReference>,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    Tuples._2<SNode,SReference> it){
      return new SearchResult<SNode>(it._0(),"replaced Clazz in Type<Clazz,...>");
    }
  }
)).union(SetSequence.fromSet(changedMethodCalls).select(new ISelector<Tuples._2<SNode,SReference>,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    Tuples._2<SNode,SReference> it){
      return new SearchResult<SNode>(it._0(),"replaced method call");
    }
  }
)).union(SetSequence.fromSet(castedMethodCalls).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"casted method call " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false),"name"));
    }
  }
)).union(SetSequence.fromSet(unknownUsages).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"not migrated usages");
    }
  }
));
  ip.getComponent(RefactoringView.class).showRefactoringView(ip,new RefactoringViewAction(){
    @Override public void performAction(    RefactoringViewItem refactoringViewItem){
      refactoringViewItem.close();
      p.getRepository().getModelAccess().executeCommand(new Runnable(){
        public void run(){
          for (          SNode cls : SetSequence.fromSet(changedClassUsages)) {
            SLinkOperations.setTarget(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",newNode,false);
          }
          for (          Tuples._2<SNode,SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTypes)) {
            tmplCls._0().setReference(tmplCls._1().getRole(),tmplCls._1());
          }
          for (          Tuples._2<SNode,SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTemplates)) {
            tmplCls._0().setReference(tmplCls._1().getRole(),tmplCls._1());
          }
          for (          Tuples._2<SNode,SReference> change : SetSequence.fromSet(changedMethodCalls)) {
            change._0().setReference(change._1().getRole(),change._1());
          }
          for (          SNode occ : SetSequence.fromSet(castedMethodCalls)) {
            SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(occ),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
            if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),newNode)) {
              continue;
            }
            SNodeOperations.replaceWithAnother(operand,_quotation_createNode_yke5lt_a0a2a4a0a0b0a0a1a0db0p(oldNode,operand));
          }
        }
      }
);
    }
  }
,new SearchResults(nodes,Sequence.fromIterable(results).where(new IWhereFilter<SearchResult<SNode>>(){
    public boolean accept(    SearchResult<SNode> it){
      return it.getObject().getModel() != null;
    }
  }
).toListSequence()),false,"usages");
}
