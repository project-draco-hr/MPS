{
  SNode oldSnodeNode=SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_yke5lt_a0a0a0f(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
  final SNode newSnodeNode=SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_yke5lt_a0a0b0f(),"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface");
  Set<SNode> unknownUsages=SetSequence.fromSet(new HashSet<SNode>());
  Set<SNode> nodes=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(nodes).addElement(oldSnodeNode);
  Set<SReference> usages=FindUsagesManager.getInstance().findUsages(nodes,SearchType.USAGES,scope,new EmptyProgressMonitor());
  final Set<SNode> changedClassUsages=SetSequence.fromSet(new HashSet<SNode>());
  final Set<Tuples._2<SNode,jetbrains.mps.smodel.SReference>> changedClassUsagesInTemplates=SetSequence.fromSet(new HashSet<Tuples._2<SNode,jetbrains.mps.smodel.SReference>>());
  final Set<Tuples._2<SNode,jetbrains.mps.smodel.SReference>> changedClassUsagesInTypes=SetSequence.fromSet(new HashSet<Tuples._2<SNode,jetbrains.mps.smodel.SReference>>());
  for (  SReference ref : SetSequence.fromSet(usages)) {
    SNode rNode=((SNode)ref.getSourceNode());
    if (rNode.getModel().isNotEditable()) {
      continue;
    }
    SNode n=(SNode)rNode;
    if (SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SetSequence.fromSet(changedClassUsages).addElement(rNode);
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator","typeParameter")) {
      SetSequence.fromSet(changedClassUsagesInTemplates).addElement(MultiTuple.<SNode,jetbrains.mps.smodel.SReference>from(rNode,((jetbrains.mps.smodel.SReference)new StaticReference(ref.getRole(),rNode,newSnodeNode))));
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","parameter")) {
      SetSequence.fromSet(changedClassUsagesInTypes).addElement(MultiTuple.<SNode,jetbrains.mps.smodel.SReference>from(rNode,((jetbrains.mps.smodel.SReference)new StaticReference(ref.getRole(),rNode,newSnodeNode))));
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  Set<SNode> methods=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(methods).addSequence(Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(oldSnodeNode)));
  Set<jetbrains.mps.smodel.SReference> musages=((Set)FindUsagesManager.getInstance().findUsages(((Set)methods),SearchType.USAGES,scope,new EmptyProgressMonitor()));
  final Set<Tuples._2<SNode,jetbrains.mps.smodel.SReference>> changedMethodCalls=SetSequence.fromSet(new HashSet<Tuples._2<SNode,jetbrains.mps.smodel.SReference>>());
  final Set<SNode> castedMethodCalls=SetSequence.fromSet(new HashSet<SNode>());
  for (  jetbrains.mps.smodel.SReference ref : SetSequence.fromSet(musages)) {
    SNode rNode=ref.getSourceNode();
    if (!(needMigration(rNode))) {
      continue;
    }
    SNode newMethod=getNewMethod((SNode)ref.getTargetNode());
    if (newMethod != null) {
      SetSequence.fromSet(changedMethodCalls).addElement(MultiTuple.<SNode,jetbrains.mps.smodel.SReference>from(rNode,((jetbrains.mps.smodel.SReference)new StaticReference(ref.getRole(),rNode,newMethod))));
      continue;
    }
    if (SNodeOperations.getContainingLinkDeclaration(((SNode)rNode)) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression","operation")) {
      SetSequence.fromSet(castedMethodCalls).addElement(rNode);
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  Set<SNode> smethods=SetSequence.fromSet(new HashSet<SNode>());
  SetSequence.fromSet(smethods).addSequence(Sequence.fromIterable(ClassConcept_Behavior.call_staticMethods_5292274854859435867(oldSnodeNode)));
  Set<jetbrains.mps.smodel.SReference> smusages=((Set)FindUsagesManager.getInstance().findUsages(((Set)smethods),SearchType.USAGES,scope,new EmptyProgressMonitor()));
  for (  jetbrains.mps.smodel.SReference ref : SetSequence.fromSet(smusages)) {
    SNode rNode=ref.getSourceNode();
    if (rNode.getModel().isNotEditable()) {
      continue;
    }
    SetSequence.fromSet(unknownUsages).addElement(rNode);
  }
  Iterable<SearchResult<SNode>> results=SetSequence.fromSet(changedClassUsages).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"replaced SNode occurences");
    }
  }
).union(SetSequence.fromSet(changedClassUsagesInTemplates).select(new ISelector<Tuples._2<SNode,jetbrains.mps.smodel.SReference>,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    Tuples._2<SNode,jetbrains.mps.smodel.SReference> it){
      return new SearchResult<SNode>(it._0(),"replaced SNode in new XYZ<SNode,...>");
    }
  }
)).union(SetSequence.fromSet(changedClassUsagesInTypes).select(new ISelector<Tuples._2<SNode,jetbrains.mps.smodel.SReference>,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    Tuples._2<SNode,jetbrains.mps.smodel.SReference> it){
      return new SearchResult<SNode>(it._0(),"replaced SNode in Type<SNode,...>");
    }
  }
)).union(SetSequence.fromSet(changedMethodCalls).select(new ISelector<Tuples._2<SNode,jetbrains.mps.smodel.SReference>,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    Tuples._2<SNode,jetbrains.mps.smodel.SReference> it){
      return new SearchResult<SNode>(it._0(),"replaced method call");
    }
  }
)).union(SetSequence.fromSet(castedMethodCalls).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"casted method call " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false),"name"));
    }
  }
)).union(SetSequence.fromSet(unknownUsages).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"not migrated usages");
    }
  }
));
  ip.getComponent(RefactoringView.class).showRefactoringView(ip,new RefactoringViewAction(){
    public void performAction(    RefactoringViewItem refactoringViewItem){
      refactoringViewItem.close();
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          for (          SNode cls : SetSequence.fromSet(changedClassUsages)) {
            SLinkOperations.setTarget(SNodeOperations.cast(cls,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",newSnodeNode,false);
          }
          for (          Tuples._2<SNode,jetbrains.mps.smodel.SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTypes)) {
            tmplCls._0().setReference(tmplCls._1().getRole(),tmplCls._1());
          }
          for (          Tuples._2<SNode,jetbrains.mps.smodel.SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTemplates)) {
            tmplCls._0().setReference(tmplCls._1().getRole(),tmplCls._1());
          }
          for (          Tuples._2<SNode,jetbrains.mps.smodel.SReference> change : SetSequence.fromSet(changedMethodCalls)) {
            change._0().setReference(change._1().getRole(),change._1());
          }
          for (          SNode occ : SetSequence.fromSet(castedMethodCalls)) {
            SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(occ),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
            if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand),_quotation_createNode_yke5lt_b0a1a4a0c0a0a1a0lb0f())) {
              continue;
            }
            SNodeOperations.replaceWithAnother(operand,_quotation_createNode_yke5lt_a0a2a4a0c0a0a1a0lb0f(operand));
          }
        }
      }
);
    }
  }
,new SearchResults(nodes,Sequence.fromIterable(results).where(new IWhereFilter<SearchResult<SNode>>(){
    public boolean accept(    SearchResult<SNode> it){
      return it.getObject().getModel() != null;
    }
  }
).toListSequence()),false,"usages");
}
