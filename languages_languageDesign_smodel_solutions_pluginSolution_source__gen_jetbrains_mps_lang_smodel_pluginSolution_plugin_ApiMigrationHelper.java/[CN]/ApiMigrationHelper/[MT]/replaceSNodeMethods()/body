{
  Set<SNode> method=SetSequence.fromSetAndArray(new HashSet<SNode>(),SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0b0a0a1().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false));
  Set<SReference> musages=FindUsagesManager.getInstance().findUsages(method,SearchType.USAGES,scope,new EmptyProgressMonitor());
  Set<SNode> unknown=SetSequence.fromSet(new HashSet<SNode>());
  final Set<SNode> known=SetSequence.fromSet(new HashSet<SNode>());
  for (  SReference usage : SetSequence.fromSet(musages)) {
    SNode n=usage.getSourceNode();
    if (!(SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))) {
      SetSequence.fromSet(unknown).addElement(n);
      continue;
    }
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.DotExpression"))) {
      SetSequence.fromSet(unknown).addElement(n);
      continue;
    }
    SetSequence.fromSet(known).addElement(n);
  }
  Iterable<SearchResult<SNode>> results=SetSequence.fromSet(unknown).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"unknown usages");
    }
  }
).union(SetSequence.fromSet(known).select(new ISelector<SNode,SearchResult<SNode>>(){
    public SearchResult<SNode> select(    SNode it){
      return new SearchResult<SNode>(it,"getConceptFqName->getConcept().getQualifiedName()");
    }
  }
));
  ip.getComponent(RefactoringView.class).showRefactoringView(ip,new RefactoringViewAction(){
    public void performAction(    RefactoringViewItem refactoringViewItem){
      refactoringViewItem.close();
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          for (          SNode usage : SetSequence.fromSet(known)) {
            SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage),new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0a0a2a0a0b0a11a1().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)));
          }
        }
      }
);
    }
  }
,new SearchResults(method,Sequence.fromIterable(results).where(new IWhereFilter<SearchResult<SNode>>(){
    public boolean accept(    SearchResult<SNode> it){
      return !(it.getObject().isDetached());
    }
  }
).toListSequence()),false,"usages");
}
