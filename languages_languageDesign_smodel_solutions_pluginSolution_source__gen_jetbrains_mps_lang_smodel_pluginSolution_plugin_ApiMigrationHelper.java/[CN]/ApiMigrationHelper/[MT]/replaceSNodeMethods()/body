{
  List<Tuples._4<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>> transformations=ListSequence.fromList(new ArrayList<Tuples._4<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>>());
  String cat="getConceptFqName()->getConcept().getQualifiedName()";
  SNode md=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0f0b().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
  _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> transVerifier=new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
    public Boolean invoke(    SNode n){
      return SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.DotExpression") && (SNodeOperations.getAncestor(n,"jetbrains.mps.lang.quotation.structure.Quotation",false,false) == null);
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> transformer=new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode usage){
      return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage),new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0h0b().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)));
    }
  }
);
  ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>from(cat,md,transVerifier,transformer));
  String cat2="getReferent()->getReferenceTarget()";
  SNode md2=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0o0b().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
  _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> transVerifier2=new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
    public Boolean invoke(    SNode n){
      return SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && (SNodeOperations.getAncestor(n,"jetbrains.mps.lang.quotation.structure.Quotation",false,false) == null);
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> transformer2=new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode usage){
      return SNodeOperations.replaceWithAnother(usage,SLinkOperations.getTarget(SNodeOperations.cast(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0a0q0b().createNode(usage),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true));
    }
  }
);
  ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>from(cat2,md2,transVerifier2,transformer2));
  String cat3="setReferent()->setReferenceTarget()";
  SNode md3=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0x0b().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
  _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> transVerifier3=new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
    public Boolean invoke(    SNode n){
      return SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && (SNodeOperations.getAncestor(n,"jetbrains.mps.lang.quotation.structure.Quotation",false,false) == null);
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> transformer3=new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode usage){
      return SNodeOperations.replaceWithAnother(usage,SLinkOperations.getTarget(SNodeOperations.cast(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0a0z0b().createNode(usage,SLinkOperations.getTargets(SNodeOperations.cast(usage,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true));
    }
  }
);
  ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>from(cat3,md3,transVerifier3,transformer3));
  String cat4="isAncestor()->SNodeOperations.isAncestor()";
  SNode md4=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0gb0b().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
  _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> transVerifier4=new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
    public Boolean invoke(    SNode n){
      return SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.DotExpression") && (SNodeOperations.getAncestor(n,"jetbrains.mps.lang.quotation.structure.Quotation",false,false) == null);
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> transformer4=new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode usage){
      return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage),new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0ib0b().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"actualArgument",true)).first()));
    }
  }
);
  ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>from(cat4,md4,transVerifier4,transformer4));
  String cat5="getId()->getSNodeId().toString()";
  SNode md5=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0pb0b().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
  _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> transVerifier5=new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
    public Boolean invoke(    SNode n){
      return SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.DotExpression") && (SNodeOperations.getAncestor(n,"jetbrains.mps.lang.quotation.structure.Quotation",false,false) == null);
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> transformer5=new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode usage){
      return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage),new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0rb0b().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)));
    }
  }
);
  ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>from(cat5,md5,transVerifier5,transformer5));
  migrateMethods(transformations);
}
