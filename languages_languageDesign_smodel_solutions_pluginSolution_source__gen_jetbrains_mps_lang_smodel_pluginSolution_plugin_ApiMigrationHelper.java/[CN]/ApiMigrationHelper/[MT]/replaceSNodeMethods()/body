{
  List<Tuples._4<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>> transformations=ListSequence.fromList(new ArrayList<Tuples._4<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>>());
  String cat="getConceptFqName->getConcept().getQualifiedName()";
  SNode md=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0f0b().createNode(),"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",false);
  _FunctionTypes._return_P1_E0<? extends Boolean,? super SNode> transVerifier=new _FunctionTypes._return_P1_E0<Boolean,SNode>(){
    public Boolean invoke(    SNode n){
      return SNodeOperations.isInstanceOf(n,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n),"jetbrains.mps.baseLanguage.structure.DotExpression");
    }
  }
;
  _FunctionTypes._void_P1_E0<? super SNode> transformer=new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode,SNode>(){
    public SNode invoke(    SNode usage){
      return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage),new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0h0b().createNode(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true)));
    }
  }
);
  ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>,_FunctionTypes._void_P1_E0<? super SNode>>from(cat,md,transVerifier,transformer));
  migrateMethods(transformations);
}
