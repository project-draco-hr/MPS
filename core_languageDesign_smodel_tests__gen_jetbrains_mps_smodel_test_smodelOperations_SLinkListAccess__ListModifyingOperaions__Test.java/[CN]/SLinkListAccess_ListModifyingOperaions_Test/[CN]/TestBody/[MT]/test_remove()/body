{
  this.addNodeById("2282909602806268543");
  this.addNodeById("2282909602806423211");
  Assert.assertTrue(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).count() > 0);
  SNode toBeRemoved=ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).first();
  Assert.assertNotNull(toBeRemoved);
  Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),SNodeOperations.getParent(toBeRemoved));
  ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).removeElement(toBeRemoved);
  Assert.assertFalse(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).contains(toBeRemoved));
  Assert.assertNull(SNodeOperations.getParent(toBeRemoved));
}
