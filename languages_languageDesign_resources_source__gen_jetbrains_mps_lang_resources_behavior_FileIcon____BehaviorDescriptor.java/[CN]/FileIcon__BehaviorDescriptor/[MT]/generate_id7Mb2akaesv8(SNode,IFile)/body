{
  if (isEmptyString(SPropertyOperations.getString(__thisNode__,MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L,0x996311712ea622e5L,0x7c8b08a50a39c6bbL,0x26417c377428f6b3L,"file")))) {
    return null;
  }
  SModel model=SNodeOperations.getModel(__thisNode__);
  IFile outputDir=FileGenerationUtil.getDefaultOutputDir(model,outputRoot);
  String source=MacrosFactory.forModule((AbstractModule)model.getModule()).expandPath(SPropertyOperations.getString(__thisNode__,MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L,0x996311712ea622e5L,0x7c8b08a50a39c6bbL,0x26417c377428f6b3L,"file")));
  if (source == null) {
    return null;
  }
  IFile sourceFile=FileSystem.getInstance().getFileByPath(source);
  IFile toFile=outputDir.getDescendant(sourceFile.getName());
  Tuples._2<IFile,byte[]> res=MultiTuple.<IFile,byte[]>from(toFile,null);
  if (!(sourceFile.exists())) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("file not found " + sourceFile.getPath());
    }
    return res;
  }
  InputStream is=null;
  try {
    is=toFile.openInputStream();
    res=MultiTuple.<IFile,byte[]>from(toFile,ReadUtil.read(is));
  }
 catch (  IOException e) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("",e);
    }
  }
 finally {
    FileUtil.closeFileSafe(is);
  }
  return res;
}
