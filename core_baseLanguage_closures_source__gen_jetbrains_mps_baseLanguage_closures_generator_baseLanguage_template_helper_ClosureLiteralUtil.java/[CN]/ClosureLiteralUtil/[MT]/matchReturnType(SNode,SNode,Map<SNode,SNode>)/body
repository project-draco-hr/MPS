{
  Set<String> visited=SetSequence.<String>fromSet(new HashSet<String>());
  List<SNode> queue=new ArrayList<SNode>();
  if (SNodeOperations.isInstanceOf(realType,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    for (    SNode arg : SLinkOperations.getTargets(SNodeOperations.cast(realType,"jetbrains.mps.lang.typesystem.structure.MeetType"),"argument",true)) {
      ListSequence.<SNode>fromList(queue).addElement(arg);
    }
  }
 else {
    ListSequence.<SNode>fromList(queue).addElement(realType);
  }
  while (!(ListSequence.<SNode>fromList(queue).isEmpty())) {
    SNode candidate=ListSequence.<SNode>fromList(queue).removeElementAt(0);
    if (!(SetSequence.<String>fromSet(visited).contains(BaseConcept_Behavior.call_getPresentation_1213877396640(candidate)))) {
      if (isTypeMatching(absType,candidate)) {
        map=matchType(absType,candidate,map);
        return map;
      }
      SetSequence.fromSet(visited).addElement(BaseConcept_Behavior.call_getPresentation_1213877396640(candidate));
      for (      SNode superType : TypeChecker.getInstance().getSubtypingManager().collectImmediateSupertypes(candidate)) {
        ListSequence.<SNode>fromList(queue).addElement(superType);
      }
    }
  }
  return map;
}
