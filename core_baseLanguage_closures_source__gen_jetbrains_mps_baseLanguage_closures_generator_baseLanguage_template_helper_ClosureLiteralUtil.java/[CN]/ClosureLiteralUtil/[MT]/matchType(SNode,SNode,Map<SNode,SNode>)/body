{
  SNode matched=null;
  if (SNodeOperations.isInstanceOf(realType,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    matched=whichTypeMatching(SLinkOperations.getTargets(SNodeOperations.cast(realType,"jetbrains.mps.lang.typesystem.structure.MeetType"),"argument",true),absType);
  }
 else   if (isTypeMatching(realType,absType)) {
    matched=realType;
  }
  if ((matched != null)) {
    if (SNodeOperations.isInstanceOf(absType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      MapSequence.<SNode,SNode>fromMap((map=getMap(map))).put(SLinkOperations.getTarget(SNodeOperations.cast(absType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false),SNodeOperations.copyNode(matched));
    }
 else {
      int idx=0;
      List<SNode> mptypes=SLinkOperations.getTargets(SNodeOperations.as(absType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true);
      List<SNode> rptypes=SLinkOperations.getTargets(SNodeOperations.as(matched,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true);
      for (int i=0; i < ListSequence.<SNode>fromList(mptypes).count() && i < ListSequence.<SNode>fromList(rptypes).count(); i++) {
        map=matchType(ListSequence.<SNode>fromList(mptypes).getElement(i),ListSequence.<SNode>fromList(rptypes).getElement(i),map);
      }
    }
  }
  return map;
}
