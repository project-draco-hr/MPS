{
  Map<SNode,SNode> map=null;
  List<SNode> imds=SLinkOperations.getTargets(SLinkOperations.getTarget(ctNoParams,"classifier",false),"method",true);
  if (ListSequence.fromList(imds).count() > 0) {
    SNode method=ListSequence.fromList(imds).getElement(0);
    if ((SLinkOperations.getTarget(method,"returnType",true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
      map=matchReturnType(SLinkOperations.getTarget(method,"returnType",true),FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(ft),map);
    }
    List<SNode> ptypes=FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(ft);
    int idx=0;
    for (    SNode pd : SLinkOperations.getTargets(method,"parameter",true)) {
      map=matchType(SLinkOperations.getTarget(pd,"type",true),ListSequence.fromList(ptypes).getElement(idx),map);
      idx++;
    }
  }
  SNode ctWithParams=SNodeOperations.copyNode(ctNoParams);
  if (map != null) {
    for (    SNode tvd : SLinkOperations.getTargets(SLinkOperations.getTarget(ctNoParams,"classifier",false),"typeVariableDeclaration",true)) {
      ListSequence.fromList(SLinkOperations.getTargets(ctWithParams,"parameter",true)).addElement(SNodeOperations.cast(MapSequence.fromMap(map).get(tvd),"jetbrains.mps.baseLanguage.structure.Type"));
    }
  }
  return ctWithParams;
}
