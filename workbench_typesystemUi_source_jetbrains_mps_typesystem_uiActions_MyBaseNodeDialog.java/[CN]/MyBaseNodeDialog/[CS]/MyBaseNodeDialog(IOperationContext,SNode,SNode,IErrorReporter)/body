{
  super(getTitle(node),operationContext);
  SupertypesViewTool supertypesView=operationContext.getProject().getComponent(SupertypesViewTool.class);
  mySupertypesViewComponent=supertypesView.getComponent();
  myMainComponent=new JSplitPaneWithoutBorders(JSplitPane.HORIZONTAL_SPLIT,getSuperMainComponent(),mySupertypesViewComponent);
  myMainComponent.setDividerSize(6);
  myMainComponent.setResizeWeight(0.8);
  myType=type;
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      myModel=myType.getModel();
    }
  }
);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      if (!myType.isRegistered()) {
        boolean wasLoading=myModel.isLoading();
        try {
          myModel.setLoading(true);
          myWasRegistered=false;
          myModel.addRoot(myType.getTopmostAncestor());
        }
  finally {
          myModel.setLoading(wasLoading);
        }
      }
    }
  }
);
  myError=error;
  supertypesView.showItemInHierarchy(myType,operationContext);
}
