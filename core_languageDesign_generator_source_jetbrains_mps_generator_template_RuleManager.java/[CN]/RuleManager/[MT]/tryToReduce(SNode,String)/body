{
  boolean needStopReductionBlocking=false;
  boolean wasChanged=myGenerator.isChanged();
  Reduction_MappingRule reductionRule=null;
  try {
    reductionRule=myRuleFinder.findReductionRule(inputNode);
    if (reductionRule != null) {
      myGenerator.setChanged(true);
      needStopReductionBlocking=startReductionBlockingForInput(inputNode);
      List<SNode> outputNodes=GeneratorUtil.applyReductionRule(inputNode,reductionRule,myGenerator);
      if (outputNodes != null && outputNodes.size() == 1) {
        myGenerator.addOutputNodeByInputNodeAndMappingName(inputNode,mappingName,outputNodes.get(0));
        myGenerator.addCopiedOutputNodeForInputNode(inputNode,outputNodes.get(0));
        outputNodes.get(0).putUserObjects(inputNode);
        if (inputNode.getModel() == myGenerator.getGeneratorSessionContext().getOriginalInputModel()) {
          outputNodes.get(0).putUserObject(TemplateQueryContext.ORIGINAL_INPUT_NODE,inputNode);
        }
      }
      return outputNodes;
    }
  }
 catch (  DismissTopMappingRuleException ex) {
    myGenerator.setChanged(wasChanged);
    myGenerator.showInformationMessage(reductionRule.getNode(),"-- dismissed reduction rule: " + reductionRule.getDebugText());
  }
 finally {
    if (needStopReductionBlocking) {
      stopReductionBlockingForInput(inputNode);
    }
  }
  return null;
}
