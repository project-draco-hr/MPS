{
  if (packageName.equals(SNodeOperations.getModel(myClassifier).getLongName())) {
    SNode nodeInSameModel=SNodeOperations.getModel(myClassifier).getNodeById(targetNodeId);
    if (nodeInSameModel != null) {
      return SReference.create(role,source,SNodeOperations.getModel(myClassifier).getSModelReference(),targetNodeId,resolveInfo);
    }
  }
  Set<SModelReference> models=getModelReferencesFor(packageName);
  if (SetSequence.fromSet(models).isEmpty()) {
    return SReference.create(role,source,null,targetNodeId,resolveInfo);
  }
  if (SetSequence.fromSet(models).count() > 1) {
    for (    SModelReference model : models) {
      SNodeOperations.getModel(source).addModelImport(model,false);
    }
    return new DynamicReference(role,source,new SModelReference(packageName,SModelStereotype.getStubStereotypeForId(getLanguageId())),resolveInfo);
  }
  SModelReference model=SetSequence.fromSet(models).first();
  ModuleReference moduleRef=SModelRepository.getInstance().getModelDescriptor(model).getModule().getModuleReference();
  SModelReference ref=StubHelper.uidForPackageInStubs(packageName,this.getLanguageId(),moduleRef);
  SNodeOperations.getModel(source).addModelImport(model,false);
  return SReference.create(role,source,ref,targetNodeId,resolveInfo);
}
