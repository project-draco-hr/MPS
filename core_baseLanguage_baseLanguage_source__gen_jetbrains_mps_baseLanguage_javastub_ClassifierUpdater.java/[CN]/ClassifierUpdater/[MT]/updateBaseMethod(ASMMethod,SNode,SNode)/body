{
  SPropertyOperations.set(md,"name",m.getName());
  SLinkOperations.setTarget(md,"body",new ClassifierUpdater.QuotationClass_ol94f8_a0a1a41().createNode(),true);
  SPropertyOperations.set(md,"isFinal","" + m.isFinal());
  SPropertyOperations.set(md,"isDeprecated","" + m.isDeprecated());
  updateTypeVariables(m,md,cls);
  SLinkOperations.setTarget(md,"returnType",getTypeByASMType(m.getGenericReturnType(),md,cls),true);
{
    ASMType pt;
    String pn;
    List<ASMAnnotation> pa;
    Iterator<ASMType> pt_iterator=ListSequence.<ASMType>fromList(m.getGenericParameterTypes()).iterator();
    Iterator<String> pn_iterator=ListSequence.<String>fromList(m.getParameterNames()).iterator();
    Iterator<List<ASMAnnotation>> pa_iterator=ListSequence.<List<ASMAnnotation>>fromList(m.getParameterAnnotations()).iterator();
    while (true) {
      if (!(pt_iterator.hasNext())) {
        break;
      }
      if (!(pn_iterator.hasNext())) {
        break;
      }
      if (!(pa_iterator.hasNext())) {
        break;
      }
      pt=pt_iterator.next();
      pn=pn_iterator.next();
      pa=pa_iterator.next();
{
        SNode pd=new ClassifierUpdater.QuotationClass_ol94f8_a0a0a6a6a6a41().createNode(getTypeByASMType(pt,md,cls),pn);
        addAnnotationsToParameter(pd,pa);
        ListSequence.<SNode>fromList(SLinkOperations.getTargets(md,"parameter",true)).addElement(pd);
      }
    }
  }
  for (  ASMType exception : m.getExceptionTypes()) {
    ListSequence.<SNode>fromList(SLinkOperations.getTargets(md,"throwsItem",true)).addElement(getTypeByASMType(exception,md,cls));
  }
  for (  ASMAnnotation annotation : m.getAnnotations()) {
    ListSequence.<SNode>fromList(SLinkOperations.getTargets(md,"annotation",true)).addElement(createAnnotation(annotation));
  }
}
