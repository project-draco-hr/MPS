{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("variableDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> result=new ArrayList<SNode>();
      List<SNode> param=new ParameterScope(_context.getEnclosingNode()).getNodes();
      List<SNode> vars=new LocalVariablesScope(_context.getEnclosingNode()).getNodes();
      vars.addAll(param);
      SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(_context.getEnclosingNode());
      int constraint=IClassifiersSearchScope.INSTANCE_FIELD;
      Set<String> names=SetSequence.fromSet(new HashSet<String>());
      while (classifier != null) {
        for (        SNode field : (List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,((_context.getReferenceNode() != null) ? _context.getReferenceNode() : _context.getEnclosingNode()),constraint)) {
          boolean hasNameSakes=false;
          for (          SNode var : vars) {
            if (SNodeOperations.isInstanceOf(var,"jetbrains.mps.lang.core.structure.INamedConcept") && SPropertyOperations.getString(field,"name") != null && SPropertyOperations.getString(field,"name").equals(SPropertyOperations.getString(SNodeOperations.cast(var,"jetbrains.mps.lang.core.structure.INamedConcept"),"name"))) {
              if (!(ListSequence.fromList(SNodeOperations.getAncestors(SNodeOperations.getAncestor(field,"jetbrains.mps.baseLanguage.structure.Classifier",false,false),"jetbrains.mps.baseLanguage.structure.Classifier",false)).contains(SNodeOperations.getAncestor(var,"jetbrains.mps.baseLanguage.structure.Classifier",false,false)))) {
                hasNameSakes=true;
                break;
              }
            }
          }
          if (!(hasNameSakes) && !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(field,"name")))) {
            ListSequence.fromList(result).addElement(field);
            SetSequence.fromSet(names).addElement(SPropertyOperations.getString(field,"name"));
          }
        }
        SNode method=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
        if (method != null && SNodeOperations.isInstanceOf(method,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
          return result;
        }
        classifier=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
      }
      return result;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)","7785501532031899739");
    }
  }
);
  return result;
}
