{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variableDeclaration",new BaseReferenceConstraintsDescriptor("variableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          List<SNode> param=new ParameterScope(_context.getEnclosingNode()).getNodes();
          List<SNode> vars=new LocalVariablesScope(_context.getEnclosingNode()).getNodes();
          vars.addAll(param);
          SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(_context.getEnclosingNode());
          int constraint=IClassifiersSearchScope.INSTANCE_FIELD;
          Set<String> names=SetSequence.<String>fromSet(new HashSet<String>());
          while (classifier != null) {
            for (            SNode field : (List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,((_context.getReferenceNode() != null) ? _context.getReferenceNode() : _context.getEnclosingNode()),constraint)) {
              boolean hasNameSakes=false;
              for (              SNode var : vars) {
                if (SNodeOperations.isInstanceOf(var,"jetbrains.mps.lang.core.structure.INamedConcept") && SPropertyOperations.getString(field,"name") != null && SPropertyOperations.getString(field,"name").equals(SPropertyOperations.getString(SNodeOperations.cast(var,"jetbrains.mps.lang.core.structure.INamedConcept"),"name"))) {
                  if (!(ListSequence.<SNode>fromList(SNodeOperations.getAncestors(SNodeOperations.getAncestor(field,"jetbrains.mps.baseLanguage.structure.Classifier",false,false),"jetbrains.mps.baseLanguage.structure.Classifier",false)).contains(SNodeOperations.getAncestor(var,"jetbrains.mps.baseLanguage.structure.Classifier",false,false)))) {
                    hasNameSakes=true;
                    break;
                  }
                }
              }
              if (!(hasNameSakes) && !(SetSequence.<String>fromSet(names).contains(SPropertyOperations.getString(field,"name")))) {
                ListSequence.<SNode>fromList(result).addElement(field);
                SetSequence.fromSet(names).addElement(SPropertyOperations.getString(field,"name"));
              }
            }
            SNode method=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
            if (method != null && SNodeOperations.isInstanceOf(method,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
              return result;
            }
            classifier=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_k7mwms_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
