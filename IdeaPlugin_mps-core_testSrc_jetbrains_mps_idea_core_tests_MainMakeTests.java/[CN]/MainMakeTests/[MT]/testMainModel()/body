{
  CompilerManagerImpl.testSetup();
  ModuleRootManager mrm=ModuleRootManager.getInstance(myFacet.getModule());
  VirtualFile[] srs=mrm.getSourceRoots();
  assertTrue(srs.length == 2);
  assertEquals("models",srs[0].getName());
  VirtualFile[] children=srs[0].getChildren();
  assertTrue(children.length == 1);
  assertEquals("main.mps",children[0].getName());
  VirtualFileSystem vfs=VirtualFileManager.getInstance().getFileSystem("file");
  vfs.refresh(false);
  final VirtualFile module=srs[0].getParent();
  assertTrue(module.findChild("source_gen") == null);
class Result {
    boolean aborted;
    int errors;
    int warnings;
  }
  final Result res=new Result();
  CompilerManager cm=CompilerManager.getInstance(myFacet.getModule().getProject());
  cm.compile(myFacet.getModule(),new CompileStatusNotification(){
    @Override public void finished(    boolean aborted,    int errors,    int warnings,    CompileContext compileContext){
      res.aborted=aborted;
      res.errors=errors;
      res.warnings=warnings;
    }
  }
);
  assertFalse(res.aborted);
  assertSame(0,res.errors);
  assertSame(0,res.warnings);
  vfs.refresh(false);
  assertNotNull("Not found after refresh: " + module.getPath() + "/source_gen",module.findChild("source_gen"));
  assertNotNull(module.findFileByRelativePath("source_gen/main"));
  assertTrue(module.findFileByRelativePath("source_gen/main").getChildren().length == 5);
  assertNotNull(module.findChild("classes_gen"));
  assertNotNull(module.findFileByRelativePath("classes_gen/main"));
  assertTrue(module.findFileByRelativePath("classes_gen/main").getChildren().length == 1);
  assertNotNull(module.findFileByRelativePath("classes_gen/main/trace.info"));
}
