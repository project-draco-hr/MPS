{
  boolean wrapped=!(childSetter instanceof DefaultChildNodeSetter);
  List<INodeSubstituteAction> resultActions=new ArrayList<INodeSubstituteAction>();
  if (childConcept == null) {
    return resultActions;
  }
  if (childConcept == SModelUtil_new.getBaseConcept()) {
    if ((currentChild == null || currentChild.getConceptFqName().equals(BaseConcept.concept))) {
      resultActions=new ArrayList<INodeSubstituteAction>();
      ISearchScope conceptsSearchScope=SModelSearchUtil.createConceptsFromModelLanguagesScope(parentNode.getModel(),true,context.getScope());
      List<SNode> allVisibleConcepts=conceptsSearchScope.getNodes();
      for (      SNode visibleConcept : allVisibleConcepts) {
        resultActions.add(new DefaultChildNodeSubstituteAction(visibleConcept,parentNode,currentChild,childSetter,context.getScope()){
          public String getMatchingText(          String pattern){
            return getMatchingText(pattern,true,true);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "concept instance";
          }
          public Icon getIconFor(          String pattern){
            return getIconFor(pattern,true);
          }
        }
);
      }
      return resultActions;
    }
    childConcept=currentChild.getConceptDeclarationAdapter();
    if (childConcept instanceof ConceptDeclaration) {
      while (((ConceptDeclaration)childConcept).getExtends() != null) {
        ConceptDeclaration extendedConcept=((ConceptDeclaration)childConcept).getExtends();
        if (extendedConcept == SModelUtil_new.getBaseConcept())         break;
        childConcept=extendedConcept;
      }
    }
  }
  IScope scope=context.getScope();
  Language primaryLanguage=SModelUtil_new.getDeclaringLanguage(childConcept,scope);
  if (primaryLanguage == null) {
    LOG.error("Couldn't build actions : couldn't get declaring language for concept " + childConcept.getDebugText());
    return resultActions;
  }
  List<NodeSubstituteActionsBuilder> allBuilders=new ArrayList<NodeSubstituteActionsBuilder>();
  List<NodeSubstituteActionsBuilder> primaryBuilders=getActionsBuilders(parentNode,primaryLanguage,childConcept,currentChild,wrapped,context);
  allBuilders.addAll(primaryBuilders);
  for (  NodeSubstituteActionsBuilder builder : primaryBuilders) {
    resultActions.addAll(invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,context));
  }
  if (!containsRemoveDefaults(primaryBuilders)) {
    List<NodeSubstituteActionsBuilder> buildersFromSubconcepts=new ArrayList<NodeSubstituteActionsBuilder>();
    List<Language> languages=parentNode.getModel().getLanguages(scope);
    for (    NodeSubstituteActionsBuilder actionsBuilder : getAllActionsBuilders(languages)) {
      AbstractConceptDeclaration applicableConcept=actionsBuilder.getApplicableConcept();
      if (applicableConcept == null)       continue;
      if (applicableConcept == childConcept)       continue;
      if (SModelUtil_new.isAssignableConcept(applicableConcept,childConcept) || SModelUtil_new.isAssignableConcept(childConcept,applicableConcept)) {
        if (satisfiesPrecondition(actionsBuilder,parentNode,applicableConcept,currentChild,wrapped,context)) {
          buildersFromSubconcepts.add(actionsBuilder);
        }
      }
    }
    allBuilders.addAll(buildersFromSubconcepts);
    for (    NodeSubstituteActionsBuilder builder : buildersFromSubconcepts) {
      List<INodeSubstituteAction> actions=invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,context);
      resultActions.addAll(actions);
    }
    Condition<SNode> filter=TRUE_CONDITION;
    resultActions.addAll(createPrimaryChildSubstituteActions(parentNode,currentChild,childConcept,childSetter,filter,context));
  }
  List<NodeSubstituteActionsBuilder> extendedBuilders=new ArrayList<NodeSubstituteActionsBuilder>();
  List<Language> languages=parentNode.getModel().getLanguages(scope);
  for (  Language language : languages) {
    if (language == primaryLanguage) {
      continue;
    }
    extendedBuilders.addAll(getActionsBuilders(parentNode,language,childConcept,currentChild,wrapped,context));
  }
  allBuilders.addAll(extendedBuilders);
  for (  NodeSubstituteActionsBuilder builder : extendedBuilders) {
    List<INodeSubstituteAction> addActions=invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,context);
    resultActions.addAll(addActions);
  }
  for (  NodeSubstituteActionsBuilder builder : allBuilders) {
    resultActions=applyActionFilter(builder,resultActions,parentNode,currentChild,childConcept.getNode(),context);
  }
  if (childSetter instanceof DefaultChildNodeSetter) {
    DefaultChildNodeSetter settter=(DefaultChildNodeSetter)childSetter;
    Iterator<INodeSubstituteAction> it=resultActions.iterator();
    while (it.hasNext()) {
      INodeSubstituteAction action=it.next();
      SNode conceptNode=action.getOutputConcept();
      if (conceptNode == null) {
        continue;
      }
      if (!ModelConstraintsManager.getInstance().canHaveAChild(parentNode,conceptNode,settter.myLinkDeclaration.getNode(),context)) {
        it.remove();
      }
    }
  }
  return resultActions;
}
