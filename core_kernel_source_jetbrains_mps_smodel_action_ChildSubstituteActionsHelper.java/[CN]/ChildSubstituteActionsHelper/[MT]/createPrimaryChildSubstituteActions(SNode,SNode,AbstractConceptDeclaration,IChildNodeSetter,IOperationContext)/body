{
  if (childConcept == null) {
    return Collections.emptyList();
  }
  final IScope scope=context.getScope();
  String childConceptFqName=NameUtil.nodeFQName(childConcept);
  Set<String> concepts=new HashSet<String>();
  for (  Language l : parentNode.getModel().getLanguages(scope)) {
    concepts.addAll(LanguageHierarchyCache.getInstance().getDefaultSubstitutableDescendantsOf(childConceptFqName,l));
  }
  List<INodeSubstituteAction> actions=new ArrayList<INodeSubstituteAction>();
  for (  String fqName : concepts) {
    ConceptDeclaration applicableConcept=(ConceptDeclaration)SModelUtil_new.findConceptDeclaration(fqName,scope);
    actions.addAll(createDefaultActions(applicableConcept,parentNode,currentChild,childSetter,context));
  }
  return actions;
}
