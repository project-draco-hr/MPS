{
  this.myFieldsByName=new HashMap<String,FieldDeclaration>();
  this.myStaticFieldsByName=new HashMap<String,StaticFieldDeclaration>();
  List<VariableDeclaration> allFields=new ArrayList<VariableDeclaration>();
  List<Classifier> classifiers=((ClassifierAndSuperClassifiersCache)this.getOwnerCache()).getClassifiers();
  for (  Classifier classifier : classifiers) {
    List<StaticFieldDeclaration> staticFields=classifier.getStaticFields();
    allFields.addAll(staticFields);
    for (    StaticFieldDeclaration staticField : staticFields) {
      String name=staticField.getName();
      if (name == null) {
        name="";
      }
      if (!(this.myStaticFieldsByName.containsKey(name))) {
        this.myStaticFieldsByName.put(name,staticField);
      }
    }
    if (classifier instanceof ClassConcept) {
      List<FieldDeclaration> fields=((ClassConcept)classifier).getFields();
      allFields.addAll(fields);
      for (      FieldDeclaration field : fields) {
        String name=field.getName();
        if (name == null) {
          name="";
        }
        if (!(this.myFieldsByName.containsKey(name))) {
          this.myFieldsByName.put(name,field);
        }
      }
    }
  }
  this.myDependsOnNodes=new HashSet<SNode>();
  for (  Classifier classifier : classifiers) {
    this.myDependsOnNodes.add(classifier.getNode());
  }
  for (  VariableDeclaration field : allFields) {
    this.myDependsOnNodes.add(field.getNode());
  }
}
