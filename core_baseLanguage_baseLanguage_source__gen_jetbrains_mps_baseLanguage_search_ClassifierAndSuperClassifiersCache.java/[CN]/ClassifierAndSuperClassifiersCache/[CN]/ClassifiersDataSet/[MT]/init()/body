{
  this.myTypeByTypeVariable=new HashMap<TypeVariableDeclaration,Type>();
  this.myClassifiers=ClassifierAndSuperClassifiersCache.ClassifiersDataSet.getImplementedAndExtended(this.myTopClassifier,this.myTypeByTypeVariable);
  this.myDependsOnNodes=new HashSet<SNode>();
  for (  Classifier classifier : this.myClassifiers) {
    this.myDependsOnNodes.add(classifier.getNode());
    if (classifier instanceof AnonymousClass) {
      for (      Type type : ((AnonymousClass)classifier).getTypeParameters()) {
        SNode node=type.getNode();
        this.myDependsOnNodes.add(node);
        this.myDependsOnNodes.addAll(node.getDescendants());
      }
    }
 else {
      for (      TypeVariableDeclaration typeVariableDecl : classifier.getTypeVariableDeclarations()) {
        this.myDependsOnNodes.add(typeVariableDecl.getNode());
      }
    }
    if (classifier instanceof ClassConcept && !((classifier instanceof AnonymousClass))) {
      ClassifierType classifierType0=((ClassConcept)classifier).getSuperclass();
      if (classifierType0 != null) {
        SNode node=classifierType0.getNode();
        this.myDependsOnNodes.add(node);
        this.myDependsOnNodes.addAll(node.getDescendants());
      }
      for (      ClassifierType classifierType1 : ((ClassConcept)classifier).getImplementedInterfaces()) {
        SNode node=classifierType1.getNode();
        this.myDependsOnNodes.add(node);
        this.myDependsOnNodes.addAll(node.getDescendants());
      }
    }
 else     if (classifier instanceof Interface) {
      for (      ClassifierType classifierType : ((Interface)classifier).getExtendedInterfaces()) {
        SNode node=classifierType.getNode();
        this.myDependsOnNodes.add(node);
        this.myDependsOnNodes.addAll(node.getDescendants());
      }
    }
  }
}
