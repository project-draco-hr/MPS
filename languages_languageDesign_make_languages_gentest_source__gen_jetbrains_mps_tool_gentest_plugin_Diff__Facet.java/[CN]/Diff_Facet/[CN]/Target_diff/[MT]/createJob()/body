{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_mtqq_a0a=null;
      final Iterable<TResource> input=(Iterable<TResource>)(Iterable)rawInput;
switch (0) {
case 0:
        if (vars(pa.global()).fileToPath() != null) {
          monitor.currentProgress().beginWork("Diffing",100 * Sequence.fromIterable(input).count(),monitor.currentProgress().workLeft());
          for (          TResource tgres : Sequence.fromIterable(input)) {
            String fqn=tgres.modelDescriptor().getName().getLongName();
            monitor.currentProgress().advanceWork("Diffing",1,fqn);
            DeltaReconciler dr=new DeltaReconciler(tgres.delta());
            final Set<String> retainedPaths=SetSequence.fromSet(new HashSet<String>());
            dr.visitAll(new FilesDelta.Visitor(){
              @Override public boolean acceptKept(              IFile file){
                SetSequence.fromSet(retainedPaths).addElement(vars(pa.global()).fileToPath().invoke(file));
                return true;
              }
            }
);
            final Differ differ=new Differ(retainedPaths,vars(pa.global()).excludedFiles());
            final StringBuilder errors=new StringBuilder();
            final String origOutRootPath=SModuleOperations.getOutputPathFor(tgres.modelDescriptor());
            final String outDirPath=FileGenerationUtil.getDefaultOutputDir(tgres.modelDescriptor(),FileSystem.getInstance().getFileByPath(origOutRootPath)).getPath();
            for (            String diff : differ.diff(outDirPath,Target_make.vars(pa.global()).pathToFile().invoke(outDirPath).getPath())) {
              errors.append("\n").append(diff);
            }
            if (errors.length() > 0) {
              monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Differences\n" + errors.toString())));
            }
            monitor.currentProgress().advanceWork("Diffing",99,fqn);
          }
          monitor.currentProgress().finishWork("Diffing");
        }
default :
      return new IResult.SUCCESS(_output_mtqq_a0a);
  }
}
}
;
}
