{
  new Mapper<BlockInstanceView,BlockInstanceView>(this,this){
    @Override protected void registerSynchronizers(    Mapper.SynchronizersConfiguration configuration){
      configuration.add(Synchronizers.forProperty(getSource().x,new Runnable(){
        public void run(){
          getTarget().moveTo(new Vector(getSource().x.get(),getSource().y.get()));
          BlockInstanceView.this.invalidate();
        }
      }
));
      configuration.add(Synchronizers.forProperty(getSource().y,new Runnable(){
        public void run(){
          getTarget().moveTo(new Vector(getSource().x.get(),getSource().y.get()));
          BlockInstanceView.this.invalidate();
        }
      }
));
      configuration.add(Synchronizers.forProperties(getSource().text,getSource().myTextCell.text()));
      configuration.add(Synchronizers.forObservableRole(this,getSource().inputPortNames,getTarget().inputs.children(),new MapperFactory<String,View>(){
        public Mapper<? extends String,? extends View> createMapper(        String inputName){
          return new BlockInstanceView.PortMapper(inputName,Color.LIGHT_MAGENTA);
        }
      }
));
      configuration.add(Synchronizers.forObservableRole(this,getSource().outputPortNames,getTarget().outputs.children(),new MapperFactory<String,View>(){
        public Mapper<? extends String,? extends View> createMapper(        String inputName){
          return new BlockInstanceView.PortMapper(inputName,Color.LIGHT_BLUE);
        }
      }
));
    }
  }
.attachRoot();
}
