{
  final Wrappers._T<SNode> node=new Wrappers._T<SNode>();
  final Wrappers._T<MessageTarget> messageTarget=new Wrappers._T<MessageTarget>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      final Wrappers._T<SModel> model=new Wrappers._T<SModel>();
      SNode editedNode=myEditorComponent.getEditedNode();
      if (editedNode == null || editedNode.isDisposed()) {
        return;
      }
      model.value=editedNode.getModel();
      if (model.value == null || model.value.isDisposed()) {
        return;
      }
      SNodeId affectedNodeId=change.getAffectedNodeId();
      messageTarget.value=change.getMessageTarget();
      if (affectedNodeId == null || messageTarget.value == null) {
        return;
      }
      if (change.getChangeType() == ChangeType.DELETE) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            SNodeId parentId=((DeleteNodeChange)change).getParentId();
            node.value=(parentId == null ? null : model.value.getNodeById(parentId));
          }
        }
);
      }
 else {
        node.value=model.value.getNodeById(affectedNodeId);
      }
    }
  }
);
  if (node.value == null) {
    return null;
  }
  final Wrappers._boolean isOurChange=new Wrappers._boolean();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      isOurChange.value=myEditorComponent.getEditedNode().isAncestorOf(node.value);
    }
  }
);
  if (!(isOurChange.value)) {
    return null;
  }
  ChangeType type=change.getChangeType();
  Color c;
  if (type == ChangeType.ADD) {
    c=HIGHLIGHT_COLOR_ADDED;
  }
 else   if (type == ChangeType.CHANGE) {
    c=HIGHLIGHT_COLOR_CHANGED;
  }
 else   if (type == ChangeType.DELETE) {
    c=HIGHLIGHT_COLOR_DELETED;
  }
 else {
    return null;
  }
  if (change instanceof AddRootChange) {
    return null;
  }
  EditorComponentChangesHighligher.ChangeEditorMessage message;
synchronized (myChangesMessages) {
    if (MapSequence.fromMap(myChangesMessages).containsKey(change)) {
      return null;
    }
    message=new EditorComponentChangesHighligher.ChangeEditorMessage(change,node.value,c,messageTarget.value);
    if (myEditorComponent == null) {
      return null;
    }
    MapSequence.fromMap(myChangesMessages).put(change,message);
  }
  return message;
}
