{
synchronized (myDisposedLock) {
    myDisposed=true;
    try {
      for (      OldChange change : SetSequence.<OldChange>fromSet(MapSequence.fromMap(myChangesMessages).keySet()).toListSequence()) {
        unhighlightChange(change);
      }
      getHighlightManager().clearForOwner(this);
      myEditorComponent.getLeftEditorHighlighter().removeFoldingAreaPainter(myFoldingAreaPainter);
    }
  finally {
      if (myModelChangesManager != null) {
synchronized (this) {
          myModelChangesManager.removeChangeListener(myChangeListener);
          myChangeListener=null;
        }
      }
    }
  }
}
