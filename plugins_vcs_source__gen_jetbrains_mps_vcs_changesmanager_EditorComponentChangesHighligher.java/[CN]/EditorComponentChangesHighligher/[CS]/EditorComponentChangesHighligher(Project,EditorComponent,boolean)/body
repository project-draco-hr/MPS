{
  myEditorComponent=editorComponent;
  myFoldingAreaPainter=new ChangesFoldingAreaPainter(this);
  myEditorComponent.getLeftEditorHighlighter().addFoldingAreaPainter(myFoldingAreaPainter);
  myEnabled=enabled;
  ChangesManager.getInstance(project).getCommandQueue().runTask(new Runnable(){
    public void run(){
synchronized (myDisposedLock) {
        if (myDisposed) {
          return;
        }
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          final SModel model=check_7ugudc_a0a0a1a0a0f0a(editorComponent.getEditedNode());
          if (model != null && model.getModelDescriptor() != null) {
            myModelChangesManager=ChangesManager.getInstance(project).getModelChangesManager(model);
            myChangeListener=new EditorComponentChangesHighligher.MyChangeListener();
          }
 else {
            return;
          }
        }
      }
);
      if (myChangeListener != null) {
        for (        Change change : ListSequence.fromList(myModelChangesManager.getChangeList())) {
          highlightChange(change);
        }
synchronized (myChangesMessages) {
          for (          EditorComponentChangesHighligher.ChangeEditorMessage message : Sequence.fromIterable(MapSequence.fromMap(myChangesMessages).values())) {
            getHighlightManager().mark(message);
          }
        }
        getHighlightManager().repaintAndRebuildEditorMessages();
        ThreadUtils.runInUIThreadNoWait(new Runnable(){
          public void run(){
            myFoldingAreaPainter.relayout();
          }
        }
);
synchronized (EditorComponentChangesHighligher.this) {
          if (myChangeListener != null) {
            myModelChangesManager.addChangeListener(myChangeListener);
          }
        }
      }
    }
  }
);
}
