{
  myEditorComponent=editorComponent;
  myFoldingAreaPainter=new ChangesFoldingAreaPainter(this);
  myEditorComponent.getLeftEditorHighlighter().addFoldingAreaPainter(myFoldingAreaPainter);
  myEnabled=enabled;
  ChangesManager.getInstance(project).getCommandQueue().runTask(new Runnable(){
    public void run(){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
synchronized (myDisposedLock) {
            if (myDisposed) {
              return;
            }
            SNode editedNode=editorComponent.getEditedNode();
            if (editedNode == null || editedNode.isDisposed()) {
              return;
            }
            final SModel model=editedNode.getModel();
            SModelDescriptor descriptor=(model != null ? model.getModelDescriptor() : null);
            if (descriptor instanceof EditableSModelDescriptor) {
              myModelChangesManager=ChangesManager.getInstance(project).getModelChangesManager((EditableSModelDescriptor)descriptor);
              myChangeListener=new EditorComponentChangesHighligher.MyChangeListener();
            }
            if (myChangeListener != null) {
              for (              OldChange change : ListSequence.fromList(myModelChangesManager.getChangeList())) {
                highlightChange(change);
              }
synchronized (myChangesMessages) {
                for (                EditorComponentChangesHighligher.ChangeEditorMessage message : Sequence.fromIterable(MapSequence.fromMap(myChangesMessages).values())) {
                  getHighlightManager().mark(message);
                }
              }
              getHighlightManager().repaintAndRebuildEditorMessages();
              ThreadUtils.runInUIThreadNoWait(new Runnable(){
                public void run(){
                  myFoldingAreaPainter.relayout();
                }
              }
);
              myModelChangesManager.addChangeListener(myChangeListener);
            }
          }
        }
      }
);
    }
  }
);
}
