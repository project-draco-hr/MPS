{
  super.execute();
  if (destDir != null) {
    destDir.mkdirs();
  }
  if (!(toConvert.isEmpty())) {
    Iterable<File> classPaths=MPSClasspathUtil.buildClasspath(getProject(),mpsHome,false);
    List<URL> classPathUrls=new ArrayList<URL>();
    for (    File path : classPaths) {
      try {
        classPathUrls.add(new URL("file:///" + path));
      }
 catch (      MalformedURLException e) {
        throw new BuildException(e);
      }
    }
    URLClassLoader classLoader=new URLClassLoader(classPathUrls.toArray(new URL[classPathUrls.size()]),this.getClass().getClassLoader());
    try {
      Class<?> converterClass=classLoader.loadClass("jetbrains.mps.tool.builder.converter.ConvertToBinaryWorker");
      Object converter=converterClass.newInstance();
      Method method=converterClass.getMethod("convert",Map.class,Boolean.class);
      method.invoke(converter,toConvert,myStripImplementation);
    }
 catch (    Throwable t) {
      if (t instanceof RuntimeException && t.getCause() instanceof IOException) {
        t=t.getCause();
      }
 else       if (t instanceof InvocationTargetException) {
        t=((InvocationTargetException)t).getTargetException();
      }
      StringWriter sw=new StringWriter();
      t.printStackTrace(new PrintWriter(sw));
      String message=sw.toString();
      throw new BuildException(String.format("Cannot convert .mps into .mpb: %s\nModels:%s\nClasspath:%s",message,toConvert.keySet(),classPathUrls),t);
    }
  }
}
