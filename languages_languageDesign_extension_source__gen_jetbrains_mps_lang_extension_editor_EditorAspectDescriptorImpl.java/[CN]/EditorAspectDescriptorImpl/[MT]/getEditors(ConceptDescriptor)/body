{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ApplyOverlappingExtensionOperation_Editor()));
case 1:
  return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new Extension_Editor()));
case 2:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionDeclaration_Editor()));
case 3:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionFieldDeclaration_Editor()));
case 4:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionFieldReference_Editor()));
case 5:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionOverlapping_Editor()));
case 6:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionPointDeclaration_Editor()));
case 7:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionPointExpression_Editor()));
case 8:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionPointOverlappingDeclaration_Editor()));
case 9:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new ExtensionPointType_Editor()));
case 10:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new GetExtensionObjectsOperation_Editor()));
case 11:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OverridesItem_Editor()));
case 12:
return collectEditors(descriptor,Collections.<ConceptEditor>singletonList(new OverridesReference_Editor()));
default :
}
return Collections.<ConceptEditor>emptyList();
}
