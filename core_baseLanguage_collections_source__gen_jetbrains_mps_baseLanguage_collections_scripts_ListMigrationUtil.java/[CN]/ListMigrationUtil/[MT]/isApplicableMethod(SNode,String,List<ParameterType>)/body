{
  SNode declaration=SLinkOperations.getTarget(node,"baseMethodDeclaration",false);
  if (!(ObjectUtils.equals(SPropertyOperations.getString(declaration,"name"),name))) {
    return false;
  }
  if (!(ListSequence.fromList(ListSequence.<String>fromArray("List","ArrayList","LinkedList","Set","HashSet")).contains(SPropertyOperations.getString(SNodeOperations.getParent(declaration),"name")))) {
    return false;
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).count() != ListSequence.fromList(params).count()) {
    return false;
  }
{
    SNode argument;
    ParameterType param;
    Iterator<SNode> argument_iterator=SLinkOperations.getTargets(node,"actualArgument",true).iterator();
    Iterator<ParameterType> param_iterator=params.iterator();
    while (true) {
      if (!(argument_iterator.hasNext())) {
        break;
      }
      if (!(param_iterator.hasNext())) {
        break;
      }
      argument=argument_iterator.next();
      param=param_iterator.next();
      if (param == ParameterType.INT) {
        if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(argument),"jetbrains.mps.baseLanguage.structure.IntegerType"))) {
          return false;
        }
      }
      if (param != ParameterType.NOT_INT) {
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(argument),"jetbrains.mps.baseLanguage.structure.IntegerType")) {
          return false;
        }
      }
    }
  }
  return true;
}
