{
  if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getParent(node),"operand",true)),"jetbrains.mps.baseLanguage.collections.structure.ListType"))) {
    return false;
  }
  if (!(ObjectUtils.equals(SPropertyOperations.getString(SLinkOperations.getTarget(node,"baseMethodDeclaration",false),"name"),name))) {
    return false;
  }
  if (SNodeOperations.getParent(SLinkOperations.getTarget(node,"baseMethodDeclaration",false)) != SNodeOperations.getNode("f:java_stub#java.util(java.util@java_stub)","~List")) {
    return false;
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"actualArgument",true)).count() != ListSequence.fromList(params).count()) {
    return false;
  }
{
    SNode argument;
    SNode concept;
    Iterator<SNode> argument_iterator=SLinkOperations.getTargets(node,"actualArgument",true).iterator();
    Iterator<SNode> concept_iterator=params.iterator();
    while (true) {
      if (!(argument_iterator.hasNext())) {
        break;
      }
      if (!(concept_iterator.hasNext())) {
        break;
      }
      argument=argument_iterator.next();
      concept=concept_iterator.next();
      if (!(SNodeOperations.isInstanceOf(argument,NameUtil.nodeFQName(concept)))) {
      }
    }
  }
  return true;
}
