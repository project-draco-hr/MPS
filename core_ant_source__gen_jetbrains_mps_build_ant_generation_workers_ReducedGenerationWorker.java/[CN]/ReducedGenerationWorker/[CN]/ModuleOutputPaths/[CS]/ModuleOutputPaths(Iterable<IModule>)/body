{
  this.sortedOutDirs=DirUtil.sortDirs(Sequence.fromIterable(modules).select(new ISelector<IModule,String>(){
    public String select(    IModule mod){
      return mod.getGeneratorOutputPath();
    }
  }
));
  this.sortedOutCacheDirs=DirUtil.sortDirs(Sequence.fromIterable(modules).select(new ISelector<IModule,String>(){
    public String select(    IModule mod){
      return FileGenerationUtil.getCachesPath(mod.getGeneratorOutputPath());
    }
  }
));
  this.sortedTestOutDirs=DirUtil.sortDirs(Sequence.fromIterable(modules).select(new ISelector<IModule,String>(){
    public String select(    IModule mod){
      return mod.getTestsGeneratorOutputPath();
    }
  }
));
  this.sortedTestOutCacheDirs=DirUtil.sortDirs(Sequence.fromIterable(modules).select(new ISelector<IModule,String>(){
    public String select(    IModule mod){
      return FileGenerationUtil.getCachesPath(mod.getTestsGeneratorOutputPath());
    }
  }
));
  this.sortedModelDirs=DirUtil.sortDirs(Sequence.fromIterable(modules).translate(new ITranslator2<IModule,ModelRoot>(){
    public Iterable<ModelRoot> translate(    IModule mod){
      return mod.getModelRoots();
    }
  }
).where(new IWhereFilter<ModelRoot>(){
    public boolean accept(    ModelRoot it){
      return it instanceof FolderModelRootBase;
    }
  }
).select(new ISelector<ModelRoot,String>(){
    public String select(    ModelRoot smr){
      return ((FolderModelRootBase)smr).getPath();
    }
  }
).select(new ISelector<String,IFile>(){
    public IFile select(    String path){
      return FileSystem.getInstance().getFileByPath(path);
    }
  }
).where(new IWhereFilter<IFile>(){
    public boolean accept(    IFile f){
      return f.isDirectory() && !(f instanceof JarEntryFile);
    }
  }
).select(new ISelector<IFile,String>(){
    public String select(    IFile dir){
      return dir.getPath();
    }
  }
));
}
