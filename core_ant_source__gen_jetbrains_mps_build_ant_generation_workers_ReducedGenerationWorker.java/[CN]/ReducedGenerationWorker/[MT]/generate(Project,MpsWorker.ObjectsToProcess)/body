{
  ProjectOperationContext ctx=new ProjectOperationContext(project);
  Iterable<IMResource> resources=Sequence.fromIterable(collectResources(ctx,go)).toListSequence();
  ModelAccess.instance().flushEventQueue();
  Future<IResult> res;
  final List<String> writtenFiles=ListSequence.fromList(new ArrayList<String>());
  final Map<String,String> fileHashes=MapSequence.fromMap(new HashMap<String,String>());
  IOperationContext context=new ProjectOperationContext(project);
  BuildMakeService bms=new BuildMakeService();
  MakeSession ms=new MakeSession(context,getMyMessageHandler(),true){
    @Override public IScript toScript(    ScriptBuilder scriptBuilder){
      scriptBuilder.withFacetNames(new IFacet.Name("jetbrains.mps.build.reduced.ReportFiles"),new IFacet.Name("jetbrains.mps.build.reduced.CollectHashes"));
      return scriptBuilder.toScript();
    }
  }
;
  res=bms.make(ms,resources,null,new IScriptController.Stub(){
    @Override public void setup(    IPropertiesPool pp,    Iterable<ITarget> toExecute,    Iterable<? extends IResource> input){
      super.setup(pp,toExecute,input);
      Tuples._1<Boolean> skipReconcile=(Tuples._1<Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile"),Object.class);
      skipReconcile._0(true);
      Tuples._2<Boolean,Boolean> compileProps=(Tuples._2<Boolean,Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),Object.class);
      compileProps._1(true);
      Tuples._1<List<String>> report=(Tuples._1<List<String>>)pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report"),Object.class);
      report._0(writtenFiles);
      Tuples._1<Map<String,String>> hashes=(Tuples._1<Map<String,String>>)pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect"),Object.class);
      hashes._0(fileHashes);
    }
  }
);
  try {
    if (!(res.get().isSucessful())) {
      myErrors.add("Make was not successful");
    }
    if (writtenFiles != null) {
      for (      String f : writtenFiles) {
        System.out.println("##WRITTEN##" + f);
      }
    }
  }
 catch (  InterruptedException e) {
    myErrors.add(e.toString());
  }
catch (  ExecutionException e) {
    myErrors.add(e.toString());
  }
}
