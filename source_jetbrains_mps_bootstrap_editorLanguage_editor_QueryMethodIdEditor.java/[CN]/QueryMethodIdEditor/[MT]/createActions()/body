{
  List<INodeSubstituteItem> actions=new ArrayList<INodeSubstituteItem>();
  List<String> conditionsList=getAvailableIdsUsingPlugin();
  if (conditionsList == null) {
    LOG.debug("Plugin isn't present using reflection");
    conditionsList=getAvailableIdsUsingReflection();
  }
  for (Iterator<String> iterator=conditionsList.iterator(); iterator.hasNext(); ) {
    final String queryMethodId=iterator.next();
    actions.add(new AbstractNodeSubstituteItem(){
      public String getMatchingText(      String pattern){
        return queryMethodId;
      }
      public SNode doSubstitute(      String pattern){
        setQueryMethodId(queryMethodId);
        return null;
      }
    }
);
  }
  actions.add(new AbstractNodeSubstituteItem(){
    public String getMatchingText(    String pattern){
      return "New query method";
    }
    public SNode doSubstitute(    String pattern){
      String id=JOptionPane.showInputDialog(null,"Enter query method ID :","Create New Query Method",JOptionPane.QUESTION_MESSAGE);
      if (id == null)       return null;
      try {
        MPSPlugin plugin=MPSPlugin.getInstance();
        String modelPath=getSNode().getModel().getModelDescriptor().getModelFile().getAbsolutePath();
        plugin.getProjectHandler().createAspectMethod(modelPath,getNamespace(),getQueryMethodPrefix() + id,getQueryMethodReturnType(),getQueryMethodParameterList());
        for (        Class cls : getImportedClasses()) {
          plugin.getProjectHandler().addImport(getNamespace(),cls.getName());
        }
      }
 catch (      Exception e) {
        JOptionPane.showMessageDialog(null,"Can't create query method. \n Try to install MPS plugin.");
        return null;
      }
      setQueryMethodId(id);
      return null;
    }
  }
);
  return actions;
}
