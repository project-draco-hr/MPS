{
  EditorCell_Property editorCell=EditorCell_Property.create(editorContext,new ModelAccessor(){
    public String getText(){
      return getQueryMethodId();
    }
    public void setText(    String text){
      if (text.trim().length() > 0) {
        setQueryMethodId(text);
      }
 else {
        setQueryMethodId(null);
      }
    }
    public boolean isValidText(    String text){
      boolean wasSet=(text != null && text.trim().length() > 0);
      return !myMustBeSet || wasSet;
    }
  }
,getSNode());
  editorCell.setSubstituteInfo(new AbstractNodeSubstituteInfo(editorContext){
    protected List<INodeSubstituteItem> createActions(){
      return QueryMethodIdEditor.this.createActions(editorContext);
    }
  }
);
  editorCell.setDefaultText(getIdNotSetString());
  editorCell.setAction(EditorCellAction.DELETE,new EditorCellAction(){
    public boolean canExecute(    EditorContext context){
      return true;
    }
    public void execute(    EditorContext context){
      setQueryMethodId(null);
    }
  }
);
  editorCell.addKeyMap(new EditorCellKeyMap(){
{
      putAction("ctrl","VK_B",new EditorCellKeyMapAction(){
        public boolean canExecute(        KeyEvent keyEvent,        EditorContext context){
          return true;
        }
        public void execute(        KeyEvent keyEvent,        EditorContext context){
          try {
            IProjectHandler handler=context.getOperationContext().getProject().getProjectHandler();
            handler.openMethod(getNamespace(),getQueryMethodPrefix() + getQueryMethodId());
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
);
    }
  }
);
  return editorCell;
}
