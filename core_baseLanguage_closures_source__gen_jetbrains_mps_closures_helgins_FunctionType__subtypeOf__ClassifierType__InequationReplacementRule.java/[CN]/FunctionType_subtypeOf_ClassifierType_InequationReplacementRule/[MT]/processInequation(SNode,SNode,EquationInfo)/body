{
  SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
  String errorMsg="";
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface")) {
    List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
    if (methods != null && methods.size() == 1) {
      SNode md=methods.get(0);
      if (SLinkOperations.getCount(subtype,"parameterType") == SLinkOperations.getCount(md,"parameter")) {
{
          SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
          BaseIntentionProvider intentionProvider=null;
          TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(SLinkOperations.getTarget(subtype,"resultType",true),ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md,"returnType",true),supertype),_nodeToCheck_1029348928467,null,"jetbrains.mps.closures.helgins","1202742499735",false,1,intentionProvider);
        }
{
          SNode fpt;
          SNode mpt;
          Iterator<SNode> fpt_iterator=SLinkOperations.getTargets(subtype,"parameterType",true).iterator();
          Iterator<SNode> mpt_iterator=SLinkOperations.getTargets(md,"parameter",true).iterator();
          while (true) {
            if (!(fpt_iterator.hasNext())) {
              break;
            }
            if (!(mpt_iterator.hasNext())) {
              break;
            }
            fpt=fpt_iterator.next();
            mpt=mpt_iterator.next();
{
              SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
              BaseIntentionProvider intentionProvider=null;
              TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt,"type",true),supertype),fpt,_nodeToCheck_1029348928467,null,"jetbrains.mps.closures.helgins","1202746383183",false,0,intentionProvider);
            }
          }
        }
        return;
      }
 else {
        errorMsg=": wrong parameter number";
      }
    }
 else {
      errorMsg=": interface must have only one method";
    }
  }
 else {
    errorMsg=": not an interface";
  }
{
    BaseIntentionProvider intentionProvider=null;
    TypeChecker.getInstance().reportTypeError(equationInfo.getNodeWithError(),BaseConcept_Behavior.call_getPresentation_1213877396640(subtype) + " is not a subtype of " + BaseConcept_Behavior.call_getPresentation_1213877396640(supertype)+ errorMsg,"jetbrains.mps.closures.helgins@3_0","1221669835857",intentionProvider);
  }
}
