{
  LanguageMigrations_ActionGroup.this.removeAll();
  Project project=event.getData(MPSCommonDataKeys.PROJECT);
  if (project == null) {
    return;
  }
  final jetbrains.mps.project.Project mpsProject=event.getData(MPSCommonDataKeys.MPS_PROJECT);
  if (mpsProject == null) {
    return;
  }
  MigrationComponent migrationComponent=project.getComponent(MigrationComponent.class);
  if (migrationComponent == null) {
    return;
  }
  List<SLanguage> languages=Sequence.fromIterable(MigrationsUtil.getMigrateableModulesFromProject(mpsProject)).translate(new ITranslator2<SModule,SLanguage>(){
    public Iterable<SLanguage> translate(    SModule module){
      return new SLanguageHierarchy(LanguageRegistry.getInstance(mpsProject.getRepository()),module.getUsedLanguages()).getExtended();
    }
  }
).distinct().sort(new ISelector<SLanguage,String>(){
    public String select(    SLanguage it){
      return it.getQualifiedName();
    }
  }
,true).toListSequence();
  for (  SLanguage language : languages) {
    String name=language.getQualifiedName();
    DefaultActionGroup langRootsGroup=new DefaultActionGroup(NameUtil.compactNamespace(name),true);
    for (int ver=0; ver < language.getLanguageVersion(); ver++) {
      MigrationScript script=migrationComponent.fetchMigrationScript(new MigrationScriptReference(language,ver),true);
      if (script == null) {
        continue;
      }
      langRootsGroup.add(new RunMigration(script));
    }
    if (langRootsGroup.getChildrenCount() > 0) {
      LanguageMigrations_ActionGroup.this.add(langRootsGroup);
    }
  }
  for (  Pair<ActionPlace,Condition<BaseAction>> p : this.myPlaces) {
    this.addPlace(p.first,p.second);
  }
}
