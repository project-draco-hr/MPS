{
  LanguageMigrations_ActionGroup.this.removeAll();
  Project project=event.getData(MPSCommonDataKeys.PROJECT);
  if (project == null) {
    return;
  }
  jetbrains.mps.project.Project mpsProject=event.getData(MPSCommonDataKeys.MPS_PROJECT);
  if (mpsProject == null) {
    return;
  }
  MigrationManager mm=project.getComponent(MigrationManager.class);
  if (mm == null) {
    return;
  }
  Set<SLanguage> languages=SetSequence.fromSet(new HashSet<SLanguage>());
{
    final SearchScope scope=CommandUtil.createScope(mpsProject);
    QueryExecutionContext context=new QueryExecutionContext(){
      public SearchScope getDefaultSearchScope(){
        return scope;
      }
    }
;
    for (    SModule module : Sequence.fromIterable(CommandUtil.modules(CommandUtil.createConsoleScope(null,false,context))).where(new IWhereFilter<SModule>(){
      public boolean accept(      SModule it){
        return MigrationsUtil.isModuleMigrateable(it);
      }
    }
)) {
      SetSequence.fromSet(languages).addSequence(SetSequence.fromSet(new SLanguageHierarchy(LanguageRegistry.getInstance(mpsProject.getRepository()),module.getUsedLanguages()).getExtended()));
    }
  }
  for (  SLanguage language : languages) {
    String name=language.getQualifiedName();
    Icon icon=IconManager.getIconForNamespace(name);
    DefaultActionGroup langRootsGroup=new DefaultActionGroup(NameUtil.compactNamespace(name),true);
    langRootsGroup.getTemplatePresentation().setIcon(icon);
    for (int ver=0; ver < language.getLanguageVersion(); ver++) {
      MigrationScript script=mm.getMigrationComponent().fetchMigrationScript(new MigrationScriptReference(language,ver),true);
      if (script == null) {
        continue;
      }
      langRootsGroup.add(new RunMigration(script));
    }
    if (langRootsGroup.getChildrenCount() > 0) {
      LanguageMigrations_ActionGroup.this.add(langRootsGroup);
    }
  }
  for (  Pair<ActionPlace,Condition<BaseAction>> p : this.myPlaces) {
    this.addPlace(p.first,p.second);
  }
}
