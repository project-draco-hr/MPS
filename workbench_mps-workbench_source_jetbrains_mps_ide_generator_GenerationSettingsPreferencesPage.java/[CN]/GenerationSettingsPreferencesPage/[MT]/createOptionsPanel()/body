{
  JPanel optionsPanel=new JPanel(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.weightx=1;
  c.gridx=0;
  c.ipady=2;
  c.fill=GridBagConstraints.BOTH;
  optionsPanel.add(mySaveTransientModelsCheckBox,c);
  optionsPanel.add(myCheckModelsBeforeGenerationCheckBox,c);
  optionsPanel.add(myStrictMode,c);
  c.ipady=0;
  optionsPanel.add(createParallelGenerationGroup(),c);
  c.ipady=2;
  optionsPanel.add(myIncremental,c);
  c.insets.left=16;
  optionsPanel.add(myIncrementalCache,c);
  if (InternalFlag.isInternalMode()) {
    optionsPanel.add(myDebugIncrementalDependencies,c);
  }
  c.insets.left=0;
  optionsPanel.add(myInplaceTransform,c);
  optionsPanel.add(myAvoidDynamicRefs,c);
  myButtonState.track(mySaveTransientModelsCheckBox,myCheckModelsBeforeGenerationCheckBox,myStrictMode,myInplaceTransform);
  myButtonState.track(myAvoidDynamicRefs);
  myButtonState.track(myDebugIncrementalDependencies,myIncremental,myIncrementalCache);
  final ChangeListener listener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      myIncremental.setEnabled(myStrictMode.isSelected());
      myIncrementalCache.setEnabled(myStrictMode.isSelected() && myIncremental.isSelected());
      if (InternalFlag.isInternalMode()) {
        myDebugIncrementalDependencies.setEnabled(myStrictMode.isSelected() && myIncremental.isSelected());
      }
    }
  }
;
  myStrictMode.addChangeListener(listener);
  myIncremental.addChangeListener(listener);
  optionsPanel.setBorder(IdeBorderFactory.createTitledBorder("General"));
  mySaveTransientModelsCheckBox.addItemListener(myStatusUpdater);
  myInplaceTransform.addItemListener(myStatusUpdater);
  myIncremental.addItemListener(myStatusUpdater);
  return optionsPanel;
}
