{
  JPanel usedLangsTab=new JPanel();
  usedLangsTab.setLayout(new GridLayoutManager(1,1,INSETS,-1,-1));
  final JBTable runtimeTable=new JBTable();
  runtimeTable.setShowHorizontalLines(false);
  runtimeTable.setShowVerticalLines(false);
  runtimeTable.setAutoCreateRowSorter(false);
  runtimeTable.setAutoscrolls(true);
  runtimeTable.setTableHeader(null);
  myRuntimeTableModel=new RuntimeTableModel();
  runtimeTable.setModel(myRuntimeTableModel);
  runtimeTable.setDefaultRenderer(DependenciesTableItem.class,DependenciesTableItem.createDefaultRenderer());
  runtimeTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(runtimeTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<MPSPropertiesAnActionButton>(null,getAnActions()){
        @Override public Icon getIconFor(        MPSPropertiesAnActionButton aValue){
          return aValue.getIcon();
        }
        @Override public boolean hasSubstep(        MPSPropertiesAnActionButton selectedValue){
          return false;
        }
        @Override public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        @Override public PopupStep onChosen(        final MPSPropertiesAnActionButton selectedValue,        final boolean finalChoice){
          return doFinalStep(new Runnable(){
            public void run(){
              selectedValue.actionPerformed(null);
            }
          }
);
        }
        @Override @NotNull public String getTextFor(        MPSPropertiesAnActionButton value){
          return value.getText();
        }
      }
);
      popup.show(button.getPreferredPopupPoint());
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      TableUtil.removeSelectedItems(runtimeTable);
      myRuntimeTableModel.fireTableDataChanged();
    }
  }
);
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createBorder());
  usedLangsTab.add(table,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  setTabComponent(usedLangsTab);
}
