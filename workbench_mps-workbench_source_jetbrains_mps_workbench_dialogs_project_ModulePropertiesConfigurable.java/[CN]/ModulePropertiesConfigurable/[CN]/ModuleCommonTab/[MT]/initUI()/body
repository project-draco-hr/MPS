{
  super.initUI();
  if (myConfigurableItem instanceof DevKit) {
    myModuleDependenciesTab=new ModuleDependenciesTab();
    JComponent component=getTabComponent();
    component.add(myModuleDependenciesTab.getTabComponent(),new GridConstraints(2,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
    setTabComponent(component);
    return;
  }
  JComponent component=getTabComponent();
  final JBTable tableRoots=new JBTable();
  tableRoots.setShowHorizontalLines(false);
  tableRoots.setShowVerticalLines(false);
  ModuleRootsTableModel rootsTableModel=new ModuleRootsTableModel(myConfigurableItem);
  tableRoots.setModel(rootsTableModel);
  tableRoots.setDefaultRenderer(ModelRootManager.class,new ComboBoxTableRenderer<ModelRootManager>(new ModelRootManager[]{new ModelRootManager(),new ModelRootManager("f3061a53-9226-4cc5-a443-f952ceaf5816","jetbrains.mps.baseLanguage.stubs.JavaStubs")}){
    @Override protected String getTextFor(    @NotNull ModelRootManager value){
      return value.getClassName();
    }
  }
);
  tableRoots.getTableHeader().getColumnModel().getColumn(ModuleRootsTableModel.MANAGER_COLUMN).setWidth(300);
  tableRoots.getTableHeader().getColumnModel().getColumn(ModuleRootsTableModel.MANAGER_COLUMN).setPreferredWidth(300);
  tableRoots.getTableHeader().getColumnModel().getColumn(ModuleRootsTableModel.MANAGER_COLUMN).setMaxWidth(300);
  tableRoots.getTableHeader().getColumnModel().getColumn(ModuleRootsTableModel.MANAGER_COLUMN).setMinWidth(100);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(tableRoots);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      System.out.println("Add");
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      System.out.println("Edit");
    }
  }
).setUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      if (tableRoots.isEditing())       tableRoots.getCellEditor().stopCellEditing();
      final int min=tableRoots.getSelectionModel().getMinSelectionIndex();
      final int max=tableRoots.getSelectionModel().getMaxSelectionIndex();
      tableRoots.getSelectionModel().setSelectionInterval((min - 1 < 0 ? 0 : min - 1),(max - 1 < 0 ? 0 : max - 1));
    }
  }
).setDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      if (tableRoots.isEditing())       tableRoots.getCellEditor().stopCellEditing();
      final int min=tableRoots.getSelectionModel().getMinSelectionIndex();
      final int max=tableRoots.getSelectionModel().getMaxSelectionIndex();
      tableRoots.getSelectionModel().setSelectionInterval((min + 1 >= tableRoots.getRowCount() ? 0 : min + 1),(max + 1 >= tableRoots.getRowCount() ? 0 : max + 1));
    }
  }
);
  JPanel table=decorator.createPanel();
  table.setBorder(IdeBorderFactory.createTitledBorder("Module Roots",true));
  component.add(table,new GridConstraints(2,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  setTabComponent(component);
}
