{
  IOperationContext operationContext=getOperationContext();
  SModelDescriptor structureModelDescriptor=myLanguage.getStructureModelDescriptor();
  this.add(new SModelTreeNode(structureModelDescriptor,"structure",operationContext));
  SModelDescriptor editorModelDescriptor=myLanguage.getEditorModelDescriptor();
  if (editorModelDescriptor != null) {
    this.add(new SModelTreeNode(editorModelDescriptor,"editor",operationContext));
  }
  SModelDescriptor helginsModelDescriptor=myLanguage.getHelginsTypesystemModelDescriptor();
  if (helginsModelDescriptor != null) {
    this.add(new SModelTreeNode(helginsModelDescriptor,"helgins typesystem",operationContext));
  }
  SModelDescriptor actionsModelDescriptor=myLanguage.getActionsModelDescriptor();
  if (actionsModelDescriptor != null) {
    this.add(new SModelTreeNode(actionsModelDescriptor,"actions",operationContext));
  }
  SModelDescriptor constraintsModelDescriptor=myLanguage.getConstraintsModelDescriptor();
  if (constraintsModelDescriptor != null) {
    this.add(new SModelTreeNode(constraintsModelDescriptor,"constraints",operationContext));
  }
  SModelDescriptor scriptsModelDescriptor=myLanguage.getScriptsModelDescriptor();
  if (scriptsModelDescriptor != null) {
    this.add(new SModelTreeNode(scriptsModelDescriptor,"scripts",operationContext));
  }
  SModelDescriptor documentationModelDescriptor=myLanguage.getDocumentationModelDescriptor();
  if (documentationModelDescriptor != null) {
    this.add(new SModelTreeNode(documentationModelDescriptor,"documentation",operationContext));
  }
  if (myLanguage.getAccessoryModels().size() > 0) {
    TextTreeNode accessories=new TextTreeNode("accessories"){
      public Icon getIcon(      boolean expanded){
        return Icons.LIB_ICON;
      }
    }
;
    List<SModelDescriptor> sortedModels=SortUtil.sortModels(myLanguage.getAccessoryModels());
    for (    SModelDescriptor model : sortedModels) {
      accessories.add(new SModelTreeNode(model,null,operationContext));
    }
    this.add(accessories);
  }
  TextTreeNode generatorsTreeNode=new TextTreeNode("generators",operationContext){
    public Icon getIcon(    boolean expanded){
      return Icons.GENERATORS_ICON;
    }
    public JPopupMenu getPopupMenu(){
      JPopupMenu result=new JPopupMenu();
      ActionContext context=new ActionContext(getOperationContext());
      ActionManager.instance().getGroup(ProjectPane.PROJECT_PANE_GENERATORS_ACTIONS).add(result,context);
      return result;
    }
  }
;
  this.add(generatorsTreeNode);
  for (  Generator generator : myLanguage.getGenerators()) {
    MPSTreeNode generatorNode=new GeneratorTreeNode(generator,myProject);
    generatorsTreeNode.add(generatorNode);
  }
}
