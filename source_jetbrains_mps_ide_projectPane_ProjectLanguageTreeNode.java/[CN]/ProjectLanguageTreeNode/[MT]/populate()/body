{
  IOperationContext operationContext=getOperationContext();
  SModelDescriptor structureModelDescriptor=myLanguage.getStructureModelDescriptor();
  if (structureModelDescriptor != null) {
    this.add(new SModelTreeNode(structureModelDescriptor,"structure",myIDE,operationContext));
  }
  SModelDescriptor editorModelDescriptor=myLanguage.getEditorModelDescriptor();
  if (editorModelDescriptor != null) {
    this.add(new SModelTreeNode(editorModelDescriptor,"editor",myIDE,operationContext));
  }
  SModelDescriptor templatesEditorModelDescriptor=myLanguage.getEditorModelDescriptor("templates");
  if (templatesEditorModelDescriptor != null) {
    this.add(new SModelTreeNode(templatesEditorModelDescriptor,"templates editor",myIDE,operationContext));
  }
  SModelDescriptor typesystemModelDescriptor=myLanguage.getTypesystemModelDescriptor();
  if (typesystemModelDescriptor != null) {
    this.add(new SModelTreeNode(typesystemModelDescriptor,"typesystem",myIDE,operationContext));
  }
  SModelDescriptor actionsModelDescriptor=myLanguage.getActionsModelDescriptor();
  if (actionsModelDescriptor != null) {
    this.add(new SModelTreeNode(actionsModelDescriptor,"actions",myIDE,operationContext));
  }
  TextTreeNode libraries=new TextTreeNode("<html><b>accessory</b>"){
    public Icon getIcon(    boolean expanded){
      return Icons.LIB_ICON;
    }
  }
;
  List<SModelDescriptor> sortedModels=SortUtil.sortModels(myLanguage.getLibraryModels());
  for (  SModelDescriptor model : sortedModels) {
    libraries.add(new SModelTreeNode(model,null,myIDE,operationContext));
  }
  this.add(libraries);
  for (  Generator generator : myLanguage.getGenerators()) {
    TextTreeNode generatorNode=new GeneratorTreeNode("<html><b>generator \"" + generator.getName() + "\"</b>",myIDE,myProject,operationContext);
    this.add(generatorNode);
  }
}
