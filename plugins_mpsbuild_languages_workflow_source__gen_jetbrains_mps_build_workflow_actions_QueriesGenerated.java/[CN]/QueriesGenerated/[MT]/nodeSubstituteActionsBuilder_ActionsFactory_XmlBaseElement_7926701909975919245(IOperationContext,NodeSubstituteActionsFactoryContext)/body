{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.xml.structure.XmlElement");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return Sequence.fromIterable(Sequence.fromArray(new String[]{"fileset","pathelement","dirset"})).toListSequence();
        }
      }
;
      Iterable<String> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode res=SModelOperations.createNewNode(model,"jetbrains.mps.core.xml.structure.XmlElement",null);
              SPropertyOperations.set(res,"tagName",(item));
              SPropertyOperations.set(res,"shortEmptyNotation","" + true);
              return res;
            }
            public String getMatchingText(            String pattern){
              return "<" + (item) + "/>";
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
