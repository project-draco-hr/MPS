{
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myToolsPane=toolsPane;
  myComponent.setLayout(new BorderLayout());
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(new JPanel(),BorderLayout.CENTER);
  JPanel checkboxPanel=new JPanel(new GridLayout(1,3));
  checkboxPanel.add(myErrorsCheckbox);
  checkboxPanel.add(myWarningsCheckbox);
  checkboxPanel.add(myInfoCheckbox);
  panel.add(checkboxPanel,BorderLayout.WEST);
  myComponent.add(panel,BorderLayout.NORTH);
  myComponent.add(new JScrollPane(myList),BorderLayout.CENTER);
  myList.setFixedCellHeight(Toolkit.getDefaultToolkit().getFontMetrics(myList.getFont()).getHeight() + 5);
  myList.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      openCurrentMessageNodeIfPossible();
    }
  }
,KeyStroke.getKeyStroke("F4"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      openCurrentMessageNodeIfPossible();
    }
  }
,KeyStroke.getKeyStroke("ENTER"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 1) {
        openCurrentMessageNodeIfPossible();
      }
    }
    public void mousePressed(    MouseEvent e){
      if (e.isPopupTrigger()) {
        showPopupMenu(e);
      }
    }
    public void mouseReleased(    MouseEvent e){
      if (e.isPopupTrigger()) {
        showPopupMenu(e);
      }
    }
  }
);
  myList.addMouseMotionListener(new MouseMotionListener(){
    public void mouseDragged(    MouseEvent e){
    }
    public void mouseMoved(    MouseEvent e){
      int index=myList.locationToIndex(e.getPoint());
      Message item=null;
      if (index != -1) {
        item=(Message)myModel.get(index);
      }
      if (item != null && item.getHintObject() != null) {
        myList.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      }
 else {
        myList.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    }
  }
);
  myList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      Message msg=(Message)value;
      if (msg.getHintObject() != null) {
        setText(msg.getCreationTimeString() + "\t: " + msg.getText());
        setForeground(Color.BLUE);
      }
 else {
        setText(msg.getCreationTimeString() + "\t: " + msg.getText());
        setForeground(Color.BLACK);
      }
switch (msg.getKind()) {
case INFORMATION:
        setIcon(INFORMATION_ICON);
      break;
case WARNING:
    setIcon(WARNING_ICON);
  break;
case ERROR:
setIcon(ERROR_ICON);
break;
}
return this;
}
}
);
myBlameDialog=new BlameDialog(null);
}
