{
  final int moduleVersion=module.getModuleVersion();
  myRefactoringStep=createPureMigrationScript_29rp6m_a0b0d01(moduleVersion,"RefactoringLog_" + moduleVersion);
  session.registerChange(new Runnable(){
    public void run(){
      SModel migrationModel=LanguageAspect.MIGRATION.getOrCreate(module);
      SModelInternal sm=(SModelInternal)(SModel)migrationModel;
      for (      SModelReference reference : ListSequence.fromList(SNodeOperations.getNodeDescendants(myRefactoringStep,null,true,new SAbstractConcept[]{})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          return SNodeOperations.getReferences(it);
        }
      }
).select(new ISelector<SReference,SModelReference>(){
        public SModelReference select(        SReference it){
          return it.getTargetSModelReference();
        }
      }
).distinct()) {
        if (!(ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<jetbrains.mps.smodel.SModel.ImportElement>(),sm.importedModels())).select(new ISelector<jetbrains.mps.smodel.SModel.ImportElement,SModelReference>(){
          public SModelReference select(          jetbrains.mps.smodel.SModel.ImportElement it){
            return it.getModelReference();
          }
        }
).contains(reference))) {
          sm.addModelImport(reference,true);
        }
      }
      sm.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x9882f4ad195546feL,0x826994189e5dbbf2L),"jetbrains.mps.lang.migration.util"));
      SModelOperations.addRootNode(migrationModel,myRefactoringStep);
      module.setModuleVersion(moduleVersion + 1);
    }
  }
);
}
