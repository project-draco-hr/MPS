{
  final int moduleVersion=module.getModuleVersion();
  myRefactoringStep=createRefactoringLog_29rp6m_a0b0d21(moduleVersion,"RefactoringLog_" + moduleVersion);
  session.registerChange(new Runnable(){
    public void run(){
      SModel migrationModel=LanguageAspect.MIGRATION.getOrCreate(module);
      SModelInternal sm=(SModelInternal)(SModel)migrationModel;
      for (      SModelReference reference : ListSequence.fromList(SNodeOperations.getNodeDescendants(myRefactoringStep,null,true,new SAbstractConcept[]{})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          return SNodeOperations.getReferences(it);
        }
      }
).select(new ISelector<SReference,SModelReference>(){
        public SModelReference select(        SReference it){
          return it.getTargetSModelReference();
        }
      }
).distinct()) {
        if (!(SModelOperations.getImportedModelUIDs(migrationModel).contains(reference))) {
          sm.addModelImport(reference);
        }
      }
      sm.addLanguage(MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0x9882f4ad195546feL,0x826994189e5dbbf2L),"jetbrains.mps.lang.migration.util"));
      jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.addRootNode(migrationModel,myRefactoringStep);
      module.setModuleVersion(moduleVersion + 1);
      Iterable<SModule> modules=searchScope.getModules();
      List<SModule> modulesToIncrementDependencyVersion=Sequence.fromIterable(modules).where(new IWhereFilter<SModule>(){
        public boolean accept(        SModule m){
          return MigrationModuleUtil.isModuleMigrateable(m);
        }
      }
).where(new IWhereFilter<SModule>(){
        public boolean accept(        SModule m){
          return SetSequence.fromSet(MigrationModuleUtil.getModuleDependencies(m)).contains(module);
        }
      }
).toListSequence();
      for (      SModule m : ListSequence.fromList(modulesToIncrementDependencyVersion)) {
        int depVersion=MigrationModuleUtil.getDependencyVersion(m,module);
        if (moduleVersion != depVersion) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Module " + m + " depends on module "+ module+ " with version "+ depVersion+ ", but current version is "+ moduleVersion);
          }
        }
 else {
          MigrationModuleUtil.setDepVersion(m,module.getModuleReference(),moduleVersion + 1);
        }
      }
    }
  }
);
}
