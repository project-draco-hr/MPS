{
  if (!(isApplicable(initialStates,repository)) || !(ListSequence.fromList(selectedOptions).contains(OPTION))) {
    return ListSequence.fromList(initialStates).select(new ISelector<SNodeReference,List<RefactoringParticipant.Change<SNodeReference,SNodeReference>>>(){
      public List<RefactoringParticipant.Change<SNodeReference,SNodeReference>> select(      SNodeReference it){
        return ((List<RefactoringParticipant.Change<SNodeReference,SNodeReference>>)ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>()));
      }
    }
).toListSequence();
  }
  return super.getChanges(initialStates,repository,selectedOptions,searchScope,progressMonitor);
}
