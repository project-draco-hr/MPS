{
  final SNode sourceNode=initialState.resolve(repository);
  final SModule sourceModule=SNodeOperations.getModel(sourceNode).getModule();
  final List<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>> participantStates=Sequence.fromIterable(new ExtensionPoint<MoveNodeRefactoringParticipant<?,?>>("jetbrains.mps.refactoring.participant.MoveNodeParticipantEP").getObjects()).select(new ISelector<MoveNodeRefactoringParticipant<?,?>,MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>>(){
    public MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> select(    MoveNodeRefactoringParticipant<?,?> participant){
      return MoveNodeRefactoringLogParticipant.SerializingParticipantState.create(participant);
    }
  }
).where(new IWhereFilter<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>>(){
    public boolean accept(    MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> it){
      return it != null;
    }
  }
).toListSequence();
  if (ListSequence.fromList(participantStates).isEmpty()) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>());
  }
  final List<SNode> initialStates=ListSequence.fromList(participantStates).select(new ISelector<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>,SNode>(){
    public SNode select(    MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> it){
      return it.getSerializedInitial(sourceNode);
    }
  }
).toListSequence();
  final SearchResults results=new SearchResults();
  results.add(new SearchResult<SModule>(sourceModule,"refactoring log"));
  RefactoringParticipant.Change<SNodeReference,SNodeReference> change=new MoveNodeRefactoringParticipant.ChangeBase<SNodeReference,SNodeReference>(){
    public SearchResults getSearchResults(){
      return results;
    }
    public void confirm(    SNodeReference finalState,    SRepository repository,    RefactoringSession refactoringSession){
      SNode targetNode=finalState.resolve(repository);
      SModule targetModule=SNodeOperations.getModel(targetNode).getModule();
      MoveNodeRefactoringLogParticipant.LogBuilder logBuilder=MoveNodeRefactoringLogParticipant.LogBuilder.getBuilder(refactoringSession,searchScope,sourceModule);
      logBuilder.addOptions(selectedOptions);
{
        Iterator<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>> ps_it=ListSequence.fromList(participantStates).iterator();
        Iterator<SNode> i_it=ListSequence.fromList(initialStates).iterator();
        MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> ps_var;
        SNode i_var;
        while (ps_it.hasNext() && i_it.hasNext()) {
          ps_var=ps_it.next();
          i_var=i_it.next();
          if (i_var != null) {
            logBuilder.addPart(ps_var.getParticipant(),i_var,ps_var.getSerializedFinal(targetNode));
          }
        }
      }
    }
  }
;
  return ListSequence.fromListAndArray(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>(),change);
}
