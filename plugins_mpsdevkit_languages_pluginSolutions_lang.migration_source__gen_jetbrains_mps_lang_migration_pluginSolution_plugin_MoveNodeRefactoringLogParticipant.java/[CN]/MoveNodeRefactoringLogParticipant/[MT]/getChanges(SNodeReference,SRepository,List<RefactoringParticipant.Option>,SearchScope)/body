{
  if (!(isApplicable(initialState,repository)) || !(ListSequence.fromList(selectedOptions).contains(OPTION))) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>());
  }
  final SNode sourceNode=initialState.resolve(repository);
  final SModule sourceModule=SNodeOperations.getModel(sourceNode).getModule();
  final List<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>> participantStates=Sequence.fromIterable(new ExtensionPoint<MoveNodeRefactoringParticipant<?,?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects()).select(new ISelector<MoveNodeRefactoringParticipant<?,?>,MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>>(){
    public MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> select(    MoveNodeRefactoringParticipant<?,?> participant){
      return MoveNodeRefactoringLogParticipant.SerializingParticipantState.create(participant);
    }
  }
).where(new IWhereFilter<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>>(){
    public boolean accept(    MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> it){
      return it != null;
    }
  }
).toListSequence();
  if (ListSequence.fromList(participantStates).isEmpty()) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>());
  }
  final List<SNode> initialStates=ListSequence.fromList(participantStates).select(new ISelector<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>,SNode>(){
    public SNode select(    MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> it){
      return it.getSerializedInitial(sourceNode);
    }
  }
).toListSequence();
  final SearchResults results=new SearchResults();
  results.add(new SearchResult<SModule>(sourceModule,"refactoring log"));
  RefactoringParticipant.Change<SNodeReference,SNodeReference> change=new RefactoringParticipant.Change<SNodeReference,SNodeReference>(){
    public SearchResults getSearchResults(){
      return results;
    }
    public boolean needsToPreserveOldNode(){
      return false;
    }
    public void confirm(    SNodeReference finalState,    SRepository repository,    RefactoringSession refactoringSession){
      final SNode targetNode=finalState.resolve(repository);
      SModule targetModule=SNodeOperations.getModel(targetNode).getModule();
      List<SNode> finalStates=ListSequence.fromList(participantStates).select(new ISelector<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>,SNode>(){
        public SNode select(        MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> it){
          return it.getSerializedFinal(targetNode);
        }
      }
).toListSequence();
      MoveNodeRefactoringLogParticipant.LogBuilder logBuilder=MoveNodeRefactoringLogParticipant.LogBuilder.getBuilder(refactoringSession,sourceModule);
      logBuilder.addOptions(selectedOptions);
{
        Iterator<RefactoringParticipant.PersistentRefactoringParticipant<?,?>> participant_it=ListSequence.fromList(participantStates).select(new ISelector<MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?>,RefactoringParticipant.PersistentRefactoringParticipant<?,?>>(){
          public RefactoringParticipant.PersistentRefactoringParticipant<?,?> select(          MoveNodeRefactoringLogParticipant.SerializingParticipantState<?,?> it){
            return it.getParticipant();
          }
        }
).iterator();
        Iterator<SNode> i_it=ListSequence.fromList(initialStates).iterator();
        Iterator<SNode> f_it=ListSequence.fromList(finalStates).iterator();
        RefactoringParticipant.PersistentRefactoringParticipant<?,?> participant_var;
        SNode i_var;
        SNode f_var;
        while (participant_it.hasNext() && i_it.hasNext() && f_it.hasNext()) {
          participant_var=participant_it.next();
          i_var=i_it.next();
          f_var=f_it.next();
          logBuilder.addPart(participant_var,i_var,f_var);
        }
      }
    }
  }
;
  return ListSequence.fromListAndArray(new ArrayList<RefactoringParticipant.Change<SNodeReference,SNodeReference>>(),change);
}
