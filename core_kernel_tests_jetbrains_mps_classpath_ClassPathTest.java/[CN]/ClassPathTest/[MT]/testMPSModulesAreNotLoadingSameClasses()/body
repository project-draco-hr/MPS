{
  final MPSProject project=loadProject(MPS_CORE_PROJECT);
  assertNotNull("Can't open project " + MPS_CORE_PROJECT,project);
  waitForEDTTasksToComplete();
  final MultiMap<String,LoadEnvironment> loadedClasses=new MultiMap<String,LoadEnvironment>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      List<IModule> modulesToCheck=new ArrayList<IModule>();
      modulesToCheck.addAll(MPSModuleRepository.getInstance().getAllLanguages());
      modulesToCheck.addAll(MPSModuleRepository.getInstance().getAllSolutions());
      modulesToCheck.removeAll(project.getProjectSolutions());
      for (      IModule m : modulesToCheck) {
        List<StubModelsEntry> stubs=StubModelsEntry.filterJava(m.getModuleDescriptor().getStubModelEntries());
        for (        StubModelsEntry entry : stubs) {
          String path=entry.getPath();
          IClassPathItem pathItem=ClassPathFactory.getInstance().createFromPath(path);
          if (pathItem == null)           continue;
          if (pathItem instanceof JarFileClassPathItem)           continue;
          for (          String className : getAllClasses(pathItem)) {
            String namespace=m.getModuleFqName();
            if (!loadedClasses.containsKey(className)) {
              loadedClasses.put(className,new HashSet<LoadEnvironment>(1));
            }
            loadedClasses.get(className).add(new LoadEnvironment(namespace,pathItem.toString()));
          }
        }
      }
    }
  }
);
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      project.dispose();
      IdeEventQueue.getInstance().flushQueue();
      System.gc();
    }
  }
);
  waitForEDTTasksToComplete();
  Set<Conflict> conflicts=new HashSet<Conflict>();
  for (  String className : loadedClasses.keySet()) {
    Collection<LoadEnvironment> environments=loadedClasses.get(className);
    if (environments.size() > 1) {
      Conflict conflict=new Conflict(className);
      conflict.addLoadEnvironments(environments);
      conflicts.add(conflict);
    }
  }
  assertTrue(getConflictsDescription(conflicts),conflicts.isEmpty());
}
