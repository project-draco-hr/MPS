{
  return new Iterator(){
    Iterator<Iterable<T>> currentOuter;
    Iterator<T> currentInner;
    T next;
{
      currentOuter=myContent.iterator();
      next=nextInternal();
    }
    @Override public boolean hasNext(){
      return next != null;
    }
    @Override public Object next(){
      T curr=next;
      next=nextInternal();
      return curr;
    }
    private T nextInternal(){
      if (currentInner != null && currentInner.hasNext()) {
        return currentInner.next();
      }
      while (currentOuter.hasNext()) {
        Iterable<T> innerIterable=currentOuter.next();
        currentInner=innerIterable != null ? innerIterable.iterator() : null;
        if (currentInner != null && currentInner.hasNext()) {
          return currentInner.next();
        }
      }
      return null;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
