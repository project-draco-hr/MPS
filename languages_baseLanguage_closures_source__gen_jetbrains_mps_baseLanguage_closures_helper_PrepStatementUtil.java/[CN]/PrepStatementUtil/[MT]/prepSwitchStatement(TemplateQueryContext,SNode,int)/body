{
  int beginLabel=label;
  int nextLabel=this.calcNextLabel(genContext,sstmt);
  Object data1=new Integer[]{beginLabel,nextLabel};
  Values.CLOSURE_DATA.set(genContext,sstmt,data1);
  int nextCaseLabel=this.ctx.incrementLabel();
  for (  SNode scase : SLinkOperations.getTargets(sstmt,"case",true)) {
    int caseLabel=nextCaseLabel;
    nextCaseLabel=this.ctx.incrementLabel();
    if ((SLinkOperations.getTarget(scase,"body",true) != null)) {
      List<SNode> stmts=SLinkOperations.getTargets(SLinkOperations.getTarget(scase,"body",true),"statement",true);
      int endCaseLabel=nextCaseLabel;
      if (ListSequence.fromList(stmts).count() > 0 && SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1),"jetbrains.mps.baseLanguage.structure.BreakStatement")) {
        endCaseLabel=nextLabel;
      }
      SNode sn=SLinkOperations.getTarget(scase,"body",true);
      Object data=new Integer[]{caseLabel,endCaseLabel};
      Values.CLOSURE_DATA.set(genContext,sn,data);
      this.prepStatementList(genContext,SLinkOperations.getTarget(scase,"body",true));
    }
  }
  if ((SLinkOperations.getTarget(sstmt,"defaultBlock",true) != null)) {
    int defLabel=this.ctx.incrementLabel();
    SNode sn=SLinkOperations.getTarget(sstmt,"defaultBlock",true);
    Object data=new Integer[]{defLabel,nextLabel};
    Values.CLOSURE_DATA.set(genContext,sn,data);
    this.prepStatementList(genContext,SLinkOperations.getTarget(sstmt,"defaultBlock",true));
  }
  return nextLabel;
}
