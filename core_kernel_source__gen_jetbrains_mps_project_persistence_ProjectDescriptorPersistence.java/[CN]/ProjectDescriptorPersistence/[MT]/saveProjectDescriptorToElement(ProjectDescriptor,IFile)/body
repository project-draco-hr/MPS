{
  final MacroHelper macroHelper=MacrosFactory.forProjectFile(file);
  Element project=new Element("project");
  Element projectModules=new Element("projectModules");
  for (  Path path : Sequence.fromIterable(((Iterable<Path>)descriptor.getModules())).sort(new ISelector<Path,String>(){
    public String select(    Path p){
      return macroHelper.shrinkPath(p.getPath());
    }
  }
,true)) {
    XmlUtil.tagWithAttributes(projectModules,"modulePath","path",macroHelper.shrinkPath(path.getPath()),"folder",(path.getMPSFolder() != null ? path.getMPSFolder() : ""));
  }
  project.addContent(projectModules);
  Element genConfs=new Element("genConfs");
  for (  BaseTestConfiguration tc : ListSequence.fromList(descriptor.getTestConfigurations())) {
    if (tc instanceof ModelsTestConfiguration) {
      ModelsTestConfiguration mgc=(ModelsTestConfiguration)tc;
      Element genConfModels=new Element("genConfModels");
      if (mgc.getName() != null) {
        genConfModels.setAttribute("name",mgc.getName());
      }
      Element models=new Element("models");
      for (      SModelReference m : ListSequence.fromList(mgc.getModels())) {
        XmlUtil.tagWithAttribute(models,"model","modelRef",m.toString());
      }
      genConfModels.addContent(models);
      genConfs.addContent(genConfModels);
    }
    if (tc instanceof ModuleTestConfiguration) {
      ModuleTestConfiguration sgc=(ModuleTestConfiguration)tc;
      Element genConfModule=new Element("genConfModule");
      if (sgc.getName() != null) {
        genConfModule.setAttribute("name",sgc.getName());
      }
      if (sgc.getModuleRef() != null) {
        genConfModule.setAttribute("moduleRef",sgc.getModuleRef().toString());
      }
      genConfs.addContent(genConfModule);
    }
  }
  project.addContent(genConfs);
  return project;
}
