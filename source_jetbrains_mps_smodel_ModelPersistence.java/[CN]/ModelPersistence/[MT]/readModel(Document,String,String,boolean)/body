{
  Element rootElement=document.getRootElement();
  VisibleModelElements visibleModelElements=new VisibleModelElements(rootElement);
  String modelLongName=rootElement.getAttributeValue(NAME);
  if (modelLongName == null) {
    String modelNamespace=rootElement.getAttributeValue(NAMESPACE,"");
    modelLongName=NameUtil.longNameFromNamespaceAndShortName(modelNamespace,modelName);
  }
 else {
    String shortName=NameUtil.shortNameFromLongName(modelLongName);
  }
  SModelUID modelUID=new SModelUID(modelLongName,stereotype);
  SModel model=createModel(modelUID);
  model.setLoading(true);
  try {
    Element maxImportIndex=rootElement.getChild(MAX_IMPORT_INDEX);
    if (maxImportIndex == null)     maxImportIndex=rootElement.getChild("maxReferenceID");
    model.setMaxImportIndex(readIntAttributeValue(maxImportIndex,VALUE));
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
  List<LogInfo> logs=new ArrayList<LogInfo>();
  List languages=rootElement.getChildren(LANGUAGE);
  for (  Object language : languages) {
    Element element=(Element)language;
    String languageNamespace=element.getAttributeValue(NAMESPACE);
    if (checkVersion) {
      String oldVersion_string=element.getAttributeValue(VERSION);
      int oldVersion=-1;
      if (oldVersion_string != null) {
        oldVersion=Integer.parseInt(oldVersion_string);
      }
      Language modelLanguage=MPSModuleRepository.getInstance().getLanguage(languageNamespace);
      if (modelLanguage != null) {
        int newVersion=modelLanguage.getVersion();
        if (newVersion > oldVersion) {
          LOG.debug("new language version detected: model = " + model + " language = "+ languageNamespace+ " current language version: "+ oldVersion+ " new version: "+ newVersion);
          try {
            SModel structureModel=modelLanguage.getStructureModelDescriptor().getSModel();
            logs.add(new LogInfo(structureModel.getLog(),oldVersion,newVersion,element));
          }
 catch (          Throwable t) {
            LOG.error(t);
          }
        }
      }
    }
    model.addLanguage(languageNamespace);
  }
  List languagesEOG=rootElement.getChildren(LANGUAGE_ENGAGED_ON_GENERATION);
  for (  Object languageEOG : languagesEOG) {
    Element element=(Element)languageEOG;
    String languageNamespace=element.getAttributeValue(NAMESPACE);
    model.addLanguageEngagedOnGeneration(languageNamespace);
  }
  List devkits=rootElement.getChildren(DEVKIT);
  for (  Object devkit : devkits) {
    Element element=(Element)devkit;
    String devkitNamespace=element.getAttributeValue(NAMESPACE);
    model.addDevKit(devkitNamespace);
  }
  List imports=rootElement.getChildren(IMPORT_ELEMENT);
  for (  Object anImport : imports) {
    Element element=(Element)anImport;
    String indexValue=element.getAttributeValue(MODEL_IMPORT_INDEX,element.getAttributeValue("referenceID"));
    int importIndex=Integer.parseInt(indexValue);
    String importedModelUIDString=element.getAttributeValue(MODEL_UID);
    if (importedModelUIDString == null) {
      String importedModelFQName=NameUtil.longNameFromNamespaceAndShortName(element.getAttributeValue(NAMESPACE),element.getAttributeValue(NAME));
      String importedModelStereotype=element.getAttributeValue(STEREOTYPE,"");
      importedModelUIDString=new SModelUID(importedModelFQName,importedModelStereotype).toString();
    }
    if (importedModelUIDString == null) {
      LOG.error("Error loading import element for index " + importIndex + " in "+ model.getUID());
      continue;
    }
    if (importIndex > model.getMaxImportIndex()) {
      LOG.warning("Import element " + importIndex + ":"+ importedModelUIDString+ " greater then max import index ("+ model.getMaxImportIndex()+ ") in "+ model.getUID());
      model.setMaxImportIndex(importIndex);
    }
    SModelUID importedModelUID=SModelUID.fromString(importedModelUIDString);
    if (checkVersion && !(importedModelUID.equals(modelUID))) {
      int importedModelVersion=-1;
      String importedModelVersionValue=element.getAttributeValue(VERSION);
      if (importedModelVersionValue != null) {
        importedModelVersion=Integer.parseInt(importedModelVersionValue);
      }
      SModelDescriptor importedModelDescriptor=SModelRepository.getInstance().getModelDescriptor(importedModelUID);
      if (importedModelDescriptor != null) {
        int newVersion=importedModelDescriptor.getVersion();
        if (newVersion > importedModelVersion) {
          LOG.debug("new imported model version detected: model = " + model + " imported model = "+ importedModelUID+ " current import version: "+ importedModelVersion+ " new version: "+ newVersion);
          try {
            SModel importedModel=SModelRepository.getInstance().getModelDescriptor(importedModelUID).getSModel();
            logs.add(new LogInfo(importedModel.getLog(),importedModelVersion,newVersion,element));
          }
 catch (          Throwable t) {
            LOG.error(t);
          }
        }
      }
    }
    model.addImportElement(importedModelUID,importIndex);
  }
  if (logs.size() > 0) {
    ModelLogger modelLogger=new ModelLogger();
    for (    LogInfo log : logs) {
      modelLogger.playRefactoringSequence(log.myNode,document,log.myOldVersion,log.myNewVersion);
      log.myElement.setAttribute(VERSION,log.myNewVersion + "");
    }
    SModel sModel=readModel(document,modelName,stereotype,false);
    SModelRepository.getInstance().markChanged(sModel,true);
    return sModel;
  }
  ArrayList<ReferencePersister> referenceDescriptors=new ArrayList<ReferencePersister>();
  String versionString=rootElement.getAttributeValue(VERSION);
  if (versionString != null) {
    model.setUsesLog(true);
    Element logElement=rootElement.getChild(REFACTORING_LOG);
    if (logElement != null) {
      Element nodeElement=logElement.getChild(NODE);
      SNode node=readNode(nodeElement,model,referenceDescriptors,false);
      model.setLog(node);
    }
  }
  List children=rootElement.getChildren(NODE);
  for (  Object child : children) {
    Element element=(Element)child;
    SNode snode=readNode(element,model,referenceDescriptors,false);
    if (snode != null) {
      model.addRoot(snode);
    }
  }
  for (  ReferencePersister referencePersister : referenceDescriptors) {
    referencePersister.createReferenceInModel(model,visibleModelElements);
  }
  model.setLoading(false);
  return model;
}
