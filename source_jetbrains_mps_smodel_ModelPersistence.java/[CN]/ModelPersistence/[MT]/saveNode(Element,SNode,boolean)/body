{
  Element element=new Element(NODE);
  setNotNullAttribute(element,ROLE,node.getRole_());
  element.setAttribute(TYPE,node.getClass().getName());
  element.setAttribute(ID,node.getId());
  if (node.getModel().isExternallyResolvable()) {
    try {
      String extResolveInfo=ExternalResolver.getExternalResolveInfoFromTarget(node);
      if (!ExternalResolver.isEmptyExtResolveInfo(extResolveInfo)) {
        element.setAttribute(EXT_RESOLVE_INFO,extResolveInfo);
      }
    }
 catch (    Exception e) {
      LOG.error("Failed to save extResolveInfo for node " + node.getDebugText(),e);
    }
  }
  Map<String,String> properties=node.getProperties();
  Set<String> keys=properties.keySet();
  for (Iterator<String> iterator=keys.iterator(); iterator.hasNext(); ) {
    String propertyName=iterator.next();
    Element propertyElement=new Element(PROPERTY);
    element.addContent(propertyElement);
    propertyElement.setAttribute(NAME,propertyName);
    setNotNullAttribute(propertyElement,VALUE,node.getProperty(propertyName));
  }
  List<SReference> references=node.getReferences();
  for (Iterator<SReference> iterator=references.iterator(); iterator.hasNext(); ) {
    SReference reference=iterator.next();
    Element linkElement=ReferencePersister.saveReference(element,reference,useUIDs);
  }
  SReference attributeReference=node.getAttributeReference();
  if (attributeReference != null) {
    Element attributeElement=new Element(ATTRIBUTE);
    element.addContent(attributeElement);
    Element linkElement=ReferencePersister.saveReference(attributeElement,attributeReference,useUIDs);
  }
  Map<String,SReference> propertyAttributes=node.getPropertyAttributes();
  for (  String propertyName : propertyAttributes.keySet()) {
    SReference propertyAttributeReference=propertyAttributes.get(propertyName);
    if (propertyAttributeReference == null)     continue;
    Element propertyAtributeElement=new Element(PROPERTY_ATTRIBUTE);
    element.addContent(propertyAtributeElement);
    propertyAtributeElement.setAttribute(NAME,propertyName);
    Element linkElement=ReferencePersister.saveReference(propertyAtributeElement,propertyAttributeReference,useUIDs);
  }
  Map<String,SReference> linkAttributes=node.getLinkAttributes();
  for (  String role : linkAttributes.keySet()) {
    SReference linkAttributeReference=linkAttributes.get(role);
    if (linkAttributeReference == null)     continue;
    Element linkAtributeElement=new Element(LINK_ATTRIBUTE);
    element.addContent(linkAtributeElement);
    linkAtributeElement.setAttribute(ROLE,role);
    Element linkElement=ReferencePersister.saveReference(linkAtributeElement,linkAttributeReference,useUIDs);
  }
  List<SNode> children=node.getChildren();
  for (  SNode childNode : children) {
    saveNode(element,childNode,useUIDs);
  }
  parentElement.addContent(element);
}
