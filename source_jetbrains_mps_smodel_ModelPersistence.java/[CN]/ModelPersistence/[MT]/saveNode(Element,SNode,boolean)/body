{
  Element element=new Element(NODE);
  setNotNullAttribute(element,ROLE,semanticNode.getRole_());
  element.setAttribute(TYPE,semanticNode.getClass().getName());
  element.setAttribute(ID,semanticNode.getId());
  if (semanticNode.getModel().isExternallyResolved()) {
    String extResolveInfo=ExternalResolver.getExternalResolveInfoFromTarget(semanticNode);
    if (!ExternalResolver.isEmptyExtResolveInfo(extResolveInfo)) {
      element.setAttribute(EXT_RESOLVE_INFO,extResolveInfo);
    }
  }
  Map<String,String> properties=semanticNode.getProperties();
  Set<String> keys=properties.keySet();
  for (Iterator<String> iterator=keys.iterator(); iterator.hasNext(); ) {
    String propertyName=iterator.next();
    Element propertyElement=new Element(PROPERTY);
    element.addContent(propertyElement);
    propertyElement.setAttribute(NAME,propertyName);
    setNotNullAttribute(propertyElement,VALUE,semanticNode.getProperty(propertyName));
  }
  List<SReference> references=semanticNode.getReferences();
  for (Iterator<SReference> iterator=references.iterator(); iterator.hasNext(); ) {
    SReference semanticReference=iterator.next();
    saveReference(element,semanticReference);
  }
  List<SNode> children=semanticNode.getChildren();
  for (  SNode childNode : children) {
    saveNode(element,childNode,saveResolveInfo);
  }
  parentElement.addContent(element);
}
