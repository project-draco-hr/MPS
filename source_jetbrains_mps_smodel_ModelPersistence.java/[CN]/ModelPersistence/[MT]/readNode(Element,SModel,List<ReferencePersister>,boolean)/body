{
  String oldStructureClassName=nodeElement.getAttributeValue(TYPE);
  String conceptName=NameUtil.shortNameFromLongName(oldStructureClassName);
  String languageNamespace=NameUtil.namespaceFromLongName(oldStructureClassName);
  String conceptFqName=languageNamespace + ".structure." + conceptName;
  SNode node=new SNode(model,conceptFqName);
  String myOldId=nodeElement.getAttributeValue(ID);
  node.setStringId(myOldId);
  String cachedExtResolveInfo=nodeElement.getAttributeValue(EXT_RESOLVE_INFO);
  if (!ExternalResolver.isEmptyExtResolveInfo(cachedExtResolveInfo)) {
    model.loadCachedNodeExtResolveInfo(node,cachedExtResolveInfo);
  }
  List properties=nodeElement.getChildren(PROPERTY);
  for (  Object property : properties) {
    Element propertyElement=(Element)property;
    String propertyName=propertyElement.getAttributeValue(NAME);
    String propertyValue=propertyElement.getAttributeValue(VALUE);
    if (propertyValue != null) {
      node.setProperty(propertyName,propertyValue);
    }
  }
  List links=nodeElement.getChildren(LINK);
  for (  Object link : links) {
    Element linkElement=(Element)link;
    referenceDescriptors.add(ReferencePersister.readReferencePersister(linkElement,node,useUIDs));
  }
  List childNodes=nodeElement.getChildren(NODE);
  for (  Object childNode1 : childNodes) {
    Element childNodeElement=(Element)childNode1;
    String role=childNodeElement.getAttributeValue(ROLE);
    SNode childNode=readNode(childNodeElement,model,referenceDescriptors,useUIDs);
    if (childNode != null) {
      node.addChild(role,childNode);
    }
 else {
      LOG.errorWithTrace("Error reading child node in node " + node.getDebugText());
    }
  }
  return node;
}
