{
  Element rootElement=document.getRootElement();
  String modelLongName=rootElement.getAttributeValue(NAME);
  if (modelLongName == null) {
    String modelNamespace=rootElement.getAttributeValue(NAMESPACE,"");
    modelLongName=NameUtil.longNameFromNamespaceAndShortName(modelNamespace,modelName);
  }
 else {
    String shortName=NameUtil.shortNameFromLongName(modelLongName);
    LOG.assertLog(shortName.equals(modelName));
  }
  SModel model=new SModel(new SModelUID(modelLongName,stereotype));
  model.setLoading(true);
  try {
    Element maxRefID=rootElement.getChild(MAX_REFERENCE_ID);
    model.setMaxReferenceID(readIntAttributeValue(maxRefID,VALUE));
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
  String extResolvedString=rootElement.getAttributeValue(IS_EXTERNALLY_RESOLVED);
  if (extResolvedString == null) {
    PersistExternalResolveUtil.loadExternallyResolvedDefaults(model);
  }
 else {
    boolean externallyResolved=Boolean.parseBoolean(extResolvedString);
    model.setExternallyResolved(externallyResolved);
  }
  List languages=rootElement.getChildren(LANGUAGE);
  for (Iterator iterator=languages.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    String languageNamespace=element.getAttributeValue(NAMESPACE);
    model.addLanguage(languageNamespace);
  }
  Map<Integer,SModelUID> importedUIDtoIndex=new HashMap<Integer,SModelUID>();
  List imports=rootElement.getChildren(IMPORT_ELEMENT);
  for (Iterator iterator=imports.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    int referenceID=readIntAttributeValue(element,MODEL_REFERENCE_ID);
    String modelUID=element.getAttributeValue(MODEL_UID);
    if (modelUID != null) {
      SModelUID importedModelUID=SModelUID.fromString(modelUID);
      model.addImportElement(importedModelUID,referenceID);
      importedUIDtoIndex.put(referenceID,importedModelUID);
    }
 else {
      String importedModelFQName=NameUtil.longNameFromNamespaceAndShortName(element.getAttributeValue(NAMESPACE),element.getAttributeValue(NAME));
      String importedModelStereotype=element.getAttributeValue(STEREOTYPE,"");
      SModelUID importedModelUID=new SModelUID(importedModelFQName,importedModelStereotype);
      model.addImportElement(importedModelUID,referenceID);
      importedUIDtoIndex.put(referenceID,importedModelUID);
    }
  }
  ArrayList<ReferenceDescriptor> referenceDescriptors=new ArrayList<ReferenceDescriptor>();
  List children=rootElement.getChildren(NODE);
  for (Iterator iterator=children.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    SNode semanticNode=readNode(element,model,referenceDescriptors);
    model.addRoot(semanticNode);
  }
  for (  ReferenceDescriptor referenceDescriptor : referenceDescriptors) {
    SModelUID importedModelUID=model.getUID();
    if (referenceDescriptor.importIndex > -1) {
      importedModelUID=importedUIDtoIndex.get(referenceDescriptor.importIndex);
      if (importedModelUID == null) {
        LOG.error("Couldn't create reference from " + referenceDescriptor.sourceNode.getDebugText() + " : import for index ["+ referenceDescriptor.importIndex+ "] not found");
        continue;
      }
    }
    SReference reference=SReference.newInstance(referenceDescriptor.role,referenceDescriptor.sourceNode,referenceDescriptor.targetId,referenceDescriptor.extResolveInfo,importedModelUID,referenceDescriptor.resolveInfo,referenceDescriptor.targetClassResolveInfo);
    if (reference != null)     referenceDescriptor.sourceNode.addSemanticReference(reference);
  }
  model.setLoading(false);
  return model;
}
