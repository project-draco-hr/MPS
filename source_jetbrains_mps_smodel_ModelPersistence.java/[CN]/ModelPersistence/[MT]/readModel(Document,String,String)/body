{
  Element rootElement=document.getRootElement();
  VisibleModelElements visibleModelElements=new VisibleModelElements(rootElement);
  String modelLongName=rootElement.getAttributeValue(NAME);
  if (modelLongName == null) {
    String modelNamespace=rootElement.getAttributeValue(NAMESPACE,"");
    modelLongName=NameUtil.longNameFromNamespaceAndShortName(modelNamespace,modelName);
  }
 else {
    String shortName=NameUtil.shortNameFromLongName(modelLongName);
  }
  SModelUID modelUID=new SModelUID(modelLongName,stereotype);
  SModel model=createModel(modelUID);
  model.setLoading(true);
  try {
    Element maxImportIndex=rootElement.getChild(MAX_IMPORT_INDEX);
    if (maxImportIndex == null)     maxImportIndex=rootElement.getChild("maxReferenceID");
    model.setMaxImportIndex(readIntAttributeValue(maxImportIndex,VALUE));
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
  List languages=rootElement.getChildren(LANGUAGE);
  for (  Object language : languages) {
    Element element=(Element)language;
    String languageNamespace=element.getAttributeValue(NAMESPACE);
    model.addLanguage(languageNamespace);
  }
  List languagesEOG=rootElement.getChildren(LANGUAGE_ENGAGED_ON_GENERATION);
  for (  Object languageEOG : languagesEOG) {
    Element element=(Element)languageEOG;
    String languageNamespace=element.getAttributeValue(NAMESPACE);
    model.addEngagedOnGenerationLanguage(languageNamespace);
  }
  List devkits=rootElement.getChildren(DEVKIT);
  for (  Object devkit : devkits) {
    Element element=(Element)devkit;
    String devkitNamespace=element.getAttributeValue(NAMESPACE);
    model.addDevKit(devkitNamespace);
  }
  List imports=rootElement.getChildren(IMPORT_ELEMENT);
  for (  Object anImport : imports) {
    Element element=(Element)anImport;
    String indexValue=element.getAttributeValue(MODEL_IMPORT_INDEX,element.getAttributeValue("referenceID"));
    int importIndex=Integer.parseInt(indexValue);
    String importedModelUIDString=element.getAttributeValue(MODEL_UID);
    if (importedModelUIDString == null) {
      String importedModelFQName=NameUtil.longNameFromNamespaceAndShortName(element.getAttributeValue(NAMESPACE),element.getAttributeValue(NAME));
      String importedModelStereotype=element.getAttributeValue(STEREOTYPE,"");
      importedModelUIDString=new SModelUID(importedModelFQName,importedModelStereotype).toString();
    }
    if (importedModelUIDString == null) {
      LOG.error("Error loading import element for index " + importIndex + " in "+ model.getUID());
      continue;
    }
    if (importIndex > model.getMaxImportIndex()) {
      LOG.warning("Import element " + importIndex + ":"+ importedModelUIDString+ " greater then max import index ("+ model.getMaxImportIndex()+ ") in "+ model.getUID());
      model.setMaxImportIndex(importIndex);
    }
    SModelUID importedModelUID=SModelUID.fromString(importedModelUIDString);
    model.addImportElement(importedModelUID,importIndex);
  }
  ArrayList<ReferencePersister> referenceDescriptors=new ArrayList<ReferencePersister>();
  List children=rootElement.getChildren(NODE);
  for (  Object child : children) {
    Element element=(Element)child;
    SNode snode=readNode(element,model,referenceDescriptors,false);
    if (snode != null) {
      model.addRoot(snode);
    }
  }
  for (  ReferencePersister referencePersister : referenceDescriptors) {
    referencePersister.createReferenceInModel(model,visibleModelElements);
  }
  model.setLoading(false);
  return model;
}
