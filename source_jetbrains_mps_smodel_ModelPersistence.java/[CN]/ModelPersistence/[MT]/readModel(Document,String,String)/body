{
  Element rootElement=document.getRootElement();
  String modelNamespace=rootElement.getAttributeValue(NAMESPACE,"");
  String modelFqName=NameUtil.fqNameFromNamespaceAndName(modelNamespace,modelName);
  SModel model=new SModel(modelFqName);
  model.setStereotype(stereotype);
  model.setLoading(true);
  try {
    Element maxRefID=rootElement.getChild(MAX_REFERENCE_ID);
    model.setMaxReferenceID(readIntAttributeValue(maxRefID,VALUE));
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
  List languages=rootElement.getChildren(LANGUAGE);
  for (Iterator iterator=languages.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    String languageNamespace=element.getAttributeValue(NAMESPACE);
    model.addLanguage(languageNamespace);
  }
  List imports=rootElement.getChildren(IMPORT_ELEMENT);
  for (Iterator iterator=imports.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    String importedModelFQName=NameUtil.fqNameFromNamespaceAndName(element.getAttributeValue(NAMESPACE),element.getAttributeValue(NAME));
    int referenceID=readIntAttributeValue(element,MODEL_REFERENCE_ID);
    String importedModelStereotype=element.getAttributeValue(STEREOTYPE,"");
    model.addImportElement(new SModelRepository.SModelKey(importedModelFQName,importedModelStereotype),referenceID);
  }
  ArrayList<ReferenceDescriptor> referenceDescriptors=new ArrayList<ReferenceDescriptor>();
  List children=rootElement.getChildren(NODE);
  for (Iterator iterator=children.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    SNode semanticNode=readNode(element,model,referenceDescriptors);
    model.addRoot(semanticNode);
  }
  for (  ReferenceDescriptor referenceDescriptor : referenceDescriptors) {
    SReference semanticReference=null;
    semanticReference=SReference.newInstance(referenceDescriptor.role,referenceDescriptor.sourceNode,referenceDescriptor.targetId,referenceDescriptor.isBad,referenceDescriptor.resolveInfo,referenceDescriptor.targetClassResolveInfo);
    if (semanticReference != null)     referenceDescriptor.sourceNode.addSemanticReference(semanticReference);
  }
  model.setLoading(false);
  return model;
}
