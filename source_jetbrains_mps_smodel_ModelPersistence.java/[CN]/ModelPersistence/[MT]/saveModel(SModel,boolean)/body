{
  Element rootElement=new Element(MODEL);
  VisibleModelElements visibleModelElements=new VisibleModelElements(rootElement);
  rootElement.setAttribute(NAME,sourceModel.getLongName());
  Document document=new Document();
  document.setRootElement(rootElement);
  if (validate) {
    sourceModel.validateLanguagesAndImports();
  }
  for (  String languageNamespace : sourceModel.getExplicitlyImportedLanguages()) {
    Element languageElem=new Element(LANGUAGE);
    languageElem.setAttribute(NAMESPACE,languageNamespace);
    int version=-1;
    Language modelLanguage=MPSModuleRepository.getInstance().getLanguage(languageNamespace);
    if (modelLanguage != null) {
      version=modelLanguage.getVersion();
    }
    if (version > -1) {
      languageElem.setAttribute(VERSION,version + "");
    }
    rootElement.addContent(languageElem);
  }
  for (  String languageNamespace : sourceModel.getEngagedOnGenerationLanguages()) {
    Element languageElem=new Element(LANGUAGE_ENGAGED_ON_GENERATION);
    languageElem.setAttribute(NAMESPACE,languageNamespace);
    rootElement.addContent(languageElem);
  }
  for (  String devkitNamespace : sourceModel.getDevKitNamespaces()) {
    Element devkitElem=new Element(DEVKIT);
    devkitElem.setAttribute(NAMESPACE,devkitNamespace);
    rootElement.addContent(devkitElem);
  }
  Element maxRefID=new Element(MAX_IMPORT_INDEX);
  maxRefID.setAttribute(VALUE,"" + sourceModel.getMaxImportIndex());
  rootElement.addContent(maxRefID);
  Iterator<SModel.ImportElement> imports=sourceModel.importElements();
  while (imports.hasNext()) {
    SModel.ImportElement importElement=imports.next();
    Element importElem=new Element(IMPORT_ELEMENT);
    importElem.setAttribute(MODEL_IMPORT_INDEX,"" + importElement.getReferenceID());
    SModelUID modelUID=importElement.getModelUID();
    importElem.setAttribute(MODEL_UID,modelUID.toString());
    importElem.setAttribute(VERSION,"" + importElement.getUsedVersion());
    int version=-1;
    SModelDescriptor importedModelDescriptor=SModelRepository.getInstance().getModelDescriptor(modelUID);
    if (importedModelDescriptor != null) {
      version=importedModelDescriptor.getVersion();
    }
    if (version > -1) {
      importElem.setAttribute(VERSION,version + "");
    }
    rootElement.addContent(importElem);
  }
  Iterator<SNode> iterator=sourceModel.roots();
  while (iterator.hasNext()) {
    SNode semanticNode=iterator.next();
    saveNode(rootElement,semanticNode,visibleModelElements);
  }
  return document;
}
