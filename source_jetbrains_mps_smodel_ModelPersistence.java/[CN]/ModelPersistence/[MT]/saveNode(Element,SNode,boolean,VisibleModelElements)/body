{
  Element element=new Element(NODE);
  setNotNullAttribute(element,ROLE,node.getRole_());
  String type=node.getTypeFqName();
  element.setAttribute(TYPE,type);
  element.setAttribute(ID,node.getId());
  if (node.getModel().isExternallyResolvable()) {
    try {
      String extResolveInfo=ExternalResolver.getExternalResolveInfoFromTarget(node);
      if (!ExternalResolver.isEmptyExtResolveInfo(extResolveInfo)) {
        element.setAttribute(EXT_RESOLVE_INFO,extResolveInfo);
      }
    }
 catch (    Exception e) {
      LOG.error("Failed to save extResolveInfo for node " + node.getDebugText(),e);
    }
  }
  Map<String,String> properties=node.getProperties();
  Set<String> keys=properties.keySet();
  for (  String propertyName : keys) {
    if (node instanceof ErrorNode && propertyName.equals(ErrorNode.TYPE)) {
      continue;
    }
    Element propertyElement=new Element(PROPERTY);
    element.addContent(propertyElement);
    propertyElement.setAttribute(NAME,propertyName);
    setNotNullAttribute(propertyElement,VALUE,node.getPersistentProperty(propertyName));
  }
  List<SReference> references=node.getReferences();
  for (  SReference reference : references) {
    ReferencePersister.saveReference(element,reference,useUIDs,visibleModelElements);
  }
  List<SNode> children=node.getChildren();
  for (  SNode childNode : children) {
    saveNode(element,childNode,useUIDs,visibleModelElements);
  }
  parentElement.addContent(element);
}
