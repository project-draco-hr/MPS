{
  Element rootElement=new Element(MODEL);
  rootElement.setAttribute(NAME,sourceModel.getLongName());
  Document document=new Document();
  document.setRootElement(rootElement);
  sourceModel.validateLanguagesAndImports();
  for (  String languageNamespace : sourceModel.getUserDefinedLanguageNamespaces()) {
    Element languageElem=new Element(LANGUAGE);
    languageElem.setAttribute(NAMESPACE,languageNamespace);
    rootElement.addContent(languageElem);
  }
  Element maxRefID=new Element(MAX_IMPORT_INDEX);
  maxRefID.setAttribute(VALUE,"" + sourceModel.getMaxImportIndex());
  rootElement.addContent(maxRefID);
  Iterator<SModel.ImportElement> imports=sourceModel.importElements();
  while (imports.hasNext()) {
    SModel.ImportElement importElement=imports.next();
    Element importElem=new Element(IMPORT_ELEMENT);
    importElem.setAttribute(MODEL_IMPORT_INDEX,"" + importElement.getReferenceID());
    SModelUID modelUID=importElement.getModelUID();
    importElem.setAttribute(MODEL_UID,modelUID.toString());
    rootElement.addContent(importElem);
  }
  if (sourceModel.usesLog()) {
    rootElement.setAttribute(VERSION,sourceModel.getVersion() + "");
    SNode log=sourceModel.getLog();
    if (log != null) {
      Element logElement=new Element(REFACTORING_LOG);
      saveNode(logElement,log);
    }
  }
  Iterator<SNode> iterator=sourceModel.roots();
  while (iterator.hasNext()) {
    SNode semanticNode=iterator.next();
    saveNode(rootElement,semanticNode);
  }
  return document;
}
