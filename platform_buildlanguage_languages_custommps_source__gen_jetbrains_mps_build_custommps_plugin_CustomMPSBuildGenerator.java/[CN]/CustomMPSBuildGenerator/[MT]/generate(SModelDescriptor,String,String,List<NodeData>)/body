{
  final SNode mpsLayout=this.createMPSLayout(targetModelDescriptor,name,basedir,selectedData);
  SNode zipNode=SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(mpsLayout,"component",true)).first(),"jetbrains.mps.build.packaging.structure.Zip");
  SNode rootFolder=SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(zipNode,"entry",true)).first(),"jetbrains.mps.build.packaging.structure.Folder");
  List<SNode> entries=SLinkOperations.getTargets(rootFolder,"entry",true);
  SNode mpsBuild=SConceptOperations.createNewNode("jetbrains.mps.build.custommps.structure.MPSBuild",null);
  SLinkOperations.addChild(mpsLayout,"component",mpsBuild);
  SNode libraryFolder=createLibraryFolder(rootFolder);
  for (  SNode entry : ListSequence.fromList(entries)) {
    if (SNodeOperations.isInstanceOf(entry,"jetbrains.mps.build.packaging.structure.Module")) {
      SLinkOperations.addChild(libraryFolder,"entry",entry);
    }
 else     if (SNodeOperations.isInstanceOf(entry,"jetbrains.mps.build.packaging.structure.Folder")) {
      SNode oldFolder=SNodeOperations.cast(entry,"jetbrains.mps.build.packaging.structure.Folder");
      SNode newFolder=createLibraryFolder(oldFolder);
      SLinkOperations.addAll(newFolder,"entry",SLinkOperations.getTargets(oldFolder,"entry",true));
      SLinkOperations.addChild(mpsBuild,"entry",newFolder);
    }
  }
  if (ListSequence.fromList(SLinkOperations.getTargets(libraryFolder,"entry",true)).isNotEmpty()) {
    SLinkOperations.addChild(mpsBuild,"entry",libraryFolder);
  }
  SNodeOperations.deleteNode(zipNode);
  SNode buildToolsPath=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Path",null);
  String result=Macros.mpsHomeMacros().shrinkPath(this.myPathToBuildTools,new File("")).replace("\\",File.separator);
  int index=result.lastIndexOf("}");
  if (index > -1) {
    String macro=result.substring(result.indexOf("{") + 1,index);
    PackagingLanguageGenerator.createPath(buildToolsPath,macro,result.substring(index + 2));
  }
 else {
    PackagingLanguageGenerator.createPath(buildToolsPath,"",this.myPathToBuildTools);
  }
  SLinkOperations.setTarget(mpsBuild,"pathToBuildToolsZip",buildToolsPath,true);
  SPropertyOperations.set(mpsLayout,"scriptsFolder","build");
  return new Runnable(){
    public void run(){
      CustomMPSBuildGenerator.this.finishGeneration(targetModelDescriptor,mpsLayout);
    }
  }
;
}
