{
  final Map<ITarget.Name,Long> timeStatistic=MapSequence.fromMap(new HashMap<ITarget.Name,Long>());
  results.addResult(TIME_STATISTIC_RESULT_NAME,new IResult.SUCCESS(Sequence.<IResource>singleton(new TimeStatisticResource(timeStatistic))));
  ctl.runJobWithMonitor(new _FunctionTypes._void_P1_E0<IJobMonitor>(){
    public void invoke(    final IJobMonitor monit){
      monitor.start("",Sequence.fromIterable(toExecute).foldLeft(0,new ILeftCombinator<ITarget,Integer>(){
        public Integer combine(        Integer s,        ITarget it){
          return s + workEstimate(it);
        }
      }
));
      try {
        with_targets:         for (        final ITarget trg : Sequence.fromIterable(toExecute)) {
          LOG.debug("Executing " + trg.getName());
          try {
            Iterable<ITarget> impre=targetRange.immediatePrecursors(trg.getName());
            Iterable<IResource> preInput=Sequence.fromIterable(impre).select(new ISelector<ITarget,IResult>(){
              public IResult select(              ITarget t){
                return results.getResult(t.getName());
              }
            }
).translate(new ITranslator2<IResult,IResource>(){
              public Iterable<IResource> translate(              IResult r){
                return r.output();
              }
            }
);
            Iterable<? extends IResource> allinput=(Sequence.fromIterable(impre).isEmpty() ? scriptInput : preInput);
            Iterable<IResource> rawInput=Sequence.fromIterable(allinput).distinct().ofType(IResource.class).toListSequence();
            LOG.debug("Raw input: " + rawInput);
            Iterable<IResource> input=(Iterable<IResource>)Sequence.fromIterable(rawInput).where(new IWhereFilter<IResource>(){
              public boolean accept(              final IResource res){
                return Sequence.fromIterable(trg.expectedInput()).any(new IWhereFilter<Class<? extends IResource>>(){
                  public boolean accept(                  Class<? extends IResource> ifc){
                    return ifc.isInstance(res);
                  }
                }
);
              }
            }
).toListSequence();
            LOG.debug("Input: " + input);
            if (trg.requiresInput()) {
              if (Sequence.fromIterable(input).isEmpty()) {
                if (trg instanceof ITargetEx && ((ITargetEx)trg).isOptional()) {
                  LOG.info("No input. Skipping optional target.");
                  results.addResult(trg.getName(),new IResult.SUCCESS(null));
                  continue with_targets;
                }
 else {
                  LOG.debug("No input. Stopping");
                  monit.reportFeedback(new IFeedback.ERROR("Error executing target " + trg.getName() + " : no input. Stopping"));
                  results.addResult(trg.getName(),new IResult.FAILURE(null));
                  return;
                }
              }
            }
            ProgressMonitor subMonitor=monitor.subTask(workEstimate(trg));
            ctl.useMonitor(subMonitor);
            IJob job=trg.createJob();
            long startTime=System.currentTimeMillis();
            IResult jr;
            try {
              jr=job.execute(Sequence.fromIterable(input).where(new IWhereFilter<IResource>(){
                public boolean accept(                IResource it){
                  return !(monit.stopRequested());
                }
              }
),monit,new Script.PropertiesAccessor(pool),subMonitor);
            }
  finally {
              MapSequence.fromMap(timeStatistic).put(trg.getName(),((MapSequence.fromMap(timeStatistic).containsKey(trg.getName()) ? MapSequence.fromMap(timeStatistic).get(trg.getName()) : 0)) + (System.currentTimeMillis() - startTime));
            }
            if (!(trg.producesOutput())) {
              jr=new Script.SubsOutputResult(jr,(trg.requiresInput() ? Sequence.fromIterable(rawInput).subtract(Sequence.fromIterable(input)) : rawInput));
            }
            results.addResult(trg.getName(),jr);
            if (!(jr.isSucessful()) || monit.stopRequested()) {
              monit.reportFeedback((jr.isSucessful() ? new IFeedback.INFORMATION("Cancelled by user") : new IFeedback.ERROR("Error executing target " + trg.getName())));
              LOG.debug((jr.isSucessful() ? "Stop requested" : "Execution failed"));
              return;
            }
            ctl.useMonitor(null);
            monitor.advance(0);
          }
 catch (          TimeOutRuntimeException to) {
            LOG.debug("Timeout executing target " + trg.getName(),to);
            monit.reportFeedback(new IFeedback.ERROR("Target execution aborted " + trg.getName(),to));
            results.addResult(trg.getName(),new IResult.FAILURE(null));
            return;
          }
catch (          RuntimeException rex) {
            LOG.debug("Exception executing target " + trg.getName(),rex);
            monit.reportFeedback(new IFeedback.ERROR("Exception executing target " + trg.getName(),rex));
            results.addResult(trg.getName(),new IResult.FAILURE(null));
            return;
          }
catch (          Throwable th) {
            String msg=String.format("Exception %s while executing target %s",th.getClass().getName(),trg.getName());
            LOG.error(msg,th);
            monit.reportFeedback(new IFeedback.ERROR(msg));
            results.addResult(trg.getName(),new IResult.FAILURE(null));
            return;
          }
        }
      }
  finally {
        monitor.done();
      }
    }
  }
);
}
