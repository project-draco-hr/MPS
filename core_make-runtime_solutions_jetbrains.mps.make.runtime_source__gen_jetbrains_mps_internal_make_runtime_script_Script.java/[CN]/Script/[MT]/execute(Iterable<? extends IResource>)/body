{
  validate();
  if (!(isValid())) {
    LOG.error("attempt to execute invalid script");
    throw new IllegalStateException("invalid script");
  }
  LOG.debug("Beginning to execute script");
  final CompositeResult results=new CompositeResult();
  final Script.ParametersPool pool=new Script.ParametersPool();
  LOG.debug("Initializing");
  init(pool);
  IMonitors mons=monitors();
  final Iterable<ITarget> toExecute=targetRange.targetAndSortedPrecursors(defaultTargetName);
  mons.runConfigWithMonitor(new _FunctionTypes._void_P1_E0<IConfigMonitor>(){
    public void invoke(    IConfigMonitor cmon){
      for (      ITarget trg : Sequence.fromIterable(toExecute)) {
        LOG.debug("Configuring " + trg.getName());
        IConfig cfg=trg.createConfig();
        if (cfg != null && !(cfg.configure(cmon,pool))) {
          LOG.debug("Configuration failed");
          results.addResult(trg.getName(),new IResult.FAILURE(null));
          return;
        }
      }
    }
  }
);
  if (!(results.isSucessful())) {
    return results;
  }
  mons.runJobWithMonitor(new _FunctionTypes._void_P1_E0<IJobMonitor>(){
    public void invoke(    final IJobMonitor monit){
      String scriptName="Script";
      int work=Sequence.fromIterable(toExecute).foldLeft(0,new ILeftCombinator<ITarget,Integer>(){
        public Integer combine(        Integer s,        ITarget it){
          return s + ((it.requiresInput() || it.producesOutput() ? 1000 : 10));
        }
      }
);
      monit.currentProgress().beginWork(scriptName,work,monit.currentProgress().workLeft());
      for (      final ITarget trg : Sequence.fromIterable(toExecute)) {
        LOG.debug("Executing " + trg.getName());
        Iterable<ITarget> impre=targetRange.immediatePrecursors(trg.getName());
        Iterable<IResource> preInput=Sequence.fromIterable(impre).<IResult>select(new ISelector<ITarget,IResult>(){
          public IResult select(          ITarget t){
            return results.getResult(t.getName());
          }
        }
).<IResource>translate(new ITranslator2<IResult,IResource>(){
          public Iterable<IResource> translate(          IResult r){
            return r.output();
          }
        }
);
        Iterable<IResource> rawInput=(Iterable<IResource>)Sequence.fromIterable(((Sequence.fromIterable(impre).isEmpty() ? scriptInput : preInput))).distinct().toListSequence();
        LOG.debug("Raw input: " + rawInput);
        Iterable<IResource> input=(Iterable<IResource>)Sequence.fromIterable(rawInput).where(new IWhereFilter<IResource>(){
          public boolean accept(          final IResource res){
            return Sequence.fromIterable(trg.expectedInput()).any(new IWhereFilter<Class<? extends IResource>>(){
              public boolean accept(              Class<? extends IResource> ifc){
                return ifc.isInstance(res);
              }
            }
);
          }
        }
).toListSequence();
        LOG.debug("Input: " + input);
        if (trg.requiresInput()) {
          if (Sequence.fromIterable(input).isEmpty()) {
            LOG.debug("No input. Stopping");
            results.addResult(trg.getName(),new IResult.FAILURE(null));
            return;
          }
        }
        monit.currentProgress().beginWork(trg.getName().toString(),1000,(trg.requiresInput() || trg.producesOutput() ? 1000 : 10));
        IJob job=trg.createJob();
        IResult jr=job.execute(Sequence.fromIterable(input).where(new IWhereFilter<IResource>(){
          public boolean accept(          IResource it){
            return !(monit.stopRequested());
          }
        }
),monit,pool);
        if (!(trg.producesOutput())) {
          jr=new Script.SubsOutputResult(jr,(trg.requiresInput() ? Sequence.fromIterable(rawInput).subtract(Sequence.fromIterable(input)) : rawInput));
        }
        results.addResult(trg.getName(),jr);
        if (!(jr.isSucessful()) || monit.stopRequested()) {
          LOG.debug((jr.isSucessful() ? "Stop requested" : "Execution failed"));
          return;
        }
        monit.currentProgress().finishWork(trg.getName().toString());
      }
      monit.currentProgress().finishWork(scriptName);
    }
  }
);
  LOG.debug("Finished executing script");
  return results;
}
