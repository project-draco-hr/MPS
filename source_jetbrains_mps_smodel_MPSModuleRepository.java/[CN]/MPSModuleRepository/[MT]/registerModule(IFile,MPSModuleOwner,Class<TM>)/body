{
  myDirtyFlag=true;
  String canonicalPath=file.getCanonicalPath();
  IModule module=myFileToModuleMap.get(canonicalPath);
  if (module == null) {
    if (cls == Language.class) {
      module=Language.newInstance(file,owner);
    }
 else     if (cls == Solution.class) {
      module=Solution.newInstance(file,owner);
    }
 else {
      module=DevKit.newInstance(file,owner);
    }
  }
 else {
    if (!cls.isInstance(module)) {
      LOG.error("can't register module " + module + " : module of another kind with the same name already exists",module);
    }
    Set<MPSModuleOwner> owners=myModuleToOwnersMap.get(module);
    if (owners == null) {
      owners=new HashSet<MPSModuleOwner>();
      myModuleToOwnersMap.put(module,owners);
      if (owner == module) {
        LOG.warning("module " + module + " wants to owe itself: will be collected very quickly",module);
      }
    }
    if (owner != module)     owners.add(owner);
  }
  fireRepositoryChanged();
  return (TM)module;
}
