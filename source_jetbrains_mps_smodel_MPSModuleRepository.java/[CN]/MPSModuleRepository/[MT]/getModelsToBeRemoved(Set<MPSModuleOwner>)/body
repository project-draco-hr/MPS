{
  Set<MPSModuleOwner> rootOwners=new HashSet<MPSModuleOwner>();
  for (  IModule m : myModuleToOwnersMap.keySet()) {
    for (    MPSModuleOwner owner : myModuleToOwnersMap.get(m)) {
      if (!(owner instanceof IModule)) {
        rootOwners.add(owner);
      }
    }
  }
  rootOwners.removeAll(willBeReleased);
  Set<IModule> visibleModules=new HashSet<IModule>();
  for (  IModule m : myModuleToOwnersMap.keySet()) {
    for (    MPSModuleOwner r : rootOwners) {
      if (myModuleToOwnersMap.get(m).contains(r)) {
        visibleModules.add(m);
      }
    }
  }
  boolean hasModulesToProcess=true;
  while (hasModulesToProcess) {
    Set<IModule> toAdd=new HashSet<IModule>();
    for (    IModule m : myModuleToOwnersMap.keySet()) {
      if (visibleModules.contains(m))       continue;
      for (      IModule v : visibleModules) {
        if (myModuleToOwnersMap.get(m).contains(v)) {
          toAdd.add(m);
        }
      }
    }
    hasModulesToProcess=!toAdd.isEmpty();
    visibleModules.addAll(toAdd);
  }
  Set<IModule> toBeRemoved=new HashSet<IModule>(myModuleToOwnersMap.keySet());
  toBeRemoved.removeAll(visibleModules);
  return toBeRemoved;
}
