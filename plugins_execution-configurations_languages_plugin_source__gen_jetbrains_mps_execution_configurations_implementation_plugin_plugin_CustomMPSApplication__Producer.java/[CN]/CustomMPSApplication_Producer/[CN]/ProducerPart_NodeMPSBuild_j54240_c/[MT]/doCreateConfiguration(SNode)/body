{
  setSourceElement(new MPSPsiElement(source));
  final Wrappers._T<SNode> layout=new Wrappers._T<SNode>();
  final Wrappers._boolean isApplicable=new Wrappers._boolean();
  final Wrappers._T<String> configurationId=new Wrappers._T<String>();
  final Wrappers._T<SNode> configuration=new Wrappers._T<SNode>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      layout.value=SNodeOperations.getAncestor(source,"jetbrains.mps.build.packaging.structure.Layout",false,true);
      isApplicable.value=(layout.value != null);
      configuration.value=ListSequence.fromList(SLinkOperations.getTargets(layout.value,"configuration",true)).findFirst(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ((Boolean)BehaviorManager.getInstance().invoke(Boolean.class,source,"call_included_1213877333807",new Class[]{SNode.class,SNode.class},it));
        }
      }
);
      configurationId.value=configuration.value.getId();
    }
  }
);
  if (!(isApplicable.value)) {
    return null;
  }
  CustomMPSApplication_Configuration runConfiguration=new CustomMPSApplication_Configuration(getContext().getProject(),(CustomMPSApplication_Configuration_Factory)getConfigurationFactory(),SPropertyOperations.getString(layout.value,"name") + ".mpsbuild." + SPropertyOperations.getString(configuration.value,"name"));
  runConfiguration.getNode().setNode(source);
  runConfiguration.setConfigurationId(configurationId.value);
  return runConfiguration;
}
