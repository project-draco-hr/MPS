{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final ApplicableTypesInfo appTypesInfo;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(_context.getParentNode(),"operand",true);
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        SNode linkAccessT=TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure._LinkAccessT"),false);
        result.myLinkAccessT=linkAccessT;
        if ((linkAccessT != null) && SPropertyOperations.getBoolean(linkAccessT,"singularCradinality")) {
          if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),true) != null) {
            result.myLinkToConcept=true;
          }
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),false) != null) {
          result.myToConcept=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"),false) != null) {
          result.myToNode=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType"),false) != null) {
          result.myToModel=true;
        }
        return result;
      }
    }
;
    appTypesInfo=(ApplicableTypesInfo)calc.calculate();
  }
  return result;
}
