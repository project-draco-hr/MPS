{
  final SNode leftExpressionType;
  final Boolean leftIsModel;
  final Boolean leftIsNode;
  final Boolean leftIsConcept;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getParentNode(),"leftExpression",true));
      }
    }
;
    leftExpressionType=(SNode)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType"),false) != null;
      }
    }
;
    leftIsModel=(Boolean)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"),false) != null;
      }
    }
;
    leftIsNode=(Boolean)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),false) != null;
      }
    }
;
    leftIsConcept=(Boolean)calc.calculate();
  }
  Iterator<INodeSubstituteAction> actions=_context.getActions();
  while (actions.hasNext()) {
    INodeSubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        if (!(SConceptOperations.isSubConceptOf(concept,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperation"))) {
          return false;
        }
        SNode parameterOp=(SNode)concept;
        SNode leftExpression=SLinkOperations.getTarget(_context.getParentNode(),"leftExpression",true);
        if (SNodeOperations.isInstanceOf(leftExpression,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression")) {
          SNode nodeOperation=SLinkOperations.getTarget(leftExpression,"nodeOperation",true);
          if (SNodeOperations.isInstanceOf(nodeOperation,"jetbrains.mps.bootstrap.smodelLanguage.structure.SPropertyAccess")) {
            SNode dataType=SLinkOperations.getTarget(SLinkOperations.getTarget(nodeOperation,"property",false),"dataType",false);
            if (SNodeOperations.isInstanceOf(dataType,"jetbrains.mps.bootstrap.structureLanguage.structure.EnumerationDataTypeDeclaration")) {
              return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_enum_property"));
            }
 else {
              return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_simple_property"));
            }
          }
          if (SNodeOperations.isInstanceOf(nodeOperation,"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess")) {
            return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_concept_property"));
          }
          if (SNodeOperations.isInstanceOf(nodeOperation,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess")) {
            return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_link"));
          }
          if (SNodeOperations.isInstanceOf(nodeOperation,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess")) {
            return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_linkList"));
          }
        }
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),false) != null) {
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_concept"));
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"),false) != null) {
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_node"));
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType"),false) != null) {
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicable_to_model"));
        }
        return true;
      }
    }
;
    if (SConceptOperations.isAssignableFrom(applicableConcept,concept) && cond.met(null)) {
      actions.remove();
    }
  }
}
