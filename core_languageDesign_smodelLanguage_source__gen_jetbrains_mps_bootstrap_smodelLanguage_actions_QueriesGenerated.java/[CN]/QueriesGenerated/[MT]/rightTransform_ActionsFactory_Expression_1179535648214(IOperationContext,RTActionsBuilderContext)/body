{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SemanticDowncastExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode newNode=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.bootstrap.smodelLanguage.structure.SemanticDowncastExpression");
        SLinkOperations.setTarget(newNode,"leftExpression",_context.getSourceNode(),true);
        return newNode;
      }
      public String getMatchingText(      String pattern){
        return "/";
      }
      public String getDescriptionText(      String pattern){
        return "downcast to lower semantic level";
      }
    }
);
  }
  return result;
}
