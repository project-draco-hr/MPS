{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSourceArchiveRelativePath"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode archiveRelativePath=SNodeFactoryOperations.createNewNode("jetbrains.mps.build.structure.BuildSourceArchiveRelativePath",null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),archiveRelativePath);
      SLinkOperations.setTarget(archiveRelativePath,"archivePath",_context.getSourceNode(),true);
      SNodeFactoryOperations.setNewChild(archiveRelativePath,"compositePart","jetbrains.mps.build.structure.BuildCompositePath");
      return archiveRelativePath;
    }
    public String getMatchingText(    String pattern){
      return "!/";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
