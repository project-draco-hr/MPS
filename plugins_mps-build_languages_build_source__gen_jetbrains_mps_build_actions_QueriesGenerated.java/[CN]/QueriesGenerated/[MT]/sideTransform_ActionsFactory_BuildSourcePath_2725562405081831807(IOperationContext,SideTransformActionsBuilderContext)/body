{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSourceArchiveRelativePath");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode archiveRelativePath=SNodeFactoryOperations.createNewNode("jetbrains.mps.build.structure.BuildSourceArchiveRelativePath",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),archiveRelativePath);
        SLinkOperations.setTarget(archiveRelativePath,"archivePath",_context.getSourceNode(),true);
        SNodeFactoryOperations.setNewChild(archiveRelativePath,"compositePart","jetbrains.mps.build.structure.BuildCompositePath");
        return archiveRelativePath;
      }
      public String getMatchingText(      String pattern){
        return "!/";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
