{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSource_JavaLibraryCP");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      SNode wrappedConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSource_JavaCP");
      IChildNodeSetter setter=new AbstractChildNodeSetter(){
        private SNode wrapNode(        SNode nodeToWrap,        SModel model,        @Nullable EditorContext editorContext){
          SNode n=SModelOperations.createNewNode(model,null,"jetbrains.mps.build.structure.BuildSource_JavaLibraryCP");
          SLinkOperations.setTarget(n,"classpath",nodeToWrap,true);
          return n;
        }
        public boolean returnSmallPart(        SNode nodeToWrap){
          return false;
        }
        @Override public SNode doExecute(        SNode pn,        SNode oc,        SNode nc,        IScope sc,        @Nullable EditorContext editorContext){
          SNode wrappedNode=this.wrapNode(nc,nc.getModel(),editorContext);
          _context.getChildSetter().execute(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedNode,operationContext.getScope(),editorContext);
          if (this.returnSmallPart(nc)) {
            return nc;
          }
 else {
            return wrappedNode;
          }
        }
      }
;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(),_context.getCurrentTargetNode(),wrappedConcept,setter,operationContext)));
    }
  }
  return result;
}
