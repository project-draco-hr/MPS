{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildLayout_JarManifest_Section");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode section=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.build.structure.BuildLayout_JarManifest_Section",null);
          SNodeFactoryOperations.setNewChild(section,MetaAdapterFactory.getContainmentLink(new UUID(8755280088213897754l,-5075149991798053422l),1251221292904119675l,6837653846148302680l,"name"),"jetbrains.mps.build.structure.BuildStringNotEmpty");
          return section;
        }
        public String getDescriptionText(        String pattern){
          return "manifest section";
        }
        public String getMatchingText(        String pattern){
          return "section";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
