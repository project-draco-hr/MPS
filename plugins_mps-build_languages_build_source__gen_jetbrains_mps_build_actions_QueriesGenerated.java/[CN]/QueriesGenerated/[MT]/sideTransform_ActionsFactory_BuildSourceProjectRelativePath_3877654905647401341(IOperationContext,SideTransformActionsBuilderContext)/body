{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildSourceProjectRelativePath");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"compositePart","jetbrains.mps.build.structure.BuildCompositePath");
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "/";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
