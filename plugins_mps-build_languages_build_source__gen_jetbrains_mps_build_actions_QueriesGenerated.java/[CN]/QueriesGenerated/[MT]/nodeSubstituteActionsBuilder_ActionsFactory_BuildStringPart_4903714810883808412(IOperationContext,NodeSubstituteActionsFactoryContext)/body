{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildVarRefStringPart");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          Scope scope=Scope.getScope(((_context.getCurrentTargetNode() != null) ? _context.getCurrentTargetNode() : _context.getParentNode()),null,SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildMacro"));
          if (scope == null) {
            return null;
          }
          return Sequence.fromIterable(scope.getAvailableElements(null)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildVariableMacro");
            }
          }
).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildVariableMacro");
            }
          }
).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode res=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.build.structure.BuildVarRefStringPart",null);
              SLinkOperations.setTarget(res,"macro",(item),false);
              return res;
            }
            public String getMatchingText(            String pattern){
              return "$" + SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return this.getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.structure.BuildTextStringPart");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode buildText=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.build.structure.BuildTextStringPart",null);
          SPropertyOperations.set(buildText,"text",pattern);
          return buildText;
        }
        public String getMatchingText(        String pattern){
          if ((pattern == null || pattern.length() == 0)) {
            return "text";
          }
{
            Pattern _pattern_0=REGEXP_x583g4_a0a0b0b0a0a0a0c0a0c0ab;
            Matcher _matcher_0=_pattern_0.matcher(pattern);
            if (_matcher_0.find()) {
              SNode container=(SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.build.structure.BuildString") ? SNodeOperations.getParent(_context.getParentNode()) : _context.getParentNode());
              if (SNodeOperations.isInstanceOf(container,"jetbrains.mps.build.structure.BuildStringContainer")) {
                if (BehaviorReflection.invokeVirtual(Boolean.TYPE,SNodeOperations.cast(container,"jetbrains.mps.build.structure.BuildStringContainer"),"virtual_isValidPart_9184644532456897464",new Object[]{pattern,(SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.build.structure.BuildString") ? _context.getParentNode().getRoleInParent() : _context.getCurrentTargetNode().getRoleInParent())})) {
                  return pattern;
                }
              }
 else               if (!(pattern.contains("$"))) {
                return pattern;
              }
              return "text";
            }
          }
          return null;
        }
        public String getVisibleMatchingText(        String pattern){
          return this.getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
