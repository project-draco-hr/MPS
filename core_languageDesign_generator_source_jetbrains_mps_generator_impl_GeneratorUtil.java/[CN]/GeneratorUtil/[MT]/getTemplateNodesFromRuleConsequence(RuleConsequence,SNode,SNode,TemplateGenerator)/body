{
  if (ruleConsequence == null) {
    generator.showErrorMessage(inputNode,null,ruleNode,"no rule consequence");
    return null;
  }
  generator.getGenerationTracer().pushRuleConsequence(ruleConsequence.getNode());
  if (ruleConsequence instanceof DismissTopMappingRule) {
    GeneratorMessage message=((DismissTopMappingRule)ruleConsequence).getGeneratorMessage();
    GeneratorMessageType messageType=processGeneratorMessage(message,inputNode,null,ruleNode,generator);
    throw new DismissTopMappingRuleException(messageType);
  }
 else   if (ruleConsequence instanceof AbandonInput_RuleConsequence) {
    throw new AbandonRuleInputException();
  }
 else   if (ruleConsequence instanceof TemplateDeclarationReference) {
    TemplateDeclaration template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
    List<TemplateFragment> fragments=getTemplateFragments(template);
    if (checkIfOneOrMaryAdjacentFragments(fragments,template,inputNode,ruleNode,generator)) {
      List<Pair<SNode,String>> result=new ArrayList<Pair<SNode,String>>(fragments.size());
      for (      TemplateFragment fragment : fragments) {
        result.add(new Pair<SNode,String>(fragment.getParent().getNode(),getMappingName(fragment,null)));
      }
      return result;
    }
  }
 else   if (ruleConsequence instanceof InlineTemplate_RuleConsequence) {
    BaseConcept templateNode=((InlineTemplate_RuleConsequence)ruleConsequence).getTemplateNode();
    if (templateNode != null) {
      List<Pair<SNode,String>> result=new ArrayList<Pair<SNode,String>>(1);
      result.add(new Pair<SNode,String>(templateNode.getNode(),null));
      return result;
    }
 else {
      generator.showErrorMessage(inputNode,null,ruleConsequence.getNode(),"no template node");
    }
  }
 else   if (ruleConsequence instanceof InlineSwitch_RuleConsequence) {
    InlineSwitch_RuleConsequence inlineSwitch=(InlineSwitch_RuleConsequence)ruleConsequence;
    for (    InlineSwitch_Case switchCase : inlineSwitch.getCases()) {
      if (QueryExecutor.checkCondition(switchCase.getConditionFunction(),true,inputNode,switchCase.getNode(),generator)) {
        return getTemplateNodesFromRuleConsequence(switchCase.getCaseConsequence(),inputNode,switchCase.getNode(),generator);
      }
    }
    RuleConsequence defaultConsequence=inlineSwitch.getDefaultConsequence();
    if (defaultConsequence == null) {
      generator.showErrorMessage(inputNode,null,inlineSwitch.getNode(),"no default consequence in switch");
    }
 else {
      return getTemplateNodesFromRuleConsequence(defaultConsequence,inputNode,defaultConsequence.getNode(),generator);
    }
  }
 else {
    generator.showErrorMessage(inputNode,null,ruleConsequence.getNode(),"unsupported rule consequence");
  }
  return null;
}
