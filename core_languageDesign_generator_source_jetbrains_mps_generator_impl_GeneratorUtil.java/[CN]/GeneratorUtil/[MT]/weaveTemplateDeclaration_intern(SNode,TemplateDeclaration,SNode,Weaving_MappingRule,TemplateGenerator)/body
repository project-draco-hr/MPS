{
  if (template == null) {
    generator.showErrorMessage(inputNode,null,rule.getNode(),"couldn't evaluate weaving rule: no template");
    return;
  }
  List<TemplateFragment> templateFragments=getTemplateFragments(template);
  if (templateFragments.isEmpty()) {
    generator.showErrorMessage(inputNode,template.getNode(),rule.getNode(),"nothing to weave: no template fragments found in template");
    return;
  }
  boolean allFragmentsWhichUseDefaultContextHaveSameParent=true;
  SNode defaultContext=null;
  for (  TemplateFragment templateFragment : templateFragments) {
    if (templateFragment.getContextNodeQuery() == null) {
      SNode fragmentContextNode=BaseAdapter.fromAdapter(templateFragment.getParent().getParent());
      if (defaultContext == null) {
        defaultContext=fragmentContextNode;
      }
 else       if (defaultContext != fragmentContextNode) {
        allFragmentsWhichUseDefaultContextHaveSameParent=false;
        break;
      }
    }
  }
  if (!allFragmentsWhichUseDefaultContextHaveSameParent) {
    for (    TemplateFragment templateFragment : templateFragments) {
      if (templateFragment.getContextNodeQuery() == null) {
        generator.showErrorMessage(null,templateFragment.getNode(),null,"template fragment uses <default context>: conflicts with other fragments which use <default context>");
      }
    }
  }
  String ruleMappingName=getMappingName(rule,null);
  for (  TemplateFragment templateFragment : templateFragments) {
    SNode templateFragmentNode=BaseAdapter.fromAdapter(templateFragment.getParent());
    SNode contextParentNode=null;
    try {
      contextParentNode=QueryExecutor.getContextNodeForTemplateFragment(inputNode,templateFragmentNode,outputContextNode,generator);
    }
 catch (    Exception e) {
      LOG.error(e);
    }
    if (contextParentNode != null) {
      try {
        List<SNode> outputNodesToWeave=TemplateProcessor.createOutputNodesForTemplateNode(getMappingName(templateFragment,ruleMappingName),templateFragmentNode,inputNode,generator);
        String childRole=templateFragmentNode.getRole_();
        for (        SNode outputNodeToWeave : outputNodesToWeave) {
          if (!GeneratorUtil.checkChild(contextParentNode,childRole,outputNodeToWeave)) {
            LOG.warning(" -- was input: " + inputNode.getDebugText(),inputNode);
            LOG.warning(" -- was template: " + templateFragment.getDebugText(),templateFragment);
            LOG.warning(" -- was rule: " + rule.getDebugText(),rule);
          }
          LinkDeclaration childLinkDeclaration=contextParentNode.getLinkDeclaration(childRole);
          if (childLinkDeclaration == null) {
            contextParentNode.addChild(childRole,outputNodeToWeave);
          }
 else {
            Cardinality cardinality=childLinkDeclaration.getSourceCardinality();
            if (cardinality == Cardinality._0__1 || cardinality == Cardinality._1) {
              contextParentNode.setChild(childRole,outputNodeToWeave);
            }
 else {
              contextParentNode.addChild(childRole,outputNodeToWeave);
            }
          }
        }
      }
 catch (      DismissTopMappingRuleException e) {
        generator.showErrorMessage(inputNode,templateFragment.getNode(),rule.getNode(),"dismission of weaving rule is not supported");
      }
catch (      TemplateProcessingFailureException e) {
        generator.showErrorMessage(inputNode,templateFragment.getNode(),rule.getNode(),"error pocessing template fragment");
        generator.showInformationMessage(contextParentNode," -- was output context node:");
      }
    }
 else {
      generator.showErrorMessage(inputNode,templateFragment.getNode(),rule.getNode(),"couldn't define 'context' for template fragment");
    }
  }
}
