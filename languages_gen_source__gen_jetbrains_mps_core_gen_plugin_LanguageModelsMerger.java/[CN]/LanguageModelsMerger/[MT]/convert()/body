{
  ModelAccess.assertLegalRead();
  session=new MergeSession(messageHandler){
    @Override protected SNode merge(    SNode existing,    SNode node,    SModel newmodel){
      SNode merged=super.merge(existing,node,newmodel);
      if (isNotEmpty_mx80dq_a0b0a0a0a1a0(SPropertyOperations.getString(SNodeOperations.cast(existing,"jetbrains.mps.lang.core.structure.BaseConcept"),"virtualPackage"))) {
        SPropertyOperations.set(SNodeOperations.cast(merged,"jetbrains.mps.lang.core.structure.BaseConcept"),"virtualPackage",SPropertyOperations.getString(SNodeOperations.cast(existing,"jetbrains.mps.lang.core.structure.BaseConcept"),"virtualPackage"));
      }
      return merged;
    }
  }
;
  if (ListSequence.fromList(SModelOperations.getRoots(sourceModel,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")).isEmpty()) {
    messageHandler.handle(new Message(MessageKind.ERROR,"No concepts in generated model"));
    return;
  }
  merge(LanguageAspect.STRUCTURE,ListSequence.fromList(SModelOperations.getRoots(sourceModel,null)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it.getConceptFqName().startsWith("jetbrains.mps.lang.structure");
    }
  }
));
  merge(LanguageAspect.BEHAVIOR,ListSequence.fromList(SModelOperations.getRoots(sourceModel,null)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it.getConceptFqName().startsWith("jetbrains.mps.lang.behavior");
    }
  }
));
  Iterable<SNode> notMerged=ListSequence.fromList(SModelOperations.getRoots(sourceModel,null)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(session.isMapped(it));
    }
  }
);
  if (Sequence.fromIterable(notMerged).isNotEmpty()) {
    messageHandler.handle(new Message(MessageKind.ERROR,"Not merged: " + Sequence.fromIterable(notMerged).first().getDebugText()));
    return;
  }
  session.restoreRefs();
}
