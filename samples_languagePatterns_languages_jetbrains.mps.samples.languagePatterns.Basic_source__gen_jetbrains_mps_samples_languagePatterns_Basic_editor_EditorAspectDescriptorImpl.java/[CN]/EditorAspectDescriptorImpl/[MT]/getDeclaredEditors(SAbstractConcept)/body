{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new Address_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AddressReference_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new Apple_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new Car_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new CombinedPerformance_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new Component_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new ComponentUsage_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new Concert_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new Container_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new DrawLine_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new DrawRect_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new FormDescription_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new FruitPlate_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new IncompleteCommand_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new Item_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new ItemReference_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new LineStyle_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new ListOfDrawCommands_Editor());
}
break;
case 19:
if (true) {
return Collections.<ConceptEditor>singletonList(new OperationOnAddress_Editor());
}
break;
case 20:
if (true) {
return Collections.<ConceptEditor>singletonList(new Orange_Editor());
}
break;
case 21:
if (true) {
return Collections.<ConceptEditor>singletonList(new Participant_Editor());
}
break;
case 22:
if (true) {
return Collections.<ConceptEditor>singletonList(new Performance_Editor());
}
break;
case 23:
if (true) {
return Collections.<ConceptEditor>singletonList(new PerformanceWithTitle_Editor());
}
break;
case 24:
if (true) {
return Collections.<ConceptEditor>singletonList(new RaceParticipant_Editor());
}
break;
case 25:
if (true) {
return Collections.<ConceptEditor>singletonList(new Request_Editor());
}
break;
case 26:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimplifiedFormDescription_Editor());
}
break;
case 27:
if (true) {
return Collections.<ConceptEditor>singletonList(new Singer_Editor());
}
break;
case 28:
if (true) {
return Collections.<ConceptEditor>singletonList(new SomeForm_Editor());
}
break;
case 29:
if (true) {
return Collections.<ConceptEditor>singletonList(new StringDescription_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
