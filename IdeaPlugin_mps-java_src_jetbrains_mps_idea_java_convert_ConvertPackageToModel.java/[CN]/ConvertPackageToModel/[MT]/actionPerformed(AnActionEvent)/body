{
  final PsiElement[] elements=e.getData(LangDataKeys.PSI_ELEMENT_ARRAY);
  final Module module=e.getData(LangDataKeys.MODULE);
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  MPSFacet facet=FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);
  SModule mpsModule=facet.getSolution();
  final MPSProject mpsProject=e.getProject().getComponent(MPSProject.class);
  List<PsiJavaFile> psiJavaFiles=JavaConverterHelper.getFilesFromSelection(JavaConverterHelper.liftToFiles(Arrays.asList(elements)));
  Collection<Module> modulesWithoutFacet=JavaConverterHelper.getModulesThatNeedMPSFacet(psiJavaFiles);
  if (!modulesWithoutFacet.isEmpty()) {
    final AddFacetToModulesDialog dialog=new AddFacetToModulesDialog(project,module.getName(),modulesWithoutFacet);
    dialog.show();
    if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          for (          Module moduleToAddFacet : dialog.getResult()) {
            FacetManager.getInstance(moduleToAddFacet).addFacet(FacetTypeRegistry.getInstance().findFacetType(MPSFacetType.ID),"",null);
          }
        }
      }
);
    }
  }
  final JavaToMpsConverter parser=new JavaToMpsConverter(mpsModule,mpsProject.getRepository(),true,true,project.getComponent(MessagesViewTool.class).newHandler());
  final List<IFile> javaFiles=toIFiles(psiJavaFiles);
  ApplicationManager.getApplication().saveAll();
  ProgressManager.getInstance().run(new Task.Modal(null,"Convert to MPS",false){
    @Override public void run(    @NotNull final ProgressIndicator progressIndicator){
      try {
        parser.convertToMps(javaFiles,new ProgressMonitorAdapter(progressIndicator));
      }
 catch (      JavaParseException exc) {
        throw new RuntimeException(exc);
      }
catch (      IOException exc) {
        throw new RuntimeException(exc);
      }
    }
  }
);
  mpsProject.getRepository().getModelAccess().executeCommand(new Runnable(){
    @Override public void run(){
      Set<PsiClass> psiClasses=getPsiClasses(parser.getSuccessfulFiles(),PsiManager.getInstance(e.getProject()));
      Set<SNode> stubNodes=getStubNodes(psiClasses);
      Set<SNode> roots=parser.getRootsBuilt();
      List<SReference> referencesToFix=new ArrayList<SReference>();
      boolean wasUnresolved=false;
      Set<SReference> references=FindUsagesFacade.getInstance().findUsages(mpsProject.getScope(),stubNodes,null);
      for (      SReference ref : references) {
        if (roots.contains(ref.getSourceNode().getContainingRoot())) {
          continue;
        }
        if (!(ref instanceof StaticReference)) {
          referencesToFix.add(ref);
          continue;
        }
        SNode source=ref.getSourceNode();
        String role=ref.getRole();
        SModelReference targetModelRef=ref.getTargetSModelReference();
        SNode targetNode=ref.getTargetNode();
        SModelReference newModelRef=null;
        String modelName=targetModelRef.getModelName();
        modelName=modelName.substring(0,modelName.indexOf('@'));
        for (        SModel model : parser.getModels()) {
          if (modelName.equals(model.getModelName())) {
            newModelRef=model.getReference();
          }
        }
        if (newModelRef == null) {
          wasUnresolved=true;
          continue;
        }
        String resolveInfo=SNodeOperations.getResolveInfo(targetNode);
        SReference tempDynamicRef=new DynamicReference(role,source,newModelRef,resolveInfo);
        referencesToFix.add(tempDynamicRef);
        source.setReference(role,tempDynamicRef);
        SModel sourceModel=source.getModel();
        ((SModelBase)sourceModel).deleteModelImport(targetModelRef);
        if (!newModelRef.equals(sourceModel.getReference())) {
          ((SModelBase)sourceModel).addModelImport(newModelRef,false);
        }
      }
      for (      SReference ref : referencesToFix) {
        SNode target=ref.getTargetNode();
        if (target == null)         continue;
        SNode source=ref.getSourceNode();
        String role=ref.getRole();
        SReference finalStaticRef=StaticReference.create(role,source,target,((DynamicReference)ref).getResolveInfo());
        source.setReference(role,finalStaticRef);
      }
      for (      IFile file : parser.getSuccessfulFiles()) {
        file.delete();
      }
      if (wasUnresolved) {
        LOG.error("could not resolve some references");
      }
      ReloadManager.getInstance().flush();
    }
  }
);
  ProjectView projectView=ProjectView.getInstance(project);
  projectView.refresh();
}
