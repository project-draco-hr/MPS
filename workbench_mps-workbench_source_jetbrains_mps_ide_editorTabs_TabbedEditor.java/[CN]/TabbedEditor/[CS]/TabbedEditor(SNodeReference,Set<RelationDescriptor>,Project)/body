{
  super(mpsProject);
  myBaseNode=baseNode;
  myPossibleTabs=possibleTabs;
  myProject=mpsProject;
  myVirtualFile=MPSNodesVirtualFileSystem.getInstance().getFileFor(myBaseNode);
  myFileStatusListener=new FileStatusChangeListener(mpsProject);
  myTabsPanel=new JPanel(new BorderLayout());
  getComponent().add(myTabsPanel,BorderLayout.SOUTH);
  installTabsComponent();
  showNode(myBaseNode.resolve(myProject.getRepository()),false);
  myNextTabAction=new ShadowAction(new BaseNavigationAction(new Runnable(){
    @Override public void run(){
      myTabsComponent.nextTab();
    }
  }
),ActionManager.getInstance().getAction(IdeActions.ACTION_NEXT_EDITOR_TAB),getComponent());
  myPrevTabAction=new ShadowAction(new BaseNavigationAction(new Runnable(){
    @Override public void run(){
      myTabsComponent.prevTab();
    }
  }
),ActionManager.getInstance().getAction(IdeActions.ACTION_PREVIOUS_EDITOR_TAB),getComponent());
  AnAction addAction=new AddAspectAction(myBaseNode,myPossibleTabs,new NodeChangeCallback(){
    @Override public void changeNode(    SNode newNode){
      myTabsComponent.updateTabs();
      myTabsComponent.setLastNode(newNode.getReference());
      if (getCurrentEditorComponent() == null) {
        showEditor();
      }
      showNodeInternal(newNode,true,true);
    }
  }
){
    @Override protected RelationDescriptor getCurrentAspect(){
      return myTabsComponent.getCurrentTabAspect();
    }
  }
;
  ActionButton btn=new ActionButton(addAction,addAction.getTemplatePresentation(),ActionPlaces.UNKNOWN,new Dimension(23,23));
  myTabsPanel.add(btn,BorderLayout.WEST);
  EditorSettings.getInstance().addEditorSettingsListener(mySettingsListener);
  myRepoChangeListener.subscribeTo(myProject.getRepository());
  FileStatusManager.getInstance(ProjectHelper.toIdeaProject(myProject)).addFileStatusListener(myFileStatusListener);
}
