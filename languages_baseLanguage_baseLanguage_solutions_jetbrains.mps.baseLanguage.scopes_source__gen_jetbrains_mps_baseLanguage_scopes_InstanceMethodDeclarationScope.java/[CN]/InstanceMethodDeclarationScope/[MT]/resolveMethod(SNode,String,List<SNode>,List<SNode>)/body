{
  if (SNodeOperations.isInstanceOf(contextNode,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
    SNode instanceType=SNodeOperations.cast(BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(contextNode,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"jetbrains.mps.baseLanguage.structure.IOperation","call_getDotExpression_1224687669172",new Object[]{}),"jetbrains.mps.baseLanguage.structure.DotExpression","call_getOperandType_8871623299328377715",new Object[]{}),"jetbrains.mps.baseLanguage.structure.ClassifierType");
    Map<SNode,SNode> typeByTypeVar=((SLinkOperations.getTarget(instanceType,"classifier",false) != null) ? MethodResolveUtil.getTypesByTypeVars(SLinkOperations.getTarget(instanceType,"classifier",false),SLinkOperations.getTargets(instanceType,"parameter",true)) : Collections.<SNode,SNode>emptyMap());
    return MethodResolveUtil.chooseByParameterType(methods,actualArguments,typeByTypeVar);
  }
 else {
    Map<SNode,SNode> typeByTypeVar=ClassifierScopeUtils.resolveClassifierTypeVars(classifier);
    return MethodResolveUtil.chooseByParameterType(methods,actualArguments,typeByTypeVar);
  }
}
