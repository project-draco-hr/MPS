{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractMoveExpression:
    return myConceptAbstractMoveExpression;
case LanguageConceptSwitch.AbstractMoveNodeExpression:
  return myConceptAbstractMoveNodeExpression;
case LanguageConceptSwitch.AbstractMoveNodesExpression:
return myConceptAbstractMoveNodesExpression;
case LanguageConceptSwitch.AffectedNodesClause:
return myConceptAffectedNodesClause;
case LanguageConceptSwitch.ConceptFunctionParameter_Model:
return myConceptConceptFunctionParameter_Model;
case LanguageConceptSwitch.ConceptFunctionParameter_Module:
return myConceptConceptFunctionParameter_Module;
case LanguageConceptSwitch.ConceptFunctionParameter_SModel:
return myConceptConceptFunctionParameter_SModel;
case LanguageConceptSwitch.ConceptFunctionParameter_SNode:
return myConceptConceptFunctionParameter_SNode;
case LanguageConceptSwitch.ContextMemberOperation:
return myConceptContextMemberOperation;
case LanguageConceptSwitch.ContextType:
return myConceptContextType;
case LanguageConceptSwitch.CreateRefactoringContext:
return myConceptCreateRefactoringContext;
case LanguageConceptSwitch.DoRefactorClause:
return myConceptDoRefactorClause;
case LanguageConceptSwitch.DoWhenDoneClause:
return myConceptDoWhenDoneClause;
case LanguageConceptSwitch.ExecuteRefactoringStatement:
return myConceptExecuteRefactoringStatement;
case LanguageConceptSwitch.GetModelsToUpdateClause:
return myConceptGetModelsToUpdateClause;
case LanguageConceptSwitch.InitClause:
return myConceptInitClause;
case LanguageConceptSwitch.IsApplicableToModelClause:
return myConceptIsApplicableToModelClause;
case LanguageConceptSwitch.IsApplicableToModuleClause:
return myConceptIsApplicableToModuleClause;
case LanguageConceptSwitch.IsApplicableToNodeClause:
return myConceptIsApplicableToNodeClause;
case LanguageConceptSwitch.IsRefactoringApplicable:
return myConceptIsRefactoringApplicable;
case LanguageConceptSwitch.MainProjectOperation:
return myConceptMainProjectOperation;
case LanguageConceptSwitch.ModelDescriptorOperation:
return myConceptModelDescriptorOperation;
case LanguageConceptSwitch.ModelTarget:
return myConceptModelTarget;
case LanguageConceptSwitch.ModelsToGenerateByDefault:
return myConceptModelsToGenerateByDefault;
case LanguageConceptSwitch.ModelsToGenerateClause:
return myConceptModelsToGenerateClause;
case LanguageConceptSwitch.ModuleOperation:
return myConceptModuleOperation;
case LanguageConceptSwitch.ModuleTarget:
return myConceptModuleTarget;
case LanguageConceptSwitch.MoveNodeToModelExpression:
return myConceptMoveNodeToModelExpression;
case LanguageConceptSwitch.MoveNodeToNodeExpression:
return myConceptMoveNodeToNodeExpression;
case LanguageConceptSwitch.MoveNodesToModelExpression:
return myConceptMoveNodesToModelExpression;
case LanguageConceptSwitch.MoveNodesToNodeExpression:
return myConceptMoveNodesToNodeExpression;
case LanguageConceptSwitch.NodeOperation:
return myConceptNodeOperation;
case LanguageConceptSwitch.NodeTarget:
return myConceptNodeTarget;
case LanguageConceptSwitch.NodesOperation:
return myConceptNodesOperation;
case LanguageConceptSwitch.OperationContextOperation:
return myConceptOperationContextOperation;
case LanguageConceptSwitch.ProjectOperation:
return myConceptProjectOperation;
case LanguageConceptSwitch.Refactoring:
return myConceptRefactoring;
case LanguageConceptSwitch.RefactoringAction:
return myConceptRefactoringAction;
case LanguageConceptSwitch.RefactoringArgument:
return myConceptRefactoringArgument;
case LanguageConceptSwitch.RefactoringArgumentReference:
return myConceptRefactoringArgumentReference;
case LanguageConceptSwitch.RefactoringContext_ConceptFunctionParameter:
return myConceptRefactoringContext_ConceptFunctionParameter;
case LanguageConceptSwitch.RefactoringField:
return myConceptRefactoringField;
case LanguageConceptSwitch.RefactoringFieldReference:
return myConceptRefactoringFieldReference;
case LanguageConceptSwitch.RefactoringParameter:
return myConceptRefactoringParameter;
case LanguageConceptSwitch.RefactoringParameterReference:
return myConceptRefactoringParameterReference;
case LanguageConceptSwitch.RefactoringTarget:
return myConceptRefactoringTarget;
case LanguageConceptSwitch.RepositoryOperation:
return myConceptRepositoryOperation;
case LanguageConceptSwitch.ScopeOperation:
return myConceptScopeOperation;
case LanguageConceptSwitch.UpdateModelProcedure:
return myConceptUpdateModelProcedure;
default :
return null;
}
}
