{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringAction"},new String[]{},new String[]{},new String[]{"whatToMove","destination"},new boolean[]{false,false});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.AffectedNodesClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringAction"},new String[]{},new String[]{},new String[]{"feature","newConceptFQName","newFeatureName"},new boolean[]{false,false,false});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.refactoring.structure.RefactoringAction"},new String[]{},new String[]{},new String[]{"feature","newConceptFQName","newFeatureName"},new boolean[]{false,false,false});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ChooseComponentClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_UserArgument","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ContextType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"refactoring"},new String[]{"target","parameters","project"},new boolean[]{false,true,false});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringAction"},new String[]{},new String[]{},new String[]{"feature"},new boolean[]{false});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.DeleteFeatureOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.refactoring.structure.RefactoringAction"},new String[]{},new String[]{},new String[]{"feature"},new boolean[]{false});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.DoRefactorClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{"finders","searchNode","searchScope"},new boolean[]{true,false,false});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{"refactoring"},new String[]{"target","parameters","project"},new boolean[]{false,true,false});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.FilterArgumentClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.FinderReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IResolveInfo"},new String[]{},new String[]{"finderDeclaration"},new String[]{},new boolean[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.GetModelsToGenerateClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.InitClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.InitialValueClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.IsApplicableClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"refactoring"},new String[]{"target"},new boolean[]{false});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.MainProjectOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModelDescriptorExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModelTarget","jetbrains.mps.lang.refactoring.structure.RefactoringTarget",false,new String[]{"jetbrains.mps.lang.refactoring.structure.RefactoringTarget"},new String[]{},new String[]{},new String[]{"isApplicableBlock"},new boolean[]{false});
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModuleExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModuleOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 42:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ModuleTarget","jetbrains.mps.lang.refactoring.structure.RefactoringTarget",false,new String[]{"jetbrains.mps.lang.refactoring.structure.RefactoringTarget"},new String[]{},new String[]{},new String[]{"moduleType","isApplicableBlock"},new boolean[]{false,false});
case 43:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 44:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression"},new String[]{},new String[]{},new String[]{"roleInTarget"},new boolean[]{false});
case 45:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 46:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression","jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression"},new String[]{},new String[]{},new String[]{"roleInTarget"},new boolean[]{false});
case 47:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.NodeExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 48:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.NodeOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 49:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.NodeTarget","jetbrains.mps.lang.refactoring.structure.RefactoringTarget",false,new String[]{"jetbrains.mps.lang.refactoring.structure.RefactoringTarget"},new String[]{},new String[]{"concept"},new String[]{"isApplicableBlock"},new boolean[]{false});
case 50:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.NodesExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 51:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.NodesOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 52:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.NodesToOpenClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 53:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.OldRefactoring","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"userFriendlyName","refactoringTargetKind","oneTargetOnly","refactorImmediatelyIfNoUsages"},new String[]{"applicableConcept","overrides"},new String[]{"keystroke","arguments","internalArguments","isApplicableClause","isApplicableToModelClause","affectedNodesClause","doRefactorClause","getModelsToGenerateClause","getModelsToUpdateClause","nodesToOpenClause","updateModelClause"},new boolean[]{false,true,true,false,false,false,false,false,false,false,false});
case 54:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.OperationContextExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 55:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.OperationContextOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 56:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ProjectExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 57:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ProjectOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 58:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.Refactoring","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{"userFriendlyName"},new String[]{"overrides"},new String[]{"target","parameter","field","initBlock","doRefactorBlock","modelsToGenerateBlock","doWhenDoneBlock","affectedNodesBlock","updateModelBlock"},new boolean[]{false,true,true,false,false,false,false,false,false});
case 59:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringAction",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 60:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringArgument",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 61:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 62:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 63:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringField","jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.lang.refactoring.structure.RefactoringArgument"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 64:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference","jetbrains.mps.baseLanguage.structure.BaseVariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableReference","jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference"},new String[]{},new String[]{"refactoringField"},new String[]{},new boolean[]{});
case 65:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringParameter","jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.lang.refactoring.structure.RefactoringArgument"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 66:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference"},new String[]{},new String[]{"refactoringParameter"},new String[]{},new boolean[]{});
case 67:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RefactoringTarget","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"allowMultiple"},new String[]{},new String[]{"isApplicableBlock"},new boolean[]{false});
case 68:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{"presentation"},new String[]{},new String[]{"argumentType"},new boolean[]{false});
case 69:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgumentReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"argument"},new String[]{},new boolean[]{});
case 70:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.RequiredUserEnteredArgument","jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument",false,new String[]{"jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument"},new String[]{},new String[]{},new String[]{"filterClause","chooseComponentClause","initialValue"},new boolean[]{false,false,false});
case 71:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ScopeExpression","jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression",false,new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 72:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.ScopeOperation","jetbrains.mps.lang.refactoring.structure.ContextMemberOperation",false,new String[]{"jetbrains.mps.lang.refactoring.structure.ContextMemberOperation"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 73:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 74:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.UpdateModelClause","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 75:
return new CompiledConceptDescriptor("jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
