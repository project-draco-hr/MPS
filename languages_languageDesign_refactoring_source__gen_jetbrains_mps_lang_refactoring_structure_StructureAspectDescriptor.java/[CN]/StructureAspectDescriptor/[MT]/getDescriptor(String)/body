{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"whatToMove","destination"},new boolean[]{false,false}).abstract_().create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AffectedNodesClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("affected nodes","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature","newConceptFQName","newFeatureName"},new boolean[]{false,false,false}).alias("changeFeatureName","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature","newConceptFQName","newFeatureName"},new boolean[]{false,false,false}).alias("changeFeatureName","").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ChooseComponentClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("model","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("module","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("model","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("node","").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_UserArgument").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("argument","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation").abstract_().create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ContextType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("refcontext","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("refactoring").children(new String[]{"target","parameters","project"},new boolean[]{false,true,false}).alias("create refcontext","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature"},new boolean[]{false}).alias("deleteFeature","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DeleteFeatureOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature"},new boolean[]{false}).alias("deleteFeature","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DoRefactorClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("refactor","").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("doWhenDone","").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"finders","searchNode","searchScope"},new boolean[]{true,false,false}).alias("executeFinders","").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("refactoring").children(new String[]{"target","parameters","project"},new boolean[]{false,true,false}).alias("execute refactoring","").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.FilterArgumentClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.FinderReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.IResolveInfo").references("finderDeclaration").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.GetModelsToGenerateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("models to generate","").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("additional models to update","").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.InitClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("init","").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.InitialValueClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable","").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToModel","").create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToModule","").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToNode","").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("refactoring").children(new String[]{"target"},new boolean[]{false}).alias("is applicable refactoring","").create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MainProjectOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("project","").create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").alias("mergeNode","merge node with another node").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelDescriptorExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("modelDescriptor","").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("modelDescriptor","").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").children(new String[]{"isApplicableBlock"},new boolean[]{false}).alias("model","").create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("models from usages","").create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("models to generate","").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("module","").create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("module","").create();
case 42:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").children(new String[]{"moduleType","isApplicableBlock"},new boolean[]{false,false}).alias("module","").create();
case 43:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").alias("moveNode","move node to model").create();
case 44:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").children(new String[]{"roleInTarget"},new boolean[]{false}).alias("moveNode","move node to another node").create();
case 45:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").alias("moveNodes","move nodes to model").create();
case 46:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").children(new String[]{"roleInTarget"},new boolean[]{false}).alias("moveNodes","move nodes to another node").create();
case 47:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("node","").create();
case 48:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("node","").create();
case 49:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").references("concept").children(new String[]{"isApplicableBlock"},new boolean[]{false}).alias("node","").create();
case 50:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodesExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("nodes","").create();
case 51:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodesOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("nodes","").create();
case 52:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodesToOpenClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("nodes to open","").create();
case 53:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.OldRefactoring").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("userFriendlyName","refactoringTargetKind","oneTargetOnly","refactorImmediatelyIfNoUsages").references("applicableConcept","overrides").children(new String[]{"keystroke","arguments","internalArguments","isApplicableClause","isApplicableToModelClause","affectedNodesClause","doRefactorClause","getModelsToGenerateClause","getModelsToUpdateClause","nodesToOpenClause","updateModelClause"},new boolean[]{false,true,true,false,false,false,false,false,false,false,false}).create();
case 54:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.OperationContextExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("operationContext","").create();
case 55:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.OperationContextOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("operationContext","").create();
case 56:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ProjectExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("project","").create();
case 57:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ProjectOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("mpsProject","").create();
case 58:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.Refactoring").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect").properties("userFriendlyName").references("overrides").children(new String[]{"target","parameter","field","initBlock","doRefactorBlock","modelsToGenerateBlock","doWhenDoneBlock","affectedNodesBlock","updateModelBlock"},new boolean[]{false,true,true,false,false,false,false,false,false}).create();
case 59:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringAction").interface_().create();
case 60:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringArgument").interface_().create();
case 61:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").interface_().create();
case 62:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("refactoringContext","").create();
case 63:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringField").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.lang.refactoring.structure.RefactoringArgument").create();
case 64:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference").super_("jetbrains.mps.baseLanguage.structure.BaseVariableReference").parents("jetbrains.mps.baseLanguage.structure.BaseVariableReference","jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").references("refactoringField").create();
case 65:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringParameter").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration","jetbrains.mps.lang.refactoring.structure.RefactoringArgument").create();
case 66:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").references("refactoringParameter").create();
case 67:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("allowMultiple").children(new String[]{"isApplicableBlock"},new boolean[]{false}).abstract_().create();
case 68:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("presentation").children(new String[]{"argumentType"},new boolean[]{false}).create();
case 69:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgumentReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("argument").create();
case 70:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RequiredUserEnteredArgument").super_("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument").parents("jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument").children(new String[]{"filterClause","chooseComponentClause","initialValue"},new boolean[]{false,false,false}).create();
case 71:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ScopeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression").alias("scope","").create();
case 72:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ScopeOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("scope","").create();
case 73:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("updateModelByDefault","").create();
case 74:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("updateModel","").create();
case 75:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"argument"},new boolean[]{false}).alias("updateModel(...)","").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
