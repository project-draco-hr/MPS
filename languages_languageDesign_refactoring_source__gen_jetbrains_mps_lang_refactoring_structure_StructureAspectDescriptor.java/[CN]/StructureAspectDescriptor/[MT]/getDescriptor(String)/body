{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0bc,conceptFqName)) {
case 0:
    return myConceptAbstractMoveExpression;
case 1:
  return myConceptAbstractMoveNodeExpression;
case 2:
return myConceptAbstractMoveNodesExpression;
case 3:
return myConceptAffectedNodesClause;
case 4:
return myConceptConceptFunctionParameter_Model;
case 5:
return myConceptConceptFunctionParameter_Module;
case 6:
return myConceptConceptFunctionParameter_SModel;
case 7:
return myConceptConceptFunctionParameter_SNode;
case 8:
return myConceptContextMemberOperation;
case 9:
return myConceptContextType;
case 10:
return myConceptCreateRefactoringContext;
case 11:
return myConceptDoRefactorClause;
case 12:
return myConceptDoWhenDoneClause;
case 13:
return myConceptExecuteRefactoringStatement;
case 14:
return myConceptGetModelsToUpdateClause;
case 15:
return myConceptInitClause;
case 16:
return myConceptIsApplicableToModelClause;
case 17:
return myConceptIsApplicableToModuleClause;
case 18:
return myConceptIsApplicableToNodeClause;
case 19:
return myConceptIsRefactoringApplicable;
case 20:
return myConceptMainProjectOperation;
case 21:
return myConceptModelDescriptorOperation;
case 22:
return myConceptModelTarget;
case 23:
return myConceptModelsToGenerateByDefault;
case 24:
return myConceptModelsToGenerateClause;
case 25:
return myConceptModuleOperation;
case 26:
return myConceptModuleTarget;
case 27:
return myConceptMoveNodeToModelExpression;
case 28:
return myConceptMoveNodeToNodeExpression;
case 29:
return myConceptMoveNodesToModelExpression;
case 30:
return myConceptMoveNodesToNodeExpression;
case 31:
return myConceptNodeOperation;
case 32:
return myConceptNodeTarget;
case 33:
return myConceptNodesOperation;
case 34:
return myConceptOperationContextOperation;
case 35:
return myConceptProjectOperation;
case 36:
return myConceptRefactoring;
case 37:
return myConceptRefactoringAction;
case 38:
return myConceptRefactoringArgument;
case 39:
return myConceptRefactoringArgumentReference;
case 40:
return myConceptRefactoringContext_ConceptFunctionParameter;
case 41:
return myConceptRefactoringField;
case 42:
return myConceptRefactoringFieldReference;
case 43:
return myConceptRefactoringParameter;
case 44:
return myConceptRefactoringParameterReference;
case 45:
return myConceptRefactoringTarget;
case 46:
return myConceptRepositoryOperation;
case 47:
return myConceptScopeOperation;
case 48:
return myConceptUpdateModelProcedure;
default :
return null;
}
}
