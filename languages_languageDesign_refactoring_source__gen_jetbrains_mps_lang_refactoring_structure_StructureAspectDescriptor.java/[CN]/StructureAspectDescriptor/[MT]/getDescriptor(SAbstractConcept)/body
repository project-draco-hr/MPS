{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0bc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractMoveExpression;
      }
    break;
case 1:
  if (true) {
    return myConceptAbstractMoveNodeExpression;
  }
break;
case 2:
if (true) {
return myConceptAbstractMoveNodesExpression;
}
break;
case 3:
if (true) {
return myConceptAffectedNodesClause;
}
break;
case 4:
if (true) {
return myConceptConceptFunctionParameter_Model;
}
break;
case 5:
if (true) {
return myConceptConceptFunctionParameter_Module;
}
break;
case 6:
if (true) {
return myConceptConceptFunctionParameter_SModel;
}
break;
case 7:
if (true) {
return myConceptConceptFunctionParameter_SNode;
}
break;
case 8:
if (true) {
return myConceptContextMemberOperation;
}
break;
case 9:
if (true) {
return myConceptContextType;
}
break;
case 10:
if (true) {
return myConceptCreateRefactoringContext;
}
break;
case 11:
if (true) {
return myConceptDoRefactorClause;
}
break;
case 12:
if (true) {
return myConceptDoWhenDoneClause;
}
break;
case 13:
if (true) {
return myConceptExecuteRefactoringStatement;
}
break;
case 14:
if (true) {
return myConceptGetModelsToUpdateClause;
}
break;
case 15:
if (true) {
return myConceptInitClause;
}
break;
case 16:
if (true) {
return myConceptIsApplicableToModelClause;
}
break;
case 17:
if (true) {
return myConceptIsApplicableToModuleClause;
}
break;
case 18:
if (true) {
return myConceptIsApplicableToNodeClause;
}
break;
case 19:
if (true) {
return myConceptIsRefactoringApplicable;
}
break;
case 20:
if (true) {
return myConceptMainProjectOperation;
}
break;
case 21:
if (true) {
return myConceptModelDescriptorOperation;
}
break;
case 22:
if (true) {
return myConceptModelTarget;
}
break;
case 23:
if (true) {
return myConceptModelsToGenerateByDefault;
}
break;
case 24:
if (true) {
return myConceptModelsToGenerateClause;
}
break;
case 25:
if (true) {
return myConceptModuleOperation;
}
break;
case 26:
if (true) {
return myConceptModuleTarget;
}
break;
case 27:
if (true) {
return myConceptMoveNodeToModelExpression;
}
break;
case 28:
if (true) {
return myConceptMoveNodeToNodeExpression;
}
break;
case 29:
if (true) {
return myConceptMoveNodesToModelExpression;
}
break;
case 30:
if (true) {
return myConceptMoveNodesToNodeExpression;
}
break;
case 31:
if (true) {
return myConceptNodeOperation;
}
break;
case 32:
if (true) {
return myConceptNodeTarget;
}
break;
case 33:
if (true) {
return myConceptNodesOperation;
}
break;
case 34:
if (true) {
return myConceptOperationContextOperation;
}
break;
case 35:
if (true) {
return myConceptProjectOperation;
}
break;
case 36:
if (true) {
return myConceptRefactoring;
}
break;
case 37:
if (true) {
return myConceptRefactoringAction;
}
break;
case 38:
if (true) {
return myConceptRefactoringArgument;
}
break;
case 39:
if (true) {
return myConceptRefactoringArgumentReference;
}
break;
case 40:
if (true) {
return myConceptRefactoringContext_ConceptFunctionParameter;
}
break;
case 41:
if (true) {
return myConceptRefactoringField;
}
break;
case 42:
if (true) {
return myConceptRefactoringFieldReference;
}
break;
case 43:
if (true) {
return myConceptRefactoringParameter;
}
break;
case 44:
if (true) {
return myConceptRefactoringParameterReference;
}
break;
case 45:
if (true) {
return myConceptRefactoringTarget;
}
break;
case 46:
if (true) {
return myConceptRepositoryOperation;
}
break;
case 47:
if (true) {
return myConceptScopeOperation;
}
break;
case 48:
if (true) {
return myConceptUpdateModelProcedure;
}
break;
default :
}
}
return null;
}
