{
  return Arrays.asList(myConceptAbstractMoveExpression,myConceptAbstractMoveNodeExpression,myConceptAbstractMoveNodesExpression,myConceptAffectedNodesClause,myConceptChangeFeatureNameExpression,myConceptConceptFunctionParameter_Model,myConceptConceptFunctionParameter_Module,myConceptConceptFunctionParameter_SModel,myConceptConceptFunctionParameter_SNode,myConceptContextMemberOperation,myConceptContextType,myConceptCreateRefactoringContext,myConceptDeleteFeatureExpression,myConceptDoRefactorClause,myConceptDoWhenDoneClause,myConceptExecuteRefactoringStatement,myConceptGetModelsToUpdateClause,myConceptInitClause,myConceptIsApplicableToModelClause,myConceptIsApplicableToModuleClause,myConceptIsApplicableToNodeClause,myConceptIsRefactoringApplicable,myConceptMainProjectOperation,myConceptMergeNodeWithAnotherNodeExpression,myConceptModelDescriptorOperation,myConceptModelTarget,myConceptModelsToGenerateByDefault,myConceptModelsToGenerateClause,myConceptModuleOperation,myConceptModuleTarget,myConceptMoveNodeToModelExpression,myConceptMoveNodeToNodeExpression,myConceptMoveNodesToModelExpression,myConceptMoveNodesToNodeExpression,myConceptNodeOperation,myConceptNodeTarget,myConceptNodesOperation,myConceptOperationContextOperation,myConceptProjectOperation,myConceptRefactoring,myConceptRefactoringAction,myConceptRefactoringArgument,myConceptRefactoringArgumentReference,myConceptRefactoringContext_ConceptFunctionParameter,myConceptRefactoringField,myConceptRefactoringFieldReference,myConceptRefactoringParameter,myConceptRefactoringParameterReference,myConceptRefactoringTarget,myConceptRepositoryOperation,myConceptScopeOperation,myConceptUpdateModelByDefaultOperation,myConceptUpdateModelClause,myConceptUpdateModelProcedure);
}
