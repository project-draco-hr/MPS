{
  List<SNode> supertypes=ListSequence.fromList(new ArrayList<SNode>());
  SNode classifier=SLinkOperations.getTarget(ct,"classifier",false);
  if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.Interface") || SPropertyOperations.getBoolean(SNodeOperations.as(classifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass")) {
    List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
    Iterable<SNode> cands=ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode m){
        return !("equals".equals(SPropertyOperations.getString(m,"name"))) && SPropertyOperations.getBoolean(m,"isAbstract");
      }
    }
);
    SNode mtd=Sequence.fromIterable(cands).first();
    if (Sequence.fromIterable(cands).isEmpty() && (mtd != null)) {
      List<SNode> paramTypes=ListSequence.fromList(new ArrayList<SNode>());
      for (      SNode p : SLinkOperations.getTargets(mtd,"parameter",true)) {
        ListSequence.fromList(paramTypes).addElement(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(p,"type",true),ct));
      }
      SNode resType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mtd,"returnType",true),ct);
      supertypes=ListSequence.fromListAndArray(new ArrayList<SNode>(),new supertypesOf_ClassifierType_SubtypingRule.QuotationClass_qen718_a1a0d0d0c0a().createNode(paramTypes,resType,typeCheckingContext));
    }
  }
  return supertypes;
}
