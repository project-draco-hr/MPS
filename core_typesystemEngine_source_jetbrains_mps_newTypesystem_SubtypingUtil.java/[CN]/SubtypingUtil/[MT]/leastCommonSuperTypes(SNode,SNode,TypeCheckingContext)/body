{
  StructuralNodeSet<?> frontier=new StructuralNodeSet();
  StructuralNodeSet<?> newFrontier=new StructuralNodeSet();
  StructuralNodeSet<?> yetPassed=new StructuralNodeSet();
  Set<SNode> result=new THashSet<SNode>();
  frontier.add(left);
  while (!frontier.isEmpty()) {
    Set<SNode> yetPassedRaw=new THashSet<SNode>();
    StructuralNodeSet<?> ancestors=new StructuralNodeSet();
    for (    SNode node : frontier) {
      TypeChecker.getInstance().getSubtypingManager().collectImmediateSuperTypes(node,true,ancestors,context);
      if (!yetPassed.contains(node)) {
        ancestors.add(node);
      }
      yetPassedRaw.add(node);
    }
    for (    SNode ancestor : ancestors) {
      if (TypeChecker.getInstance().getSubtypingManager().isSubtype(right,ancestor,true)) {
        if (!TypeChecker.getInstance().getSubtypingManager().isSuperType(ancestor,result)) {
          result.add(ancestor);
        }
      }
    }
    for (    SNode passedNodeRaw : yetPassedRaw) {
      yetPassed.add(passedNodeRaw);
    }
    for (    SNode passedNode : yetPassed) {
      ancestors.removeStructurally(passedNode);
    }
    for (    SNode resultNode : result) {
      ancestors.removeStructurally(resultNode);
    }
    newFrontier.addAllStructurally(ancestors);
    yetPassed.addAllStructurally(ancestors);
    frontier=newFrontier;
    newFrontier=new StructuralNodeSet();
  }
  return result;
}
