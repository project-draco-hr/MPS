{
  if (types.isEmpty())   return null;
  if (types.size() == 1)   return types.iterator().next();
  if (types.size() > 1) {
    Collections.sort(types,new Comparator<SNode>(){
      public int compare(      SNode node1,      SNode node2){
        return node1.getPresentation().compareTo(node2.getPresentation());
      }
    }
);
    types=SubtypingUtil.eliminateSubTypes(types);
  }
  return LatticeUtil.meetNodes(new THashSet<SNode>(TypeChecker.getInstance().getSubtypingManager().leastCommonSuperTypes(types,context)));
}
