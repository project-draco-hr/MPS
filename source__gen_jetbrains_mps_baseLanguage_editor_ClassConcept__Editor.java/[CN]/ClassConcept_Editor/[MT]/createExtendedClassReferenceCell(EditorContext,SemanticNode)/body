{
  SemanticNode effectiveNode=null;
  effectiveNode=node.getReferent("extendedClass");
  LinkDeclaration linkDeclaration=SModelUtil.getLinkDeclaration(node,"extendedClass");
  if (effectiveNode == null) {
{
      EditorCell_Constant noRefCell=EditorCell_Constant.create(context,node,null,true);
      noRefCell.setDefaultText("<no extends>");
      noRefCell.setEditable(true);
      noRefCell.setDrawBrackets(false);
      noRefCell.setBracketsColor(Color.black);
      noRefCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION,linkDeclaration);
      noRefCell.putUserObject(EditorCell.METAINFO_SOURCE_NODE,node);
      noRefCell.setAction(EditorCellAction.DELETE,new CellAction_Empty());
      noRefCell.setSubstituteInfo(new DefaultReferenceSubstituteInfo(node,linkDeclaration));
      return noRefCell;
    }
  }
  AbstractCellProvider inlineComponent=new ClassConcept_Editor_extendedClass_InlineComponent(effectiveNode);
  EditorCell editorCell=inlineComponent.createEditorCell(context);
  EditorUtil.setSemanticNodeToCells(editorCell,node);
  editorCell.setSelectable(true);
  editorCell.setDrawBorder(false);
  editorCell.setDrawBrackets(false);
  editorCell.setBracketsColor(Color.black);
  editorCell.putUserObject(EditorCell.METAINFO_LINK_DECLARATION,linkDeclaration);
  editorCell.putUserObject(EditorCell.METAINFO_SOURCE_NODE,node);
  editorCell.setAction(EditorCellAction.DELETE,new CellAction_DeleteReferenceToNode(node,"extendedClass",effectiveNode));
  editorCell.setSubstituteInfo(new DefaultReferenceSubstituteInfo(node,linkDeclaration));
  return editorCell;
}
