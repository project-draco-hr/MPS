{
  Set<SNodeId> intersect=new HashSet<SNodeId>();
  Map<SNodeId,SNode> onlyOld=new HashMap<SNodeId,SNode>();
  Map<SNodeId,SNode> onlyNew=new HashMap<SNodeId,SNode>();
  for (  SNode node : myOldModel.nodes()) {
    SNodeId id=node.getSNodeId();
    if (myNewModel.getNodeById(id) != null) {
      intersect.add(id);
    }
 else {
      onlyOld.put(id,node);
    }
  }
  for (  SNode node : myNewModel.nodes()) {
    SNodeId id=node.getSNodeId();
    if (myOldModel.getNodeById(id) == null) {
      onlyNew.put(id,node);
    }
  }
  collectAddedLanguageImports();
  collectChangedUsedDevkits();
  collectEngagedOnGenerationLanguages();
  collectAddedModelImport();
  collectLanguageAspects();
  collectDeletedNodes(onlyOld);
  collectAddedNodes(onlyNew);
  collectMovedNodes(intersect);
  collectPropertyChanges();
  collectReferenceChanges();
  collectConceptChanges(intersect);
  makeChangeGroups();
}
