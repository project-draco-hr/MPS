{
  Map<SNodeId,SNode> oldNodes=myOldModel.getNodeIdToNodeMap();
  Map<SNodeId,SNode> newNodes=myNewModel.getNodeIdToNodeMap();
  Set<SNodeId> intersect=new HashSet<SNodeId>();
  Map<SNodeId,SNode> onlyOld=new HashMap<SNodeId,SNode>();
  Map<SNodeId,SNode> onlyNew=new HashMap<SNodeId,SNode>();
  for (  Entry<SNodeId,SNode> entry : oldNodes.entrySet()) {
    if (newNodes.containsKey(entry.getKey())) {
      intersect.add(entry.getKey());
    }
 else {
      onlyOld.put(entry.getKey(),entry.getValue());
    }
  }
  for (  Entry<SNodeId,SNode> entry : newNodes.entrySet()) {
    if (!oldNodes.containsKey(entry.getKey())) {
      onlyNew.put(entry.getKey(),entry.getValue());
    }
  }
  collectAddedLanguageImports();
  collectChangedUsedDevkits();
  collectEngagedOnGenerationLanguages();
  collectAddedModelImport();
  collectLanguageAspects();
  collectDeletedNodes(onlyOld);
  collectAddedNodes(onlyNew);
  collectMovedNodes(intersect);
  collectPropertyChanges(newNodes);
  collectReferenceChanges(newNodes);
  collectConceptChanges(intersect);
  makeChangeGroups();
}
