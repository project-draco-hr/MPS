{
  super.doInit();
  Map<SNodeId,SNodeTreeNode> idToTreeNode=new HashMap();
  Set<SNodeId> rootNodes=new HashSet<SNodeId>();
  for (  SNodeId deletedNodeId : myDeletedNodes) {
    boolean firstTime=processNode(deletedNodeId,null,idToTreeNode,rootNodes);
    if (firstTime) {
      rootNodes.add(deletedNodeId);
    }
  }
  for (  SNodeId root : rootNodes) {
    SNode parent=myOldModel.getNodeById(root).getParent();
    if (parent == null) {
      add(idToTreeNode.get(root));
    }
 else {
      final SNodeId deletedNodeParentId=parent.getSNodeId();
      MPSTreeNode parentTreeNode=findDescendantWith(new Condition<Object>(){
        public boolean met(        Object object){
          if (object == null)           return false;
          return ((SNode)object).getSNodeId().equals(deletedNodeParentId);
        }
      }
);
      if (parentTreeNode != null) {
        parentTreeNode.add(idToTreeNode.get(root));
      }
    }
  }
  List<UsedLanguagesChange> usedLanguagesChanges=CollectionUtil.filter(UsedLanguagesChange.class,myChanges);
  if (!(usedLanguagesChanges.isEmpty())) {
    ModelChangesTree.SModelPropertiesTreeNode propertiesNode=new SModelPropertiesTreeNode(getOperationContext());
    getRootNode().add(propertiesNode);
    for (    UsedLanguagesChange change : usedLanguagesChanges) {
      propertiesNode.add(new UsedLanguagesChangeTreeNode(getOperationContext(),change));
    }
  }
}
