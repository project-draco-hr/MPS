{
  myChanges=changes;
  myOldModel=oldModel;
  myNewModel=newModel;
  for (  Change change : changes) {
    SNodeId id=change.getAffectedNodeId();
    if (id != null) {
      addToChangeSubtree(change,change.getAffectedNodeId(),newModel,oldModel);
    }
  }
  for (  AddRootChange ar : CollectionUtil.filter(AddRootChange.class,changes)) {
    myAddedNodes.add(ar.getAffectedNodeId());
  }
  for (  AddNodeChange an : CollectionUtil.filter(AddNodeChange.class,changes)) {
    myAddedNodes.add(an.getAffectedNodeId());
  }
  for (  SetNodeChange c : CollectionUtil.filter(SetNodeChange.class,changes)) {
    myAddedNodes.add(c.getAffectedNodeId());
  }
  for (  SetPropertyChange p : CollectionUtil.filter(SetPropertyChange.class,changes)) {
    myChangedNodes.add(p.getAffectedNodeId());
  }
  for (  SetReferenceChange r : CollectionUtil.filter(SetReferenceChange.class,changes)) {
    myChangedNodes.add(r.getAffectedNodeId());
  }
  for (  ChangeConceptChange ch : CollectionUtil.filter(ChangeConceptChange.class,changes)) {
    myChangedNodes.add(ch.getAffectedNodeId());
  }
  for (  DeleteNodeChange ch : CollectionUtil.filter(DeleteNodeChange.class,changes)) {
    myDeletedNodes.add(ch.getAffectedNodeId());
  }
  rebuildNow();
  expandRoot();
  runWithoutExpansion(new Runnable(){
    public void run(){
      for (      Change c : changes) {
        if (c instanceof NewNodeChange) {
          NewNodeChange nnc=(NewNodeChange)c;
          if (nnc.getNodeParent() == null || !myAddedNodes.contains(nnc.getNodeParent())) {
            expandNode(c.getAffectedNodeId());
          }
        }
 else         if (c instanceof SetPropertyChange || c instanceof SetReferenceChange) {
          SNodeId id=c.getAffectedNodeId();
          if (!myAddedNodes.contains(id)) {
            expandNode(id);
          }
        }
 else         if (c instanceof DeleteNodeChange) {
        }
 else {
          expandNode(c.getAffectedNodeId());
        }
      }
    }
  }
);
  return this;
}
