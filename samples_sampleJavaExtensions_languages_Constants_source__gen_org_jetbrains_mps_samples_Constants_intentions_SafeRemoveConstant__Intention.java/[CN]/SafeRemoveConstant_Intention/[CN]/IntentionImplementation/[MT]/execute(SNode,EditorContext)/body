{
  Iterable<SNode> allReferences=ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(0xd40d465dded40d0L,0x8d4c2c6d177f60d7L,0x14be6cdec1861417L,"org.jetbrains.mps.samples.Constants.structure.Constants"),false,false),MetaAdapterFactory.getConcept(0xd40d465dded40d0L,0x8d4c2c6d177f60d7L,0x37600150f5294665L,"org.jetbrains.mps.samples.Constants.structure.ConstantReference"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xd40d465dded40d0L,0x8d4c2c6d177f60d7L,0x37600150f5294665L,0x37600150f5294666L,"original")) == node;
    }
  }
);
  Sequence.fromIterable(allReferences).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SNodeOperations.replaceWithAnother(it,SNodeOperations.copyNode(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0xd40d465dded40d0L,0x8d4c2c6d177f60d7L,0x14be6cdec1861419L,0x1bc7b724b7dec5e1L,"initializer"))));
    }
  }
);
  SNodeOperations.deleteNode(node);
}
