{
  Graph copy=new Graph();
  Map<Node,Node> nodeMap=MapSequence.fromMap(new HashMap<Node,Node>());
  Map<Edge,Edge> edgeMap=MapSequence.fromMap(new HashMap<Edge,Edge>());
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    MapSequence.fromMap(nodeMap).put(node,copy.addNode());
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    MapSequence.fromMap(edgeMap).put(edge,MapSequence.fromMap(nodeMap).get(edge.getSource()).addEdgeTo(MapSequence.fromMap(nodeMap).get(edge.getTarget())));
  }
  BiconnectAugmentation.smartMakeBiconnected(copy);
  int num=copy.getNumNodes();
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(copy);
  if (SHOW_INFO > 0) {
    System.out.println("*--------------------------------------------------------------*");
    System.out.println("INFO: added " + (copy.getNumNodes() - num) + " edge crossings!!!");
    System.out.println("*--------------------------------------------------------------*");
  }
  reduceNodesDegree(embeddedGraph);
  if (SHOW_INFO > 0) {
    System.out.println("after reducing nodes degree: ");
    System.out.println(embeddedGraph);
  }
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
  if (SHOW_INFO > 0) {
    System.out.println("bends:");
    System.out.println(bends);
  }
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  if (SHOW_INFO > 0) {
    System.out.println("after replacing bends by nodes: ");
    for (    Face face : ListSequence.fromList(embeddedGraph.getFaces())) {
      System.out.println("face: ");
      if (embeddedGraph.isOuterFace(face)) {
        System.out.println("outer!");
      }
      for (      Dart dart : ListSequence.fromList(face.getDarts())) {
        System.out.print(dart + " dir = " + MapSequence.fromMap(directions).get(dart)+ "; ");
      }
      System.out.println();
    }
  }
  makeRectangularFaces(embeddedGraph,directions);
  if (SHOW_INFO > 0) {
    System.out.println("after making faces rectangular: ");
    for (    Face face : ListSequence.fromList(embeddedGraph.getFaces())) {
      System.out.println("face: ");
      if (embeddedGraph.isOuterFace(face)) {
        System.out.println("outer!");
      }
      for (      Dart dart : ListSequence.fromList(face.getDarts())) {
        System.out.print(dart + " dir = " + MapSequence.fromMap(directions).get(dart)+ "; ");
      }
      System.out.println();
    }
  }
  Map<Edge,Integer> lengths=new EdgeLengthComputer().compute(embeddedGraph,directions);
  OrthogonalPointLayouter.CoordinatePlacerDfs dfs=new OrthogonalPointLayouter.CoordinatePlacerDfs(embeddedGraph,lengths,directions);
  dfs.doDfs(copy,Edge.Direction.BOTH);
  Map<Node,Point> coordinates=dfs.getCoordinates();
  GraphLayoutPoint copyLayout=new GraphLayoutPoint(copy);
  for (  Node node : ListSequence.fromList(copy.getNodes())) {
    copyLayout.setLayoutFor(node,MapSequence.fromMap(coordinates).get(node));
  }
  for (  Edge edge : ListSequence.fromList(copy.getEdges())) {
    List<Point> edgeLayout=ListSequence.fromList(new ArrayList<Point>());
    ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(edge.getSource())));
    ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(edge.getTarget())));
    copyLayout.setLayoutFor(edge,edgeLayout);
  }
  return copyLayout;
}
