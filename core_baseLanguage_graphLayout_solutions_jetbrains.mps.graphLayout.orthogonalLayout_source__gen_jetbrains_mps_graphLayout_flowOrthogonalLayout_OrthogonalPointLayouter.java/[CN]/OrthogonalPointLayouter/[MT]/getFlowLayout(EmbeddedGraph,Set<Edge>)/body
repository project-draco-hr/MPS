{
  Graph graph=embeddedGraph.getGraph();
  List<Edge> oldEdges=ListSequence.fromList(new ArrayList<Edge>());
  ListSequence.fromList(oldEdges).addSequence(ListSequence.fromList(graph.getEdges()));
  List<Node> oldNodes=ListSequence.fromList(new ArrayList<Node>());
  ListSequence.fromList(oldNodes).addSequence(ListSequence.fromList(graph.getNodes()));
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentation.getRepresentation(embeddedGraph,edgesToBeStraight,bends,angles);
  if (SHOW_INFO > 0) {
    System.out.println("bends:");
    System.out.println(bends);
  }
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  if (SHOW_INFO > 0) {
    this.printEmbeddedGraphWithDirections(embeddedGraph,directions);
  }
  makeRectangularFaces(embeddedGraph,directions);
  if (SHOW_INFO > 0) {
    System.out.println("after making faces rectangular: ");
    printEmbeddedGraphWithDirections(embeddedGraph,directions);
  }
  Map<Edge,Integer> lengths=new EdgeLengthComputer().compute(embeddedGraph,directions);
  OrthogonalPointLayouter.CoordinatePlacerDfs dfs=new OrthogonalPointLayouter.CoordinatePlacerDfs(embeddedGraph,lengths,directions);
  dfs.doDfs(graph,Edge.Direction.BOTH);
  Map<Node,Point> coordinates=dfs.getCoordinates();
  GraphLayoutPoint graphLayout=new GraphLayoutPoint(graph);
  for (  Node node : ListSequence.fromList(oldNodes)) {
    graphLayout.setLayoutFor(node,MapSequence.fromMap(coordinates).get(node));
  }
  for (  Edge edge : ListSequence.fromList(oldEdges)) {
    List<Edge> history=embeddedGraph.findFullHistory(edge);
    List<Point> edgeLayout=ListSequence.fromList(new ArrayList<Point>());
    Node cur=edge.getSource();
    ListSequence.fromList(edgeLayout).addElement(MapSequence.fromMap(coordinates).get(cur));
    for (    Edge historyEdge : ListSequence.fromList(history)) {
      Node next=historyEdge.getOpposite(cur);
      ListSequence.fromList(edgeLayout).addElement(MapSequence.fromMap(coordinates).get(next));
      cur=next;
    }
    graphLayout.setLayoutFor(edge,edgeLayout);
  }
  GraphLayoutPoint copyLayout=new GraphLayoutPoint(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    copyLayout.setLayoutFor(node,MapSequence.fromMap(coordinates).get(node));
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    List<Point> edgeLayout=ListSequence.fromList(new ArrayList<Point>());
    ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(edge.getSource())));
    ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(edge.getTarget())));
    copyLayout.setLayoutFor(edge,edgeLayout);
  }
  return graphLayout;
}
