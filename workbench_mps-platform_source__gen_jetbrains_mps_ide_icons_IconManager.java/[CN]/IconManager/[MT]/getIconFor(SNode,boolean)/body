{
  return ModelAccess.instance().runReadAction(new Computable<Icon>(){
    @Override public Icon compute(){
      Icon mainIcon=null;
      if (SNodeOperations.isUnknown(node)) {
        return IdeIcons.UNKNOWN_ICON;
      }
      SNode concept=jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getConceptDeclaration(node);
      if ((concept != null)) {
        Icon alternativeIcon=null;
        try {
          String alternativeIconPath=ConceptRegistry.getInstance().getConstraintsDescriptor(NameUtil.nodeFQName(concept)).getAlternativeIcon(node);
          if (alternativeIconPath != null) {
            alternativeIcon=IconManager.getIconForConcept(concept,alternativeIconPath);
          }
        }
 catch (        Exception ignore) {
        }
        if (alternativeIcon != null) {
          mainIcon=alternativeIcon;
        }
 else {
          mainIcon=IconManager.getIconForConcept(concept);
        }
      }
      if (mainIcon == null) {
        if (jetbrains.mps.util.SNodeOperations.isRoot(node)) {
          return IdeIcons.DEFAULT_ROOT_ICON;
        }
 else {
          return IdeIcons.DEFAULT_NODE_ICON;
        }
      }
      SModel model=jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getModel(node);
      if (model == null || jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
        return mainIcon;
      }
      if (!(SModelStereotype.isUserModel(model)) || model instanceof EditableSModel && ((EditableSModel)model).isReadOnly()) {
        mainIcon=new LayeredIcon(mainIcon,PlatformIcons.LOCKED_ICON);
      }
      RowIcon result=new RowIcon(2);
      result.setIcon(mainIcon,0);
      if (!(withoutAdditional)) {
        result.setIcon(BehaviorReflection.invokeVirtual(Icon.class,node,"virtual_getAdditionalIcon_5017341185733863694",new Object[]{}),1);
      }
      List<Icon> markIcons=BehaviorReflection.invokeVirtual((Class<List<Icon>>)((Class)Object.class),node,"virtual_getMarkIcons_3923831204883340393",new Object[]{});
      if (markIcons != null) {
        LayeredIcon layeredIcon=new LayeredIcon(markIcons.size() + 1);
        layeredIcon.setIcon(result,0);
        for (int i=0; i < markIcons.size(); i++) {
          layeredIcon.setIcon(markIcons.get(i),i + 1);
        }
        return layeredIcon;
      }
      return result;
    }
  }
);
}
