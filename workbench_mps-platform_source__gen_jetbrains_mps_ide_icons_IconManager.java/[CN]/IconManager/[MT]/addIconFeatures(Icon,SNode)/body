{
  SModel model=SNodeOperations.getModel(node);
  if (model == null || jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
    return mainIcon;
  }
  if (!(SModelStereotype.isUserModel(model)) || model instanceof EditableSModel && model.isReadOnly()) {
    mainIcon=new LayeredIcon(mainIcon,PlatformIcons.LOCKED_ICON);
  }
  RowIcon result=new RowIcon(2);
  result.setIcon(mainIcon,0);
  result.setIcon(getIconForResource(((IconResource)BHReflection.invoke(node,SMethodTrimmedId.create("getSideIcon",null,"6TtJ6IUjtJX")))),1);
  List<Icon> markIcons=ListSequence.fromList(((List<IconResource>)BHReflection.invoke(node,SMethodTrimmedId.create("getIconMarks",null,"6TtJ6IUkhQJ")))).select(new ISelector<IconResource,Icon>(){
    public Icon select(    IconResource it){
      return getIconForResource(it);
    }
  }
).where(new IWhereFilter<Icon>(){
    public boolean accept(    Icon it){
      return it != null;
    }
  }
).toListSequence();
  if (ListSequence.fromList(markIcons).isNotEmpty()) {
    LayeredIcon layeredIcon=new LayeredIcon(ListSequence.fromList(markIcons).count() + 1);
    layeredIcon.setIcon(result,0);
    for (int i=0; i < ListSequence.fromList(markIcons).count(); i++) {
      layeredIcon.setIcon(ListSequence.fromList(markIcons).getElement(i),i + 1);
    }
    return layeredIcon;
  }
  return result;
}
