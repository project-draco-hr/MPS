{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("facet",new BaseReferenceConstraintsDescriptor("facet",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return Sequence.fromIterable(new FacetsScope(_context.getContextNode()).getAvailableElements(null)).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,"jetbrains.mps.make.facet.structure.FacetDeclaration");
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return !(Sequence.fromIterable(FacetDeclaration_Behavior.call_allExtends_7854369758457864780(it)).contains(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.make.facet.structure.FacetDeclaration")));
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_3m3hc2_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
