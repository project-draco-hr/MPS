{
  Graph g=new Graph();
  for (int i=0; i < numNodes; i++) {
    g.createNode();
  }
  List<Set<Integer>> connected=ListSequence.fromList(new ArrayList<Set<Integer>>());
  for (int i=0; i < numNodes; i++) {
    ListSequence.fromList(connected).addElement(SortedSetSequence.fromSet(new TreeSet<Integer>()));
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(i)).addElement(i);
  }
  int maxIter=1000;
  int countBad=0;
  for (int i=0; i < numEdges; i++) {
    int s=0;
    int t=0;
    int iter=0;
    for (; iter < maxIter; iter++) {
      s=RandomGraphGenerator.rand.nextInt(numNodes);
      t=RandomGraphGenerator.rand.nextInt(numNodes);
      if (!(SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).contains(t))) {
        break;
      }
    }
    if (iter == maxIter) {
      countBad++;
      s=0;
      while (s < numNodes && SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).count() == numNodes) {
        s++;
      }
      if (s == numNodes) {
        throw new IllegalArgumentException("too much edges!");
      }
      t=0;
      while (SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).contains(t)) {
        t++;
      }
    }
    g.addEdgeByIndex(s,t);
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).addElement(t);
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(t)).addElement(s);
  }
  System.out.println("random failed " + countBad + " times!");
  return g;
}
