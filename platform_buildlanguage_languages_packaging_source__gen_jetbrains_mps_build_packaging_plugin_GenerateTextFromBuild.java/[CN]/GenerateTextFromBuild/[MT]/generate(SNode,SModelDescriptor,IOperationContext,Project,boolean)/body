{
  final String basedir=ModelAccess.instance().runReadAction(new Computable<String>(){
    public String compute(){
      return Layout_Behavior.call_getFolderToGenerate_1229522949966(Configuration_Behavior.call_getLayout_1213877261819(configuration));
    }
  }
);
  final File[] fileToRun=new File[]{null};
  final TextGenerationHandler generationHandler=new TextGenerationHandler(){
    @Override protected void fileGenerated(    String targetDir,    String fileName,    TextGenerationResult result){
      File target=new File(basedir + File.separator + fileName);
      new File(basedir + File.separator).mkdirs();
      Object value=result.getResult();
      if (value instanceof String) {
        FileUtil.write(target,(String)value);
      }
 else {
        FileUtil.write(target,(byte[])value);
      }
      if (target.getName().equals(Configuration_Behavior.call_getBuildFileName_1230217425313(configuration) + ".xml")) {
        fileToRun[0]=target;
      }
    }
  }
;
  Runnable generate=new Runnable(){
    public void run(){
      if (showWindow) {
        GeneratorUIFacade.getInstance().generateModels(context,ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(),descriptor),generationHandler,true,true);
      }
 else {
        GenerationFacade.generateModels(project,ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(),descriptor),context,generationHandler,new EmptyProgressIndicator(),new DefaultMessageHandler(project),GenerationOptions.getDefaults().create());
      }
    }
  }
;
  if (ApplicationManager.getApplication().isDispatchThread()) {
    generate.run();
  }
 else {
    ApplicationManager.getApplication().invokeAndWait(generate,ModalityState.NON_MODAL);
  }
  return fileToRun[0];
}
