{
  final String basedir=ModelAccess.instance().runReadAction(new Computable<String>(){
    public String compute(){
      return ILayoutComponent_Behavior.call_getPath_1213877230696(mpsLayout);
    }
  }
);
  final GeneratorManager generatorManager=project.getComponentSafe(GeneratorManager.class);
  final File[] layoutFile=new File[1];
  GenerateModelGenerationType generationType=new GenerateModelGenerationType(){
    @Override() public boolean handleOutput(    GenerationStatus status,    String outputDir,    IOperationContext ocontext,    ProgressIndicator monitor,    IMessageHandler messages){
      List<SNode> roots=status.getOutputModel().getRoots();
      File tmpDir=FileUtil.createTmpDir();
      List<File> generatedFiles=ListSequence.<File>fromArray();
      for (      SNode output : Sequence.fromIterable(roots)) {
        TextGenerationUtil.TextGenerationResult result=TextGenerationUtil.generateText(ocontext,output);
        GenerateTextFromBuild.LOG.assertLog(!(result.hasErrors()),"Could not generate build files");
        SNode input=status.getTraceMap().getOriginalInputNode(output);
        IFileGenerator fileGenerator=generatorManager.chooseFileGenerator(output,input);
        try {
          File generatedFile=fileGenerator.generateFile(output,input,status.getInputModel(),result.getText(),tmpDir);
          ListSequence.fromList(generatedFiles).addElement(generatedFile);
        }
 catch (        IOException e) {
          GenerateTextFromBuild.LOG.error("Could not generate build files.",e);
        }
      }
      for (      File file : Sequence.fromIterable(generatedFiles)) {
        File target=new File(basedir + File.separator + file.getName());
        FileUtil.copyFile(file,target);
        if (file.getName().equals(SPropertyOperations.getString(mpsLayout,"name") + "-" + ListSequence.fromList(SLinkOperations.getTargets(mpsLayout,"configuration",true)).first()+ ".xml")) {
          layoutFile[0]=target;
        }
      }
      tmpDir.delete();
      return true;
    }
  }
;
  generatorManager.generateModelsWithProgressWindow(ListSequence.<SModelDescriptor>fromArray(descriptor),context,generationType,true);
  return layoutFile[0];
}
