{
  if (myLoadedLanguages.contains(l.getNamespace())) {
    return true;
  }
  SModelDescriptor helginsModelDescriptor=l.getHelginsTypesystemModelDescriptor();
  if (helginsModelDescriptor == null)   return false;
  String packageName=helginsModelDescriptor.getLongName();
  String classname="HelginsDescriptor";
  try {
    IHelginsDescriptor helginsDescriptor;
    Class<? extends IHelginsDescriptor> c=(Class<? extends IHelginsDescriptor>)l.getClass(packageName + "." + classname);
    if (c != null) {
      helginsDescriptor=c.newInstance();
      myInferenceRules.addRuleSetItem(helginsDescriptor.getInferenceRules());
      myNonTypesystemRules.addRuleSetItem(helginsDescriptor.getNonTypesystemRules());
      mySubtypingRules.addRuleSetItem(helginsDescriptor.getSubtypingRules());
      mySupertypingRules.addRuleSetItem(helginsDescriptor.getSupertypingRules());
      myComparisonRules.addRuleSetItem(helginsDescriptor.getComparisonRules());
      myReplacementRules.addRuleSetItem(helginsDescriptor.getEliminationRules());
      myDependenciesContainer.addDependencies(helginsDescriptor.getDependencies());
      myInferenceRules.makeConsistent();
      myNonTypesystemRules.makeConsistent();
      mySubtypingRules.makeConsistent();
      mySupertypingRules.makeConsistent();
      myComparisonRules.makeConsistent();
      myReplacementRules.makeConsistent();
      myDependenciesContainer.makeConsistent();
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Throwable t) {
    return false;
  }
 finally {
    myLoadedLanguages.add(l.getNamespace());
  }
}
