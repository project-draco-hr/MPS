{
  this.addNodeById("1230053302653");
  this.addNodeById("1230053302662");
  this.addNodeById("1230053302673");
  this.addNodeById("1230053302677");
  MoveStaticMethodRefactoring ref=new MoveStaticMethodRefactoring(SNodeOperations.cast(this.getNodeById("1230053302655"),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),SNodeOperations.cast(this.getNodeById("1230053302663"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
  ref.doRefactoring();
  ref.replaceSingleUsage(SNodeOperations.cast(this.getNodeById("1230053302669"),"jetbrains.mps.baseLanguage.structure.StaticMethodCall"));
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053302654"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(this.getNodeById("1230053302663"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230053302674"),"jetbrains.mps.baseLanguage.structure.ClassConcept"),SNodeOperations.cast(this.getNodeById("1230053302678"),"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
