{
  if (DescriptorIOFacade.getInstance().fromFileType(FileSystem.getInstance().getFileByPath(moduleFile.getPath())) == null) {
    return;
  }
  List<SModule> tmpmodules=new ArrayList<SModule>();
  SModule moduleByFile=ModuleFileTracker.getInstance().getModuleByFile(FileSystem.getInstance().getFileByPath(moduleFile.getAbsolutePath()));
  if (moduleByFile != null) {
    tmpmodules=Collections.singletonList(moduleByFile);
  }
 else {
    IFile file=FileSystem.getInstance().getFileByPath(moduleFile.getPath());
    BaseMPSModuleOwner owner=new BaseMPSModuleOwner();
    for (    ModulesMiner.ModuleHandle moduleHandle : ModulesMiner.getInstance().collectModules(file,false)) {
      SModule module=ModuleRepositoryFacade.createModule(moduleHandle,owner);
      if (module != null) {
        tmpmodules.add(module);
      }
    }
  }
  for (  SModule module : tmpmodules) {
    info("Loaded module " + module);
    if (module.isReadOnly()) {
      continue;
    }
    if (module instanceof DevKit) {
      continue;
    }
    modules.add(module);
    if (module instanceof Language) {
      Language language=(Language)module;
      for (      Generator gen : language.getGenerators()) {
        modules.add(gen);
      }
    }
  }
}
