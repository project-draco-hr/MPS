{
  Edge stEdge=null;
  boolean deleteAfter=false;
  for (  Edge edge : ListSequence.<Edge>fromList(source.getEdges())) {
    if (edge.getOpposite(source) == target) {
      stEdge=edge;
    }
  }
  if (stEdge == null) {
    stEdge=graph.connect(source,target);
    deleteAfter=true;
  }
  BiconnectedComponents biconnectedComponents=new BiconnectedComponents();
  biconnectedComponents.doDfs(graph,source,stEdge);
  Map<Node,Node> low=biconnectedComponents.getLow();
  STNumbering.Numbering numbering=new STNumbering.Numbering();
  numbering.doDfs(graph,source,stEdge,low);
  Map<Node,Integer> res=new NodeMap<Integer>(graph);
  int curNum=0;
  for (  Node node : ListSequence.<Node>fromList(numbering.getList())) {
    MapSequence.<Node,Integer>fromMap(res).put(node,curNum++);
  }
  if (deleteAfter) {
    graph.removeEdge(stEdge);
  }
  return res;
}
