{
  List<SNode> outputNodes=myRuleManager.getReductionRuleManager().tryToReduce(inputNode);
  if (outputNodes != null) {
    if (outputNodes.size() == 1) {
      SNode outputNode=outputNodes.get(0);
{
        myGenerator.addOutputNodeByInputAndTemplateNode(inputNode,templateNode,outputNode);
        myGenerator.addOutputNodeByInputNodeAndMappingName(inputNode,mappingName,outputNode);
        myGenerator.addOutputNodeByInputAndTemplateNode(inputNode,inputNode,outputNode);
      }
    }
    return outputNodes;
  }
  SNode outputNode=SModelUtil_new.instantiateConceptDeclaration(inputNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
  if (outputNode == null) {
    myGenerator.showErrorMessage(inputNode,templateNode,"'copyNodeFromInputNode' cannot create output node");
    return null;
  }
{
    myGenerator.addOutputNodeByInputAndTemplateNode(inputNode,templateNode,outputNode);
    myGenerator.addOutputNodeByInputNodeAndMappingName(inputNode,mappingName,outputNode);
    myGenerator.addOutputNodeByInputAndTemplateNode(inputNode,inputNode,outputNode);
    myGenerator.addTemplateNodeByOutputNode(outputNode,inputNode);
    myGenerator.addOutputNodeByTemplateNode(inputNode,outputNode);
  }
  myOutputModel.addLanguage(inputNode.getLanguage(myGenerator.getScope()));
  CloneUtil.copyProperties(inputNode,outputNode);
  SModel inputModel=inputNode.getModel();
  for (  SReference inputReference : inputNode.getReferences()) {
    SNode inputTargetNode=inputReference.getTargetNode();
    if (inputTargetNode == null) {
      myGenerator.showErrorMessage(inputNode,templateNode,"'copyNodeFromInputNode' referent node is null in template model");
      continue;
    }
    if (inputTargetNode.getModel().equals(inputModel)) {
      myGenerator.addReferenceInfo(new ReferenceInfo_CopiedInputNode(outputNode,inputReference));
    }
 else {
      outputNode.addReferent(inputReference.getRole(),inputTargetNode);
    }
  }
  for (  INodeAdapter inputChildNode : inputNode.getAdapter().getChildren()) {
    String childRole=inputNode.getRoleOf(inputChildNode.getNode());
    List<SNode> outputChildNodes=copyNodeFromInputNode(null,inputChildNode.getNode(),inputChildNode.getNode());
    if (outputChildNodes != null) {
      for (      SNode outputChildNode : outputChildNodes) {
        outputNode.addChild(childRole,outputChildNode);
      }
    }
  }
  outputNodes=new ArrayList<SNode>(1);
  outputNodes.add(outputNode);
  return outputNodes;
}
