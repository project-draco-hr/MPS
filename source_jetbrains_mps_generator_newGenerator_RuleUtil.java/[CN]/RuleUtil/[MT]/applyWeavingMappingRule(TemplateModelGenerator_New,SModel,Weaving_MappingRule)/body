{
  ConceptDeclaration applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    generator.showErrorMessage(null,rule,"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.getApplyToConceptInheritors();
  List<SNode> nodes=generator.getSourceModel().getModelDescriptor().getFastNodeFinder().getNodes((jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration)applicableConcept.getAdapter(),includeInheritors);
  for (  SNode applicableNode : nodes) {
    if (checkConditionForBaseMappingRule(generator,applicableNode,rule)) {
      SNode contextNode=getContextNodeForWeavingingRule(applicableNode,rule,rule.getContextProviderAspectId(),generator);
      if (contextNode == null) {
        generator.showErrorMessage(applicableNode,rule,"couldn't find context node");
        continue;
      }
      TemplateDeclaration template=rule.getTemplate();
      if (template != null) {
        weaveTemplateDeclaration(generator,outputModel,applicableNode,template,contextNode,rule);
      }
 else {
        RuleConsequence ruleConsequence=rule.getRuleConsequence();
        if (ruleConsequence instanceof TemplateDeclarationReference) {
          template=((TemplateDeclarationReference)ruleConsequence).getTemplate();
          weaveTemplateDeclaration(generator,outputModel,applicableNode,template,contextNode,rule);
        }
 else         if (ruleConsequence instanceof WeaveEach_RuleConsequence) {
          WeaveEach_RuleConsequence weaveEach=(WeaveEach_RuleConsequence)ruleConsequence;
          SourceSubstituteMacro_SourceNodesQuery nodesQuery=weaveEach.getSourceNodesQuery();
          if (nodesQuery == null) {
            generator.showErrorMessage(applicableNode,rule,"couldn't create list of source nodes");
            break;
          }
          template=weaveEach.getTemplate();
          List<SNode> queryNodes=evaluateSourceNodesQuery(applicableNode,nodesQuery,ruleConsequence,generator);
          for (          SNode queryNode : queryNodes) {
            weaveTemplateDeclaration(generator,outputModel,queryNode,template,contextNode,rule);
          }
        }
 else {
          generator.showErrorMessage(applicableNode,null,ruleConsequence,"unsapported rule consequence");
        }
      }
    }
  }
}
