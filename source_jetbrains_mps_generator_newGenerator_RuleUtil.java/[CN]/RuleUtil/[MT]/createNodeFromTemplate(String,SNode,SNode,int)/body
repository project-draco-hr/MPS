{
  int i=0;
  List<SNode> outputNodes=new LinkedList<SNode>();
  for (  INodeAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (!(templateChildNode instanceof NodeMacro))     continue;
    i++;
    if (i <= nodeMacrosToSkip)     continue;
    NodeMacro nodeMacro=(NodeMacro)templateChildNode;
    if (templateChildNode instanceof LoopMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        List<SNode> outputChildNodes=createNodeFromTemplate(nodeMacro.getMappingId(),templateNode,newInputNode,nodeMacrosToSkip + 1);
        if (outputChildNodes != null) {
          outputNodes.addAll(outputChildNodes);
        }
      }
      return outputNodes;
    }
 else     if (templateChildNode instanceof CopySrcNodeMacro || templateChildNode instanceof CopySrcListMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        String mappingId=nodeMacro.getMappingId();
        List<SNode> newOutputNodes=copyNodeFromInputNode(mappingId,templateNode,newInputNode);
        if (newOutputNodes.size() == 1) {
          myGenerator.addOutputNodeByTemplateNodeAndInputNode(templateNode,inputNode,newOutputNodes.get(0));
        }
        outputNodes.addAll(newOutputNodes);
      }
      return outputNodes;
    }
 else     if (templateChildNode instanceof IfMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        List<SNode> outputChildNodes=createNodeFromTemplate(nodeMacro.getMappingId(),templateNode,newInputNode,nodeMacrosToSkip + 1);
        if (outputChildNodes != null) {
          outputNodes.addAll(outputChildNodes);
        }
      }
      return outputNodes;
    }
 else     if (templateChildNode instanceof MapSrcNodeMacro || templateChildNode instanceof MapSrcListMacro) {
      MapSrcMacro_MapperFunction macro_mapperFunction;
      String mapperId;
      if (templateChildNode instanceof MapSrcNodeMacro) {
        macro_mapperFunction=((MapSrcNodeMacro)templateChildNode).getMapperFunction();
        mapperId=((MapSrcNodeMacro)templateChildNode).getSourceNodeMapperId();
      }
 else {
        macro_mapperFunction=((MapSrcListMacro)templateChildNode).getMapperFunction();
        mapperId=((MapSrcListMacro)templateChildNode).getSourceNodeMapperId();
      }
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        if (mapperId != null || macro_mapperFunction != null) {
          SNode childToReplaceLater=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
          outputNodes.add(childToReplaceLater);
          myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroChange(nodeMacro,childToReplaceLater,newInputNode,myGenerator);
        }
 else {
          List<SNode> outputChildNodes=createNodeFromTemplate(nodeMacro.getMappingId(),templateNode,newInputNode,nodeMacrosToSkip + 1);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
      }
      return outputNodes;
    }
 else     if (templateChildNode instanceof SwitchMacro) {
      TemplateSwitch templateSwitch=((SwitchMacro)nodeMacro).getTemplateSwitch();
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,0,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        RuleConsequence consequenceForCase=(RuleConsequence)myGenerator.getConsequenceForSwitchCase(newInputNode,templateSwitch);
        SNode templateNodeForCase=null;
        if (consequenceForCase != null) {
          if (consequenceForCase instanceof DismissTopMappingRule) {
            TemplateGenUtil.showGeneratorMessage((GeneratorMessage)((DismissTopMappingRule)consequenceForCase).getGeneratorMessage(),newInputNode,consequenceForCase.getNode(),myGenerator);
            throw new ReductionNotNeededException();
          }
 else           if (consequenceForCase instanceof TemplateDeclarationReference) {
            TemplateDeclaration templateForSwitchCase=((TemplateDeclarationReference)consequenceForCase).getTemplate();
            templateNodeForCase=getTemplateNodeForSwitchCaseTemplate(newInputNode,templateForSwitchCase,templateSwitch,myGenerator);
          }
 else           if (consequenceForCase instanceof InlineTemplate_RuleConsequence) {
            templateNodeForCase=BaseAdapter.fromAdapter(((InlineTemplate_RuleConsequence)consequenceForCase).getTemplateNode());
          }
 else {
            myGenerator.showErrorMessage(newInputNode,null,consequenceForCase.getNode(),"failed to process switch : unsupported rule consequence");
            return null;
          }
        }
 else {
          TemplateDeclaration templateForSwitchCase=myGenerator.getTemplateForSwitchCase_deprecated(newInputNode,templateSwitch);
          if (templateForSwitchCase != null) {
            templateNodeForCase=getTemplateNodeForSwitchCaseTemplate(newInputNode,templateForSwitchCase,templateSwitch,myGenerator);
          }
        }
        if (templateNodeForCase != null) {
          List<SNode> outputChildNodes=createNodeFromTemplate(nodeMacro.getMappingId(),templateNodeForCase,newInputNode,0);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
 else {
          List<SNode> outputChildNodes=createNodeFromTemplate(nodeMacro.getMappingId(),templateNode,newInputNode,nodeMacrosToSkip + 1);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
      }
      return outputNodes;
    }
 else {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        SNode newOutputChild=processTargetBuilderAspectMethod(newInputNode,templateNode,ruleName,nodeMacro);
        if (newOutputChild != null) {
          outputNodes.add(newOutputChild);
        }
 else {
          List<SNode> outputChildNodes=createNodeFromTemplate(nodeMacro.getMappingId(),templateNode,newInputNode,nodeMacrosToSkip + 1);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
      }
      return outputNodes;
    }
  }
  SNode outputNode=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
  if (outputNode == null) {
    myGenerator.showErrorMessage(null,templateNode,"'createNodeFromTemplate' cannot create output node");
    return null;
  }
  outputNodes.add(outputNode);
  myGenerator.addOutputNodeByTemplateNodeAndInputNode(templateNode,inputNode,outputNode);
  myGenerator.addOutputNodeByRuleNameAndInputNode(templateNode,ruleName,inputNode,outputNode);
  myGenerator.addTemplateNodeByOutputNode(outputNode,templateNode);
  myGenerator.addOutputNodeByTemplateNode(templateNode,outputNode);
  myOutputModel.addLanguage(templateNode.getLanguage(myGenerator.getScope()));
  for (  String property : templateNode.getProperties().keySet()) {
    outputNode.setProperty(property,templateNode.getProperty(property),false);
  }
  SModel templateModel=templateNode.getModel();
  for (  SReference reference : templateNode.getReferences()) {
    if (templateNode.getLinkAttribute("referenceMacro",reference.getRole()) != null) {
      continue;
    }
    SNode templateReferentNode=reference.getTargetNode();
    if (templateReferentNode == null) {
      myGenerator.showErrorMessage(null,templateNode,"'createNodeFromTemplate' referent node is null in template model");
      continue;
    }
    if (templateReferentNode.getModel().equals(templateModel)) {
      myGenerator.addReferenceInfo(new ReferenceInfo_Default(outputNode,reference,templateNode,templateReferentNode,inputNode));
    }
 else {
      outputNode.addReferent(reference.getRole(),templateReferentNode);
    }
  }
  for (  INodeAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (templateChildNode instanceof NodeMacro)     continue;
    if (templateChildNode instanceof TemplateFragment)     continue;
    if (templateChildNode instanceof PropertyMacro) {
      MacroUtil.expandPropertyMacro(myGenerator,(PropertyMacro)templateChildNode,inputNode,templateNode,outputNode);
    }
 else     if (templateChildNode instanceof ReferenceMacro) {
      myGenerator.addReferenceInfo(new ReferenceInfo_Macro((ReferenceMacro)templateChildNode,inputNode,templateNode,outputNode));
    }
 else {
      List<SNode> outputChildNodes=createNodeFromTemplate(ruleName,templateChildNode.getNode(),inputNode,0);
      if (outputChildNodes != null) {
        String role=templateChildNode.getRole_();
        for (        SNode outputChildNode : outputChildNodes) {
          outputNode.addChild(role,outputChildNode);
        }
      }
    }
  }
  return outputNodes;
}
