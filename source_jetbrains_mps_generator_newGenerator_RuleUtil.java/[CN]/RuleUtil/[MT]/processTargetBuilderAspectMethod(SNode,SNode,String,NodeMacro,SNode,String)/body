{
  String targetBuilderAspectMethodName=nodeMacro.getTargetBuilderAspectMethodName();
  if (targetBuilderAspectMethodName == null) {
    return null;
  }
  String methodName="templateTargetBuilder_" + targetBuilderAspectMethodName;
  Object[] args=new Object[]{inputNode,templateNode,ruleName,myGenerator};
  HashSet<Class<? extends RuntimeException>> rethrowSet=new HashSet<Class<? extends RuntimeException>>();
  rethrowSet.add(ReductionNotNeededException.class);
  INodeBuilder builder=(INodeBuilder)QueryMethod.invoke(methodName,args,nodeMacro.getModel(),rethrowSet);
  if (builder == null)   return null;
  SNode childToReplace=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
  outputParentNode.addChild(roleName,childToReplace);
  myGenerator.getDelayedChanges().addExecuteNodeBuilderChange(outputParentNode,builder,childToReplace);
  return builder;
}
