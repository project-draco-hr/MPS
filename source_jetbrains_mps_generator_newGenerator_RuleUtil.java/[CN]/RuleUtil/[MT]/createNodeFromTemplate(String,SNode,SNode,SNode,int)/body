{
  int i=0;
  List<SNode> outputNodes=new LinkedList<SNode>();
  for (  BaseAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (!(templateChildNode instanceof NodeMacro))     continue;
    i++;
    if (i <= nodeMacrosToSkip)     continue;
    if (templateChildNode instanceof LoopMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        List<SNode> outputChildNodes=createNodeFromTemplate(((LoopMacro)templateChildNode).getMappingId(),templateNode,newInputNode,outputParentNode,nodeMacrosToSkip + 1);
        if (outputChildNodes != null) {
          outputNodes.addAll(outputChildNodes);
        }
      }
      return outputNodes;
    }
 else     if (templateChildNode instanceof CopySrcNodeMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode_ForNewGenerator(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        String mappingId=((CopySrcNodeMacro)templateChildNode).getMappingId();
        List<SNode> newOutputNodes=copyNodeFromInputNode(mappingId,newInputNode,newInputNode);
        outputNodes.addAll(newOutputNodes);
      }
      return outputNodes;
    }
  }
  SNode outputNode=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
  if (outputNode == null) {
    myGenerator.showErrorMessage(null,templateNode,"'createNodeFromTemplate' cannot create output node");
    return null;
  }
  outputNodes.add(outputNode);
  myGenerator.addOutputNodeByTemplateNodeAndInputNode(templateNode,inputNode,outputNode);
  myGenerator.addOutputNodeByRuleNameAndInputNode(ruleName,inputNode,outputNode);
  myOutputModel.addLanguage(templateNode.getLanguage(myGenerator.getScope()));
  for (  String property : templateNode.getProperties().keySet()) {
    outputNode.setProperty(property,templateNode.getProperty(property),false);
  }
  SModel templateModel=templateNode.getModel();
  for (  SReference reference : templateNode.getReferences()) {
    SNode templateReferentNode=reference.getTargetNode();
    if (templateReferentNode == null) {
      myGenerator.showErrorMessage(null,templateNode,"'createNodeFromTemplate' referent node is null in template model");
      continue;
    }
    if (templateReferentNode.getModel().equals(templateModel)) {
      myGenerator.addReferenceInfo(new ReferenceInfo_Default(outputNode,reference.getRole(),templateNode,templateReferentNode,inputNode));
    }
 else {
      outputNode.addReferent(reference.getRole(),templateReferentNode);
    }
  }
  for (  BaseAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (templateChildNode instanceof NodeMacro)     continue;
    if (templateChildNode instanceof PropertyMacro) {
      MacroUtil.expandPropertyMacro(myGenerator,(PropertyMacro)templateChildNode,inputNode,templateNode,outputNode);
    }
 else     if (templateChildNode instanceof ReferenceMacro) {
      myGenerator.addReferenceInfo(new ReferenceInfo_Macro((ReferenceMacro)templateChildNode,inputNode,templateNode,outputNode));
    }
 else {
      List<SNode> outputChildNodes=createNodeFromTemplate(ruleName,templateChildNode.getNode(),inputNode,outputNode,0);
      if (outputChildNodes != null) {
        String childRole=templateNode.getRoleOf(templateChildNode.getNode());
        for (        SNode outputChildNode : outputChildNodes) {
          outputNode.addChild(childRole,outputChildNode);
        }
      }
    }
  }
  return outputNodes;
}
