{
  AbstractConceptDeclaration applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    myGenerator.showErrorMessage(null,null,BaseAdapter.fromAdapter(rule),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.getApplyToConceptInheritors();
  List<SNode> inputNodes=myGenerator.getSourceModel().getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
  for (  SNode inputNode : inputNodes) {
    if (myGenerator.getGeneratorSessionContext().isCopiedRoot(inputNode)) {
      continue;
    }
    if (checkConditionForBaseMappingRule(inputNode,rule)) {
      boolean wasChanged=myGenerator.isChanged();
      try {
        myGenerator.setChanged(true);
        SNode templateNode=BaseAdapter.fromAdapter(rule.getTemplate());
        createRootNodeFromTemplate(rule.getName(),templateNode,inputNode);
        if (inputNode.isRoot() && rule.getKeepSourceRoot() == Options_DefaultTrue.default_) {
          myGenerator.addRootNotToCopy(inputNode);
        }
      }
 catch (      DismissTopMappingRuleException e) {
        myGenerator.setChanged(wasChanged);
      }
    }
  }
}
