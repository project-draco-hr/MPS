{
  TemplateFragment fragment=TemplateFragment_AnnotationLink.getTemplateFragment((BaseConcept)templateFragmentNode.getAdapter());
  String aspectId=fragment.getContextProviderAspectId();
  if (aspectId != null) {
    String methodName="templateFragment_Context_" + aspectId;
    Object[] args=new Object[]{templateFragmentNode,new SimpleNodeBuilder(myGenerator,mainContextNode),myGenerator};
    INodeBuilder nodeBuilder=(INodeBuilder)QueryMethod.invoke(methodName,args,fragment.getModel());
    if (nodeBuilder == null)     return null;
    return nodeBuilder.getTargetNode();
  }
  TemplateFragment_ContextNodeQuery query=fragment.getContextNodeQuery();
  if (query != null) {
    String methodName=TemplateFunctionMethodName.templateFragment_ContextNodeQuery(query.getNode());
    Object[] args=new Object[]{inputNode,mainContextNode,myGenerator};
    try {
      return (SNode)QueryMethodGenerated.invoke(methodName,args,query.getModel());
    }
 catch (    Exception e) {
      myGenerator.showErrorMessage(inputNode,null,templateFragmentNode,"couldn't evaluate template fragment context query");
      LOG.error(e);
      return null;
    }
  }
  return mainContextNode;
}
