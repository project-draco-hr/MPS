{
  int i=0;
  List<SNode> outputNodes=new ArrayList<SNode>();
  for (  INodeAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (!(templateChildNode instanceof NodeMacro))     continue;
    i++;
    if (i <= nodeMacrosToSkip)     continue;
    NodeMacro nodeMacro=(NodeMacro)templateChildNode;
    String mappingName_=nodeMacro.getMappingId() != null ? nodeMacro.getMappingId() : mappingName;
    if (nodeMacro instanceof LoopMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        boolean inputChanged=(newInputNode != inputNode);
        List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName_,templateNode,newInputNode,nodeMacrosToSkip + 1,inputChanged);
        if (_outputNodes != null) {
          outputNodes.addAll(_outputNodes);
          if (registerTopOutput && !inputChanged) {
            myGenerator.addTopOutputNodesByInputNode(inputNode,_outputNodes);
          }
        }
      }
      return outputNodes;
    }
 else     if (nodeMacro instanceof CopySrcNodeMacro || nodeMacro instanceof CopySrcListMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        List<SNode> _outputNodes=copyNodeFromInputNode(mappingName_,templateNode,newInputNode);
        if (_outputNodes.size() == 1) {
          myGenerator.addOutputNodeByInputAndTemplateNode(inputNode,templateNode,_outputNodes.get(0));
        }
        outputNodes.addAll(_outputNodes);
      }
      return outputNodes;
    }
 else     if (nodeMacro instanceof IfMacro) {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        boolean inputChanged=(newInputNode != inputNode);
        List<SNode> _outputNodes=createOutputNodesForTemplateNode(mappingName_,templateNode,newInputNode,nodeMacrosToSkip + 1,inputChanged);
        if (_outputNodes != null) {
          outputNodes.addAll(_outputNodes);
          if (registerTopOutput && !inputChanged) {
            myGenerator.addTopOutputNodesByInputNode(inputNode,_outputNodes);
          }
        }
      }
      return outputNodes;
    }
 else     if (nodeMacro instanceof MapSrcNodeMacro || nodeMacro instanceof MapSrcListMacro) {
      MapSrcMacro_MapperFunction macro_mapperFunction;
      String mapperId;
      if (nodeMacro instanceof MapSrcNodeMacro) {
        macro_mapperFunction=((MapSrcNodeMacro)nodeMacro).getMapperFunction();
        mapperId=((MapSrcNodeMacro)nodeMacro).getSourceNodeMapperId();
      }
 else {
        macro_mapperFunction=((MapSrcListMacro)nodeMacro).getMapperFunction();
        mapperId=((MapSrcListMacro)nodeMacro).getSourceNodeMapperId();
      }
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        boolean inputChanged=(newInputNode != inputNode);
        if (mapperId != null || macro_mapperFunction != null) {
          SNode childToReplaceLater=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
          outputNodes.add(childToReplaceLater);
          myGenerator.getDelayedChanges().addExecuteMapSrcNodeMacroChange(nodeMacro,childToReplaceLater,newInputNode,myGenerator);
        }
 else {
          List<SNode> outputChildNodes=createOutputNodesForTemplateNode(mappingName_,templateNode,newInputNode,nodeMacrosToSkip + 1,inputChanged);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
        if (registerTopOutput && !inputChanged) {
          myGenerator.addTopOutputNodesByInputNode(inputNode,outputNodes);
        }
      }
      return outputNodes;
    }
 else     if (nodeMacro instanceof SwitchMacro) {
      TemplateSwitch templateSwitch=((SwitchMacro)nodeMacro).getTemplateSwitch();
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode(inputNode,templateNode,i - 1,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        boolean inputChanged=(newInputNode != inputNode);
        RuleConsequence consequenceForCase=(RuleConsequence)myGenerator.getConsequenceForSwitchCase(newInputNode,templateSwitch);
        SNode templateNodeForCase=null;
        if (consequenceForCase != null) {
          if (consequenceForCase instanceof DismissTopMappingRule) {
            TemplateGenUtil.showGeneratorMessage(((DismissTopMappingRule)consequenceForCase).getGeneratorMessage(),newInputNode,consequenceForCase.getNode(),myGenerator);
            throw new ReductionNotNeededException();
          }
 else           if (consequenceForCase instanceof TemplateDeclarationReference) {
            TemplateDeclaration templateForSwitchCase=((TemplateDeclarationReference)consequenceForCase).getTemplate();
            templateNodeForCase=getTemplateNodeForSwitchCaseTemplate(newInputNode,templateForSwitchCase,templateSwitch,myGenerator);
          }
 else           if (consequenceForCase instanceof InlineTemplate_RuleConsequence) {
            templateNodeForCase=BaseAdapter.fromAdapter(((InlineTemplate_RuleConsequence)consequenceForCase).getTemplateNode());
          }
 else {
            myGenerator.showErrorMessage(newInputNode,null,consequenceForCase.getNode(),"failed to process switch : unsupported rule consequence");
            return null;
          }
        }
 else {
          TemplateDeclaration templateForSwitchCase=myGenerator.getTemplateForSwitchCase_deprecated(newInputNode,templateSwitch);
          if (templateForSwitchCase != null) {
            templateNodeForCase=getTemplateNodeForSwitchCaseTemplate(newInputNode,templateForSwitchCase,templateSwitch,myGenerator);
          }
        }
        if (templateNodeForCase != null) {
          List<SNode> outputChildNodes=createOutputNodesForTemplateNode(mappingName_,templateNodeForCase,newInputNode,0,inputChanged);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
 else {
          List<SNode> outputChildNodes=createOutputNodesForTemplateNode(mappingName_,templateNode,newInputNode,nodeMacrosToSkip + 1,inputChanged);
          if (outputChildNodes != null) {
            outputNodes.addAll(outputChildNodes);
          }
        }
        if (registerTopOutput && !inputChanged) {
          myGenerator.addTopOutputNodesByInputNode(inputNode,outputNodes);
        }
      }
      return outputNodes;
    }
 else {
      List<SNode> newInputNodes=TemplateGenUtil.createSourceNodeListForTemplateNode(inputNode,templateNode,nodeMacrosToSkip,myGenerator);
      for (      SNode newInputNode : newInputNodes) {
        boolean inputChanged=(newInputNode != inputNode);
        List<SNode> outputChildNodes=createOutputNodesForTemplateNode(mappingName_,templateNode,newInputNode,nodeMacrosToSkip + 1,inputChanged);
        if (outputChildNodes != null) {
          outputNodes.addAll(outputChildNodes);
        }
        if (registerTopOutput && !inputChanged) {
          myGenerator.addTopOutputNodesByInputNode(inputNode,outputNodes);
        }
      }
      return outputNodes;
    }
  }
  SNode outputNode=SModelUtil_new.instantiateConceptDeclaration(templateNode.getConceptFqName(),myOutputModel,myGenerator.getScope(),false);
  if (outputNode == null) {
    myGenerator.showErrorMessage(null,templateNode,"'createOutputNodesForTemplateNode' cannot create output node");
    return null;
  }
  outputNodes.add(outputNode);
  if (registerTopOutput) {
    myGenerator.addTopOutputNodeByInputNode(inputNode,outputNode);
  }
  myGenerator.addOutputNodeByInputAndTemplateNode(inputNode,templateNode,outputNode);
  myGenerator.addOutputNodeByInputNodeAndMappingName(inputNode,mappingName,outputNode);
  myGenerator.addTemplateNodeByOutputNode(outputNode,templateNode);
  myGenerator.addOutputNodeByTemplateNode(templateNode,outputNode);
  myOutputModel.addLanguage(templateNode.getLanguage(myGenerator.getScope()));
  CloneUtil.copyProperties(templateNode,outputNode);
  SModel templateModel=templateNode.getModel();
  for (  SReference reference : templateNode.getReferences()) {
    if (templateNode.getLinkAttribute("referenceMacro",reference.getRole()) != null) {
      continue;
    }
    SNode templateReferentNode=reference.getTargetNode();
    if (templateReferentNode == null) {
      myGenerator.showErrorMessage(null,templateNode,"'createOutputNodesForTemplateNode' referent node is null in template model");
      continue;
    }
    if (templateReferentNode.getModel().equals(templateModel)) {
      myGenerator.addReferenceInfo(new ReferenceInfo_TemplateNode(outputNode,reference,inputNode));
    }
 else {
      outputNode.addReferent(reference.getRole(),templateReferentNode);
    }
  }
  List<INodeAdapter> templateChildNodes=new ArrayList<INodeAdapter>();
  for (  INodeAdapter templateChildNode : templateNode.getAdapter().getChildren()) {
    if (templateChildNode instanceof PropertyMacro) {
      MacroUtil.expandPropertyMacro(myGenerator,(PropertyMacro)templateChildNode,inputNode,templateNode,outputNode);
    }
 else     if (templateChildNode instanceof ReferenceMacro) {
      myGenerator.addReferenceInfo(new ReferenceInfo_Macro((ReferenceMacro)templateChildNode,inputNode,templateNode,outputNode));
    }
 else     if (!TemplateGenUtil.isTemplateLanguageElement(templateChildNode)) {
      templateChildNodes.add(templateChildNode);
    }
  }
  for (  INodeAdapter templateChildNode : templateChildNodes) {
    List<SNode> outputChildNodes=createOutputNodesForTemplateNode(null,templateChildNode.getNode(),inputNode,0,false);
    if (outputChildNodes != null) {
      String role=templateChildNode.getRole_();
      for (      SNode outputChildNode : outputChildNodes) {
        outputNode.addChild(role,outputChildNode);
      }
    }
  }
  return outputNodes;
}
