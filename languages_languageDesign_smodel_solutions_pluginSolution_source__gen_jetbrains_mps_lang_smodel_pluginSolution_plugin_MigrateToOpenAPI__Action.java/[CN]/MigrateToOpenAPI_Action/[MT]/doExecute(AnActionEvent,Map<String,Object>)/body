{
  try {
    Set<SNode> changed=SetSequence.fromSet(new HashSet<SNode>());
    SNode oldSnodeNode=SNodeOperations.cast(SLinkOperations.getTarget(new MigrateToOpenAPI_Action.QuotationClass_mo9yth_a0a0a1a0a3().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
    SNode newSnodeNode=SNodeOperations.cast(SLinkOperations.getTarget(new MigrateToOpenAPI_Action.QuotationClass_mo9yth_a0a0a2a0a3().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.Interface");
    Set<SReference> usages=FindUsagesManager.getInstance().findUsages(Collections.singleton(oldSnodeNode),SearchType.USAGES,((MPSProject)MapSequence.fromMap(_params).get("project")).getScope(),new EmptyProgressMonitor());
    for (    SReference ref : SetSequence.fromSet(usages)) {
      SNode rNode=ref.getTargetNode();
      if (ref.getSourceNode().getModel().isNotEditable()) {
        continue;
      }
      SetSequence.fromSet(changed).addElement(rNode);
    }
    SearchResults res=new SearchResults(Collections.singleton(oldSnodeNode),SetSequence.fromSet(changed).select(new ISelector<SNode,SearchResult<SNode>>(){
      public SearchResult<SNode> select(      SNode it){
        return new SearchResult<SNode>(it,"usage");
      }
    }
).toListSequence());
    ((Project)MapSequence.fromMap(_params).get("iproject")).getComponent(RefactoringView.class).showRefactoringView(((Project)MapSequence.fromMap(_params).get("iproject")),new RefactoringViewAction(){
      public void performAction(      RefactoringViewItem refactoringViewItem){
      }
    }
,res,false,"usages");
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "MigrateToOpenAPI",t);
    }
  }
}
