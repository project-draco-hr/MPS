{
  SModel modelDescriptor=refactoringContext.getSelectedModel();
  SModule modelOwner=SModelRepository.getInstance().getOwner(modelDescriptor);
  if (modelOwner instanceof Language) {
    deleteModelFromLanguage((Language)modelOwner,modelDescriptor);
  }
 else   if (modelOwner instanceof Solution) {
    deleteModelFromSolution((Solution)modelOwner,modelDescriptor);
  }
 else   if (modelOwner instanceof Generator) {
    deleteModelFromGenerator((Generator)modelOwner,modelDescriptor);
  }
 else   if (modelOwner != null) {
    LOG.warn("Module type " + modelOwner.getClass().getSimpleName() + " is not supported by delete refactoring. Changes will not be saved automatically for modules of this type.");
  }
  Set<SModel> usages=FindUsagesFacade.getInstance().findModelUsages(GlobalScope.getInstance(),Collections.singleton(modelDescriptor.getReference()),new EmptyProgressMonitor());
  for (  SModel md : usages) {
    if (SModelStereotype.isUserModel(md)) {
      ((SModelInternal)md).deleteModelImport(modelDescriptor.getReference());
    }
  }
  if (myDeleteFiles) {
    deleteGeneratedFiles(modelDescriptor);
    SModelRepository.getInstance().deleteModel(modelDescriptor);
  }
  if (modelOwner instanceof AbstractModule) {
    ((AbstractModule)modelOwner).save();
  }
}
