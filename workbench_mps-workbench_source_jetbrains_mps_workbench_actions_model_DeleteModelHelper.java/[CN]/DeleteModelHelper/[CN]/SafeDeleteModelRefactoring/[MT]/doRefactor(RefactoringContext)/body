{
  SModelDescriptor modelDescriptor=refactoringContext.getSelectedModel();
  Set<ModelOwner> owners=SModelRepository.getInstance().getOwners(modelDescriptor);
  for (  ModelOwner modelOwner : owners) {
    if (!(modelOwner instanceof IModule)) {
      LOG.warning("Model owner type " + modelOwner.getClass().getSimpleName() + " is not supported by delete refactoring. Changes will not be saved automatically for owners of this type.");
      continue;
    }
    if ((IModule)modelOwner instanceof Language) {
      deleteModelFromLanguage((Language)modelOwner,modelDescriptor);
    }
 else     if ((IModule)modelOwner instanceof Solution) {
      deleteModelFromSolution((Solution)modelOwner,modelDescriptor);
    }
 else     if ((IModule)modelOwner instanceof Generator) {
      deleteModelFromGenerator((Generator)modelOwner,modelDescriptor);
    }
 else {
      LOG.warning("Module type " + (modelOwner).getClass().getSimpleName() + " is not supported by delete refactoring. Changes will not be saved automatically for modules of this type.");
    }
  }
  for (  SModelDescriptor md : SModelRepository.getInstance().getModelDescriptors()) {
    if (SModelStereotype.isUserModel(md) && new ModelFindOperations(md).hasImportedModel(modelDescriptor)) {
      md.getSModel().deleteModelImport(modelDescriptor.getSModelReference());
    }
  }
  if (myDeleteFiles) {
    SModelRepository.getInstance().deleteModel(modelDescriptor);
  }
}
