{
  boolean safeDelete=RefactoringSettings.getInstance().SAFE_DELETE;
  final DeleteDialog.DeleteOption safeOption=new DeleteDialog.DeleteOption("Safe Delete",safeDelete,true);
  DeleteDialog dialog=new DeleteDialog(((MPSProject)MapSequence.fromMap(_params).get("project")),"Delete Models","Are you sure you want to delete selected models?",safeOption);
  dialog.show();
  if (!(dialog.isOK())) {
    return;
  }
  RefactoringSettings.getInstance().SAFE_DELETE=safeOption.selected;
  ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
  modelAccess.executeCommandInEDT(new Runnable(){
    public void run(){
      MPSModuleRepository.getInstance().saveAll();
      for (      SModel model : ListSequence.fromList(((List<SModel>)MapSequence.fromMap(_params).get("models")))) {
        if (SModelStereotype.isStubModel(model) || SModelStereotype.isDescriptorModel(model)) {
          continue;
        }
        DeleteModelHelper.deleteModel(((MPSProject)MapSequence.fromMap(_params).get("project")),((SModule)MapSequence.fromMap(_params).get("contextModule")),model,safeOption.selected,true);
      }
    }
  }
);
}
