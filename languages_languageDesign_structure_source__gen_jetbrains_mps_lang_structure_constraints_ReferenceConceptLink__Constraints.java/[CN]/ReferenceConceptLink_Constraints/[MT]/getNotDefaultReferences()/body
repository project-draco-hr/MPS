{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hf6dqv_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          if (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getReferenceNode(),"conceptLinkDeclaration",false),"targetType",false) == null) {
            return null;
          }
          return new ReferenceConceptLinkTargetSearchScope(_context.getReferenceNode(),operationContext.getScope());
        }
      }
;
    }
  }
);
  return references;
}
