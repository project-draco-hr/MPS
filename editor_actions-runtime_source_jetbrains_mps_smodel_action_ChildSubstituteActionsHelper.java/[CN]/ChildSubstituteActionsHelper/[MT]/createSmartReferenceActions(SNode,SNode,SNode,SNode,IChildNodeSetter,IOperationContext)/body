{
  if (parentNode == null) {
    return Collections.emptyList();
  }
  SNode linkDeclaration=null;
  int index=0;
  if (currentChild != null) {
    linkDeclaration=((jetbrains.mps.smodel.SNode)currentChild).getRoleLink();
    index=((jetbrains.mps.smodel.SNode)parentNode).getChildren(currentChild.getRoleInParent()).indexOf(currentChild);
  }
  if (linkDeclaration == null && childSetter instanceof DefaultChildNodeSetter) {
    linkDeclaration=((DefaultChildNodeSetter)childSetter).getLinkDeclaration();
  }
  ReferenceDescriptor refDescriptor=ModelConstraintsUtil.getSmartReferenceDescriptor(parentNode,linkDeclaration == null ? null : SModelUtil.getLinkDeclarationRole(linkDeclaration),index,smartConcept);
  if (refDescriptor == null)   return Collections.emptyList();
  Scope searchScope=refDescriptor.getScope();
  if (searchScope == null)   return Collections.emptyList();
  final String targetConcept=NameUtil.nodeFQName(SModelUtil.getLinkDeclarationTarget(smartReference));
  List<SubstituteAction> actions=new ArrayList<SubstituteAction>();
  IReferencePresentation presentation=refDescriptor.getReferencePresentation();
  Iterable<SNode> referentNodes=searchScope.getAvailableElements(null);
  for (  SNode referentNode : referentNodes) {
    if (referentNode == null || !referentNode.getConcept().isSubConceptOf(SConceptRepository.getInstance().getConcept(targetConcept)))     continue;
    actions.add(new SmartRefChildNodeSubstituteAction(referentNode,parentNode,currentChild,childSetter,context.getScope(),smartConcept,smartReference,presentation));
  }
  return actions;
}
