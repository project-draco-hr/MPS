{
  if (parentNode == null) {
    return null;
  }
  SNode linkDeclaration=null;
  int index=0;
  if (currentChild != null) {
    linkDeclaration=currentChild.getRoleLink();
    index=parentNode.getChildren(currentChild.getRole()).indexOf(currentChild);
  }
  if (linkDeclaration == null && childSetter instanceof DefaultChildNodeSetter) {
    linkDeclaration=((DefaultChildNodeSetter)childSetter).getLinkDeclaration();
  }
  ReferenceDescriptor refDescriptor=ModelConstraintsUtil.getSmartReferenceDescriptor(parentNode,linkDeclaration == null ? null : SModelUtil.getLinkDeclarationRole(linkDeclaration),index,smartConcept,context);
  if (refDescriptor == null)   return null;
  Scope searchScope=refDescriptor.getScope();
  if (searchScope == null)   return null;
  final String targetConcept=NameUtil.nodeFQName(SModelUtil.getLinkDeclarationTarget(smartReference));
  List<INodeSubstituteAction> actions=new ArrayList<INodeSubstituteAction>();
  IReferencePresentation presentation=refDescriptor.getReferencePresentation();
  Iterable<SNode> referentNodes=searchScope.getAvailableElements(null);
  for (  SNode referentNode : referentNodes) {
    if (referentNode == null || !referentNode.isInstanceOfConcept(targetConcept))     continue;
    actions.add(new SmartRefChildNodeSubstituteAction(referentNode,parentNode,currentChild,childSetter,context.getScope(),smartConcept,smartReference,presentation));
  }
  return actions;
}
