{
  if (childConcept == SNodeUtil.concept_BaseConcept.getDeclarationNode()) {
    if ((currentChild == null || currentChild.getConcept().equals(SNodeUtil.concept_BaseConcept))) {
      final SModel model=parentNode.getModel();
      LanguageRegistry lr=LanguageRegistry.getInstance(model.getRepository());
      ArrayList<SNode> allVisibleConcepts=new ArrayList<SNode>(100);
      for (      SLanguage l : new SLanguageHierarchy(lr,SModelOperations.getAllLanguageImports(model)).getExtended()) {
        for (        SAbstractConcept c : l.getConcepts()) {
          if (c.isAbstract()) {
            continue;
          }
          SNode conceptDeclNode=c.getDeclarationNode();
          if (conceptDeclNode != null) {
            allVisibleConcepts.add(conceptDeclNode);
          }
        }
      }
      List<SubstituteAction> resultActions=new ArrayList<SubstituteAction>(allVisibleConcepts.size());
      for (      final SNode visibleConcept : allVisibleConcepts) {
        resultActions.add(new DefaultChildNodeSubstituteAction(visibleConcept,parentNode,currentChild,childSetter){
          @Override public String getMatchingText(          String pattern){
            return getMatchingText(pattern,true,true);
          }
          @Override public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override public String getDescriptionText(          String pattern){
            String fqName=NameUtil.nodeFQName(visibleConcept);
            return "lang: " + NameUtil.compactNamespace(NameUtil.namespaceFromConceptFQName(fqName));
          }
          @Override public boolean isReferentPresentation(){
            return true;
          }
        }
);
      }
      return resultActions;
    }
    childConcept=ChildSubstituteActionsUtil.getRefinedChildConcept(currentChild);
  }
  List<SubstituteAction> resultActions=new ArrayList<SubstituteAction>();
  List<SNode> allBuilders=ChildSubstituteActionsUtil.getActionsBuilders(parentNode,currentChild,childConcept,childSetter,context);
  if (!ChildSubstituteActionsUtil.containsRemoveDefaults(allBuilders)) {
    resultActions.addAll(createPrimaryChildSubstituteActions(parentNode,currentChild,childConcept,childSetter));
  }
  for (  SNode builder : allBuilders) {
    resultActions.addAll(ChildSubstituteActionsUtil.invokeActionFactory(builder,parentNode,currentChild,childConcept,childSetter,context));
  }
  for (  SNode builder : allBuilders) {
    resultActions=ChildSubstituteActionsUtil.applyActionFilter(builder,resultActions,parentNode,currentChild,childConcept,context);
  }
  SNode linkDeclaration;
  if (childSetter instanceof DefaultChildNodeSetter) {
    linkDeclaration=((DefaultChildNodeSetter)childSetter).myLinkDeclaration;
  }
 else   if (childSetter instanceof AbstractCellMenuPart_ReplaceNode_CustomNodeConcept && currentChild != null) {
    linkDeclaration=new SNodeLegacy(currentChild).getRoleLink();
  }
 else {
    linkDeclaration=null;
  }
  for (Iterator<SubstituteAction> it=resultActions.iterator(); it.hasNext(); ) {
    SubstituteAction action=it.next();
    SNode conceptNode=action.getOutputConcept();
    if (conceptNode == null) {
      continue;
    }
    if (linkDeclaration != null && !ModelConstraints.canBeParent(parentNode,conceptNode,linkDeclaration,null,null) || !ModelConstraints.canBeAncestor(parentNode,null,conceptNode,null)) {
      it.remove();
    }
  }
  return resultActions;
}
