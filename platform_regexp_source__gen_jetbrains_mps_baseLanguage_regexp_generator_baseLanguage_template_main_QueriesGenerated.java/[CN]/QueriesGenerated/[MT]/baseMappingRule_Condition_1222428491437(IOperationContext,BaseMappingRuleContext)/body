{
  boolean isMatchStatement=SNodeOperations.isInstanceOf(SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",false,false),"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement");
  boolean isMatchOperation=SNodeOperations.isInstanceOf(SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",false,false),"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation");
  boolean isForEach=SNodeOperations.isInstanceOf(SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",false,false),"jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement");
  boolean isFindMatch=SNodeOperations.isInstanceOf(SNodeOperations.getAncestor(_context.getNode(),"jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction",false,false),"jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement");
  return isMatchStatement || isMatchOperation || isForEach|| isFindMatch;
}
