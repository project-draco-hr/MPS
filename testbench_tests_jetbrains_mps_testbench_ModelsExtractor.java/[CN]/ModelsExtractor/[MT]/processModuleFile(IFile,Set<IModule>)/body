{
  String name=moduleFile.getName();
  if (!name.endsWith(MPSExtentions.DOT_LANGUAGE) && !name.endsWith(MPSExtentions.DOT_SOLUTION) && !name.endsWith(MPSExtentions.DOT_DEVKIT))   return;
  List<IModule> tmpmodules;
  IModule moduleByFile=ModelAccess.instance().runReadAction(new Computable<IModule>(){
    public IModule compute(){
      return ModuleFileTracker.getInstance().getModuleByFile(FileSystem.getInstance().getFileByPath(moduleFile.getAbsolutePath()));
    }
  }
);
  if (moduleByFile != null) {
    tmpmodules=Collections.singletonList(moduleByFile);
  }
 else {
    tmpmodules=ModelAccess.instance().runWriteAction(new Computable<List<IModule>>(){
      public List<IModule> compute(){
        return ModulesMiner.getInstance().readModuleDescriptors(moduleFile.isDirectory() ? moduleFile : moduleFile.getParent(),new MPSModuleOwner(){
        }
);
      }
    }
);
  }
  modules.addAll(tmpmodules);
  for (  IModule module : tmpmodules) {
    if (module.isPackaged())     continue;
    if (module instanceof Language) {
      Language language=(Language)module;
      for (      Generator gen : language.getGenerators()) {
        modules.add(gen);
      }
    }
  }
}
