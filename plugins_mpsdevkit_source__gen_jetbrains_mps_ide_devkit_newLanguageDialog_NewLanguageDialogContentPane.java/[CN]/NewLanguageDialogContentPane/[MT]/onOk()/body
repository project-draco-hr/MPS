{
  String message=NewModuleUtil.check(MPSExtentions.DOT_LANGUAGE,myThis.getLanguageNamespace(),myThis.getLanguagePath());
  if (message != null) {
    myThis.getDialog().setErrorText(message);
    return;
  }
  myThis.getDialog().dispose();
  final Wrappers._T<Language> language=new Wrappers._T<Language>(null);
  Project project=myThis.getProject();
  ModelAccess.instance().runWriteActionWithProgressSynchronously(new ModelCommandExecutor.RunnableWithProgress(){
    public void run(    ProgressMonitor monitor){
      language.value=myThis.createNewLanguage();
    }
  }
,"Creating",false,project);
  ModelAccess.instance().runWriteActionInCommandAsync(new Runnable(){
    public void run(){
      if (!(language.value.getSModelRoots().isEmpty())) {
        LanguageAspect.STRUCTURE.createNew(language.value,false);
        LanguageAspect.EDITOR.createNew(language.value,false);
        LanguageAspect.CONSTRAINTS.createNew(language.value,false);
        LanguageAspect.BEHAVIOR.createNew(language.value,false);
        LanguageAspect.TYPESYSTEM.createNew(language.value,false);
      }
      if (myThis.myNeedRuntime_f0.isSelected()) {
        Solution runtime=myThis.createRuntimeSolution();
        runtime.createModel(SModelFqName.fromString(myThis.getLanguageNamespace() + ".runtime"),runtime.getSModelRoots().get(0),null);
      }
      if (myThis.myNeedSandbox_g0.isSelected()) {
        Solution sandbox=myThis.createSandboxSolution();
        SModel createdModel=sandbox.createModel(SModelFqName.fromString(myThis.getLanguageNamespace() + ".sandbox"),sandbox.getSModelRoots().get(0),null).getSModel();
        createdModel.addLanguage(myThis.getResult().getModuleReference());
        for (        Language extendedLanguage : myThis.getResult().getExtendedLanguages()) {
          createdModel.addLanguage(extendedLanguage.getModuleReference());
        }
        for (        ModuleReference addedLanguage : createdModel.importedLanguages()) {
          if (sandbox.getScope().getLanguage(addedLanguage) == null) {
            sandbox.addUsedLanguage(addedLanguage);
          }
        }
      }
    }
  }
,project);
}
