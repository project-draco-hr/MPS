{
  final List<E> stateValues=new ArrayList<E>();
  for (int i=0; i < myProgram.getInstructions().size() * 2; i++) {
    stateValues.add(myAnalyzer.initial(myProgram));
  }
  Queue<ProgramState> workList=new LinkedList<ProgramState>();
  for (  Instruction i : myProgram.getInstructions()) {
    workList.add(new ProgramState(i,false));
    workList.add(new ProgramState(i,true));
  }
  AnalysisDirection direction=myAnalyzer.getDirection();
  while (!workList.isEmpty()) {
    ProgramState current=workList.remove();
    List<E> input=new ArrayList<E>();
    for (    ProgramState s : direction.dependencies(current)) {
      input.add(stateValues.get(s.getIndex()));
    }
    E oldValue=stateValues.get(current.getIndex());
    E mergedValue=myAnalyzer.merge(myProgram,input);
    E newValue=myAnalyzer.fun(mergedValue,current);
    if (!newValue.equals(oldValue)) {
      stateValues.set(current.getIndex(),newValue);
      for (      ProgramState s : direction.dependents(current)) {
        workList.add(s);
      }
    }
  }
  return stateValues;
}
