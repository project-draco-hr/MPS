{
  List<E> stateValuesArray=doAnalyze();
  Map<ProgramState,E> stateValues=new HashMap<ProgramState,E>();
  for (  Instruction i : myProgram.getInstructions()) {
    ProgramState ps1=new ProgramState(i,true);
    stateValues.put(ps1,stateValuesArray.get(ps1.getIndex()));
    ProgramState ps2=new ProgramState(i,false);
    stateValues.put(ps2,stateValuesArray.get(ps2.getIndex()));
  }
  Map<Instruction,List<E>> possibleValues=new HashMap<Instruction,List<E>>();
  for (  Map.Entry<ProgramState,E> entry : stateValues.entrySet()) {
    if (!possibleValues.containsKey(entry.getKey().getInstruction())) {
      possibleValues.put(entry.getKey().getInstruction(),new ArrayList<E>());
    }
    possibleValues.get(entry.getKey().getInstruction()).add(entry.getValue());
  }
  Map<Instruction,E> result=new HashMap<Instruction,E>();
  for (  Entry<Instruction,List<E>> entry : possibleValues.entrySet()) {
    result.put(entry.getKey(),myAnalyzer.merge(myProgram,entry.getValue()));
  }
  return new AnalysisResult<E>(myProgram,myAnalyzer,stateValues,result);
}
