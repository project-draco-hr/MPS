{
switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b,fqName)) {
case 3:
    return new ExtensionDeclaration_BehaviorDescriptor();
case 9:
  return new ExtensionPointDeclaration_BehaviorDescriptor();
case 7:
return new ExtensionObjectGetter_BehaviorDescriptor();
case 10:
return new ExtensionPointExpression_BehaviorDescriptor();
case 6:
return new ExtensionFunction_BehaviorDescriptor();
case 4:
return new ExtensionFieldDeclaration_BehaviorDescriptor();
case 5:
return new ExtensionFieldReference_BehaviorDescriptor();
case 12:
return new ExtensionPointType_BehaviorDescriptor();
case 13:
return new GetExtensionObjectsOperation_BehaviorDescriptor();
case 2:
return new Extension_BehaviorDescriptor();
case 11:
return new ExtensionPointOverlappingDeclaration_BehaviorDescriptor();
case 8:
return new ExtensionOverlapping_BehaviorDescriptor();
case 14:
return new OverridesItem_BehaviorDescriptor();
case 15:
return new OverridesReference_BehaviorDescriptor();
case 0:
return new ApplyOverlappingExtensionOperation_BehaviorDescriptor();
case 1:
return new ArgumentField_BehaviorDescriptor();
default :
return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
}
}
