{
  checkPreconditions();
  String oldFqName=myLanguage.getModuleFqName();
  SModelDescriptor structure=myLanguage.getStructureModelDescriptor();
  RefactoringContext context=new RefactoringContext(new MyRefactoring());
  for (  AbstractConceptDeclaration concept : structure.getSModel().getRootsAdapters(AbstractConceptDeclaration.class)) {
    context.changeFeatureName(concept.getNode(),myNewName + ".structure." + concept.getName(),concept.getName());
  }
  context.computeCaches();
  for (  SModelRoot root : myLanguage.getSModelRoots()) {
    root.changePrefix(myNewName);
  }
  LanguageDescriptor descriptor=myLanguage.getLanguageDescriptor();
  descriptor.setNamespace(myNewName);
  myLanguage.setLanguageDescriptor(descriptor,false);
  myLanguage.save();
  SModelRepository.getInstance().updateReferences();
  MPSModuleRepository.getInstance().updateReferences();
  new RefactoringProcessor().writeInLogAndUpdateModels(structure.getSModelReference(),structure.getSModel(),context);
  SModelRepository.getInstance().saveAll();
  ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
}
