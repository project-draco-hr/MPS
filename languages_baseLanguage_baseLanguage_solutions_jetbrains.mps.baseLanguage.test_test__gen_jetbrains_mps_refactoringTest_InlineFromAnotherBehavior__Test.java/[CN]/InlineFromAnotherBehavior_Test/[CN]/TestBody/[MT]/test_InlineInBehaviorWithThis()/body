{
  this.addNodeById("668606183334155392");
  this.addNodeById("668606183334155410");
  InlineMethodRefactoring ref=new InlineMethodRefactoring(SNodeOperations.cast(this.getNodeById("668606183334243919"),MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1179409122411l,"jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall")));
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("668606183334155393"),MetaAdapterFactory.getConcept(new UUID(-5808042798135555774l,-8657779246725685839l),1225194240794l,"jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("668606183334155411"),MetaAdapterFactory.getConcept(new UUID(-5808042798135555774l,-8657779246725685839l),1225194240794l,"jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
    Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
  }
}
