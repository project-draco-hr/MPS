{
  Graph originalGraph=this.getGraph();
  List<Edge> split=originalGraph.splitEdge(edge);
  ListSequence.fromList(newEdges).addSequence(ListSequence.fromList(split));
  Node newNode=ListSequence.fromList(split).getElement(0).getTarget();
  List<Face> facesToProcess=ListSequence.fromList(new ArrayList<Face>());
  ListSequence.fromList(facesToProcess).addSequence(ListSequence.fromList(getAdjacentFaces(edge)));
  for (  Face face : ListSequence.fromList(facesToProcess)) {
    List<Dart> darts=face.getDarts();
    int pos=0;
    while (ListSequence.fromList(darts).getElement(pos).getEdge() != edge) {
      pos++;
    }
    Dart dartToReplace=ListSequence.fromList(darts).getElement(pos);
    for (    Edge newEdge : ListSequence.fromList(newEdges)) {
      if (ListSequence.fromList(newEdge.getAdjacentNodes()).contains(dartToReplace.getSource())) {
        this.setDart(face,pos,new Dart(newEdge,dartToReplace.getSource()));
      }
    }
    for (    Edge newEdge : ListSequence.fromList(newEdges)) {
      if (ListSequence.fromList(newEdge.getAdjacentNodes()).contains(dartToReplace.getTarget())) {
        this.insertDart(face,pos + 1,new Dart(newEdge,newNode));
      }
    }
  }
  return newNode;
}
