{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
    TraceInfoGenerationUtil.createScopeInfo(this,node);
  }
  if (SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1154032098014l,363746191845183793l,"loopLabel")) != null) {
    this.appendNewLine();
    this.append(SPropertyOperations.getString(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1154032098014l,363746191845183793l,"loopLabel")),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")));
    this.append(":");
  }
 else   if (SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1154032098014l,1199465379613l,"label")) != null) {
    this.appendNewLine();
    this.append(SPropertyOperations.getString(node,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1154032098014l,1199465379613l,"label")));
    this.append(":");
  }
  this.appendNewLine();
  this.indentBuffer();
  this.append("for (");
  appendNode(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1144230876926l,1144230900587l,"variable")));
  this.append(" : ");
  appendNode(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1144226303539l,1144226360166l,"iterable")));
  this.append(") {");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1154032098014l,1154032183016l,"body")));
  this.decreaseDepth();
  this.appendNewLine();
  this.appendWithIndent("}");
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
{
      List<SNode> scopeVariables=new ArrayList<SNode>();
      try {
        scopeVariables=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.ScopeConcept"),"virtual_getScopeVariables_5067982036267369894",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't calculate scope variables for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillScopeInfo(this,node,scopeVariables);
    }
  }
}
