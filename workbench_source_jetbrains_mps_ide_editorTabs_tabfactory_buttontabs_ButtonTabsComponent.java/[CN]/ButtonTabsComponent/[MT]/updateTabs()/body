{
  myRealTabs.clear();
  List<Document> editedDocumentsNew=new ArrayList<Document>();
  List<SNodePointer> editedNodesNew=new ArrayList<SNodePointer>();
  myTabRemovalListener.clearAspects();
  ArrayList<EditorTabDescriptor> tabs=new ArrayList<EditorTabDescriptor>(myPossibleTabs);
  Collections.sort(tabs,new EditorTabComparator());
  for (  EditorTabDescriptor d : tabs) {
    List<SNode> nodes=d.getNodes(myBaseNode.getNode());
    if (nodes.isEmpty())     continue;
    for (    SNode node : nodes) {
      myTabRemovalListener.aspectAdded(node.getContainingRoot());
      SNodePointer nodePointer=new SNodePointer(node);
      editedNodesNew.add(nodePointer);
      editedDocumentsNew.add(MPSUndoUtil.getDoc(nodePointer));
    }
    final EditorTab tab=new EditorTab(this,myNodeChangeCallback,myRealTabs.size(),d,myBaseNode);
    myRealTabs.add(tab);
  }
  myEditedDocuments=editedDocumentsNew;
  myEditedNodes=editedNodesNew;
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(myAddButton.getAction());
  for (  EditorTab tab : myRealTabs) {
    group.add(tab.getAction(myShortcutComponent));
  }
  if (myToolbar != null) {
    myComponent.remove(myToolbar);
  }
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  actionToolbar.setLayoutPolicy(ActionToolbar.WRAP_LAYOUT_POLICY);
  myToolbar=actionToolbar.getComponent();
  myComponent.add(myToolbar,BorderLayout.CENTER);
}
