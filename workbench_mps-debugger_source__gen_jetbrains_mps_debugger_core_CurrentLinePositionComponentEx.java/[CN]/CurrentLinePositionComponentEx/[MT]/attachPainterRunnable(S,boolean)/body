{
  final CurrentLinePainter newPainter=new ModelAccessHelper(ProjectHelper.getModelAccess(myProject)).runReadAction(new Computable<CurrentLinePainter>(){
    @Override public CurrentLinePainter compute(){
      SNode node=getNode(debugSession);
      if (node != null) {
        return new CurrentLinePainter(SNodeOperations.getPointer(node));
      }
      return null;
    }
  }
);
  if (newPainter != null) {
    final boolean visible=getCurrentSession() == null || getCurrentSession() == debugSession;
    newPainter.setVisible(visible);
synchronized (mySessionToContextPainterMap) {
      MapSequence.fromMap(mySessionToContextPainterMap).put(debugSession,newPainter);
      return new Runnable(){
        @Override public void run(){
          final jetbrains.mps.project.Project mpsProject=ProjectHelper.fromIdeaProject(myProject);
          mpsProject.getModelAccess().checkWriteAccess();
          SNode node=(newPainter.getSNode() == null ? null : newPainter.getSNode().resolve(mpsProject.getRepository()));
          if (node != null) {
            if (visible && focus) {
              jetbrains.mps.openapi.editor.EditorComponent currentEditorComponent=NavigationSupport.getInstance().openNode(mpsProject,node,true,false).getCurrentEditorComponent();
              currentEditorComponent=EditorComponentUtil.scrollToNode(node,currentEditorComponent);
              if (currentEditorComponent instanceof EditorComponent) {
                attach(newPainter,(EditorComponent)currentEditorComponent);
              }
            }
            List<EditorComponent> components=EditorComponentUtil.findComponentForNode(node,myFileEditorManager);
            for (            EditorComponent component : ListSequence.fromList(components)) {
              attach(newPainter,component);
            }
          }
        }
      }
;
    }
  }
  return null;
}
