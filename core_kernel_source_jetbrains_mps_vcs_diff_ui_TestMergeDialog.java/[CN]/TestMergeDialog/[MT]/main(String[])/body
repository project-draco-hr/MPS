{
  IdeMain.setTestMode(TestMode.NO_TEST);
  configureMPS();
  final SModel baseModel=ModelUtils.readModel(args[0]);
  final SModel mineModel=ModelUtils.readModel(args[1]);
  final SModel newModel=ModelUtils.readModel(args[2]);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      final MergeModelsDialog dialog=ModelAccess.instance().runReadAction(new Computable<MergeModelsDialog>(){
        public MergeModelsDialog compute(){
          IOperationContext context=new StandaloneMPSContext(){
            public MPSProject getMPSProject(){
              return null;
            }
            public IModule getModule(){
              return null;
            }
            @NotNull public IScope getScope(){
              return GlobalScope.getInstance();
            }
            @Override public <T>T getComponent(            Class<T> clazz){
              if (clazz == EditorManager.class) {
                return (T)myEditorManager;
              }
              return null;
            }
          }
;
          return new MergeModelsDialog(context,baseModel,mineModel,newModel);
        }
      }
);
      dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
      dialog.showDialog();
      final SModel result=dialog.getResultModel();
      if (result == null) {
        dialog.dispose();
        System.exit(0);
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          IFile iFile=FileSystem.getFile(args[3]);
          if (!iFile.exists())           iFile.createNewFile();
          ModelPersistence.saveModel(result,iFile);
        }
      }
);
      dialog.dispose();
      System.exit(0);
    }
  }
);
}
