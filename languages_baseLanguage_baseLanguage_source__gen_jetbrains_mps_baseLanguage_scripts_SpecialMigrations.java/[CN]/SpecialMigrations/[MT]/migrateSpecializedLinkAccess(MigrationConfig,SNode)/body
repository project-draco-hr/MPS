{
  final SNode sourceLinkDeclaration=ListSequence.fromList(SLinkOperations.getChildren(config.sourceConcept,MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,1071489727083l,"linkDeclaration"))).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target")) == linkTargetConcept;
    }
  }
);
  final SNode targetLinkDeclaration=SLinkOperations.getTarget(sourceLinkDeclaration,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599698500l,"specializedLink"));
  if (sourceLinkDeclaration == null) {
    throw new IllegalArgumentException();
  }
  List<AbstractMigrationRefactoring> migrations=ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());
  ListSequence.fromList(migrations).addElement(new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess")){
    @Override public String getName(){
      return "Migrate specialized link reference access for " + SPropertyOperations.getString(config.sourceConcept,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056143562l,1138056516764l,"link")) == sourceLinkDeclaration;
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138056143562l,1138056516764l,"link"),targetLinkDeclaration);
    }
  }
);
  ListSequence.fromList(migrations).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation"),config){
    @Override public boolean isApplicableInstanceNode(    SNode node){
      SNode qualifier=SLinkOperations.getTarget(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),3609773094169249792l,3609773094169252180l,"linkQualifier")),MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),5168775467716640652l,5168775467716640653l,"linkQualifier"));
      return SNodeOperations.isInstanceOf(qualifier,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier") && SLinkOperations.getTarget(SNodeOperations.cast(qualifier,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier"),MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1204851882688l,1204851882689l,"link")) == sourceLinkDeclaration;
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),3609773094169249792l,3609773094169252180l,"linkQualifier")),MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),5168775467716640652l,5168775467716640653l,"linkQualifier")),"jetbrains.mps.lang.smodel.structure.LinkRefQualifier"),MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1204851882688l,1204851882689l,"link"),targetLinkDeclaration);
    }
  }
);
  return migrations;
}
