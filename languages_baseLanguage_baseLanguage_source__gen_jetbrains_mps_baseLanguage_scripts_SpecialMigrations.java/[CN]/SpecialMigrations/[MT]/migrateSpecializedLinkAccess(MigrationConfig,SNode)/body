{
  final SNode sourceLinkDeclaration=ListSequence.fromList(SLinkOperations.getTargets(config.sourceConcept,"linkDeclaration",true)).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,"target",false) == linkTargetConcept;
    }
  }
);
  final SNode targetLinkDeclaration=SLinkOperations.getTarget(sourceLinkDeclaration,"specializedLink",false);
  if (sourceLinkDeclaration == null) {
    throw new IllegalArgumentException();
  }
  List<AbstractMigrationRefactoring> migrations=ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());
  ListSequence.fromList(migrations).addElement(new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess")){
    public String getName(){
      return "Migrate specialized link reference access for " + SPropertyOperations.getString(config.sourceConcept,"name");
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,"link",false) == sourceLinkDeclaration;
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,"link",targetLinkDeclaration,false);
    }
  }
);
  ListSequence.fromList(migrations).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation"),config){
    public boolean isApplicableInstanceNode(    SNode node){
      SNode qualifier=SLinkOperations.getTarget(SLinkOperations.getTarget(node,"linkQualifier",true),"linkQualifier",true);
      return SNodeOperations.isInstanceOf(qualifier,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier") && SLinkOperations.getTarget(SNodeOperations.cast(qualifier,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier"),"link",false) == sourceLinkDeclaration;
    }
    public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node,"linkQualifier",true),"linkQualifier",true),"jetbrains.mps.lang.smodel.structure.LinkRefQualifier"),"link",targetLinkDeclaration,false);
    }
  }
);
  return migrations;
}
