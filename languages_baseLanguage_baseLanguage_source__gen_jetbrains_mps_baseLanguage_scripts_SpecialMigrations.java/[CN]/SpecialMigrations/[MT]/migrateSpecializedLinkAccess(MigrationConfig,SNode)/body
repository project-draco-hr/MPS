{
  final SNode sourceLinkDeclaration=ListSequence.fromList(SLinkOperations.getChildren(config.sourceConcept,MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,0xf979c3ba6bL,"linkDeclaration"))).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98055fef0L,"target")) == linkTargetConcept;
    }
  }
);
  final SNode targetLinkDeclaration=SLinkOperations.getTarget(sourceLinkDeclaration,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98051c244L,"specializedLink"));
  if (sourceLinkDeclaration == null) {
    throw new IllegalArgumentException();
  }
  List<AbstractMigrationRefactoring> migrations=ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());
  ListSequence.fromList(migrations).addElement(new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess")){
    @Override public String getName(){
      return "Migrate specialized link reference access for " + SPropertyOperations.getString(config.sourceConcept,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f96ea2caL,0x108f974549cL,"link")) == sourceLinkDeclaration;
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(node,MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f96ea2caL,0x108f974549cL,"link"),targetLinkDeclaration);
    }
  }
);
  ListSequence.fromList(migrations).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation"),config){
    @Override public boolean isApplicableInstanceNode(    SNode node){
      SNode qualifier=SLinkOperations.getTarget(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x32187d80f5b88800L,0x32187d80f5b89154L,"linkQualifier")),MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x47bb2de70d00ff8cL,0x47bb2de70d00ff8dL,"linkQualifier"));
      return SNodeOperations.isInstanceOf(qualifier,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x11886c4bac0L,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier")) && SLinkOperations.getTarget(SNodeOperations.cast(qualifier,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x11886c4bac0L,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier")),MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x11886c4bac0L,0x11886c4bac1L,"link")) == sourceLinkDeclaration;
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x32187d80f5b88800L,0x32187d80f5b89154L,"linkQualifier")),MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x47bb2de70d00ff8cL,0x47bb2de70d00ff8dL,"linkQualifier")),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x11886c4bac0L,"jetbrains.mps.lang.smodel.structure.LinkRefQualifier")),MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x11886c4bac0L,0x11886c4bac1L,"link"),targetLinkDeclaration);
    }
  }
);
  return migrations;
}
