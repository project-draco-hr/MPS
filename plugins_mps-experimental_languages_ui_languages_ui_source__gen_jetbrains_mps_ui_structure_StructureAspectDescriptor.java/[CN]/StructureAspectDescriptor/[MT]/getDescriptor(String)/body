{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.AccessUIPropertyOperation","jetbrains.mps.baseLanguage.structure.AbstractOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractOperation"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.AppendUIObjectStatement","jetbrains.mps.ui.structure.UIObjectStatement",false,new String[]{"jetbrains.mps.ui.structure.UIObjectStatement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.BeanPropertyView","jetbrains.mps.ui.structure.View",false,new String[]{"jetbrains.mps.ui.structure.View"},new String[]{"propertyName","canRead","canWrite"},new String[]{"getter"},new String[]{"bean"},new boolean[]{false});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.CallUIActionOperation","jetbrains.mps.baseLanguage.structure.AbstractOperation",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractOperation"},new String[]{},new String[]{"action"},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ChildAspect","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"definition"},new String[]{"value"},new boolean[]{false});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ClearCompartmentStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.CompartmentProviderStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.ui.structure.IUIObjectContextProvider"},new String[]{},new String[]{},new String[]{"context","body"},new boolean[]{false,false});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.CompartmentReferenceExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"container"},new String[]{"uiObject"},new boolean[]{false});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ContainerCompartment","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.ui.structure.IUIObjectContextProvider"},new String[]{},new String[]{"container"},new String[]{"body"},new boolean[]{false});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ContainerType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"container","uiObject"},new String[]{},new boolean[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.Controller","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ControllerBinding","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"event"},new String[]{"controller"},new boolean[]{false});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.CreateUIObjectStatement","jetbrains.mps.ui.structure.UIObjectStatement",false,new String[]{"jetbrains.mps.ui.structure.UIObjectStatement","jetbrains.mps.ui.structure.IUIObjectDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.EnclosingContextCompartmentExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.EventHandingBlock","jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.EventPropertyAccessOp","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation"},new String[]{},new String[]{"property"},new String[]{},new boolean[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.EventType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"event"},new String[]{},new boolean[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ExpressionView","jetbrains.mps.ui.structure.View",false,new String[]{"jetbrains.mps.ui.structure.View"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ForceLayoutStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.FunctionParameterDeclaration","jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.IUIObjectContextProvider",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.IUIObjectDeclaration",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.ILocalDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.InlineController","jetbrains.mps.ui.structure.Controller",false,new String[]{"jetbrains.mps.ui.structure.Controller","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{},new String[]{"eventHandlingBlock"},new boolean[]{false});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.InsertUIObjectStatement","jetbrains.mps.ui.structure.UIObjectStatement",false,new String[]{"jetbrains.mps.ui.structure.UIObjectStatement"},new String[]{},new String[]{},new String[]{"before"},new boolean[]{false});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.IterateContentsStatement","jetbrains.mps.baseLanguage.structure.AbstractLoopStatement",false,new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"},new String[]{},new String[]{},new String[]{"variable"},new boolean[]{false});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.IterateContentsVariable","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IValidIdentifier","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.IterateContentsVariableReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"variable"},new String[]{},new boolean[]{});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.RemoveUIObjectStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement"},new String[]{},new String[]{},new String[]{"argument"},new boolean[]{false});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.UIObjectProviderStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.ui.structure.IUIObjectContextProvider"},new String[]{},new String[]{},new String[]{"context","body"},new boolean[]{false,false});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.UIObjectReference","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.ILocalReference"},new String[]{},new String[]{"declaration"},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.UIObjectStatement","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{"uiObject"},new String[]{"viewBinding","controllerBinding","compartment","aspect"},new boolean[]{true,true,true,true});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.UIObjectType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{},new String[]{"uiObject"},new String[]{},new boolean[]{});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ValidateBlock","jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral",false,new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ValidatingView","jetbrains.mps.ui.structure.View",false,new String[]{"jetbrains.mps.ui.structure.View"},new String[]{},new String[]{},new String[]{"view","validator"},new boolean[]{false,false});
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.Validator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.TypeDerivable"},new String[]{},new String[]{},new String[]{"validateBlock"},new boolean[]{false});
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.View","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.ui.structure.ViewBinding","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"property"},new String[]{"view"},new boolean[]{false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
