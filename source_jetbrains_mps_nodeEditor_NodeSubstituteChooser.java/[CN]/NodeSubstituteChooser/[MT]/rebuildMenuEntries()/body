{
  myMenuEmpty=false;
  myMenuSubstituteEntries.clear();
  String pattern=getPatternEditor().getPattern();
  for (Iterator<INodeSubstituteAction> i=myNodeSubstituteActionsList.actions(); i.hasNext(); ) {
    INodeSubstituteAction entry=i.next();
    if (entry.canSubstitute(pattern)) {
      myMenuSubstituteEntries.add(entry);
    }
  }
  if (myMenuSubstituteEntries.size() == 0) {
    myMenuEmpty=true;
    myMenuSubstituteEntries.add(new AbstractNodeSubstituteAction(){
      public String getName(){
        return "No variants for \"" + getPatternEditor().getPattern() + "\"";
      }
      public SemanticNode doSubstitute(      String pattern){
        return null;
      }
    }
);
  }
  myStrings=new String[myMenuSubstituteEntries.size()];
  for (int i=0; i < myMenuSubstituteEntries.size(); i++) {
    INodeSubstituteAction entry=myMenuSubstituteEntries.get(i);
    myStrings[i]=entry.getName();
  }
}
