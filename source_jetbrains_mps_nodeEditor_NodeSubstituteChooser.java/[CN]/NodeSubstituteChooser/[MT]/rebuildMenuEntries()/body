{
  myMenuEmpty=false;
  String pattern=getPatternEditor().getPattern();
  List<INodeSubstituteItem> matchingActions=myNodeSubstituteInfo.getMatchingItems(pattern,false);
  Collections.sort(matchingActions,new Comparator<INodeSubstituteItem>(){
    public int compare(    INodeSubstituteItem iNodeSubstituteItem,    INodeSubstituteItem iNodeSubstituteItem1){
      String s1=iNodeSubstituteItem.getMatchingText(null);
      String s2=iNodeSubstituteItem1.getMatchingText(null);
      if (s1 == null)       s1="";
      if (s2 == null)       s2="";
      return s1.compareTo(s2);
    }
  }
);
  myMenuSubstituteEntries=new LinkedList<INodeSubstituteItem>(matchingActions);
  if (myMenuSubstituteEntries.size() == 0) {
    myMenuEmpty=true;
    myMenuSubstituteEntries.add(new AbstractNodeSubstituteItem(){
      public String getMatchingText(      String pattern){
        return "No variants for \"" + getPatternEditor().getPattern() + "\"";
      }
      public SemanticNode doSubstitute(      String pattern){
        return null;
      }
    }
);
  }
  myStrings=new String[myMenuSubstituteEntries.size()];
  myMatchingStrings=new String[myMenuSubstituteEntries.size()];
  String[] descriptionStrings=new String[myMenuSubstituteEntries.size()];
  int descriptionIndent=2;
  for (int i=0; i < myMenuSubstituteEntries.size(); i++) {
    INodeSubstituteItem entry=myMenuSubstituteEntries.get(i);
    try {
      myMatchingStrings[i]=entry.getMatchingText(null);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (myMatchingStrings[i] != null) {
      descriptionIndent=Math.max(descriptionIndent,myMatchingStrings[i].length() + 2);
    }
    descriptionStrings[i]=entry.getDescriptionText(null);
  }
  for (int i=0; i < myMenuSubstituteEntries.size(); i++) {
    StringBuffer sb=new StringBuffer();
    int indentSize=descriptionIndent;
    if (myMatchingStrings[i] != null) {
      sb.append(myMatchingStrings[i]);
      indentSize=descriptionIndent - myMatchingStrings[i].length();
    }
    if (descriptionStrings[i] != null) {
      char[] indent=new char[indentSize];
      Arrays.fill(indent,' ');
      sb.append(indent);
      sb.append(descriptionStrings[i]);
    }
    myStrings[i]=sb.toString();
  }
}
