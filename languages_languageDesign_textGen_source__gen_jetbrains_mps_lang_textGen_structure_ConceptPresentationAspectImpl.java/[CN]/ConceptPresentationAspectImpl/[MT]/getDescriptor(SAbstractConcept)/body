{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0kb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractAppendPart;
      }
    break;
case 1:
  if (true) {
    return props_AbstractTextGenDeclaration;
  }
break;
case 2:
if (true) {
return props_AbstractTextGenParameter;
}
break;
case 3:
if (true) {
return props_AppendOperation;
}
break;
case 4:
if (true) {
return props_AttributedNodePart;
}
break;
case 5:
if (true) {
return props_BufferParameter;
}
break;
case 6:
if (true) {
return props_CollectionAppendPart;
}
break;
case 7:
if (true) {
return props_ConceptTextGenDeclaration;
}
break;
case 8:
if (true) {
return props_ConstantStringAppendPart;
}
break;
case 9:
if (true) {
return props_ContextParameter;
}
break;
case 10:
if (true) {
return props_DecreaseDepthOperation;
}
break;
case 11:
if (true) {
return props_EncodingDeclaration;
}
break;
case 12:
if (true) {
return props_EncodingDeclarationBase;
}
break;
case 13:
if (true) {
return props_EncodingLiteral;
}
break;
case 14:
if (true) {
return props_ExtensionDeclaration;
}
break;
case 15:
if (true) {
return props_FilenameFunction;
}
break;
case 16:
if (true) {
return props_FoundErrorOperation;
}
break;
case 17:
if (true) {
return props_GenerateTextDeclaration;
}
break;
case 18:
if (true) {
return props_IncreaseDepthOperation;
}
break;
case 19:
if (true) {
return props_IndentBufferOperation;
}
break;
case 20:
if (true) {
return props_IndentPart;
}
break;
case 21:
if (true) {
return props_LanguageTextGenDeclaration;
}
break;
case 22:
if (true) {
return props_LayoutPart;
}
break;
case 23:
if (true) {
return props_NewLineAppendPart;
}
break;
case 24:
if (true) {
return props_NodeAppendPart;
}
break;
case 25:
if (true) {
return props_NodeParameter;
}
break;
case 26:
if (true) {
return props_OperationCall;
}
break;
case 27:
if (true) {
return props_OperationDeclaration;
}
break;
case 28:
if (true) {
return props_ReferenceAppendPart;
}
break;
case 29:
if (true) {
return props_SimpleTextGenOperation;
}
break;
case 30:
if (true) {
return props_StubOperationDeclaration;
}
break;
case 31:
if (true) {
return props_TextUnitLayout;
}
break;
case 32:
if (true) {
return props_UtilityMethodCall;
}
break;
case 33:
if (true) {
return props_UtilityMethodDeclaration;
}
break;
case 34:
if (true) {
return props_WithIndentOperation;
}
break;
default :
}
}
throw new IllegalStateException();
}
