{
  DualGraph dualGraph=new DualGraph(myEmbeddedGraph);
  for (  Edge edge : ListSequence.<Edge>fromList(dualGraph.getEdges())) {
    Face sourceFace=MapSequence.<Node,Face>fromMap(dualGraph.getFacesMap()).get(edge.getSource());
    if (sourceFace != MapSequence.<Edge,Face>fromMap(myLeftFaceForEdge).get(MapSequence.<Edge,Edge>fromMap(dualGraph.getEdgesMap()).get(edge))) {
      dualGraph.revertEdge(edge);
    }
  }
  Face outerFace=myEmbeddedGraph.getOuterFace();
  Node rightOuterFace=dualGraph.createDummyNode();
  MapSequence.<Node,Face>fromMap(dualGraph.getFacesMap()).put(rightOuterFace,outerFace);
  Node outerFaceNode=MapSequence.<Face,Node>fromMap(dualGraph.getNodesMap()).get(outerFace);
  for (  Edge edge : ListSequence.<Edge>fromList(outerFaceNode.getEdges(Edge.Direction.BOTH))) {
    Edge realEdge=MapSequence.<Edge,Edge>fromMap(dualGraph.getEdgesMap()).get(edge);
    if (MapSequence.<Edge,Face>fromMap(myRightFaceForEdge).get(realEdge) == outerFace) {
      dualGraph.removeFromGraph(edge);
      dualGraph.addEdge(edge.getOpposite(outerFaceNode),rightOuterFace,realEdge);
    }
  }
  return dualGraph;
}
