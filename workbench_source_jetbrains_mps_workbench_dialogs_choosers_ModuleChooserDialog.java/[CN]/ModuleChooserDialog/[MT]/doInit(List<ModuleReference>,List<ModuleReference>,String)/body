{
  setModal(true);
  myModules.addAll(options);
  if (nonProjectLanguages != null) {
    myNonProjectModules.addAll(nonProjectLanguages);
  }
  DataContext dataContext=DataManager.getInstance().getDataContext();
  final Project project=MPSDataKeys.PROJECT.getData(dataContext);
  BaseModuleModel goToModuleModel=new BaseModuleModel(project,entityString){
    public NavigationItem doGetNavigationItem(    final ModuleReference module){
      return new BaseModuleItem(module){
        public void navigate(        boolean requestFocus){
        }
      }
;
    }
    public ModuleReference[] find(    boolean checkboxState){
      if (checkboxState) {
        return myNonProjectModules.toArray(new ModuleReference[myNonProjectModules.size()]);
      }
 else {
        return myModules.toArray(new ModuleReference[myModules.size()]);
      }
    }
    public ModuleReference[] find(    IScope scope){
      throw new UnsupportedOperationException("must not be used");
    }
    @Override public boolean loadInitialCheckBoxState(){
      return false;
    }
  }
;
  myChooser=new SmartChooseByNamePanel(goToModuleModel,!myNonProjectModules.isEmpty(),DefaultMatcherFactory.createAllMatcher(goToModuleModel));
  myChooser.invoke(new Callback(){
    public void elementChosen(    Object element){
      if (!myOkDone) {
        myOkDone=true;
        onOk();
      }
    }
  }
,ModalityState.current(),myIsMultipleSelection);
}
