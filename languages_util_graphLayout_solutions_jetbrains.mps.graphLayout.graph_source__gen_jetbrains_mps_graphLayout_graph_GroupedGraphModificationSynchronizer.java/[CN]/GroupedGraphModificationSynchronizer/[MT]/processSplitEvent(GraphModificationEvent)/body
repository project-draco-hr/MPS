{
  Edge splittedEdge=event.getEdge();
  if (MapSequence.fromMap(myEdgeMap).containsKey(splittedEdge)) {
    Edge syncEdge=MapSequence.<Edge,Edge>fromMap(myEdgeMap).get(splittedEdge);
    List<Edge> split=event.getSplit();
    List<Edge> syncSplit=ListSequence.<Edge>fromList(new ArrayList<Edge>(ListSequence.<Edge>fromList(split).count()));
    for (    Edge splitEdge : ListSequence.<Edge>fromList(split)) {
      if (MapSequence.fromMap(myEdgeMap).containsKey(splitEdge)) {
        ListSequence.<Edge>fromList(syncSplit).addElement(MapSequence.<Edge,Edge>fromMap(myEdgeMap).get(splitEdge));
      }
 else {
        Node source=splitEdge.getSource();
        Node syncSource;
        if (MapSequence.fromMap(myNodeMap).containsKey(source)) {
          syncSource=MapSequence.<Node,Node>fromMap(myNodeMap).get(source);
        }
 else {
          syncSource=syncEdge.getSource();
        }
        Node target=splitEdge.getTarget();
        Node syncTarget;
        if (MapSequence.fromMap(myNodeMap).containsKey(target)) {
          syncTarget=MapSequence.<Node,Node>fromMap(myNodeMap).get(target);
        }
 else {
          syncTarget=syncEdge.getTarget();
        }
        Edge syncSplitEdge=mySynchronizedGraph.connect(syncSource,syncTarget);
        MapSequence.<Edge,Edge>fromMap(myEdgeMap).put(splitEdge,syncSplitEdge);
        ListSequence.<Edge>fromList(syncSplit).addElement(syncSplitEdge);
      }
    }
    if (showInfo > 0) {
      System.out.println("splitted " + splittedEdge + " sync = "+ syncEdge);
    }
    mySynchronizedGraph.getModificationProcessor().fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_SPLITTED,syncEdge,syncSplit));
  }
}
