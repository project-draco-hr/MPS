{
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Map<SNode,Set<SNode>> movedNodes=getRefactoringContext().getStructureModificationData().getMovedNodes();
      Map<SNode,Set<SNode>> sourceNodes=getRefactoringContext().getStructureModificationData().getSourceNodes();
      if (movedNodes.isEmpty()) {
        myChangedPanel=null;
      }
 else {
        collectInformation(movedNodes,"Changed Nodes",myChangedPanel);
      }
      if (sourceNodes.isEmpty()) {
        mySourcePanel=null;
      }
 else {
        collectInformation(sourceNodes,"Source Nodes",mySourcePanel);
      }
      collectInformation(getRefactoringContext().getStructureModificationData().getConceptFeatures());
      if (!(movedNodes.isEmpty())) {
        myFirstValidNode=(SNode)movedNodes.keySet().toArray()[0];
        myFirstValidNodeChilds=movedNodes.get(myFirstValidNode);
      }
    }
  }
);
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      if (myFirstValidNode != null) {
        if (myEditor == null) {
          SNode copiedRoot=SNodeOperations.copyNode(myFirstValidNode);
          myEditor=new EmbeddableEditor(getOperationContext(),myTMPModelOwner=new TemporaryModelOwner(),copiedRoot,false);
          setEditorNode(myFirstValidNode);
          highlightChanges(getCopiedNodes(myFirstValidNodeChilds,myFirstValidNode,copiedRoot));
        }
      }
    }
  }
);
  JPanel mainPanel=new JPanel(new BorderLayout());
  mainPanel.add(getSimplePanel(),BorderLayout.NORTH);
  Splitter splitter=new Splitter(false);
  splitter.setFirstComponent(new JScrollPane(getSimplePanel()));
  splitter.setSecondComponent(getEditorPanel());
  myMainPanel=splitter;
  return myMainPanel;
}
