{
  final List<ChangeEditorMessage> resultChanges=new ArrayList<ChangeEditorMessage>();
  myChanges=new ArrayList<Change>(changes);
  SNode sNode=getRootCell().getSNode();
  if (sNode == null) {
    return;
  }
  final SModel model=sNode.getModel();
  final Set<Change> newChanges=getNewChanges(changes);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      Change change : changes) {
        if (change instanceof SetReferenceChange) {
          SetReferenceChange referenceChange=(SetReferenceChange)change;
          ChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!newChanges.contains(change));
          message.setRole(referenceChange.getRole());
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof MoveNodeChange || change instanceof ChangeConceptChange) {
          ChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!newChanges.contains(change));
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof NewNodeChange) {
          if (!isNewVersion) {
            ChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!newChanges.contains(change));
            resultChanges.add(message);
            getHighlightManager().mark(message);
          }
        }
        if (change instanceof SetPropertyChange) {
          SetPropertyChange propertyChange=(SetPropertyChange)change;
          ChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!newChanges.contains(change));
          message.setProperty(propertyChange.getProperty());
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof DeleteNodeChange) {
          if (isNewVersion) {
            ChangeEditorMessage message=createEditorMessage(change,model,revertedChanges,!newChanges.contains(change));
            resultChanges.add(message);
            getHighlightManager().mark(message);
          }
        }
      }
    }
  }
);
  for (  ChangeEditorMessage editorMessage : resultChanges) {
    getInspector().getHighlightManager().mark(editorMessage);
  }
  myChangeEditorMessages=new ArrayList<ChangeEditorMessage>(resultChanges);
}
