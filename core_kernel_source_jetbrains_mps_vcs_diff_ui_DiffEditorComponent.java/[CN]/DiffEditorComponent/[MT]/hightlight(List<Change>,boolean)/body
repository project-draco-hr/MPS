{
  final List<ChangeEditorMessage> resultChanges=new ArrayList<ChangeEditorMessage>();
  final SModel model=getRootCell().getSNode().getModel();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      for (      Change change : revertChanges) {
        if (change instanceof SetReferenceChange) {
          SetReferenceChange referenceChange=(SetReferenceChange)change;
          ChangeEditorMessage message=new ChangeEditorMessage(change,model.getNodeById(change.getAffectedNodeId()),CHANGE_COLOR,"",myOwner);
          message.setRole(referenceChange.getRole());
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof MoveNodeChange || change instanceof ChangeConceptChange) {
          ChangeEditorMessage message=new ChangeEditorMessage(change,model.getNodeById(change.getAffectedNodeId()),CHANGE_COLOR,"",myOwner);
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof NewNodeChange) {
          if (!isNew) {
            SNode removedNode=model.getNodeById(change.getAffectedNodeId());
            ChangeEditorMessage message=new ChangeEditorMessage(change,removedNode,DELETE_COLOR,"",myOwner);
            resultChanges.add(message);
            getHighlightManager().mark(message);
          }
        }
        if (change instanceof SetPropertyChange) {
          SetPropertyChange propertyChange=(SetPropertyChange)change;
          ChangeEditorMessage message=new ChangeEditorMessage(change,model.getNodeById(change.getAffectedNodeId()),CHANGE_COLOR,"",myOwner);
          message.setProperty(propertyChange.getProperty());
          resultChanges.add(message);
          getHighlightManager().mark(message);
        }
        if (change instanceof DeleteNodeChange) {
          if (isNew) {
            SNode removedNode=model.getNodeById(change.getAffectedNodeId());
            ChangeEditorMessage message=new ChangeEditorMessage(change,removedNode,NEW_COLOR,"",myOwner);
            resultChanges.add(message);
            getHighlightManager().mark(message);
          }
        }
      }
    }
  }
);
  for (  ChangeEditorMessage editorMessage : resultChanges) {
    getInspector().getHighlightManager().mark(editorMessage);
  }
  myChanges=new ArrayList<ChangeEditorMessage>(resultChanges);
}
