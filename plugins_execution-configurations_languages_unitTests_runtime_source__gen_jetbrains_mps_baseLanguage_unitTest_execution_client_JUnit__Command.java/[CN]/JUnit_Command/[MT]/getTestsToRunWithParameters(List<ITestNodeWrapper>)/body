{
  tests=ListSequence.fromList(tests).where(new IWhereFilter<ITestNodeWrapper>(){
    public boolean accept(    ITestNodeWrapper it){
      return it != null;
    }
  }
).toListSequence();
  if (ListSequence.fromList(tests).isEmpty()) {
    TestParameters defaultRunParameters;
    defaultRunParameters=TestParameters.DEFAULT;
    return new TestsWithParameters(ListSequence.fromList(new ArrayList<ITestNodeWrapper>()),defaultRunParameters);
  }
  TestParameters runParams=JUnit_Command.getMaxParams(tests);
  List<ITestNodeWrapper> testsToRun=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  List<ITestNodeWrapper> testsToSkip=ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  for (  ITestNodeWrapper test : ListSequence.fromList(tests)) {
    TestParameters testRunParameters=test.getTestRunParameters();
    if (runParams.comprises(testRunParameters)) {
      ListSequence.fromList(testsToRun).addElement(test);
    }
 else {
      ListSequence.fromList(testsToSkip).addElement(test);
    }
  }
  String skipped=IterableUtils.join(ListSequence.fromList(testsToSkip).select(new ISelector<ITestNodeWrapper,String>(){
    public String select(    ITestNodeWrapper it){
      return it.getName();
    }
  }
)," ");
  if ((skipped != null && skipped.length() > 0)) {
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("All tests could not be executed together. Skipped: " + skipped);
    }
  }
  return new TestsWithParameters(testsToRun,runParams);
}
