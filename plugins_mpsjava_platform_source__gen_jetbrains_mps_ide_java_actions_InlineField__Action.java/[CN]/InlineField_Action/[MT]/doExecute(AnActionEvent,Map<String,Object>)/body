{
  try {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.inline");
    final Wrappers._T<InlineFieldRefactoring> ref=new Wrappers._T<InlineFieldRefactoring>();
    final Wrappers._boolean isAvailable=new Wrappers._boolean(true);
    String messageDialogTitle="Inline Field";
    final Wrappers._T<String> infoMessage=new Wrappers._T<String>(null);
    final Wrappers._T<String> yesNoMessage=new Wrappers._T<String>(null);
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
          SNode fieldDeclaration=SNodeOperations.cast(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.VariableDeclaration");
          InlineFieldAssignmentRefactoring inlineVARef=new InlineFieldAssignmentRefactoring(fieldDeclaration);
          if ((SLinkOperations.getTarget(fieldDeclaration,"initializer",true) == null)) {
            isAvailable.value=false;
          }
          String fieldName=SPropertyOperations.getString(fieldDeclaration,"name");
          int nodesCount=Sequence.fromIterable(inlineVARef.findAllReferences(fieldDeclaration)).count() + Sequence.fromIterable(inlineVARef.findAllReferenceOperations(fieldDeclaration)).count();
          if (nodesCount == 0) {
            infoMessage.value="Field " + fieldName + " is never used";
          }
 else {
            yesNoMessage.value="Inline field '" + fieldName + "'? ("+ NameUtil.formatNumericalString(nodesCount,"occurence")+ ")";
          }
          ref.value=inlineVARef;
        }
 else         if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
          ref.value=new InlineFieldReferenceOperationRefactoring(SNodeOperations.cast(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"));
        }
 else {
          SNode localVariableReference=SNodeOperations.cast(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.VariableReference");
          ref.value=new InlineFieldReferenceRefactoring(localVariableReference);
        }
      }
    }
);
    if (!(isAvailable.value)) {
      return;
    }
    if (infoMessage.value != null) {
      Messages.showInfoMessage(((Frame)MapSequence.fromMap(_params).get("frame")),infoMessage.value,messageDialogTitle);
      return;
    }
    if (yesNoMessage.value != null) {
      int code=Messages.showYesNoDialog(((Frame)MapSequence.fromMap(_params).get("frame")),yesNoMessage.value,messageDialogTitle,null);
      if (code != 0) {
        return;
      }
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        SNode result=ref.value.doRefactoring();
        ((EditorContext)MapSequence.fromMap(_params).get("editorContext")).select(result);
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "InlineField",t);
    }
  }
}
