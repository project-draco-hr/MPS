{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_wf1ya0_a0b=null;
switch (0) {
case 0:
        if (Boolean.TRUE.equals(pa.global().properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),JavaCompile_Facet.Target_compile.Parameters.class).skipCompilation())) {
          _output_wf1ya0_a0b=Sequence.fromIterable(_output_wf1ya0_a0b).concat(Sequence.fromIterable(input));
          return new IResult.SUCCESS(_output_wf1ya0_a0b);
        }
      int work=Sequence.fromIterable(input).foldLeft(0,new ILeftCombinator<IResource,Integer>(){
        public Integer combine(        Integer s,        IResource it){
          return s + ((((TResource)it).module().isCompileInMPS() ? 0 : 100));
        }
      }
);
    if (work == 0) {
      return new IResult.SUCCESS(_output_wf1ya0_a0b);
    }
  if (pa.global().properties(Target_auxCompile.this.getName(),JavaCompile_Facet.Target_auxCompile.Parameters.class).skipAuxCompile() != null && pa.global().properties(Target_auxCompile.this.getName(),JavaCompile_Facet.Target_auxCompile.Parameters.class).skipAuxCompile()) {
    return new IResult.SUCCESS(_output_wf1ya0_a0b);
  }
IAuxProjectPeer peer=pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Variables.class).project().getComponent(IAuxProjectPeer.class);
if (peer == null || !(peer.isValid())) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("IntelliJ IDEA is required for compilation")));
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
monitor.currentProgress().beginWork("Compiling in IntelliJ IDEA",work,monitor.currentProgress().workLeft());
boolean refreshed=false;
for (IResource resource : Sequence.fromIterable(input)) {
TResource tres=(TResource)resource;
if (tres.module() == null) {
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
if (tres.module().isCompileInMPS()) {
continue;
}
if (MPSCore.getInstance().isTestMode()) {
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
monitor.currentProgress().advanceWork("Compiling in IntelliJ IDEA",50,tres.module().getModuleReference().getModuleFqName());
if (!(refreshed)) {
peer.getJavaCompiler().refreshFiles();
refreshed=true;
}
MPSCompilationResult cr=peer.getJavaCompiler().compileModule(tres.module());
if (cr != null) {
for (IMessage msg : cr.getMessages()) {
monitor.reportFeedback(new IFeedback.MESSAGE(msg));
}
}
if (cr == null || !(cr.isOk())) {
if (cr != null) {
if (cr.getErrors() > 0) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(cr)));
}
 else if (cr.getWarnings() > 0) {
monitor.reportFeedback(new IFeedback.WARNING(String.valueOf(cr)));
}
 else {
monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(cr)));
}
}
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
monitor.currentProgress().advanceWork("Compiling in IntelliJ IDEA",50);
_output_wf1ya0_a0b=Sequence.fromIterable(_output_wf1ya0_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
}
monitor.currentProgress().finishWork("Compiling in IntelliJ IDEA");
default :
return new IResult.SUCCESS(_output_wf1ya0_a0b);
}
}
}
;
}
