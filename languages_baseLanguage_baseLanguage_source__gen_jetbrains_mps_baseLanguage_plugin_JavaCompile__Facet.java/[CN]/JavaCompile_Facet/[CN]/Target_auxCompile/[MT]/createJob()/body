{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_wf1ya0_a0b=null;
switch (0) {
case 0:
        if (Boolean.TRUE.equals(pa.global().properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),JavaCompile_Facet.Target_compile.Parameters.class).skipCompilation())) {
          _output_wf1ya0_a0b=Sequence.fromIterable(_output_wf1ya0_a0b).concat(Sequence.fromIterable(input));
          return new IResult.SUCCESS(_output_wf1ya0_a0b);
        }
      if (pa.global().properties(Target_auxCompile.this.getName(),JavaCompile_Facet.Target_auxCompile.Parameters.class).skipAuxCompile() != null && pa.global().properties(Target_auxCompile.this.getName(),JavaCompile_Facet.Target_auxCompile.Parameters.class).skipAuxCompile()) {
        return new IResult.SUCCESS(_output_wf1ya0_a0b);
      }
    Iterable<TResource> toCompile=Sequence.fromIterable(input).select(new ISelector<IResource,TResource>(){
      public TResource select(      IResource it){
        return (TResource)(((IResource)it));
      }
    }
);
  if (Sequence.fromIterable(toCompile).any(new IWhereFilter<TResource>(){
    public boolean accept(    TResource it){
      return it.module() == null;
    }
  }
)) {
    return new IResult.FAILURE(_output_wf1ya0_a0b);
  }
toCompile=Sequence.fromIterable(toCompile).where(new IWhereFilter<TResource>(){
  public boolean accept(  TResource it){
    return !(it.module().isCompileInMPS());
  }
}
);
if (Sequence.fromIterable(toCompile).isEmpty()) {
return new IResult.SUCCESS(_output_wf1ya0_a0b);
}
if (MPSCore.getInstance().isTestMode()) {
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
IAuxProjectPeer peer=pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"),Variables.class).project().getComponent(IAuxProjectPeer.class);
if (peer == null || !(peer.isValid())) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("IntelliJ IDEA is required for compilation")));
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
monitor.currentProgress().beginWork("Compiling in IntelliJ IDEA",2,monitor.currentProgress().workLeft());
monitor.currentProgress().advanceWork("Compiling in IntelliJ IDEA",1,"Refresh files");
peer.getJavaCompiler().refreshFiles();
monitor.currentProgress().advanceWork("Compiling in IntelliJ IDEA",1,"Compile");
MPSCompilationResult cr=peer.getJavaCompiler().compileModules(Sequence.fromIterable(toCompile).select(new ISelector<TResource,IModule>(){
public IModule select(TResource it){
return it.module();
}
}
).toGenericArray(IModule.class));
if (cr != null) {
for (IMessage msg : cr.getMessages()) {
monitor.reportFeedback(new IFeedback.MESSAGE(msg));
}
}
if (cr == null || !(cr.isOk())) {
if (cr != null) {
if (cr.getErrors() > 0) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(cr)));
}
 else if (cr.getWarnings() > 0) {
monitor.reportFeedback(new IFeedback.WARNING(String.valueOf(cr)));
}
 else {
monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(cr)));
}
}
return new IResult.FAILURE(_output_wf1ya0_a0b);
}
_output_wf1ya0_a0b=Sequence.fromIterable(_output_wf1ya0_a0b).concat(Sequence.fromIterable(toCompile));
monitor.currentProgress().finishWork("Compiling in IntelliJ IDEA");
default :
return new IResult.SUCCESS(_output_wf1ya0_a0b);
}
}
}
;
}
