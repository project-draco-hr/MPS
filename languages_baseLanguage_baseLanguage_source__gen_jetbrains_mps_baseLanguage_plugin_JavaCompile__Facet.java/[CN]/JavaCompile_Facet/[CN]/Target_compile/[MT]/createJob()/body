{
  return new IJob.Stub(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IPropertiesAccessor pa){
      Iterable<IResource> _output_wf1ya0_a0a=null;
switch (0) {
case 0:
        if (Boolean.TRUE.equals(pa.global().properties(Target_compile.this.getName(),JavaCompile_Facet.Target_compile.Parameters.class).skipCompilation())) {
          _output_wf1ya0_a0a=Sequence.fromIterable(_output_wf1ya0_a0a).concat(Sequence.fromIterable(input));
          return new IResult.SUCCESS(_output_wf1ya0_a0a);
        }
      pa.global().properties(Target_compile.this.getName(),JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything(false);
    final Iterable<IModule> toCompile=Sequence.fromIterable(input).select(new ISelector<IResource,IModule>(){
      public IModule select(      IResource it){
        return ((TResource)it).module();
      }
    }
).where(new IWhereFilter<IModule>(){
      public boolean accept(      IModule it){
        return it != null && it.isCompileInMPS();
      }
    }
).distinct();
  if ((int)Sequence.fromIterable(toCompile).count() == 0) {
    return new IResult.SUCCESS(_output_wf1ya0_a0a);
  }
monitor.currentProgress().beginWork("Compiling",1,monitor.currentProgress().workLeft());
final Wrappers._T<MPSCompilationResult> cr=new Wrappers._T<MPSCompilationResult>();
ModelAccess.instance().runReadAction(new Runnable(){
public void run(){
cr.value=new ModuleMaker().make(SetSequence.fromSetWithValues(new HashSet<IModule>(),toCompile),new EmptyProgressMonitor());
}
}
);
monitor.currentProgress().advanceWork("Compiling",1,IterableUtils.join(Sequence.fromIterable(toCompile).select(new ISelector<IModule,String>(){
public String select(IModule it){
return it.getModuleReference().getModuleFqName();
}
}
),", "));
if (cr.value != null) {
pa.global().properties(Target_compile.this.getName(),JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything(pa.global().properties(Target_compile.this.getName(),JavaCompile_Facet.Target_compile.Parameters.class).compiledAnything() || cr.value.isCompiledAnything());
for (IMessage msg : cr.value.getMessages()) {
monitor.reportFeedback(new IFeedback.MESSAGE(msg));
}
}
if (cr.value == null || !(cr.value.isOk())) {
if (cr.value != null) {
if (cr.value.getErrors() > 0) {
monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(cr.value)));
}
 else if (cr.value.getWarnings() > 0) {
monitor.reportFeedback(new IFeedback.WARNING(String.valueOf(cr.value)));
}
 else {
monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf(cr.value)));
}
}
return new IResult.FAILURE(_output_wf1ya0_a0a);
}
for (IResource resource : Sequence.fromIterable(input)) {
TResource tres=(TResource)resource;
if (tres.module() == null) {
return new IResult.FAILURE(_output_wf1ya0_a0a);
}
if (!(tres.module().isCompileInMPS())) {
continue;
}
_output_wf1ya0_a0a=Sequence.fromIterable(_output_wf1ya0_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
}
monitor.currentProgress().finishWork("Compiling");
default :
return new IResult.SUCCESS(_output_wf1ya0_a0a);
}
}
}
;
}
