{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0db.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractionVarRef;
      }
    break;
case 1:
  if (true) {
    return props_AbstractionVariable;
  }
break;
case 2:
if (true) {
return props_AddOperation;
}
break;
case 3:
if (true) {
return props_BinaryNumericOperation;
}
break;
case 4:
if (true) {
return props_BinaryOperation;
}
break;
case 5:
if (true) {
return props_BinaryStringOperation;
}
break;
case 6:
if (true) {
return props_ConcatenateOperation;
}
break;
case 7:
if (true) {
return props_DivideOperation;
}
break;
case 8:
if (true) {
return props_FunctionType;
}
break;
case 9:
if (true) {
return props_LambdaAbstraction;
}
break;
case 10:
if (true) {
return props_LambdaApplication;
}
break;
case 11:
if (true) {
return props_LambdaExpression;
}
break;
case 12:
if (true) {
return props_LambdaType;
}
break;
case 13:
if (true) {
return props_LetExpression;
}
break;
case 14:
if (true) {
return props_LetRef;
}
break;
case 15:
if (true) {
return props_LetVariable;
}
break;
case 16:
if (true) {
return props_MultipleExpression;
}
break;
case 17:
if (true) {
return props_MultiplyOperation;
}
break;
case 18:
if (true) {
return props_NumberType;
}
break;
case 19:
if (true) {
return props_NumericConstant;
}
break;
case 20:
if (true) {
return props_ParenthesisExpression;
}
break;
case 21:
if (true) {
return props_Program;
}
break;
case 22:
if (true) {
return props_StringConstant;
}
break;
case 23:
if (true) {
return props_StringType;
}
break;
case 24:
if (true) {
return props_SubtractOperation;
}
break;
case 25:
if (true) {
return props_Variable;
}
break;
case 26:
if (true) {
return props_VariableOwner;
}
break;
case 27:
if (true) {
return props_VariableReference;
}
break;
default :
}
}
throw new IllegalStateException();
}
