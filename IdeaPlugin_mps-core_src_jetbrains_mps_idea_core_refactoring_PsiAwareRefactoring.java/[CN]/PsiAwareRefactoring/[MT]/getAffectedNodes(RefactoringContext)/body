{
  SearchResults<SNode> mpsResults=baseRefactoring.getAffectedNodes(refactoringContext);
  Project project=ProjectHelper.toIdeaProject(refactoringContext.getCurrentOperationContext().getProject());
  List<SNode> nodes=baseRefactoring.getRefactoringTarget().allowMultipleTargets() ? refactoringContext.getSelectedNodes() : Arrays.asList(refactoringContext.getSelectedNode());
  for (  SNode target : nodes) {
    PsiElement psiTarget=MPSPsiProvider.getInstance(project).getPsi(target);
    Collection<PsiReference> psiRefs=ReferencesSearch.search(psiTarget).findAll();
    List<SearchResult<SNode>> psiResults=new ArrayList<SearchResult<SNode>>(psiRefs.size());
    for (    PsiReference ref : psiRefs) {
      PsiElement element=ref.getElement();
      if (element instanceof MPSPsiNode)       continue;
      psiResults.add(new PsiSearchResult(ref));
    }
    mpsResults.addAll(new SearchResults<SNode>(new HashSet<SNode>(),psiResults));
  }
  return mpsResults;
}
