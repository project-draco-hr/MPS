{
  List<Pair<EditorCellKeyMap,EditorCell>> keymapsAndCells=getReisteredKeymaps(selectedCell,editorContext);
  if (keymapsAndCells.isEmpty()) {
    return Collections.emptyList();
  }
  int caretPosition=getCaretPositionCode(selectedCell);
  List<Pair<EditorCellKeyMapAction,ActionKey>> result=new LinkedList<Pair<EditorCellKeyMapAction,ActionKey>>();
  List<Pair<EditorCellKeyMapAction,EditorCell>> actionsAndCells=new LinkedList<Pair<EditorCellKeyMapAction,EditorCell>>();
  for (  Pair<EditorCellKeyMap,EditorCell> keymapAndCell : keymapsAndCells) {
    EditorCellKeyMap keymap=keymapAndCell.o1;
    EditorCell keymapOwnerCell=keymapAndCell.o2;
    List<Pair<EditorCellKeyMapAction,ActionKey>> actionsAndKeys=keymap.getAllActionsAndKeys();
    for (    Pair<EditorCellKeyMapAction,ActionKey> actionAndKey : actionsAndKeys) {
      EditorCellKeyMapAction action=actionAndKey.o1;
      EditorCell actionCell=selectActionCell(action,keymapOwnerCell,selectedCell,caretPosition,null,editorContext);
      if (actionCell != null) {
        result.add(actionAndKey);
      }
    }
  }
  return result;
}
