{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("argument",new BaseReferenceConstraintsDescriptor("argument",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=ListSequence.<SNode>fromList(new ArrayList<SNode>());
          SNode refactoring=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.refactoring.structure.OldRefactoring",false,false);
          ListSequence.<SNode>fromList(nodes).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(refactoring,"arguments",true)));
          ListSequence.<SNode>fromList(nodes).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(refactoring,"internalArguments",true)));
          return nodes;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_a8u4wv_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
