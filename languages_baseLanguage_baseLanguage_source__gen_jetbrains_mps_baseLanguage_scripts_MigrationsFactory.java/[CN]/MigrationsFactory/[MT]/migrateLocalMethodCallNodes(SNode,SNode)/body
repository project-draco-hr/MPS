{
  final String callConceptSimpleName=SPropertyOperations.getString(methodCallConcept,"name");
  final String declarationConceptFqName=INamedConcept_Behavior.call_getFqName_1213877404258(methodDeclarationConcept);
  return ListSequence.fromListAndArray(new ArrayList<AbstractMigrationRefactoring>(),new SimpleMigration(methodCallConcept){
    public String getName(){
      return "Convert all nodes of " + callConceptSimpleName + " concept to LocalMethodCall nodes";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(declarationConceptFqName.equals(check_uzzzvm_a0a0a0b0a0a0d0b(check_uzzzvm_a0a0a0a1a0a0a3a1(check_uzzzvm_a0a0a0a0a1a0a0a3a1(node)))))) {
        return false;
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalMethodCall",null);
      SLinkOperations.setTarget(result,"baseMethodDeclaration",SLinkOperations.getTarget(node,"baseMethodDeclaration",false),false);
      for (      SNode attribute : SLinkOperations.getTargets(node,"smodelAttribute",true)) {
        SNode copy=SNodeOperations.cast(CopyUtil.copyAndPreserveId(attribute),"jetbrains.mps.lang.core.structure.Attribute");
        ListSequence.fromList(SNodeOperations.getChildren(result,SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept","smodelAttribute"))).addElement(copy);
      }
      result.setId(node.getSNodeId());
      SNodeOperations.replaceWithAnother(node,result);
    }
  }
);
}
