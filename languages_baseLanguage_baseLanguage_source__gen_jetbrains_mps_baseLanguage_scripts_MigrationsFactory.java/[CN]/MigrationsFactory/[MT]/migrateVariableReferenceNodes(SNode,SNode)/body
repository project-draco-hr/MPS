{
  final String referenceConceptSimpleName=SPropertyOperations.getString(referenceConcept,"name");
  final String referenceConceptFqName=INamedConcept_Behavior.call_getFqName_1213877404258(referenceConcept);
  final String targetConceptFqName=INamedConcept_Behavior.call_getFqName_1213877404258(targetConcept);
  return ListSequence.fromListAndArray(new ArrayList<AbstractMigrationRefactoring>(),new AbstractMigrationRefactoring(null){
    public String getName(){
      return "Convert all nodes of " + referenceConceptSimpleName + " concept to VariableReference nodes";
    }
    public String getAdditionalInfo(){
      return getName();
    }
    public String getFqNameOfConceptToSearchInstances(){
      return referenceConceptFqName;
    }
    public boolean isApplicableInstanceNode(    SNode node){
      if (!(targetConceptFqName.equals(check_uzzzvm_a0a0a0d0a0a0e0a(check_uzzzvm_a0a0a0a3a0a0a4a0(check_uzzzvm_a0a0a0a0a3a0a0a4a0(node)))))) {
        return false;
      }
      String modelName=check_uzzzvm_a0c0d0a0a0e0a(check_uzzzvm_a0a2a3a0a0a4a0(check_uzzzvm_a0a0c0d0a0a0e0a(check_uzzzvm_a0a0a2a3a0a0a4a0(SNodeOperations.getModel(node)))));
      if (!("jetbrains.mps.ide.java.parser".equals(modelName))) {
        return false;
      }
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference",null);
      SLinkOperations.setTarget(result,"variableDeclaration",SLinkOperations.getTarget(node,"variableDeclaration",false),false);
      for (      SNode attribute : SLinkOperations.getTargets(node,"smodelAttribute",true)) {
        SNode copy=SNodeOperations.cast(CopyUtil.copyAndPreserveId(attribute),"jetbrains.mps.lang.core.structure.Attribute");
        ListSequence.fromList(SNodeOperations.getChildren(result,SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept","smodelAttribute"))).addElement(copy);
      }
      result.setId(node.getSNodeId());
      SNodeOperations.replaceWithAnother(node,result);
    }
    @Override public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
