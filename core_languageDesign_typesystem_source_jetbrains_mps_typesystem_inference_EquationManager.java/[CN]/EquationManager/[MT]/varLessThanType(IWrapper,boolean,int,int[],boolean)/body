{
  return thisLessThanType(var,isWeak,new IActionPerformer(){
    public void performAction(    IWrapper type,    Set<IWrapper> concreteSupertypes,    Map<IWrapper,EquationInfo> errorInfoMap,    boolean isWeak,    EquationInfo errorInfo){
      ISlicer slicer=myTypeCheckingContext.getCurrentSlicer();
      IWrapper otherType=decideIfIsLineAndReturnInfimum(concreteSupertypes);
      slicer.beforeInequationsSolvedForType(type.getNode(),otherType.getNode(),new ArrayList<EquationInfo>(errorInfoMap.values()));
      addEquation(type,otherType,errorInfo);
    }
  }
,priority,minPriority,isShallow);
}
