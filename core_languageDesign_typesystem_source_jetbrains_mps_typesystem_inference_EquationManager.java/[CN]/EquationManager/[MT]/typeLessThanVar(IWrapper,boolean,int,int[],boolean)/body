{
  return typeLessThanThis(var,isWeak,new IActionPerformer(){
    public void performAction(    IWrapper type,    Set<IWrapper> concreteSubtypes,    Map<IWrapper,EquationInfo> errorInfoMap,    boolean isWeak,    EquationInfo errorInfo){
      Set<IWrapper> expandedSubtypes=new HashSet<IWrapper>();
      for (      IWrapper subtype : concreteSubtypes) {
        IWrapper expanded=expandWrapper(null,subtype,myTypeChecker.getRuntimeTypesModel());
        expandedSubtypes.add(expanded);
      }
      addEquation(type,myTypeChecker.getSubtypingManager().leastCommonSupertype(expandedSubtypes,isWeak,EquationManager.this),errorInfo);
    }
  }
,priority,minPriority,isShallow);
}
