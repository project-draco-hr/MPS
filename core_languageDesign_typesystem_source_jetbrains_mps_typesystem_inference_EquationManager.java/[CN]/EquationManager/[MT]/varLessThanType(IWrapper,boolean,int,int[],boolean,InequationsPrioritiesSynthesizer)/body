{
  return thisLessThanType(var,isWeak,new IActionPerformer(){
    public void performAction(    IWrapper type,    Set<IWrapper> concreteSupertypes,    Map<IWrapper,EquationInfo> errorInfoMap,    boolean isWeak,    EquationInfo errorInfo){
      ISlicer slicer=null;
      if (myTypeCheckingContext != null) {
        slicer=myTypeCheckingContext.getCurrentSlicer();
      }
 else {
        LOG.error("type checking context is null");
      }
      IWrapper otherType=decideIfIsLineAndReturnInfimum(concreteSupertypes);
      if (slicer != null) {
        if (otherType != null) {
          slicer.beforeInequationsSolvedForType(type.getNode(),otherType.getNode(),new ArrayList<EquationInfo>(errorInfoMap.values()));
        }
      }
 else {
        LOG.error("slicer is null");
      }
      addEquation(type,otherType,errorInfo);
    }
  }
,priority,minPriority,isShallow,prioritiesSynthesizer);
}
