{
  IWrapper representator1=getRepresentatorWrapper(type1);
  IWrapper representator2=getRepresentatorWrapper(type2);
  if (NodeWrapper.fromWrapper(representator1) == NodeWrapper.fromWrapper(representator2))   return;
  RuntimeTypeVariable varSubtype=representator1 == null ? null : representator1.getVariable();
  RuntimeTypeVariable varSupertype=representator2 == null ? null : representator2.getVariable();
  if (varSubtype != null || varSupertype != null) {
    if (isWeak) {
      addComparable(representator1,representator2,errorInfo);
    }
 else {
      addStrongComparable(representator1,representator2,errorInfo);
    }
    return;
  }
  if (myTypeChecker.getSubtypingManager().isComparableWRTRules(representator1,representator2,this,errorInfo,isWeak)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(representator1,representator2,this,errorInfo,isWeak)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(representator2,representator1,this,errorInfo,isWeak)) {
    return;
  }
  String ruleModel=errorInfo.getRuleModel();
  String ruleId=errorInfo.getRuleId();
  String errorString=errorInfo.getErrorString();
  IErrorReporter errorReporter;
  if (errorString == null) {
    String strongString=isWeak ? "" : " strongly";
    errorReporter=new EquationErrorReporter(this,"type ",representator1," is not" + strongString + " comparable with ",representator2,"",ruleModel,ruleId);
  }
 else {
    errorReporter=new SimpleErrorReporter(errorString,ruleModel,ruleId);
  }
  errorReporter.setIntentionProvider(errorInfo.getIntentionProvider());
  myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorReporter);
}
