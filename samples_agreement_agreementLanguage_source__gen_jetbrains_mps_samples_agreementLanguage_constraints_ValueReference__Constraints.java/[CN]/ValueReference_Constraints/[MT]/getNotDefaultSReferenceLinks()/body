{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102eaa8102cL,0x102eaa8542bL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102eaa8102cL,0x102eaa8542bL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode plan=SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102dbe79bfeL,"jetbrains.mps.samples.agreementLanguage.structure.Plan"),true,false);
          return new SubnodesSearchScope(plan);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_r7tp2g_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
