{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_fi61u2_a0b=null;
      final Iterable<IResource> input=(Iterable)(Iterable)rawInput;
switch (0) {
case 0:
        IModifiableGenerationSettings settings=GenerationSettingsProvider.getInstance().getGenerationSettings();
      if (vars(pa.global()).generationOptions() == null) {
        vars(pa.global()).generationOptions(GenerationOptions.fromSettings(settings));
      }
    Iterable<GenerationCacheContainer> caches=new ExtensionPoint<GenerationCacheContainer>("jetbrains.mps.lang.core.GeneratorCache").getObjects();
  GenerationCacheContainer cacheContainer=(Sequence.fromIterable(caches).isEmpty() ? null : Sequence.fromIterable(caches).first());
final IncrementalGenerationStrategy incrementalStrategy;
if (settings.isIncremental()) {
incrementalStrategy=new DefaultIncrementalStrategy((settings.isIncrementalUseCache() ? cacheContainer : null));
}
 else {
incrementalStrategy=new DefaultNonIncrementalStrategy();
}
vars(pa.global()).generationOptions().incremental(incrementalStrategy);
vars(pa.global()).generationOptions().tracing(settings.getPerformanceTracingLevel());
vars(pa.global()).generationOptions().saveTransientModels(vars(pa.global()).saveTransient()).rebuildAll(Generate_Facet.Target_checkParameters.vars(pa.global()).cleanMake()).keepOutputModel(true);
vars(pa.global()).parametersProvider(new DefaultGenerationParametersProvider());
vars(pa.global()).generationOptions().parameters(vars(pa.global()).parametersProvider());
Project mpsProject=Generate_Facet.Target_checkParameters.vars(pa.global()).makeSession().getProject();
TransientModelsProvider tmc=mpsProject.getComponent(TransientModelsProvider.class);
vars(pa.global()).transientModelsProvider((tmc != null ? tmc : new TransientModelsProvider(mpsProject.getRepository(),null)));
vars(pa.global()).transientModelsProvider().removeAllTransient();
return new IResult.SUCCESS(_output_fi61u2_a0b);
default :
return new IResult.SUCCESS(_output_fi61u2_a0b);
}
}
}
;
}
