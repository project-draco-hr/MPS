{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_fi61u2_a0c=null;
      final Iterable<MResource> input=(Iterable<MResource>)(Iterable)rawInput;
switch (0) {
case 0:
        int work=Sequence.fromIterable(input).count() * 100;
      if (work == 0) {
        return new IResult.SUCCESS(_output_fi61u2_a0c);
      }
    monitor.currentProgress().beginWork("Pre-loading models",work,monitor.currentProgress().workLeft());
  Sequence.fromIterable(input).visitAll(new IVisitor<MResource>(){
    public void visit(    final MResource mod){
      monitor.currentProgress().advanceWork("Pre-loading models",100);
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          Sequence.fromIterable(mod.models()).visitAll(new IVisitor<SModelDescriptor>(){
            public void visit(            SModelDescriptor m){
              m.load();
            }
          }
);
        }
      }
);
    }
  }
);
monitor.currentProgress().finishWork("Pre-loading models");
_output_fi61u2_a0c=Sequence.fromIterable(_output_fi61u2_a0c).concat(Sequence.fromIterable(input));
default :
return new IResult.SUCCESS(_output_fi61u2_a0c);
}
}
}
;
}
