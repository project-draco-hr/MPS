{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_fi61u2_a0d=null;
      final Iterable<MResource> input=(Iterable<MResource>)(Iterable)rawInput;
switch (0) {
case 0:
        final Wrappers._T<Map<SModule,Iterable<SModel>>> retainedModels=new Wrappers._T<Map<SModule,Iterable<SModel>>>();
      final Project mpsProject=Generate_Facet.Target_checkParameters.vars(pa.global()).makeSession().getProject();
    mpsProject.getModelAccess().runReadAction(new Runnable(){
      public void run(){
        retainedModels.value=RetainedUtil.collectModelsToRetain(input);
      }
    }
);
  if (Generate_Facet.Target_configure.vars(pa.global()).customPlan() == null) {
    mpsProject.getModelAccess().runReadAction(new Runnable(){
      public void run(){
        for (        MResource res : Sequence.fromIterable(input)) {
          CustomGenerationModuleFacet facet=res.module().getFacet(CustomGenerationModuleFacet.class);
          if (facet == null) {
            continue;
          }
          for (          SModel m : Sequence.fromIterable(res.models())) {
            ModelGenerationPlan plan=facet.getPlan(m);
            if (plan != null) {
              Generate_Facet.Target_configure.vars(pa.global()).generationOptions().customPlan(m,plan);
            }
          }
        }
      }
    }
);
  }
GenerationTaskRecorder<GeneratorTask> taskHandler=new GenerationTaskRecorder<GeneratorTask>(null);
IMessageHandler mh=Generate_Facet.Target_checkParameters.vars(pa.global()).makeSession().getMessageHandler();
progressMonitor.start("Generating",110);
try {
List<SModel> models=Sequence.fromIterable(input).translate(new ITranslator2<MResource,SModel>(){
public Iterable<SModel> translate(MResource in){
return in.models();
}
}
).toListSequence();
DefaultTaskBuilder<GeneratorTaskBase> tb=new DefaultTaskBuilder<GeneratorTaskBase>(new GeneratorTask.Factory<GeneratorTaskBase>(){
public GeneratorTaskBase create(SModel model){
return new GeneratorTaskBase(model);
}
}
);
tb.addAll(models);
GenerationFacade genFacade=new GenerationFacade(mpsProject.getRepository(),Generate_Facet.Target_configure.vars(pa.global()).generationOptions().create());
genFacade.transients(Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider()).messages(mh).taskHandler(taskHandler);
genFacade.process(progressMonitor.subTask(100),tb.getResult());
for (GenerationStatus genStatus : taskHandler.getAllRecorded()) {
if (!(genStatus.isOk())) {
return new IResult.FAILURE(_output_fi61u2_a0d);
}
SModel inputModel=genStatus.getOriginalInputModel();
GResource data=new GResource(inputModel.getModule(),inputModel,MapSequence.fromMap(retainedModels.value).get(inputModel.getModule()),genStatus);
_output_fi61u2_a0d=Sequence.fromIterable(_output_fi61u2_a0d).concat(Sequence.fromIterable(Sequence.<IResource>singleton(data)));
}
}
  finally {
progressMonitor.done();
}
if (!(Generate_Facet.Target_configure.vars(pa.global()).saveTransient())) {
_output_fi61u2_a0d=Sequence.fromIterable(_output_fi61u2_a0d).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new CleanupActivityResource(){
public String describe(){
return "Drop transient models";
}
public void run(){
Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider().removeAllTransient();
CleanupManager.getInstance().cleanup();
}
}
)));
}
default :
return new IResult.SUCCESS(_output_fi61u2_a0d);
}
}
}
;
}
