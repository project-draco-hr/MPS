{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      final Wrappers._T<Iterable<IResource>> _output_fi61u2_a0d=new Wrappers._T<Iterable<IResource>>(null);
      final Iterable<MResource> input=(Iterable<MResource>)(Iterable)rawInput;
switch (0) {
case 0:
        boolean generationOk=false;
      final Wrappers._T<Map<SModule,Iterable<SModel>>> retainedModels=new Wrappers._T<Map<SModule,Iterable<SModel>>>();
    final Project mpsProject=Generate_Facet.Target_checkParameters.vars(pa.global()).makeSession().getProject();
  mpsProject.getModelAccess().runReadAction(new Runnable(){
    public void run(){
      retainedModels.value=RetainedUtil.collectModelsToRetain(input);
    }
  }
);
IGenerationHandler gh=new MakeGenerationHandler(new _FunctionTypes._return_P1_E0<Boolean,GResource>(){
  public Boolean invoke(  GResource data){
    data.retainedModels(MapSequence.fromMap(retainedModels.value).get(data.module()));
    _output_fi61u2_a0d.value=Sequence.fromIterable(_output_fi61u2_a0d.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(data)));
    return true;
  }
}
);
IMessageHandler mh=Generate_Facet.Target_checkParameters.vars(pa.global()).makeSession().getMessageHandler();
progressMonitor.start("Generating",Sequence.fromIterable(input).foldLeft(0,new ILeftCombinator<MResource,Integer>(){
public Integer combine(Integer s,MResource it){
return s + Sequence.fromIterable(it.models()).count() * 1000;
}
}
));
try {
List<SModel> models=Sequence.fromIterable(input).translate(new ITranslator2<MResource,SModel>(){
public Iterable<SModel> translate(MResource in){
return in.models();
}
}
).toListSequence();
generationOk=GenerationFacade.generateModels(mpsProject,models,null,gh,progressMonitor.subTask(1000),mh,Generate_Facet.Target_configure.vars(pa.global()).generationOptions().create(),Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider());
}
  finally {
progressMonitor.done();
}
if (!(generationOk)) {
return new IResult.FAILURE(_output_fi61u2_a0d.value);
}
_output_fi61u2_a0d.value=Sequence.fromIterable(_output_fi61u2_a0d.value).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(Sequence.<IDelta>singleton(new IInternalDelta(){
@Override public IDelta merge(IDelta toMerge){
return this;
}
@Override public boolean contains(IDelta other){
return false;
}
@Override public boolean reconcile(){
if (!(Generate_Facet.Target_configure.vars(pa.global()).saveTransient())) {
Generate_Facet.Target_configure.vars(pa.global()).transientModelsProvider().removeAllTransient();
CleanupManager.getInstance().cleanup();
}
return true;
}
@Override public boolean acceptVisitor(IDeltaVisitor visitor){
return true;
}
}
)))));
default :
return new IResult.SUCCESS(_output_fi61u2_a0d.value);
}
}
}
;
}
