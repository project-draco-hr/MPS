{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_fi61u2_a0c=null;
      final Iterable<IResource> input=(Iterable)(Iterable)rawInput;
switch (0) {
case 0:
        Generate_Facet.Target_checkParameters.vars(pa.global()).makeSession().getProject().getRepository().getModelAccess().runWriteAction(new Runnable(){
          public void run(){
            Map<SModule,Iterable<SModel>> retainedModels=RetainedUtil.collectModelsToRetain(input);
            final Set<SModel> aspectModels=SetSequence.fromSetWithValues(new HashSet<SModel>(),Sequence.fromIterable(MapSequence.fromMap(retainedModels).values()).translate(new ITranslator2<Iterable<SModel>,SModel>(){
              public Iterable<SModel> translate(              Iterable<SModel> it){
                return it;
              }
            }
).where(new IWhereFilter<SModel>(){
              public boolean accept(              SModel it){
                return LanguageAspectSupport.isAspectModel(it);
              }
            }
));
            while (SetSequence.fromSet(aspectModels).isNotEmpty()) {
              final SModel model=SetSequence.fromSet(aspectModels).first();
              final SModule modelModule=model.getModule();
              SetSequence.fromSet(aspectModels).removeElement(model);
              Iterable<LanguageAspectDescriptor> modelAspectDescriptor=Sequence.fromIterable(new ExtensionPoint<LanguageAspectDescriptor>("jetbrains.mps.lang.customAspect.LanguageAspectsEP").getObjects()).where(new IWhereFilter<LanguageAspectDescriptor>(){
                public boolean accept(                LanguageAspectDescriptor it){
                  return it.getAspectModels(modelModule).contains(model);
                }
              }
);
              Sequence.fromIterable(modelAspectDescriptor).visitAll(new IVisitor<LanguageAspectDescriptor>(){
                public void visit(                LanguageAspectDescriptor it){
                  SetSequence.fromSet(aspectModels).removeSequence(CollectionSequence.fromCollection(it.getAspectModels(modelModule)));
                }
              }
);
              Sequence.fromIterable(modelAspectDescriptor).where(new IWhereFilter<LanguageAspectDescriptor>(){
                public boolean accept(                LanguageAspectDescriptor it){
                  return it.getGenerator() != null;
                }
              }
).visitAll(new IVisitor<LanguageAspectDescriptor>(){
                public void visit(                LanguageAspectDescriptor it){
                  SNode descriptor=it.getGenerator().generateDescriptor(it.getAspectModels(modelModule));
                  SModelOperations.addRootNode(model,descriptor);
                }
              }
);
            }
          }
        }
);
default :
      return new IResult.SUCCESS(_output_fi61u2_a0c);
  }
}
}
;
}
