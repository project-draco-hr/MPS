{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SEnumerationMember"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SLinkOperations.setTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getSourceNode()),"jetbrains.mps.core.structure.structure.SEnumeration"),"default",_context.getSourceNode(),false);
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "(default)";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
