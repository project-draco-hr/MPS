{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConceptConstraints","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{"concept","defaultConcreteConcept"},new String[]{"property","referent","defaultScope","canBeChild","canBeRoot","canBeParent","canBeAncestor","alternativeIcon"},new boolean[]{true,true,false,false,false,false,false,false},false,false,"Concept Constraints","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"enclosingNode","parent of the referenceNode, useful when the reference node is not defined yet (null)","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"checkedNode","node to be validated","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"childConcept","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"childNode","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"containingLink","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"contextNode","node with the reference, or closest not-null context node","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"contextRole","target role in contextNode","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"exists","false when reference is being created","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"inEditor","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"link","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"linkTarget","target concept (useful for specialized links)","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"newReferentNode","new value of the reference","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"oldReferentNode","old value of the reference","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"parameterNode","node to present (target of the referenceNode's reference)","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"parentNode","parent node to check","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"position","target index in contextRole","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"referenceNode","node with the reference","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"smartReference","","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"visible","","");
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return false if node cannot be a child of parentNode","");
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","return false if node cannot be a parent of given node","");
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"getter","property getter","");
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"setter","property setter","");
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"validator","property validator","");
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"keeps reference","whether reference set handler keeps original reference","");
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory","jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase",false,new String[]{"jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase","jetbrains.mps.lang.constraints.structure.NodeScopeFactory"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"search scope (deprecated)","return list of nodes that can be referenced from given node","");
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation","jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase",false,new String[]{"jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"search scope item presentation","reference presentation in completion list (default - reference name)","");
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope","jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase",false,new String[]{"jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase","jetbrains.mps.lang.constraints.structure.NodeScopeFactory"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"reference scope","creates scope for the reference (jetbrains.mps.scope.Scope)","");
case 33:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator","jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase",false,new String[]{"jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"reference validity","return true if the reference is in scope","");
case 34:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"'referent set' event handler","executed on every link assignment","");
case 35:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"node","node in a question","");
case 36:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue","jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"propertyValue","new value of the node","");
case 37:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.constraints.structure.NodeScopeFactory"},new String[]{},new String[]{"kind"},new String[]{},new boolean[]{},false,false,"inherited","scope provided by parent elements","");
case 38:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"description"},new String[]{},new String[]{"searchScopeFactory","validator","presentation"},new boolean[]{false,false,false},false,false,"default search scope","","");
case 39:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.NodePropertyConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"applicableProperty"},new String[]{"propertyGetter","propertySetter","propertyValidator"},new boolean[]{false,false,false},false,false,"property {<{applicableProperty}>}","","");
case 40:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.NodeReferentConstraint","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"applicableLink"},new String[]{"searchScopeFactory","validator","presentation","referentSetHandler","keepsReference"},new boolean[]{false,false,false,false,false},false,false,"link {<{applicableLink}>}","","");
case 41:
return new CompiledConceptDescriptor("jetbrains.mps.lang.constraints.structure.NodeScopeFactory",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
