{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConceptConstraints").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.structure.structure.IConceptAspect").references("concept","defaultConcreteConcept").children(new String[]{"property","referent","defaultScope","canBeChild","canBeRoot","canBeParent","canBeAncestor","alternativeIcon"},new boolean[]{true,true,false,false,false,false,false,false}).alias("Concept Constraints","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("enclosingNode","parent of the referenceNode, useful when the reference node is not defined yet (null)").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("checkedNode","node to be validated").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childConcept","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childNode","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("containingLink","").create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("contextNode","node with the reference, or closest not-null context node").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("contextRole","target role in contextNode").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("exists","false when reference is being created").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("inEditor","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("link","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("linkTarget","target concept (useful for specialized links)").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("newReferentNode","new value of the reference").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("oldReferentNode","old value of the reference").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parameterNode","node to present (target of the referenceNode's reference)").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parentNode","parent node to check").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("position","target index in contextRole").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("referenceNode","node with the reference").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("smartReference","").create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("visible","").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("","return false if node cannot be a child of parentNode").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("","return false if node cannot be a parent of given node").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getter","property getter").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("setter","property setter").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("validator","property validator").create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("keeps reference","whether reference set handler keeps original reference").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase","jetbrains.mps.lang.constraints.structure.NodeScopeFactory").alias("search scope (deprecated)","return list of nodes that can be referenced from given node").create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").alias("search scope item presentation","reference presentation in completion list (default - reference name)").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase","jetbrains.mps.lang.constraints.structure.NodeScopeFactory").alias("reference scope","creates scope for the reference (jetbrains.mps.scope.Scope)").create();
case 33:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").alias("reference validity","return true if the reference is in scope").create();
case 34:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("'referent set' event handler","executed on every link assignment").create();
case 35:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node","node in a question").create();
case 36:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("propertyValue","new value of the node").create();
case 37:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.constraints.structure.NodeScopeFactory").references("kind").alias("inherited","scope provided by parent elements").create();
case 38:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("description").children(new String[]{"searchScopeFactory","validator","presentation"},new boolean[]{false,false,false}).alias("default search scope","").create();
case 39:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodePropertyConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableProperty").children(new String[]{"propertyGetter","propertySetter","propertyValidator"},new boolean[]{false,false,false}).alias("property {<{applicableProperty}>}","").create();
case 40:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeReferentConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableLink").children(new String[]{"searchScopeFactory","validator","presentation","referentSetHandler","keepsReference"},new boolean[]{false,false,false,false,false}).alias("link {<{applicableLink}>}","").create();
case 41:
return new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeScopeFactory").interface_().create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
