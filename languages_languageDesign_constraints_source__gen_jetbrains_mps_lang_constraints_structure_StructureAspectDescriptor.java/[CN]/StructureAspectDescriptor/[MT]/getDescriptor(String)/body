{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0tb,conceptFqName)) {
case 0:
    return myConceptConceptConstraints;
case 1:
  return myConceptConceptParameter_ReferentSearchScope_enclosingNode;
case 2:
return myConceptConstraintFunctionParameter_checkedNode;
case 3:
return myConceptConstraintFunctionParameter_childConcept;
case 4:
return myConceptConstraintFunctionParameter_childNode;
case 5:
return myConceptConstraintFunctionParameter_containingLink;
case 6:
return myConceptConstraintFunctionParameter_contextNode;
case 7:
return myConceptConstraintFunctionParameter_contextRole;
case 8:
return myConceptConstraintFunctionParameter_exists;
case 9:
return myConceptConstraintFunctionParameter_inEditor;
case 10:
return myConceptConstraintFunctionParameter_link;
case 11:
return myConceptConstraintFunctionParameter_linkTarget;
case 12:
return myConceptConstraintFunctionParameter_newReferentNode;
case 13:
return myConceptConstraintFunctionParameter_oldReferentNode;
case 14:
return myConceptConstraintFunctionParameter_parameterNode;
case 15:
return myConceptConstraintFunctionParameter_parentNode;
case 16:
return myConceptConstraintFunctionParameter_position;
case 17:
return myConceptConstraintFunctionParameter_referenceNode;
case 18:
return myConceptConstraintFunctionParameter_smartReference;
case 19:
return myConceptConstraintFunctionParameter_visible;
case 20:
return myConceptConstraintFunction_CanBeAChild;
case 21:
return myConceptConstraintFunction_CanBeAParent;
case 22:
return myConceptConstraintFunction_CanBeARoot;
case 23:
return myConceptConstraintFunction_CanBeAnAncestor;
case 24:
return myConceptConstraintFunction_GetAlternativeIcon;
case 25:
return myConceptConstraintFunction_PropertyGetter;
case 26:
return myConceptConstraintFunction_PropertySetter;
case 27:
return myConceptConstraintFunction_PropertyValidator;
case 28:
return myConceptConstraintFunction_RefSetHandlerKeepsReference;
case 29:
return myConceptConstraintFunction_ReferentSearchScope_AbstractBase;
case 30:
return myConceptConstraintFunction_ReferentSearchScope_Factory;
case 31:
return myConceptConstraintFunction_ReferentSearchScope_Presentation;
case 32:
return myConceptConstraintFunction_ReferentSearchScope_Scope;
case 33:
return myConceptConstraintFunction_ReferentSearchScope_Validator;
case 34:
return myConceptConstraintFunction_ReferentSetHandler;
case 35:
return myConceptConstraintsFunctionParameter_node;
case 36:
return myConceptConstraintsFunctionParameter_propertyValue;
case 37:
return myConceptInheritedNodeScopeFactory;
case 38:
return myConceptNodeDefaultSearchScope;
case 39:
return myConceptNodePropertyConstraint;
case 40:
return myConceptNodeReferentConstraint;
case 41:
return myConceptNodeScopeFactory;
default :
return null;
}
}
