{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0ub.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptConceptConstraints;
      }
    break;
case 1:
  if (true) {
    return myConceptConceptParameter_ReferentSearchScope_enclosingNode;
  }
break;
case 2:
if (true) {
return myConceptConstraintFunctionParameter_checkedNode;
}
break;
case 3:
if (true) {
return myConceptConstraintFunctionParameter_childConcept;
}
break;
case 4:
if (true) {
return myConceptConstraintFunctionParameter_childNode;
}
break;
case 5:
if (true) {
return myConceptConstraintFunctionParameter_containingLink;
}
break;
case 6:
if (true) {
return myConceptConstraintFunctionParameter_contextNode;
}
break;
case 7:
if (true) {
return myConceptConstraintFunctionParameter_contextRole;
}
break;
case 8:
if (true) {
return myConceptConstraintFunctionParameter_exists;
}
break;
case 9:
if (true) {
return myConceptConstraintFunctionParameter_inEditor;
}
break;
case 10:
if (true) {
return myConceptConstraintFunctionParameter_link;
}
break;
case 11:
if (true) {
return myConceptConstraintFunctionParameter_linkTarget;
}
break;
case 12:
if (true) {
return myConceptConstraintFunctionParameter_newReferentNode;
}
break;
case 13:
if (true) {
return myConceptConstraintFunctionParameter_oldReferentNode;
}
break;
case 14:
if (true) {
return myConceptConstraintFunctionParameter_parameterNode;
}
break;
case 15:
if (true) {
return myConceptConstraintFunctionParameter_parentNode;
}
break;
case 16:
if (true) {
return myConceptConstraintFunctionParameter_position;
}
break;
case 17:
if (true) {
return myConceptConstraintFunctionParameter_referenceNode;
}
break;
case 18:
if (true) {
return myConceptConstraintFunctionParameter_smartReference;
}
break;
case 19:
if (true) {
return myConceptConstraintFunctionParameter_visible;
}
break;
case 20:
if (true) {
return myConceptConstraintFunction_CanBeAChild;
}
break;
case 21:
if (true) {
return myConceptConstraintFunction_CanBeAParent;
}
break;
case 22:
if (true) {
return myConceptConstraintFunction_CanBeARoot;
}
break;
case 23:
if (true) {
return myConceptConstraintFunction_CanBeAnAncestor;
}
break;
case 24:
if (true) {
return myConceptConstraintFunction_GetAlternativeIcon;
}
break;
case 25:
if (true) {
return myConceptConstraintFunction_PropertyGetter;
}
break;
case 26:
if (true) {
return myConceptConstraintFunction_PropertySetter;
}
break;
case 27:
if (true) {
return myConceptConstraintFunction_PropertyValidator;
}
break;
case 28:
if (true) {
return myConceptConstraintFunction_RefSetHandlerKeepsReference;
}
break;
case 29:
if (true) {
return myConceptConstraintFunction_ReferentSearchScope_AbstractBase;
}
break;
case 30:
if (true) {
return myConceptConstraintFunction_ReferentSearchScope_Factory;
}
break;
case 31:
if (true) {
return myConceptConstraintFunction_ReferentSearchScope_Presentation;
}
break;
case 32:
if (true) {
return myConceptConstraintFunction_ReferentSearchScope_Scope;
}
break;
case 33:
if (true) {
return myConceptConstraintFunction_ReferentSearchScope_Validator;
}
break;
case 34:
if (true) {
return myConceptConstraintFunction_ReferentSetHandler;
}
break;
case 35:
if (true) {
return myConceptConstraintsFunctionParameter_node;
}
break;
case 36:
if (true) {
return myConceptConstraintsFunctionParameter_propertyValue;
}
break;
case 37:
if (true) {
return myConceptInheritedNodeScopeFactory;
}
break;
case 38:
if (true) {
return myConceptNodeDefaultSearchScope;
}
break;
case 39:
if (true) {
return myConceptNodePropertyConstraint;
}
break;
case 40:
if (true) {
return myConceptNodeReferentConstraint;
}
break;
case 41:
if (true) {
return myConceptNodeScopeFactory;
}
break;
default :
}
}
return null;
}
