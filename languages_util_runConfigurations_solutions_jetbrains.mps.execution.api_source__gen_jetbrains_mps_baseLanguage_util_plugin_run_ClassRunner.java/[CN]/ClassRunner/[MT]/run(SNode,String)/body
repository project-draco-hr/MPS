{
  final List<String> params=ListSequence.fromList(new ArrayList<String>());
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      addJavaCommand(params);
      addClassPath(params,node);
      addVmOptions(params);
      ListSequence.fromList(params).addElement(className);
      addProgramParameters(params);
      ClassRunner.this.myProcessBuilder=new ProcessBuilder(params);
      String workingDir=myRunParameters.getWorkingDirectory();
      if (workingDir != null && StringUtils.isNotEmpty(workingDir)) {
        ClassRunner.this.myProcessBuilder.directory(new File(workingDir));
      }
    }
  }
);
  try {
    return this.myProcessBuilder.start();
  }
 catch (  IOException e) {
    if (log.isErrorEnabled()) {
      log.error("Can't run class " + className + ": "+ e.getMessage(),e);
    }
    throw new ProcessNotCreatedException(e.getMessage(),e,this.getCommandLine());
  }
catch (  NullPointerException npe) {
    String message="Can't run class " + className + ". One of the command line arguments is null:\n"+ params;
    if (log.isErrorEnabled()) {
      log.error(message,npe);
    }
    throw new ProcessNotCreatedException(message,npe,this.getCommandLine());
  }
}
