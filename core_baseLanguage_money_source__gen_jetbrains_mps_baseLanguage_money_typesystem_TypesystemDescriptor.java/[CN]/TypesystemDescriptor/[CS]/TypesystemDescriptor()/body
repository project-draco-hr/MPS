{
{
    InferenceRule_Runtime inferenceRule=new typeof_MoneyGetAmountMethodCall_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MoneyGetCurrencyMethodCall_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MoneyIsZeroMethodCall_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MoneyCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MoneyLiteral_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_1().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_2().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_0().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_4().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_5().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_3().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_7().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_8().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.DivExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_6().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_10().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_11().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MulExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_9().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_13().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_14().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MulExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_12().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
}
