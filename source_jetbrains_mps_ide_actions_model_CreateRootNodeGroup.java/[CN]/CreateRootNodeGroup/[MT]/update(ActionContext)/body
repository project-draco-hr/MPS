{
  clear();
  SModelDescriptor modelDescriptor=context.get(SModelDescriptor.class);
  IDEProjectFrame ide=context.get(IDEProjectFrame.class);
  IOperationContext operationContext=context.get(IOperationContext.class);
  List<Language> modelLanguages=modelDescriptor == null ? new ArrayList<Language>() : modelDescriptor.getSModel().getLanguages(operationContext.getScope());
  if (modelLanguages.size() == 0) {
    add(new MPSAction("<NO LANGUAGES>"){
      public void execute(      @NotNull ActionContext c){
      }
    }
);
  }
  for (  final Language language : modelLanguages) {
    ActionGroup langRootsGroup=new ActionGroup(language.getNamespace()){
      public Icon getIcon(){
        return IconManager.getIconFor(language.getNamespace());
      }
    }
;
    for (    ConceptDeclaration conceptDeclaration : language.getConceptDeclarations()) {
      if (conceptDeclaration.getRootable()) {
        String nodeClassName=JavaNameUtil.className(conceptDeclaration);
        try {
          Class<? extends SNode> nodeClass=(Class<? extends SNode>)Class.forName(nodeClassName,true,ClassLoaderManager.getInstance().getClassLoader());
          langRootsGroup.add(newRootNodeAction(new SNodeProxy(conceptDeclaration),nodeClass,modelDescriptor,ide));
        }
 catch (        ClassNotFoundException e) {
          langRootsGroup.add(new MPSAction("class not found: " + nodeClassName){
            public void execute(            @NotNull ActionContext c){
            }
          }
);
        }
      }
    }
    if (langRootsGroup.getElements().size() > 0) {
      this.add(langRootsGroup);
    }
  }
  setVisible(context.hasOneSelectedItem());
}
