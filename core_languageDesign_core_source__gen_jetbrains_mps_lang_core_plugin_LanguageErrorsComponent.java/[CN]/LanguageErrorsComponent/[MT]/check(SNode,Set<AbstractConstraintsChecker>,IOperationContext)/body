{
  invalidate();
  if (myCheckedRoot && SetSequence.fromSet(myInvalidNodes).isEmpty()) {
    return false;
  }
  Set<SNode> frontier=SetSequence.fromSetAndArray(new HashSet<SNode>(),root);
  Set<SNode> newFrontier=SetSequence.fromSet(new HashSet<SNode>());
  while (!(SetSequence.fromSet(frontier).isEmpty())) {
    for (    SNode node : frontier) {
      if (!(myCheckedRoot) || SetSequence.fromSet(myInvalidNodes).contains(node)) {
        try {
          myCurrentNode=node;
          addDependency(node);
          for (          AbstractConstraintsChecker checker : checkers) {
            checker.checkNode(node,this,operationContext);
          }
        }
  finally {
          myCurrentNode=null;
          SetSequence.fromSet(myInvalidNodes).removeElement(node);
        }
      }
      SetSequence.fromSet(newFrontier).addSequence(ListSequence.fromList(SNodeOperations.getChildren(node)));
    }
    frontier=newFrontier;
    newFrontier=SetSequence.fromSet(new HashSet<SNode>());
  }
  myCheckedRoot=true;
  return true;
}
