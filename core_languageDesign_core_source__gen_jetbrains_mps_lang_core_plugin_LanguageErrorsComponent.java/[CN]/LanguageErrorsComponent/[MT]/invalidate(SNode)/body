{
  SetSequence.fromSet(myInvalidNodes).addElement(errorNode);
  Set<SModelDescriptor> models=MapSequence.fromMap(myErrorNodesToAspects).removeKey(errorNode);
  Set<SNode> rules=MapSequence.fromMap(myErrorNodesToRules).removeKey(errorNode);
  Set<SNode> additionals=MapSequence.fromMap(myErrorNodesToAdditional).removeKey(errorNode);
  if (models != null) {
    for (    SModelDescriptor model : models) {
      Set<SNode> errors=MapSequence.fromMap(myAspectModelsToErrorNodes).get(model);
      if (errors != null) {
        SetSequence.fromSet(errors).removeElement(errorNode);
        if (SetSequence.fromSet(errors).isEmpty()) {
          MapSequence.fromMap(myAspectModelsToErrorNodes).removeKey(model);
        }
      }
    }
  }
  if (rules != null) {
    for (    SNode rule : rules) {
      Set<SNode> errors=MapSequence.fromMap(myRuleRootsToErrorNodes).get(rule);
      if (errors != null) {
        SetSequence.fromSet(errors).removeElement(errorNode);
        if (SetSequence.fromSet(errors).isEmpty()) {
          MapSequence.fromMap(myRuleRootsToErrorNodes).removeKey(rule);
        }
      }
    }
  }
  if (additionals != null) {
    for (    SNode additional : additionals) {
      Set<SNode> errors=MapSequence.fromMap(myAdditionalToErrorNodes).get(additional);
      if (errors != null) {
        SetSequence.fromSet(errors).removeElement(errorNode);
        if (SetSequence.fromSet(errors).isEmpty()) {
          MapSequence.fromMap(myAdditionalToErrorNodes).removeKey(additional);
        }
      }
    }
  }
}
