{
  if (inputModels.isEmpty()) {
    return true;
  }
  final IOperationContext invocationContext=inputModels.get(0).o2;
  final DefaultMessageHandler messages=new DefaultMessageHandler(invocationContext.getMPSProject());
  final boolean saveTransientModels;
  if (isSaveTransientModels()) {
    Object[] options={"Yes","Not this time","No, and cancel saving"};
    int option=JOptionPane.showOptionDialog(invocationContext.getMainFrame(),"Would you like to save transient models?","",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
    if (option == JOptionPane.YES_OPTION) {
      saveTransientModels=true;
    }
 else {
      saveTransientModels=false;
      if (option == JOptionPane.CANCEL_OPTION) {
        setSaveTransientModels(false);
      }
    }
  }
 else {
    saveTransientModels=false;
  }
  if (!myGeneratingRequirements) {
    boolean wasSaveTransientModels=isSaveTransientModels();
    myGeneratingRequirements=true;
    try {
      final Set<SModelDescriptor> requirements=new LinkedHashSet<SModelDescriptor>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          for (          Pair<SModelDescriptor,IOperationContext> inputModel : inputModels) {
            requirements.addAll(getModelsToGenerateBeforeGeneration(inputModel.o1,inputModel.o2));
          }
        }
      }
);
      for (      Pair<SModelDescriptor,IOperationContext> inputModel : inputModels) {
        requirements.remove(inputModel.o1);
      }
      if (!requirements.isEmpty()) {
        String message="The following models might be required for generation\n" + "but aren't generated. Do you want to generate them?\n";
        for (        SModelDescriptor sm : requirements) {
          message+="\n" + sm.getSModelFqName();
        }
        int result=Messages.showYesNoDialog(myProject,message,"Generate Required Models",Messages.getWarningIcon());
        if (result == 0) {
          generateModelsFromDifferentModules(invocationContext,new ArrayList<SModelDescriptor>(requirements),IGenerationType.FILES);
        }
      }
    }
  finally {
      setSaveTransientModels(wasSaveTransientModels);
      myGeneratingRequirements=false;
    }
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  showMessageView();
  IdeEventQueue.getInstance().flushQueue();
  final boolean[] result=new boolean[]{false};
  ProgressManager.getInstance().run(new Modal(invocationContext.getComponent(Project.class),"Generation",true){
    public void run(    @NotNull ProgressIndicator progress){
      result[0]=generateModels(inputModels,generationType,progress,messages,saveTransientModels);
    }
  }
);
  return result[0];
}
