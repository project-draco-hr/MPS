{
  List<SNode> newChildren=getChangeSet().getNewModel().getNodeById(myParentNodeId).getChildren(myRole);
  String newIds=IterableUtils.join(ListSequence.fromList(newChildren).page(myResultBegin,myResultEnd).select(new ISelector<SNode,String>(){
    public String select(    SNode n){
      return "#" + n.getSNodeId();
    }
  }
),", ");
  String oldStuff=(myEnd - myBegin == 1 ? myRole : NameUtil.formatNumericalString(myEnd - myBegin,myRole));
  String newStuff=(myResultEnd - myResultBegin == 1 ? myRole : NameUtil.formatNumericalString(myResultEnd - myResultBegin,myRole));
  if (eq_yjf6x2_a0a5a11(newStuff,myRole) && eq_yjf6x2_a0a5a11_0(oldStuff,myRole)) {
    newStuff="another";
  }
 else   if (myEnd != myBegin) {
    newStuff="another " + newStuff;
  }
  if (myEnd == myBegin) {
    String addedOrInserted=(myResultEnd == ListSequence.fromList(newChildren).count() ? "Added" : "Inserted");
    return String.format("%s %s: %s",addedOrInserted,newStuff,newIds);
  }
  if (myResultEnd == myResultBegin) {
    return String.format("Removed %s",oldStuff);
  }
  return String.format("Replaced %s with %s: %s",oldStuff,newStuff,newIds);
}
