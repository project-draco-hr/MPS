{
  SNode matched=null;
  if (SNodeOperations.isInstanceOf(realType,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    matched=whichTypeMatching(SLinkOperations.getTargets(SNodeOperations.cast(realType,"jetbrains.mps.lang.typesystem.structure.MeetType"),"argument",true),absType);
  }
 else   if (isTypeMatching(absType,realType)) {
    matched=realType;
  }
  if ((matched != null)) {
    if (SNodeOperations.isInstanceOf(absType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      mapTypeVar(SNodeOperations.cast(absType,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),matched);
    }
 else {
      int idx=0;
      List<SNode> mptypes=SLinkOperations.getTargets(SNodeOperations.as(absType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true);
      List<SNode> rptypes=SLinkOperations.getTargets(SNodeOperations.as(matched,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true);
      for (int i=0; i < ListSequence.fromList(mptypes).count() && i < ListSequence.fromList(rptypes).count(); i++) {
        matchType(ListSequence.fromList(mptypes).getElement(i),ListSequence.fromList(rptypes).getElement(i));
      }
    }
  }
}
