{
  SNode meth=getFunctionMethod(literal,targetIfaceErase);
  SNode funType=SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(literal),MetaAdapterFactory.getConcept(0xfd3920347849419dL,0x907112563d152375L,0x1174a4d19ffL,"jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  TypeMatcher matcher=new TypeMatcher();
  if ((SLinkOperations.getTarget(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType")) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc6bf96dL,"jetbrains.mps.baseLanguage.structure.VoidType")))) {
    matcher.matchReturnType(SLinkOperations.getTarget(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType")),FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(funType));
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
      SNode absRetCT=SNodeOperations.copyNode(SNodeOperations.cast(SLinkOperations.getTarget(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
      SNode ftResCT=FunctionTypeUtil.unmeet(FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(funType));
      String adapterName=JavaNameUtil.shortName(SPropertyOperations.getString(SLinkOperations.getTarget(absRetCT,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))) + JavaNameUtil.shortName(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ftResCT)),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))) + "Adapter";
      for (      SNode cls : SModelOperations.nodes(SNodeOperations.getModel(SLinkOperations.getTarget(absRetCT,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"))),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"))) {
        if (adapterName.equals(JavaNameUtil.shortName(SPropertyOperations.getString(cls,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))))) {
          SNode newRetCT=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
          SLinkOperations.setTarget(newRetCT,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"),cls);
          Values.RETURN_TYPE.set(genContext,targetIfaceErase,newRetCT);
          break;
        }
      }
    }
  }
{
    Iterator<SNode> funParamIt=ListSequence.fromList(FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(funType)).iterator();
    Iterator<SNode> methParamIt=ListSequence.fromList(SLinkOperations.getChildren(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"))).iterator();
    while (funParamIt.hasNext() && methParamIt.hasNext()) {
      matcher.matchType(SLinkOperations.getTarget(methParamIt.next(),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type")),funParamIt.next());
    }
    if (funParamIt.hasNext() || methParamIt.hasNext()) {
      genContext.showErrorMessage(literal,"Closure parameters count doesn't match method '" + SPropertyOperations.getString(meth,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + "' in "+ JavaNameUtil.fqClassName(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),SPropertyOperations.getString(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))));
    }
  }
{
    List<SNode> normFunThrowsTypes=FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(funType);
    Iterator<SNode> funThrIt=ListSequence.fromList(normFunThrowsTypes).sort(new ISelector<SNode,Comparable<?>>(){
      @Override public Comparable<?> select(      SNode t){
        String key=BehaviorReflection.invokeVirtual(String.class,SLinkOperations.getTarget(SNodeOperations.as(t,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,"jetbrains.mps.baseLanguage.structure.ClassifierType")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),"virtual_getNestedName_8540045600162184125",new Object[]{});
        return (key != null ? key : BehaviorReflection.invokeVirtual(String.class,t,"virtual_getPresentation_1213877396640",new Object[]{}));
      }
    }
,true).iterator();
    Iterator<SNode> methThrIt=ListSequence.fromList(FunctionTypeUtil.normalizeThrowsTypes(SLinkOperations.getChildren(meth,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0x10f383d6949L,"throwsItem")))).iterator();
    while (funThrIt.hasNext() && methThrIt.hasNext()) {
      matcher.matchType(methThrIt.next(),funThrIt.next());
    }
    if (funThrIt.hasNext() || methThrIt.hasNext()) {
      genContext.showWarningMessage(literal,"Closure generic throws types count doesn't match method '" + SPropertyOperations.getString(meth,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + "' in "+ JavaNameUtil.fqClassName(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),SPropertyOperations.getString(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))));
    }
  }
  Values.TYPE_MAP.set(genContext,targetIfaceErase,matcher.getMap());
  Map<SNode,SNode> map=matcher.getMap();
  if (map != null) {
    Iterator<SNode> reifiedTypeIt=ListSequence.fromList(reifiedTargetIfaceTypeParams).iterator();
    Iterator<SNode> targetTypeVarIt=ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration"))).iterator();
    while (reifiedTypeIt.hasNext() && targetTypeVarIt.hasNext()) {
      SNode typeVar=targetTypeVarIt.next();
      SNode rtp=reifiedTypeIt.next();
      SNode substituteType=(MapSequence.fromMap(map).containsKey(typeVar) ? SNodeOperations.copyNode(MapSequence.fromMap(map).get(typeVar)) : SNodeOperations.copyNode(rtp));
      if (!(hasTypeVariable(rtp)) && !(TypeChecker.getInstance().getSubtypingManager().isSubtype(substituteType,rtp))) {
        substituteType=ClassifierTypeUtil.getTypeCoercedToClassifierType(SNodeOperations.copyNode(rtp));
      }
      SNode param=ListSequence.fromList(SLinkOperations.getChildren(targetIfaceErase,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x102419671abL,"parameter"))).addElement(substituteType);
    }
    if (reifiedTypeIt.hasNext() || targetTypeVarIt.hasNext()) {
      genContext.showWarningMessage(literal,"Reified type parameters count doesn't match method declaration '" + SPropertyOperations.getString(meth,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")) + "' in "+ JavaNameUtil.fqClassName(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),SPropertyOperations.getString(SLinkOperations.getTarget(targetIfaceErase,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))));
    }
  }
}
