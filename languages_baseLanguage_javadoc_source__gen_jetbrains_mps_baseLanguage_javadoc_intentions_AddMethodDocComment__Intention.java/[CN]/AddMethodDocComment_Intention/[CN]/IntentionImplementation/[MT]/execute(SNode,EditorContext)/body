{
  if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"))) != null)) {
    AttributeOperations.setAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")),null);
    return;
  }
  AttributeOperations.setAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment")),SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment",null));
  for (  SNode parameterDeclaration : ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true))) {
    SNode paramTag=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag",null);
    SLinkOperations.setTarget(paramTag,"parameter",_quotation_createNode_i2k1f8_a0b0e0a(parameterDeclaration),true);
    ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"))),"param",true)).addElement(paramTag);
  }
  for (  SNode typeVariableDeclaration : ListSequence.fromList(SLinkOperations.getTargets(node,"typeVariableDeclaration",true))) {
    SNode paramTag=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag",null);
    SLinkOperations.setTarget(paramTag,"parameter",_quotation_createNode_i2k1f8_a0b0h0a(typeVariableDeclaration),true);
    ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"))),"param",true)).addElement(paramTag);
  }
  for (  SNode throwsItem : ListSequence.fromList(SLinkOperations.getTargets(node,"throwsItem",true))) {
    SNode throwsTag=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag",null);
    SLinkOperations.setTarget(throwsTag,"exceptionType",SNodeOperations.copyNode(throwsItem),true);
    ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"))),"throwsTag",true)).addElement(throwsTag);
  }
  if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"))) {
    SLinkOperations.setTarget(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"))),"return",SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag",null),true);
  }
  editorContext.select(ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(node,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"))),"body",true)).first());
}
