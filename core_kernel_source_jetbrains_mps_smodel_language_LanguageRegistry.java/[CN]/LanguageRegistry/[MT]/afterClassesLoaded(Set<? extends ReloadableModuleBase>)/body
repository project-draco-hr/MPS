{
  Set<LanguageRuntime> loadedRuntimes=new LinkedHashSet<>();
  for (  Language language : collectLanguageModules(loadedModules)) {
    try {
      LanguageRuntime langRuntime=createRuntime(language);
      if (langRuntime == null) {
        continue;
      }
      SLanguageId sl=langRuntime.getId();
      if (myLanguagesById.containsKey(sl)) {
        String msg=String.format("There is already a language '%s'",myLanguagesById.get(sl));
        LOG.error(msg,new IllegalArgumentException(msg));
        continue;
      }
      myLanguagesById.put(sl,langRuntime);
      loadedRuntimes.add(langRuntime);
    }
 catch (    LinkageError le) {
      processLinkageErrorForLanguage(language,le);
    }
  }
  reinitialize();
  for (  Generator generator : collectGeneratorModules(loadedModules)) {
    GeneratorRuntime generatorRuntime=createRuntime(generator);
    if (generatorRuntime == null) {
      continue;
    }
    GeneratorRuntime old=myGeneratorsWithCompiledRuntime.put(generatorRuntime.getModuleReference(),generatorRuntime);
    if (old != null) {
      LOG.warn(String.format("There is already generator runtime for module '%s'",old.getModuleReference()));
    }
    LanguageRuntime srcLangRuntime=generatorRuntime.getSourceLanguage();
    srcLangRuntime.register(generatorRuntime);
  }
  notifyLoad(loadedRuntimes);
}
