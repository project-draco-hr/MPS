{
  Set<LanguageRuntime> loadedRuntimes=new HashSet<LanguageRuntime>();
  for (  Language language : collectLanguageModules(loadedModules)) {
    SLanguageId languageId=MetaIdByDeclaration.getLanguageId(language);
    if (myLanguagesById.containsKey(languageId)) {
      LOG.error("",new IllegalArgumentException(String.format("There is already a language '%s' with id '%s'",myLanguagesById.get(languageId),languageId)));
      continue;
    }
    try {
      LanguageRuntime langRuntime=createRuntime(language);
      if (langRuntime == null)       continue;
      String langName=langRuntime.getNamespace();
      if (myLanguages.containsKey(langName)) {
        LOG.warn(String.format("There is already a language '%s' with a name '%s'",myLanguages.get(langName),langName));
      }
      myLanguages.put(langName,langRuntime);
      myLanguagesById.put(languageId,langRuntime);
      loadedRuntimes.add(langRuntime);
    }
 catch (    LinkageError le) {
      processLinkageErrorForLanguage(language,le);
    }
  }
  reinitialize();
  for (  Generator generator : collectGeneratorModules(loadedModules)) {
    GeneratorRuntime generatorRuntime=createRuntime(generator);
    if (generatorRuntime == null) {
      continue;
    }
    GeneratorRuntime old=myGeneratorsWithCompiledRuntime.put(generatorRuntime.getModuleReference(),generatorRuntime);
    if (old != null) {
      LOG.warn(String.format("There is already generator runtime for module '%s'",old.getModuleReference()));
    }
    LanguageRuntime srcLangRuntime=generatorRuntime.getSourceLanguage();
    srcLangRuntime.register(generatorRuntime);
  }
  notifyLoad(loadedRuntimes);
}
