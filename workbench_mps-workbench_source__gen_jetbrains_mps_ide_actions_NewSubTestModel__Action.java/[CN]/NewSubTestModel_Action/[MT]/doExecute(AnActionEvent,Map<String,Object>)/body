{
  try {
    final Wrappers._T<SModel> result=new Wrappers._T<SModel>();
    ModelAccess.instance().runWriteActionInCommand(new Runnable(){
      public void run(){
        SModelFqName newModelFqName=new SModelFqName(NewSubTestModel_Action.this.getTestModelName(_params),SModelStereotype.TESTS);
        result.value=((SModel)MapSequence.fromMap(_params).get("model")).getModule().createModel(newModelFqName.toString(),ModelRootUtil.getModelRoot(((SModel)MapSequence.fromMap(_params).get("model"))),null);
        SModel createdModel=result.value.getSModel();
        SModel sourceModel=((SModel)MapSequence.fromMap(_params).get("model")).getSModel();
        ((jetbrains.mps.smodel.SModel)createdModel).addModelImport(sourceModel.getReference(),false);
        for (        jetbrains.mps.smodel.SModel.ImportElement importElement : ((jetbrains.mps.smodel.SModel)sourceModel).importedModels()) {
          ((jetbrains.mps.smodel.SModel)createdModel).addModelImport(sourceModel.getReference(),false);
        }
        for (        ModuleReference importedLanguage : ((jetbrains.mps.smodel.SModel)sourceModel).importedLanguages()) {
          ((jetbrains.mps.smodel.SModel)createdModel).addLanguage(importedLanguage);
        }
        for (        ModuleReference devKit : ((jetbrains.mps.smodel.SModel)sourceModel).importedDevkits()) {
          ((jetbrains.mps.smodel.SModel)createdModel).addDevKit(devKit);
        }
      }
    }
);
    ProjectPane.getInstance(((Project)MapSequence.fromMap(_params).get("ideaProject"))).selectModel(result.value,false);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "NewSubTestModel",t);
  }
}
