{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0v.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_ExtendsFacetReference;
      }
    break;
case 1:
  if (true) {
    return props_FacetDeclaration;
  }
break;
case 2:
if (true) {
return props_FacetJavaClassExpression;
}
break;
case 3:
if (true) {
return props_FacetReference;
}
break;
case 4:
if (true) {
return props_FacetReferenceExpression;
}
break;
case 5:
if (true) {
return props_ForeignParametersComponentExpression;
}
break;
case 6:
if (true) {
return props_ForeignParametersExpression;
}
break;
case 7:
if (true) {
return props_IFacet;
}
break;
case 8:
if (true) {
return props_IPropertyExpression;
}
break;
case 9:
if (true) {
return props_LocalParametersComponentExpression;
}
break;
case 10:
if (true) {
return props_LocalParametersExpression;
}
break;
case 11:
if (true) {
return props_NamedFacetReference;
}
break;
case 12:
if (true) {
return props_ParametersDeclaration;
}
break;
case 13:
if (true) {
return props_RelatedFacetReference;
}
break;
case 14:
if (true) {
return props_ResourceClassifierType;
}
break;
case 15:
if (true) {
return props_ResourceSpecificPropertiesExpression;
}
break;
case 16:
if (true) {
return props_ResourceTypeDeclaration;
}
break;
case 17:
if (true) {
return props_TargetDeclaration;
}
break;
case 18:
if (true) {
return props_TargetDependency;
}
break;
case 19:
if (true) {
return props_TargetReferenceExpression;
}
break;
default :
}
}
throw new IllegalStateException();
}
