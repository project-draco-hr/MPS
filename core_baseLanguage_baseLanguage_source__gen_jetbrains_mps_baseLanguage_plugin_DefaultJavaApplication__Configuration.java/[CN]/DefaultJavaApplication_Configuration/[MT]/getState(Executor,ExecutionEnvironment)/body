{
  return new RunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      Project project=MPSDataKeys.PROJECT.getData(environment.getDataContext());
      final ConsoleViewImpl consoleView=new ConsoleViewImpl(project,false);
      JComponent consoleComponent=null;
      Runnable consoleDispose=null;
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler=null;
{
        if (DefaultJavaApplication_Configuration.this.getStateObject().modelId == null || DefaultJavaApplication_Configuration.this.getStateObject().nodeId == null) {
          throw new ExecutionException("Class node is not defined");
        }
        final Wrappers._T<SNode> node=new Wrappers._T<SNode>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            node.value=new SNodePointer(DefaultJavaApplication_Configuration.this.getStateObject().modelId,DefaultJavaApplication_Configuration.this.getStateObject().nodeId).getNode();
          }
        }
);
        if (node.value == null) {
          throw new ExecutionException("Class node does not exist");
        }
        Project ideaProject=MPSDataKeys.PROJECT.getData(environment.getDataContext());
        MPSProject mpsProject=ideaProject.getComponent(MPSProjectHolder.class).getMPSProject();
        if (DefaultJavaApplication_Configuration.this.getStateObject().parameters == null) {
          DefaultJavaApplication_Configuration.this.getStateObject().parameters=new ConfigRunParameters();
        }
        if (DefaultJavaApplication_Configuration.this.getStateObject().parameters.getMake()) {
          RunUtil.makeBeforeRun(mpsProject,Collections.singletonList(node.value));
        }
        final ClassRunner classRunner=new ClassRunner();
        ListSequence.fromList(actions).addSequence(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<AnAction>(),consoleView.createConsoleActions())));
        consoleComponent=consoleView.getComponent();
        consoleDispose=new Runnable(){
          public void run(){
            Disposer.dispose(consoleView);
          }
        }
;
        final Wrappers._T<Process> process=new Wrappers._T<Process>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            if (DefaultJavaApplication_Configuration.this.getStateObject().parameters.getUseAlternativeJRE()) {
              classRunner.setJavaHomePath(DefaultJavaApplication_Configuration.this.getStateObject().parameters.getAlternativeJRE());
            }
            process.value=classRunner.run(node.value,DefaultJavaApplication_Configuration.this.getStateObject().parameters.getProgramParameters(),DefaultJavaApplication_Configuration.this.getStateObject().parameters.getVMParameters(),DefaultJavaApplication_Configuration.this.getStateObject().parameters.getWorkingDirectory());
          }
        }
);
        handler=new DefaultProcessHandler(consoleView,process.value,classRunner.getCommandString());
      }
      final JComponent finalConsoleComponent=consoleComponent;
      final Runnable finalConsoleDispose=consoleDispose;
      final ProcessHandler finalHandler=handler;
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
