{
  return new JavaRunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      final ConsoleViewImpl consoleView_22042010=StacktraceUtil.createConsoleView(MPSDataKeys.PROJECT.getData(environment.getDataContext()));
      JComponent consoleComponent_22042010=null;
      Runnable consoleDispose_22042010=null;
      final List<AnAction> actions_22042010=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler_22042010=null;
      try {
        final ConfigRunParameters javaRunParameters=DefaultJavaApplication_Configuration.this.getStateObject().myJavaRunParameters.copy();
        if (executor.getId().equals(DefaultDebugExecutor.EXECUTOR_ID)) {
          String args=this.getUserData(DebuggerKeys.CONNECTION_SETTINGS);
          String oldVmParams=javaRunParameters.getVMParameters();
          if (StringUtils.isNotEmpty(oldVmParams)) {
            oldVmParams+=" ";
          }
 else {
            oldVmParams="";
          }
          javaRunParameters.setVMParameters(oldVmParams + args);
        }
        final SNode node=DefaultJavaApplication_Configuration.this.getNodeForExecution(environment.getProject(),(javaRunParameters).getMake());
{
          ListSequence.fromList(actions_22042010).addSequence(ListSequence.fromList(new _FunctionTypes._return_P0_E0<List<AnAction>>(){
            public List<AnAction> invoke(){
{
                final List<AnAction> actionsList=ListSequence.fromListAndArray(new ArrayList<AnAction>(),consoleView_22042010.createConsoleActions());
                return actionsList;
              }
            }
          }
.invoke()));
          consoleComponent_22042010=consoleView_22042010.getComponent();
          consoleDispose_22042010=new Runnable(){
            public void run(){
              Disposer.dispose(consoleView_22042010);
            }
          }
;
          final Wrappers._T<ExecutionException> ex=new Wrappers._T<ExecutionException>(null);
          handler_22042010=(ProcessHandler)new _FunctionTypes._return_P0_E0<Object>(){
            public Object invoke(){
              try {
                ClassRunner classRunner=new ClassRunner(javaRunParameters);
                final Wrappers._T<String> className=new Wrappers._T<String>();
                ModelAccess.instance().runReadAction(new Runnable(){
                  public void run(){
                    className.value=INamedConcept_Behavior.call_getFqName_1213877404258(node);
                  }
                }
);
                Process process=classRunner.run(node,className.value);
                return new DefaultProcessHandler(consoleView_22042010,process,classRunner.getCommandString());
              }
 catch (              ExecutionException e) {
                ex.value=e;
                return null;
              }
            }
          }
.invoke();
          if (ex.value != null) {
            throw ex.value;
          }
        }
      }
 catch (      ExecutionException e) {
        throw e;
      }
catch (      Throwable t) {
        Logger.getLogger(DefaultJavaApplication_Configuration.class).error(t);
        throw new ExecutionException("Execution code threw an exception: " + t.getMessage(),t);
      }
      final JComponent finalConsoleComponent=consoleComponent_22042010;
      final Runnable finalConsoleDispose=consoleDispose_22042010;
      final ProcessHandler finalHandler=handler_22042010;
      if (finalHandler == null) {
        return null;
      }
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions_22042010).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
