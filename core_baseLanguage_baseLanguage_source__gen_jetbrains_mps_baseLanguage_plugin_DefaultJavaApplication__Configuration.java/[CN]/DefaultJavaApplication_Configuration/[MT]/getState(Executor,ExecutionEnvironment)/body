{
  return new RunProfileState(){
    @Nullable() public ExecutionResult execute(    Executor executor,    @NotNull() ProgramRunner runner) throws ExecutionException {
      final Wrappers._T<JComponent> consoleComponent=new Wrappers._T<JComponent>();
      final Wrappers._T<Runnable> consoleDispose=new Wrappers._T<Runnable>(null);
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      final Wrappers._T<ProcessHandler> handler=new Wrappers._T<ProcessHandler>(null);
{
        if (DefaultJavaApplication_Configuration.this.getStateObject().modelId == null || DefaultJavaApplication_Configuration.this.getStateObject().nodeId == null) {
          throw new ExecutionException("Class node is not defined");
        }
        final Wrappers._T<SNode> node=new Wrappers._T<SNode>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            node.value=new SNodePointer(DefaultJavaApplication_Configuration.this.getStateObject().modelId,DefaultJavaApplication_Configuration.this.getStateObject().nodeId).getNode();
          }
        }
);
        if (node.value == null) {
          throw new ExecutionException("Class node does not exist");
        }
        final Project project=MPSDataKeys.PROJECT.getData(environment.getDataContext());
        MPSProject mpsProject=project.getComponent(MPSProjectHolder.class).getMPSProject();
        if (DefaultJavaApplication_Configuration.this.getStateObject().makeBeforeRun) {
          GeneratorManager genManager=mpsProject.getComponent(GeneratorManager.class);
          final Wrappers._T<SModelDescriptor> md=new Wrappers._T<SModelDescriptor>();
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              md.value=SNodeOperations.getModel(node.value).getModelDescriptor();
            }
          }
);
          genManager.generateModelsFromDifferentModules(mpsProject.createOperationContext(),ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(),md.value),IGenerationType.FILES);
        }
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            final RunComponent runComponent=new RunComponent(project);
            ClassRunner classRunner=new ClassRunner(runComponent);
            consoleComponent.value=runComponent;
            consoleDispose.value=new Runnable(){
              public void run(){
                runComponent.dispose();
              }
            }
;
            Process process=classRunner.run(node.value,DefaultJavaApplication_Configuration.this.getStateObject().programParams,DefaultJavaApplication_Configuration.this.getStateObject().vmParams,DefaultJavaApplication_Configuration.this.getStateObject().workingDir);
            handler.value=new BLProcessHandler(runComponent,process,"",Charset.defaultCharset());
          }
        }
);
      }
      final JComponent finalConsoleComponent=consoleComponent.value;
      final Runnable finalConsoleDispose=consoleDispose.value;
      final ProcessHandler finalHandler=handler.value;
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
