{
  return new BaseRunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      final ConsoleViewImpl consoleView=StacktraceUtil.createConsoleView(MPSDataKeys.PROJECT.getData(environment.getDataContext()));
      JComponent consoleComponent=null;
      Runnable consoleDispose=null;
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler=null;
      final ConfigRunParameters javaRunParameters=DefaultJavaApplication_Configuration.this.getStateObject().myJavaRunParameters.copy();
      if (executor.getId().equals(DefaultDebugExecutor.EXECUTOR_ID)) {
        String args=this.getUserData(DebuggerKeys.CONNECTION_SETTINGS);
        String oldVmParams=javaRunParameters.getVMParameters();
        if (StringUtils.isNotEmpty(oldVmParams)) {
          oldVmParams+=" ";
        }
 else {
          oldVmParams="";
        }
        javaRunParameters.setVMParameters(oldVmParams + args);
      }
      final SNode node=DefaultJavaApplication_Configuration.this.getNodeForExecution(environment.getProject(),(javaRunParameters).getMake());
{
        ListSequence.fromList(actions).addSequence(ListSequence.fromList(new _FunctionTypes._return_P0_E0<List<AnAction>>(){
          public List<AnAction> invoke(){
{
              final List<AnAction> actionsList=ListSequence.fromListAndArray(new ArrayList<AnAction>(),consoleView.createConsoleActions());
              return actionsList;
            }
          }
        }
.invoke()));
        consoleComponent=consoleView.getComponent();
        consoleDispose=new Runnable(){
          public void run(){
            Disposer.dispose(consoleView);
          }
        }
;
        final Wrappers._T<ExecutionException> ex=new Wrappers._T<ExecutionException>(null);
        handler=(ProcessHandler)new _FunctionTypes._return_P0_E0<Object>(){
          public Object invoke(){
            try {
              ClassRunner classRunner=new ClassRunner(javaRunParameters);
              Process process=classRunner.run(node);
              return new DefaultProcessHandler(consoleView,process,classRunner.getCommandString());
            }
 catch (            ExecutionException e) {
              ex.value=e;
              return null;
            }
          }
        }
.invoke();
        if (ex.value != null) {
          throw ex.value;
        }
      }
      final JComponent finalConsoleComponent=consoleComponent;
      final Runnable finalConsoleDispose=consoleDispose;
      final ProcessHandler finalHandler=handler;
      if (finalHandler == null) {
        return null;
      }
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
