{
  ModelAccess.assertLegalRead();
  List<String> errors=new ArrayList<String>();
  if (myModel.getModule() instanceof TransientModelsModule || myModel.getModule() == null) {
    return errors;
  }
  if (jetbrains.mps.util.SNodeOperations.isModelDisposed(myModel)) {
    return errors;
  }
  if (myModel instanceof InvalidSModel) {
    Iterable<SModel.Problem> problems=myModel.getProblems();
    for (    SModel.Problem m : problems) {
      if (m.isError()) {
        errors.add(m.getText());
      }
    }
    if (errors.isEmpty()) {
      errors.add("Couldn't read model.");
    }
    return errors;
  }
  SModule module=myModel.getModule();
  SRepository repository=module.getRepository();
  for (  SModelReference reference : SModelOperations.getImportedModelUIDs(myModel)) {
    if (module.resolveInDependencies(reference.getModelId()) == null) {
      errors.add("Can't find model: " + SModelStereotype.withoutStereotype(reference.getModelName()));
    }
  }
  List<SModuleReference> langsToCheck=new ArrayList<SModuleReference>();
  langsToCheck.addAll(IterableUtil.asCollection(((jetbrains.mps.smodel.SModelInternal)myModel).getModelDepsManager().getAllImportedLanguages()));
  langsToCheck.addAll(((jetbrains.mps.smodel.SModelInternal)myModel).engagedOnGenerationLanguages());
  for (  SModuleReference lang : langsToCheck) {
    if (repository.getModule(lang.getModuleId()) == null) {
      errors.add("Can't find language: " + lang.getModuleName());
    }
  }
  for (  SModuleReference devKit : ((jetbrains.mps.smodel.SModelInternal)myModel).importedDevkits()) {
    if (repository.getModule(devKit.getModuleId()) == null) {
      errors.add("Can't find devkit: " + devKit.getModuleName());
    }
  }
  return errors;
}
