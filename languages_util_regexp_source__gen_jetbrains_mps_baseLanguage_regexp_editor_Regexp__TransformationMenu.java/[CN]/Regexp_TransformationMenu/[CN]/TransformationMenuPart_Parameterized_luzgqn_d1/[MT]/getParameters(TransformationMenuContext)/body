{
  final List<SAbstractConcept> excludeList=ListSequence.fromListAndArray(new ArrayList<SAbstractConcept>(),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c56bf9L,"jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp"),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174c678adL,"jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp"),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11178fa2a18L,"jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp"),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117f58ea2aL,"jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp"),MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1118e0a1c55L,"jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp"));
  List<SConcept> regexps=SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x11174a06efdL,"jetbrains.mps.baseLanguage.regexp.structure.Regexp"),_context.getModel());
  return ListSequence.fromList(regexps).where(new IWhereFilter<SConcept>(){
    public boolean accept(    SConcept it){
      for (      SAbstractConcept exclude : ListSequence.fromList(excludeList)) {
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(it),SNodeOperations.asSConcept(exclude))) {
          return false;
        }
      }
      return true;
    }
  }
).toListSequence();
}
