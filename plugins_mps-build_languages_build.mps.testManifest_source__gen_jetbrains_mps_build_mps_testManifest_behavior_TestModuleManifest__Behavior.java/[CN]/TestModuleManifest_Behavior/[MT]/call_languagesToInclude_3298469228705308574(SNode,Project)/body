{
  SLanguageHierarchy hierarchy=new SLanguageHierarchy(SModelOperations.getAllLanguageImports(SNodeOperations.getModel(thisNode)));
  List<Tuples._3<String,String,String>> result=ListSequence.fromList(new ArrayList<Tuples._3<String,String,String>>());
  for (  SNode ref : SLinkOperations.getChildren(thisNode,MetaAdapterFactory.getContainmentLink(0x9f846aef4e4a4a84L,0x828e7e83fe2697f2L,0x2dc6844997876882L,0x7d031e6cb9be480L,"language"))) {
    SLanguage sLanguage=MetaAdapterFactory.getLanguage(SLanguageId.deserialize(SPropertyOperations.getString(ref,MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x38130dc4e3db5af1L,0x38130dc4e3db5af3L,"moduleId"))),SPropertyOperations.getString(ref,MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x38130dc4e3db5af1L,0x38130dc4e3db5af2L,"name")));
    SModule sModule=sLanguage.getSourceModule();
    if (sModule != null && project.isProjectModule(sModule) && sModule instanceof AbstractModule) {
      IFile descriptorIFile=((AbstractModule)sModule).getDescriptorFile();
      ListSequence.fromList(result).addElement(MultiTuple.<String,String,String>from(sLanguage.getQualifiedName(),descriptorIFile.getPath(),sLanguage.getSourceModule().getModuleId().toString()));
    }
  }
  return result;
}
