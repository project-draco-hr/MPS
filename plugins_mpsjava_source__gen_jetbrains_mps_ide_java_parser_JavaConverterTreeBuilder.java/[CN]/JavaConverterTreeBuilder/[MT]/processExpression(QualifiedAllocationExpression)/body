{
  MethodBinding b=x.binding;
  SNode creator=null;
  if (x.anonymousType != null) {
    SNode anonymousClassCreator=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.AnonymousClassCreator",null);
    creator=anonymousClassCreator;
    SNode anonymousClass=SNodeOperations.cast(myTypesProvider.getRaw(x.anonymousType.binding),"jetbrains.mps.baseLanguage.structure.AnonymousClass");
    MethodBinding superConstructorBinding=((ConstructorDeclaration)x.anonymousType.methods[0]).constructorCall.binding;
    SReference methodReference=myTypesProvider.createMethodReference(superConstructorBinding,"baseMethodDeclaration",anonymousClass);
    anonymousClass.addReference(methodReference);
    addCallArgs(x.arguments,anonymousClass);
    SLinkOperations.setTarget(anonymousClassCreator,"cls",anonymousClass,true);
  }
 else {
    if (x.enclosingInstance() == null) {
      return processExpression((AllocationExpression)x);
    }
  }
  SNode result=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.GenericNewExpression",null);
  SLinkOperations.setTarget(result,"creator",creator,true);
  return result;
}
