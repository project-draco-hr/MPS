{
  MethodBinding b=x.binding;
  SNode classCreator=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.ClassCreator",null);
  SReference methodReference=myTypesProvider.createMethodReference(b,"baseMethodDeclaration",classCreator);
  if (methodReference == null && x.resolvedType != null) {
    methodReference=myTypesProvider.createErrorReference("baseMethodDeclaration",new String(x.resolvedType.sourceName()),classCreator);
  }
  if (methodReference != null) {
    classCreator.addReference(methodReference);
  }
  if (x.enumConstant != null) {
    throw new JavaConverterException("unexpected enum constant creation");
  }
  if (x.resolvedType instanceof ParameterizedTypeBinding) {
    ParameterizedTypeBinding ptb=(ParameterizedTypeBinding)x.resolvedType;
    TypeBinding[] typeArguments=ptb.arguments;
    if (typeArguments != null) {
      for (      TypeBinding typeBinding : typeArguments) {
        ListSequence.<SNode>fromList(SLinkOperations.getTargets(classCreator,"typeParameter",true)).addElement(createType(typeBinding));
      }
    }
  }
  addMethodTypeArgs(x.typeArguments,classCreator);
  addCallArgs(x.arguments,classCreator);
  SNode result=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.GenericNewExpression",null);
  SLinkOperations.setTarget(result,"creator",classCreator,true);
  return result;
}
