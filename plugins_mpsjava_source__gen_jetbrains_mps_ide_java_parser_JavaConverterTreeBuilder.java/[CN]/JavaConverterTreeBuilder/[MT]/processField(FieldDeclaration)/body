{
  SNode adapter=myTypesProvider.getRaw(declaration.binding);
  if ((adapter == null)) {
    return;
  }
  if (SNodeOperations.isInstanceOf(adapter,"jetbrains.mps.baseLanguage.structure.FieldDeclaration") || SNodeOperations.isInstanceOf(adapter,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
    SNode field=SNodeOperations.cast(adapter,"jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    try {
      SNode initializer=null;
      if (declaration.initialization != null) {
        initializer=processExpressionRefl(declaration.initialization);
      }
      if (initializer != null) {
        SLinkOperations.setTarget(field,"initializer",initializer,true);
      }
      addVariableAnnotations(field,declaration);
    }
 catch (    Throwable e) {
      throw new JavaConverterException(e);
    }
  }
  if (SNodeOperations.isInstanceOf(adapter,"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
    try {
      SNode enumConstant=SNodeOperations.cast(adapter,"jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration");
      assert(SNodeOperations.isInstanceOf(myCurrentClass,"jetbrains.mps.baseLanguage.structure.EnumClass"));
      AllocationExpression initializer=(AllocationExpression)declaration.initialization;
      MethodBinding constructorBinding;
      if (initializer instanceof QualifiedAllocationExpression) {
        TypeDeclaration anonymousEnumClass=((QualifiedAllocationExpression)initializer).anonymousType;
        constructorBinding=((ConstructorDeclaration)anonymousEnumClass.methods[0]).constructorCall.binding;
        SNode enumClassConstantBody=SNodeOperations.cast(myTypesProvider.getRaw(anonymousEnumClass.binding),"jetbrains.mps.baseLanguage.structure.EnumClass");
        for (        SNode imd : SLinkOperations.getTargets(enumClassConstantBody,"method",true)) {
          SNodeOperations.detachNode(imd);
          ListSequence.fromList(SLinkOperations.getTargets(enumConstant,"method",true)).addElement(imd);
        }
        for (        AbstractMethodDeclaration m : anonymousEnumClass.methods) {
          if (m instanceof ConstructorDeclaration) {
            continue;
          }
          processMethod(m);
        }
      }
 else {
        constructorBinding=initializer.binding;
      }
      SNode constructor=SNodeOperations.cast(myTypesProvider.getRaw(constructorBinding.original()),"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
      SLinkOperations.setTarget(enumConstant,"baseMethodDeclaration",constructor,false);
      Expression[] arguments=initializer.arguments;
      if (arguments != null) {
        for (        Expression arg : arguments) {
          ListSequence.fromList(SLinkOperations.getTargets(enumConstant,"actualArgument",true)).addElement(processExpressionRefl(arg));
        }
      }
      addEnumConstAnnotations(enumConstant,declaration);
    }
 catch (    Throwable t) {
      throw new JavaConverterException(t);
    }
  }
}
