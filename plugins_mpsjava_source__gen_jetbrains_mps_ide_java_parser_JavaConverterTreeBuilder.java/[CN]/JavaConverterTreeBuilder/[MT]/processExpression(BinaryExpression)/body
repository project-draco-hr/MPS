{
  SNode op;
  int binOp=(x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;
switch (binOp) {
case OperatorIds.LEFT_SHIFT:
    op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.ShiftLeftExpression",null);
  break;
case OperatorIds.RIGHT_SHIFT:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.ShiftRightExpression",null);
break;
case OperatorIds.PLUS:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.PlusExpression",null);
break;
case OperatorIds.MINUS:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.MinusExpression",null);
break;
case OperatorIds.REMAINDER:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.RemExpression",null);
break;
case OperatorIds.XOR:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression",null);
break;
case OperatorIds.AND:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression",null);
break;
case OperatorIds.MULTIPLY:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.MulExpression",null);
break;
case OperatorIds.OR:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression",null);
break;
case OperatorIds.DIVIDE:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.DivExpression",null);
break;
case OperatorIds.LESS_EQUAL:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression",null);
break;
case OperatorIds.GREATER_EQUAL:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression",null);
break;
case OperatorIds.GREATER:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.GreaterThanExpression",null);
break;
case OperatorIds.LESS:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
break;
default :
throw new JavaConverterException("Unsupported operator for BinaryExpression");
}
return processBinaryOperation(x.left,x.right,op);
}
