{
  Type type=createType(x.resolvedType);
  if (!((type instanceof ArrayType))) {
    throw new JavaConverterException("a type of array allocation should be an array type");
  }
  ArrayType arrayType=(ArrayType)type;
  if (x.initializer != null) {
    List<Expression> initializers=new ArrayList<Expression>();
    if (x.initializer.expressions != null) {
      for (      org.eclipse.jdt.internal.compiler.ast.Expression expression : x.initializer.expressions) {
        initializers.add(processExpressionRefl(expression));
      }
    }
    ArrayCreatorWithInitializer arrayCreator=ArrayCreatorWithInitializer.newInstance(myCurrentModel);
    for (    Expression initializer : initializers) {
      arrayCreator.addInitValue(initializer);
    }
    arrayCreator.setComponentType(CopyUtil.copy(arrayType.getComponentType()));
    GenericNewExpression genericNewExpression=GenericNewExpression.newInstance(myCurrentModel);
    genericNewExpression.setCreator(arrayCreator);
    return genericNewExpression;
  }
 else {
    List<Expression> dims=new ArrayList<Expression>();
    for (    org.eclipse.jdt.internal.compiler.ast.Expression dimension : x.dimensions) {
      if (dimension == null) {
        dims.add(null);
      }
 else {
        dims.add(processExpressionRefl(dimension));
      }
    }
    ArrayCreator arrayCreator=ArrayCreator.newInstance(myCurrentModel);
    for (    Expression dim : dims) {
      DimensionExpression dimensionExpression=DimensionExpression.newInstance(myCurrentModel);
      arrayCreator.addDimensionExpression(dimensionExpression);
      if (dim != null) {
        dimensionExpression.setExpression(dim);
      }
    }
    Type deepestComponentType=arrayType.getComponentType();
    while (deepestComponentType instanceof ArrayType) {
      deepestComponentType=((ArrayType)deepestComponentType).getComponentType();
    }
    arrayCreator.setComponentType(CopyUtil.copy(deepestComponentType));
    GenericNewExpression genericNewExpression=GenericNewExpression.newInstance(myCurrentModel);
    genericNewExpression.setCreator(arrayCreator);
    return genericNewExpression;
  }
}
