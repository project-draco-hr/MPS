{
  SNode op;
switch (x.operator) {
case OperatorIds.PLUS:
    op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression",null);
  break;
case OperatorIds.MINUS:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression",null);
break;
case OperatorIds.MULTIPLY:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.MulAssignmentExpression",null);
break;
case OperatorIds.DIVIDE:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.DivAssignmentExpression",null);
break;
case OperatorIds.AND:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.AndAssignmentExpression",null);
break;
case OperatorIds.OR:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.OrAssignmentExpression",null);
break;
case OperatorIds.XOR:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.XorAssignmentExpression",null);
break;
case OperatorIds.REMAINDER:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.RemAssignmentExpression",null);
break;
case OperatorIds.LEFT_SHIFT:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression",null);
break;
case OperatorIds.RIGHT_SHIFT:
op=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression",null);
break;
default :
throw new JavaConverterException("Unsupported operator for CompoundAssignment");
}
SLinkOperations.setTarget(op,"lValue",processExpressionRefl(x.lhs),true);
SLinkOperations.setTarget(op,"rValue",processExpressionRefl(x.expression),true);
return op;
}
