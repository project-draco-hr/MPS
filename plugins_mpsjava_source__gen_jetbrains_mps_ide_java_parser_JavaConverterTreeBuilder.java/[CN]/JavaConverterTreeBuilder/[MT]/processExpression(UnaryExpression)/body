{
  int operator=((x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT);
switch (operator) {
case OperatorIds.MINUS:
    UnaryMinus unaryMinus=UnaryMinus.newInstance(myCurrentModel);
  unaryMinus.setExpression(processExpressionRefl(x.expression));
return unaryMinus;
case OperatorIds.NOT:
NotExpression notExpression=NotExpression.newInstance(myCurrentModel);
notExpression.setExpression(processExpressionRefl(x.expression));
return notExpression;
case OperatorIds.PLUS:
return processExpressionRefl(x.expression);
case OperatorIds.TWIDDLE:
BitwiseNotExpression twiddle=BitwiseNotExpression.newInstance(myCurrentModel);
twiddle.setExpression(processExpressionRefl(x.expression));
return twiddle;
default :
throw new JavaConverterException("Unexpected operator for unary expression");
}
}
