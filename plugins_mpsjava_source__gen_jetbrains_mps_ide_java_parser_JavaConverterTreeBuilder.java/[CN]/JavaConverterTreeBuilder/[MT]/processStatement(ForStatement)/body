{
  SNode forStatement=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.ForStatement",null);
  List<SNode> init=processStatements(x.initializations);
  if (!(init.isEmpty())) {
    boolean first=true;
    for (    SNode statement : init) {
      if (SNodeOperations.isInstanceOf(statement,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
        SNode lvds=SNodeOperations.cast(statement,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
        SNode variableDeclaration=SLinkOperations.getTarget(lvds,"localVariableDeclaration",true);
        SNodeOperations.detachNode(variableDeclaration);
        if (first) {
          SLinkOperations.setTarget(forStatement,"variable",variableDeclaration,true);
          first=false;
        }
 else {
          SNode additionalForLoopVariable=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable",null);
          myTypesProvider.replaceUnsafe(variableDeclaration,additionalForLoopVariable);
          SPropertyOperations.set(additionalForLoopVariable,"name",SPropertyOperations.getString(variableDeclaration,"name"));
          SNode inititalizer=SLinkOperations.getTarget(variableDeclaration,"initializer",true);
          if ((inititalizer != null)) {
            SNodeOperations.detachNode(inititalizer);
            SLinkOperations.setTarget(additionalForLoopVariable,"initializer",inititalizer,true);
          }
          ListSequence.fromList(SLinkOperations.getTargets(forStatement,"additionalVar",true)).addElement(additionalForLoopVariable);
        }
      }
    }
  }
  SNode expr=processExpressionRefl(x.condition);
  SLinkOperations.setTarget(forStatement,"condition",expr,true);
  List<SNode> incr=processExpressionStatements(x.increments);
  if (!(incr.isEmpty())) {
    for (    SNode expressionStatement : incr) {
      SNode expression=SLinkOperations.getTarget(expressionStatement,"expression",true);
      SNodeOperations.detachNode(expression);
      ListSequence.fromList(SLinkOperations.getTargets(forStatement,"iteration",true)).addElement(expression);
    }
  }
  SNode loopBody=processStatementRefl(x.action);
  SNode body=getStatementListFromStatement(loopBody,x.action);
  SLinkOperations.setTarget(forStatement,"body",body,true);
  return forStatement;
}
