{
  SNode ctor=SNodeOperations.cast(myTypesProvider.getRaw(x.binding),"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
  try {
    myCurrentMethod=ctor;
    SNode superOrThisCall=null;
    ExplicitConstructorCall ctorCall=x.constructorCall;
    if (ctorCall != null) {
      superOrThisCall=processExpression(ctorCall);
    }
    SNode body=SLinkOperations.getTarget(ctor,"body",true);
    if ((body == null)) {
      body=SModelOperations.createNewNode(myCurrentModel,"jetbrains.mps.baseLanguage.structure.StatementList",null);
      ListSequence.fromList(myBlocks).addElement(MultiTuple.<SNode,CompilationUnitDeclaration,Integer,Integer>from(body,getCUD(),x.sourceStart(),x.sourceEnd()));
      SLinkOperations.setTarget(ctor,"body",body,true);
    }
    if ((superOrThisCall != null)) {
      ListSequence.fromList(SLinkOperations.getTargets(body,"statement",true)).addElement(superOrThisCall);
    }
    for (    SNode statement : processStatements(x.statements)) {
      ListSequence.fromList(SLinkOperations.getTargets(body,"statement",true)).addElement(statement);
    }
    addMethodParametersAnnotations(x);
    addMethodAnnotations(ctor,x);
    addMethodJavadoc(ctor,x.javadoc);
    myCurrentMethod=null;
  }
 catch (  Throwable e) {
    throw new JavaConverterException(e);
  }
}
