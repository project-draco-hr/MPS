{
  Element linkElement=new Element(ModelPersistence.LINK);
  parentElement.addContent(linkElement);
  SModelReference mr=reference.getSourceNode().getLinkDeclaration(reference.getRole()).getModel().getSModelReference();
  linkElement.setAttribute(ModelPersistence.ROLE,VersionUtil.formVersionedString(reference.getRole(),imports.get(mr).getUsedVersion()));
  SModelReference targetModelReference=reference.getTargetSModelReference();
  String targetModelInfo="";
  if (reference.isExternal()) {
    if (useUIDs) {
      targetModelInfo=reference.getTargetSModelReference().toString() + "#";
    }
 else {
      if (targetModelReference != null) {
        SModel.ImportElement importElement=imports.get(targetModelReference);
        targetModelInfo=importElement.getReferenceID() + ".";
      }
 else {
        LOG.error("external reference '" + reference.getRole() + "' has no target model info",reference.getSourceNode());
        LOG.error("-- was reference " + reference + " in "+ reference.getSourceNode().getDebugText());
      }
    }
  }
  String targetNodeId=reference instanceof StaticReference ? String.valueOf((reference).getTargetNodeId()) : "^";
  targetNodeId=VersionUtil.formVersionedString(targetModelInfo + targetNodeId,imports.get(targetModelReference).getUsedVersion());
  linkElement.setAttribute(ModelPersistence.TARGET_NODE_ID,targetNodeId);
  String resolveInfo=reference.getResolveInfo();
  if (resolveInfo != null)   linkElement.setAttribute(ModelPersistence.RESOLVE_INFO,resolveInfo);
}
