{
  SearchScope mpsSearchScope=new IdeaSearchScope(scope,true);
  CollectConsumer<VirtualFile> processedFilesConsumer=new CollectConsumer<VirtualFile>();
  for (  SModel model : mpsSearchScope.getModels()) {
    boolean changed=model instanceof EditableSModel && ((EditableSModel)model).isChanged();
    if (!changed)     continue;
    findInModel(model,qname,processedFilesConsumer,consumer);
  }
  final Collection<VirtualFile> filesOfChangedModels=processedFilesConsumer.getResult();
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  GlobalSearchScope truncatedScope=new DelegatingGlobalSearchScope(scope){
    @Override public boolean contains(    VirtualFile file){
      if (filesOfChangedModels.contains(file))       return false;
      return super.contains(file);
    }
  }
;
  List<Collection<SNodeDescriptor>> values=fileBasedIndex.getValues(MPSFQNameJavaClassIndex.ID,qname,truncatedScope);
  collectNodes(consumer,values);
}
