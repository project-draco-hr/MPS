{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0xb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractNodeErrorCheckOperation__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myAbstractNodeWarningCheckOperation__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myActionReference__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myAnonymousCellAnnotation__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myBootstrapActionReference__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myCheckDataFlowOperation__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myCheckNodeForErrorMessagesOperation__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myDragMouseStatement__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myEditorTestCase__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myIChecksRules__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myINodeAnnotation__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myINodesTestMethod__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myIReferenceAttachable__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myIRuleReference__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myInfoStatementReference__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myMPSActionReference__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myMockAnnotation__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myMockScopeProvider__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myNodeCheckOperation__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myNodeConstraintsErrorCheckOperation__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myNodeConstraintsWarningCheckOperation__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myNodeErrorCheckOperation__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myNodeExpectedTypeCheckOperation__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myNodeInfoCheckOperation__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myNodeOperationsContainer__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myNodePropertiesContainer__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myNodeReachable__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myNodeRuleCheckOperation__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myNodeTypeCheckOperation__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myNodeTypeSetCheckOperation__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myNodeTypeSystemErrorCheckOperation__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myNodeTypeSystemRuleCheckOperation__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myNodeTypeSystemWarningCheckOperation__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myNodeUnknownErrorCheckOperation__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myNodeUnknownWarningCheckOperation__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myNodeUnreachable__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myNodeWarningCheckOperation__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myNodesTestCase__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myNodesTestMethod__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myReportErrorStatementReference__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myScopesTest__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myTestInfo__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myUnknownRuleReference__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myVariableAlive__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myVariableInitialized__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myWarningStatementReference__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
