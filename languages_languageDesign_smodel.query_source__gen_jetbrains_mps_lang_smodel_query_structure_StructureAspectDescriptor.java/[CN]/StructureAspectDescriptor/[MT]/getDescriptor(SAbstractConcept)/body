{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0jb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAbstractPrintExpression_old;
      }
    break;
case 1:
  if (true) {
    return myConceptBLCommand_old;
  }
break;
case 2:
if (true) {
return myConceptBLExpression_old;
}
break;
case 3:
if (true) {
return myConceptCustomScope;
}
break;
case 4:
if (true) {
return myConceptExpressionHelpProvider;
}
break;
case 5:
if (true) {
return myConceptGlobalScope;
}
break;
case 6:
if (true) {
return myConceptHelpProvider;
}
break;
case 7:
if (true) {
return myConceptInstancesExpression;
}
break;
case 8:
if (true) {
return myConceptModelScope;
}
break;
case 9:
if (true) {
return myConceptModelsExpression;
}
break;
case 10:
if (true) {
return myConceptModulesExpression;
}
break;
case 11:
if (true) {
return myConceptModulesScope;
}
break;
case 12:
if (true) {
return myConceptNodesExpression;
}
break;
case 13:
if (true) {
return myConceptOperationHelpProvider;
}
break;
case 14:
if (true) {
return myConceptPrintExpression_old;
}
break;
case 15:
if (true) {
return myConceptPrintNodeExpression_old;
}
break;
case 16:
if (true) {
return myConceptPrintNodeReferenceExpression_old;
}
break;
case 17:
if (true) {
return myConceptPrintSequenceExpression_old;
}
break;
case 18:
if (true) {
return myConceptPrintTextExpression_old;
}
break;
case 19:
if (true) {
return myConceptProjectExpression_old;
}
break;
case 20:
if (true) {
return myConceptProjectScope_old;
}
break;
case 21:
if (true) {
return myConceptQueryExpression;
}
break;
case 22:
if (true) {
return myConceptQueryParameter;
}
break;
case 23:
if (true) {
return myConceptQueryParameterIncludeReadOnly;
}
break;
case 24:
if (true) {
return myConceptQueryParameterList;
}
break;
case 25:
if (true) {
return myConceptQueryParameterScope;
}
break;
case 26:
if (true) {
return myConceptReferencesExpression;
}
break;
case 27:
if (true) {
return myConceptScopeParameter;
}
break;
case 28:
if (true) {
return myConceptShowExpression_old;
}
break;
case 29:
if (true) {
return myConceptUsagesExpression;
}
break;
case 30:
if (true) {
return myConceptWithStatement;
}
break;
default :
}
}
return null;
}
