{
  List<Document> editedDocumentsNew=new ArrayList<Document>();
  TabEditorLayout result=new TabEditorLayout();
  getTabRemovalListener().clearAspects();
  SNode baseNode=myBaseNode.resolve(MPSModuleRepository.getInstance());
  if (baseNode == null)   return result;
  for (  RelationDescriptor d : myPossibleTabs) {
    MultiMap<SNodeReference,SNodeReference> topToUses=new MultiMap<SNodeReference,SNodeReference>();
    for (    SNode n : d.getNodes(baseNode)) {
      if (n == null || n.getModel() == null) {
        continue;
      }
      topToUses.putValue(n.getContainingRoot().getReference(),n.getReference());
    }
    if (topToUses.isEmpty())     continue;
    for (    SNodeReference top : topToUses.keySet()) {
      getTabRemovalListener().aspectAdded(top);
      editedDocumentsNew.add(MPSUndoUtil.getDoc(top));
      result.add(d,top,topToUses.get(top));
    }
  }
  myEditedDocuments=editedDocumentsNew;
  return result;
}
