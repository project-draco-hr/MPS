{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("798100da-4f0a-421a-b991-71f8c50ce5d2"),"jetbrains.mps.build")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_BuildAspect;
case 1:
  return props_BuildCompositePath;
case 2:
return props_BuildCustomWorkflow;
case 3:
return props_BuildDependency;
case 4:
return props_BuildExternalDependency;
case 5:
return props_BuildExternalLayout;
case 6:
return props_BuildExternalLayoutDependency;
case 7:
return props_BuildFileExcludeSelector;
case 8:
return props_BuildFileIncludeSelector;
case 9:
return props_BuildFileIncludesSelector;
case 10:
return props_BuildFileSelector;
case 11:
return props_BuildFileSelectorInAttribute;
case 12:
return props_BuildFolderMacro;
case 13:
return props_BuildInputFileSet;
case 14:
return props_BuildInputFiles;
case 15:
return props_BuildInputFolderSet;
case 16:
return props_BuildInputFolders;
case 17:
return props_BuildInputResourceSet;
case 18:
return props_BuildInputSingleFile;
case 19:
return props_BuildInputSingleFolder;
case 20:
return props_BuildJavaPlugin;
case 21:
return props_BuildLayout;
case 22:
return props_BuildLayout_AbstractContainer;
case 23:
return props_BuildLayout_AbstractCopy;
case 24:
return props_BuildLayout_Comment;
case 25:
return props_BuildLayout_CompileOutputOf;
case 26:
return props_BuildLayout_Container;
case 27:
return props_BuildLayout_ContainerAcceptingFileSet;
case 28:
return props_BuildLayout_Copy;
case 29:
return props_BuildLayout_CopyFilter;
case 30:
return props_BuildLayout_CopyFilterFixCRLF;
case 31:
return props_BuildLayout_CopyFilterReplaceRegex;
case 32:
return props_BuildLayout_CopyFilterReplaceTokens;
case 33:
return props_BuildLayout_CopyFlattenMapper;
case 34:
return props_BuildLayout_CopyGlobMapper;
case 35:
return props_BuildLayout_CopyHandler;
case 36:
return props_BuildLayout_CopyMapper;
case 37:
return props_BuildLayout_CopyParameter;
case 38:
return props_BuildLayout_CopyProcessor;
case 39:
return props_BuildLayout_CopyRegexMapper;
case 40:
return props_BuildLayout_CustomCopy;
case 41:
return props_BuildLayout_EchoProperties;
case 42:
return props_BuildLayout_EchoPropertyEntry;
case 43:
return props_BuildLayout_EchoXml;
case 44:
return props_BuildLayout_ExportAsJavaLibrary;
case 45:
return props_BuildLayout_File;
case 46:
return props_BuildLayout_FileSet;
case 47:
return props_BuildLayout_FileStub;
case 48:
return props_BuildLayout_Filemode;
case 49:
return props_BuildLayout_Files;
case 50:
return props_BuildLayout_FilesOf;
case 51:
return props_BuildLayout_Folder;
case 52:
return props_BuildLayout_Import;
case 53:
return props_BuildLayout_ImportContent;
case 54:
return props_BuildLayout_InJarNode;
case 55:
return props_BuildLayout_Jar;
case 56:
return props_BuildLayout_JarManifest;
case 57:
return props_BuildLayout_JarManifest_Attribute;
case 58:
return props_BuildLayout_JarManifest_Part;
case 59:
return props_BuildLayout_JarManifest_Section;
case 60:
return props_BuildLayout_NamedContainer;
case 61:
return props_BuildLayout_Node;
case 62:
return props_BuildLayout_PathElement;
case 63:
return props_BuildLayout_PureNode;
case 64:
return props_BuildLayout_Tar;
case 65:
return props_BuildLayout_TransparentContainer;
case 66:
return props_BuildLayout_War;
case 67:
return props_BuildLayout_Zip;
case 68:
return props_BuildMacro;
case 69:
return props_BuildNamedLayout;
case 70:
return props_BuildPlugin;
case 71:
return props_BuildProject;
case 72:
return props_BuildProjectDependency;
case 73:
return props_BuildProjectPart;
case 74:
return props_BuildRelativePath;
case 75:
return props_BuildSourceArchiveRelativePath;
case 76:
return props_BuildSourceMacroRelativePath;
case 77:
return props_BuildSourcePath;
case 78:
return props_BuildSourceProjectRelativePath;
case 79:
return props_BuildSourceSetContainer;
case 80:
return props_BuildSource_CompilablePart;
case 81:
return props_BuildSource_FilesetProjectPart;
case 82:
return props_BuildSource_JavaCP;
case 83:
return props_BuildSource_JavaClassFolder;
case 84:
return props_BuildSource_JavaContentFolder;
case 85:
return props_BuildSource_JavaContentRoot;
case 86:
return props_BuildSource_JavaDependency;
case 87:
return props_BuildSource_JavaDependencyExternalJar;
case 88:
return props_BuildSource_JavaDependencyExternalJarInFolder;
case 89:
return props_BuildSource_JavaDependencyFileset;
case 90:
return props_BuildSource_JavaDependencyJar;
case 91:
return props_BuildSource_JavaDependencyLibrary;
case 92:
return props_BuildSource_JavaDependencyModule;
case 93:
return props_BuildSource_JavaExternalJarFolderRef;
case 94:
return props_BuildSource_JavaExternalJarRef;
case 95:
return props_BuildSource_JavaFiles;
case 96:
return props_BuildSource_JavaJar;
case 97:
return props_BuildSource_JavaJars;
case 98:
return props_BuildSource_JavaLibrary;
case 99:
return props_BuildSource_JavaLibraryCP;
case 100:
return props_BuildSource_JavaLibraryElement;
case 101:
return props_BuildSource_JavaLibraryExternalJar;
case 102:
return props_BuildSource_JavaLibraryExternalJarFolder;
case 103:
return props_BuildSource_JavaModule;
case 104:
return props_BuildSource_JavaModuleOptions;
case 105:
return props_BuildSource_JavaOptions;
case 106:
return props_BuildSource_JavaResources;
case 107:
return props_BuildSource_JavaSources;
case 108:
return props_BuildSource_SingleFile;
case 109:
return props_BuildSource_SingleFolder;
case 110:
return props_BuildString;
case 111:
return props_BuildStringContainer;
case 112:
return props_BuildStringNotEmpty;
case 113:
return props_BuildStringPart;
case 114:
return props_BuildTextStringPart;
case 115:
return props_BuildVarRefStringPart;
case 116:
return props_BuildVariableMacro;
case 117:
return props_BuildVariableMacroInitValue;
case 118:
return props_BuildVariableMacroInitWithDate;
case 119:
return props_BuildVariableMacroInitWithFileContent;
case 120:
return props_BuildVariableMacroInitWithString;
case 121:
return props_BuildVariableMacroInitWithValueFromFile;
case 122:
return props_GeneratorInternal_BuildSource_Folder;
case 123:
return props_GeneratorInternal_BuildSource_JarFolder;
case 124:
return props_GeneratorInternal_BuildSource_JavaJar;
case 125:
return props_GeneratorInternal_BuildSource_JavaLibrary;
case 126:
return props_GeneratorInternal_BuildSource_JavaModule;
case 127:
return props_GeneratorInternal_BuildSource_SingleFile;
case 128:
return props_GeneratorInternal_IWorkflowParticipantReference;
case 129:
return props_GeneratorInternal_IWorkfowParticipants;
case 130:
return props_GeneratorInternal_LibraryArtifacts;
case 131:
return props_GeneratorInternal_Mapping;
case 132:
return props_GeneratorInternal_ProjectDependency;
case 133:
return props_IWorkflowParticipant;
}
throw new IllegalStateException();
}
