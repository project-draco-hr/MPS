{
  final Set<String> existing=SetSequence.fromSet(new HashSet<String>());
  for (  SNode importProject : ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.buildlanguage.structure.ImportProject",false,new String[]{}))) {
    SetSequence.fromSet(existing).addElement(SPropertyOperations.getString(SLinkOperations.getTarget(importProject,"project",false),"name"));
  }
  Iterable<SNode> projects=ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(),"jetbrains.mps.buildlanguage.structure.ITargetReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      if (eq_x583g4_a0a0a0a0a0a2a23(ITargetReference_Behavior.call_getProjectFileName_1230222765831(it),Project_Behavior.call_getFileName_1213877351819(_context.getNode()))) {
        return false;
      }
      boolean b=!(SetSequence.fromSet(existing).contains(ITargetReference_Behavior.call_getProjectFileName_1230222765831(it)));
      SetSequence.fromSet(existing).addElement(ITargetReference_Behavior.call_getProjectFileName_1230222765831(it));
      return b;
    }
  }
);
  return Sequence.fromIterable(projects).sort(new Comparator<SNode>(){
    public int compare(    SNode a,    SNode b){
      return ITargetReference_Behavior.call_getProjectFileName_1230222765831(a).compareToIgnoreCase(ITargetReference_Behavior.call_getProjectFileName_1230222765831(b));
    }
  }
,true);
}
