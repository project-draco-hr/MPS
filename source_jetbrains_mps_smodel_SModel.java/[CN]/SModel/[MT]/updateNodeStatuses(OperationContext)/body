{
  LOG.debug("SModel updateNodeStatuses: " + getUID());
  Iterator<SNode> roots=roots();
  while (roots.hasNext()) {
    SNode rootNode=roots.next();
    rootNode.putUserObject(SNode.ERROR_STATUS,null);
    rootNode.putUserObject(SNode.CHILDREN_ERROR_STATUS,null);
    Iterator<SNode> children=rootNode.depthFirstChildren();
    while (children.hasNext()) {
      children.next().putUserObject(SNode.ERROR_STATUS,null);
      rootNode.putUserObject(SNode.CHILDREN_ERROR_STATUS,null);
    }
  }
  ITypeChecker typeChecker=TypeCheckerAccess.instance().getTypeChecker();
  if (typeChecker == null)   return new Status.ERROR("null typechecker");
  List<Language> languages=getLanguages(operationContext);
  for (Iterator<Language> iterator=languages.iterator(); iterator.hasNext(); ) {
    Language language=iterator.next();
    typeChecker.loadLanguage(language);
  }
  List<TSStatus> allErrors=new LinkedList<TSStatus>();
  roots=roots();
  while (roots.hasNext()) {
    SNode rootNode=roots.next();
    TSStatus status=typeChecker.checkNodeType(rootNode);
    if (status.isErrorComposite()) {
      List<TSStatus> errorList=status.getAllErrors();
      allErrors.addAll(errorList);
      rootNode.putUserObject(SNode.CHILDREN_ERROR_STATUS,new Status.ERROR(errorList.size() + " type violations"));
    }
 else     if (status.isError()) {
      allErrors.add(status);
    }
  }
  if (allErrors.size() == 0) {
    LOG.debug("status : no errors");
    return new Status.OK("");
  }
  LOG.debug("status : " + allErrors.size() + " errors found!");
  for (int i=0; i < allErrors.size(); i++) {
    TSStatus error=allErrors.get(i);
    SNode node=error.getSNode();
    if (node == null) {
      LOG.error("ERROR: error status " + error + " has no *node*, message: "+ error.getMessage());
      LOG.error("ERROR: Couldn't show the error status in model");
      continue;
    }
    error.getSNode().putUserObject(SNode.ERROR_STATUS,error);
  }
  return new Status.ERROR(allErrors.size() + " error(s)");
}
