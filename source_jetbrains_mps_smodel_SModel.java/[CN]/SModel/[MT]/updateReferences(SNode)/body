{
  SModel targetModel=node.getModel();
  Map<SReference,SNode> replacementMap=new HashMap<SReference,SNode>();
  for (  SReference reference : node.getReferences()) {
    if (reference.isExternal()) {
      SNode oldReferentNode=reference.getTargetNode();
      SNode newReferentNode=targetModel.getNodeById(oldReferentNode.getSNodeId());
      if (newReferentNode != null) {
        replacementMap.put(reference,newReferentNode);
      }
    }
  }
  List<SNode> children=node.getChildren();
  for (  SNode childNode : children) {
    updateReferences(childNode);
  }
  for (  SReference reference : replacementMap.keySet()) {
    node.removeReferent(reference.getRole(),reference.getTargetNode());
    node.addReferent(reference.getRole(),replacementMap.get(reference));
  }
}
