{
  myBreakpointsList.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),COMMAND_SHOW_NODE);
  myBreakpointsList.getActionMap().put(COMMAND_SHOW_NODE,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      AbstractMPSBreakpoint breakpoint=(AbstractMPSBreakpoint)myBreakpointsList.getSelectedValue();
      if (breakpoint == null)       return;
      openNode(breakpoint,false,true);
    }
  }
);
  myBreakpointsList.registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      AbstractMPSBreakpoint breakpoint=(AbstractMPSBreakpoint)myBreakpointsList.getSelectedValue();
      if (breakpoint == null)       return;
      dispose();
      openNode(breakpoint,true,true);
    }
  }
,KeyStroke.getKeyStroke("F4"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myBreakpointsList.registerKeyboardAction(new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      final AbstractMPSBreakpoint breakpoint=(AbstractMPSBreakpoint)myBreakpointsList.getSelectedValue();
      if (breakpoint == null)       return;
      ModelAccess.instance().runReadAction(new Runnable(){
        @Override public void run(){
          myBreakpointsManager.removeBreakpoint(breakpoint);
        }
      }
);
      myBreakpointsListModel.reloadBreakpoints();
    }
  }
,KeyStroke.getKeyStroke("DELETE"),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}
