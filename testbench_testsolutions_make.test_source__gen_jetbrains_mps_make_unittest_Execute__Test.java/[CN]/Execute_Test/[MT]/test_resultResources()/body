{
  final ITarget nop=Mockups.target(context,"nop");
  final ITarget res=Mockups.target(context,"res");
  final IResource resA=Mockups.resource(context,"resA");
  final IResource resB=Mockups.resource(context,"resB");
  final IResult result=Mockups.result(context,"result",true);
  context.checking(new Expectations(){
{
      exactly(1).of(res).createJob();
      will(Expectations.returnValue(Mockups.job(context,"resjob",new _FunctionTypes._return_P0_E0<IResult>(){
        public IResult invoke(){
          return result;
        }
      }
)));
      atLeast(1).of(res).producesOutput();
      will(Expectations.returnValue(true));
      atLeast(1).of(result).output();
      will(Expectations.returnValue(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)));
      atLeast(1).of(nop).after();
      will(Expectations.returnValue(Sequence.<ITarget.Name>singleton(new ITarget.Name("res"))));
    }
  }
);
  Mockups.allowing(context,res);
  Mockups.allowing(context,nop);
  Mockups.allowing(context,result);
  TargetRange tr=new TargetRange();
  tr.addTarget(nop);
  tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(),res));
  Script sc=new Script(tr,new ITarget.Name("nop"));
  sc.validate();
  Assert.assertTrue(sc.isValid());
  IResult r=sc.execute(null,null,new EmptyProgressMonitor());
  Assert.assertNotNull(r);
  Assert.assertTrue(r.isSucessful());
  Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)).disjunction(Sequence.fromIterable(r.output())).isEmpty());
}
