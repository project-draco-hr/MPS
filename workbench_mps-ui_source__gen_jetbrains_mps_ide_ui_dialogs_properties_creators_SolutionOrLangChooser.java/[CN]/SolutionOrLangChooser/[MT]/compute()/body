{
  final Wrappers._T<List<SModuleReference>> ldsRefs=new Wrappers._T<List<SModuleReference>>();
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      Iterable<Language> langs=new FilteredGlobalScope().getVisibleLanguages();
      ldsRefs.value=Sequence.fromIterable(langs).select(new ISelector<Language,SModuleReference>(){
        public SModuleReference select(        Language lang){
          return lang.getModuleReference();
        }
      }
).toListSequence();
      Iterable<SModule> solutions=new FilteredGlobalScope().getModules();
      ListSequence.fromList(ldsRefs.value).addSequence(Sequence.fromIterable(solutions).ofType(Solution.class).select(new ISelector<Solution,SModuleReference>(){
        public SModuleReference select(        Solution it){
          return it.getModuleReference();
        }
      }
).toListSequence());
    }
  }
);
  return CommonChoosers.showDialogModuleCollectionChooser(null,"Idea Plugin containing modules",ldsRefs.value,null);
}
