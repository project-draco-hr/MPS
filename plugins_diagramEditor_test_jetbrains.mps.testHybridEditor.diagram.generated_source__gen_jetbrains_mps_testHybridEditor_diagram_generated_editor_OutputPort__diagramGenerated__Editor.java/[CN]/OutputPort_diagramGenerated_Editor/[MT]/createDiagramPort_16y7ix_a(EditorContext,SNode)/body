{
  final EditorCell editorCell=new PortCell(editorContext,node){
    public Mapper<SNode,RectView> getMapper(){
      Mapper<SNode,RectView> mapper=new Mapper<SNode,RectView>(node,new RectView()){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          getTarget().background().set(Color.GRAY);
          getTarget().dimension().set(new Vector(10,10));
{
            final Value<PolyLineConnection> connector=new Value<PolyLineConnection>();
            final DiagramCell diagramCell=getDiagramCell();
            if (diagramCell == null) {
              return;
            }
            getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
              @Override public void handle(              View view,              MouseEvent e){
                if (connector.get() == null) {
                  PolyLineConnection newConnector=new PolyLineConnection();
                  newConnector.fromView().set(getTarget());
                  newConnector.toLocation().set(e.location());
                  diagramCell.setConnection(newConnector);
                  connector.set(newConnector);
                }
 else {
                  connector.get().toLocation().set(e.location());
                }
              }
            }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
              @Override public void handle(              View view,              MouseEvent e){
                if (connector.get() == null) {
                  return;
                }
                View atEvent=getTarget().container().root().viewAt(e.location());
                if (atEvent == null || atEvent.prop(JetpadUtils.SOURCE).get() == null) {
                  diagramCell.setConnection(null);
                }
 else {
                  diagramCell.setCurrentConnectorContext(getTarget().prop(JetpadUtils.SOURCE).get(),getTarget().prop(JetpadUtils.ID).get(),atEvent.prop(JetpadUtils.SOURCE).get(),atEvent.prop(JetpadUtils.ID).get());
                  diagramCell.activateConnectorInfo();
                  diagramCell.showPatternEditor(e.location().x,e.location().y);
                }
                connector.set(null);
              }
            }
).build());
          }
          getTarget().prop(JetpadUtils.SOURCE).set(getSource());
        }
      }
;
      return mapper;
    }
  }
;
  editorCell.setBig(true);
  editorCell.setCellId("DiagramPort_16y7ix_a");
  editorCell.setBig(true);
  return editorCell;
}
