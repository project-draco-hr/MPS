{
  final EditorCell editorCell=new PortCell(editorContext,node){
    public Mapper<SNode,RectView> getMapper(){
      Mapper<SNode,RectView> mapper=new Mapper<SNode,RectView>(node,new RectView()){
        @Override protected void registerSynchronizers(        Mapper.SynchronizersConfiguration configuration){
          super.registerSynchronizers(configuration);
          getTarget().background().set(Color.GRAY);
          getTarget().dimension().set(new Vector(10,10));
          getTarget().addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_DRAGGED,new ViewEventHandler<MouseEvent>(){
            @Override public void handle(            View view,            MouseEvent e){
              DiagramCell diagramCell=getDiagramCell();
              if (diagramCell == null) {
                return;
              }
              if (diagramCell.hasConnectionDragFeedback()) {
                diagramCell.updateConnectionDragFeedback(e.location());
              }
 else {
                diagramCell.showConnectionDragFeedback(getTarget(),e.location());
              }
            }
          }
).on(ViewEvents.MOUSE_RELEASED,new ViewEventHandler<MouseEvent>(){
            @Override public void handle(            View view,            MouseEvent e){
              DiagramCell diagramCell=getDiagramCell();
              if (diagramCell == null || !(diagramCell.hasConnectionDragFeedback())) {
                return;
              }
              View atEvent=getTarget().container().root().viewAt(e.location());
              if (atEvent == null || atEvent.prop(JetpadUtils.SOURCE).get() == null) {
                diagramCell.hideConnectionDragFeedback();
              }
 else {
                diagramCell.setCurrentConnectorContext(getTarget().prop(JetpadUtils.SOURCE).get(),getTarget().prop(JetpadUtils.ID).get(),atEvent.prop(JetpadUtils.SOURCE).get(),atEvent.prop(JetpadUtils.ID).get());
                diagramCell.createNewDiagramElement(e.location().x,e.location().y);
              }
            }
          }
).build());
          getTarget().prop(JetpadUtils.SOURCE).set(getSource());
        }
      }
;
      return mapper;
    }
  }
;
  editorCell.setBig(true);
  editorCell.setCellId("DiagramPort_16y7ix_a");
  editorCell.setBig(true);
  return editorCell;
}
