{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_1htk8d_a0y.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myConceptAfterTest;
      }
    break;
case 1:
  if (true) {
    return myConceptAssertEquals;
  }
break;
case 2:
if (true) {
return myConceptAssertFalse;
}
break;
case 3:
if (true) {
return myConceptAssertInNotNull;
}
break;
case 4:
if (true) {
return myConceptAssertIsNull;
}
break;
case 5:
if (true) {
return myConceptAssertSame;
}
break;
case 6:
if (true) {
return myConceptAssertThrows;
}
break;
case 7:
if (true) {
return myConceptAssertTrue;
}
break;
case 8:
if (true) {
return myConceptBTestCase;
}
break;
case 9:
if (true) {
return myConceptBeforeTest;
}
break;
case 10:
if (true) {
return myConceptBinaryAssert;
}
break;
case 11:
if (true) {
return myConceptFail;
}
break;
case 12:
if (true) {
return myConceptITestCase;
}
break;
case 13:
if (true) {
return myConceptITestMethod;
}
break;
case 14:
if (true) {
return myConceptITestable;
}
break;
case 15:
if (true) {
return myConceptMessage;
}
break;
case 16:
if (true) {
return myConceptMessageHolder;
}
break;
case 17:
if (true) {
return myConceptPrepareMethod;
}
break;
case 18:
if (true) {
return myConceptTestMethod;
}
break;
case 19:
if (true) {
return myConceptTestMethodList;
}
break;
default :
}
}
return null;
}
