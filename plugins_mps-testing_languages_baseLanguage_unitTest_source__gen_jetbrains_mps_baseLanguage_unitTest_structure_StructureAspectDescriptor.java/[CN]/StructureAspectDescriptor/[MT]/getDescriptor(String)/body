{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AfterTest","jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"afterTest","","");
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertEquals","jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"assert equals","","");
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertFalse","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"assert false","","");
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertInNotNull","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"assert is not null","","");
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertIsNull","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{"expression"},new boolean[]{false},false,false,"assert is null","","");
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertSame","jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"assert same (\"==\")","","");
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertThrows","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{"statement","exceptionType"},new boolean[]{false,false},false,false,"assert throws","","");
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertTrue","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{"condition"},new boolean[]{false},false,false,"assert true","","");
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.BTestCase","jetbrains.mps.baseLanguage.structure.ClassConcept",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"},new String[]{"testCaseName"},new String[]{},new String[]{"testMethodList","beforeTest","afterTest"},new boolean[]{false,false,false},false,false,"","","");
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.BeforeTest","jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"beforeTest","","");
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{"expected","actual"},new boolean[]{false,false},true,false,"","","");
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.Fail","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"fail","","");
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase",null,true,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.ITestable","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod",null,true,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.ITestable"},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.ITestable",null,true,new String[]{},new String[]{},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.Message","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"message"},new boolean[]{false},false,false,"message","","");
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder",null,true,new String[]{},new String[]{},new String[]{},new String[]{"message"},new boolean[]{false},false,false,"","","");
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{},new String[]{},new boolean[]{},true,false,"","","");
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.TestMethod","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"},new String[]{"methodName"},new String[]{},new String[]{},new boolean[]{},false,false,"","","");
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.TestMethodList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"testMethod"},new boolean[]{true},false,false,"","","");
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
