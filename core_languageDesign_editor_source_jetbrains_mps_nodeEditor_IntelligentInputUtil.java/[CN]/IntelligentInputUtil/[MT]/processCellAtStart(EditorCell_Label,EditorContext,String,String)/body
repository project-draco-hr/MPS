{
  NodeSubstituteInfo info=cell.getSubstituteInfo();
  if (info == null) {
    info=new NullSubstituteInfo();
  }
  EditorCell cellForNewNode;
  SNode newNode;
  if (cell.isValidText(smallPattern) && !"".equals(smallPattern) && info.hasExactlyNActions(head + smallPattern,false,0)) {
    newNode=cell.getSNode();
    cellForNewNode=cell;
    return applyLeftTransform(editorContext,head,smallPattern,cellForNewNode,newNode,true);
  }
 else   if (canCompleteSmallPatternImmediatelyLeft(info,head,smallPattern) && !canCompleteTheWholeStringImmediately(info,head + smallPattern)) {
    newNode=info.getMatchingActions(smallPattern,true).get(0).substitute(editorContext,smallPattern);
    if (newNode == null)     return true;
    cellForNewNode=editorContext.getNodeEditorComponent().findNodeCell(newNode);
    return applyLeftTransform(editorContext,head,smallPattern,cellForNewNode,newNode,false);
  }
 else   if (canCompleteTheWholeStringImmediately(info,head + smallPattern)) {
    List<INodeSubstituteAction> matchingActions=info.getMatchingActions(head + smallPattern,true);
    INodeSubstituteAction item=matchingActions.get(0);
    item.substitute(editorContext,head + smallPattern);
    return true;
  }
 else {
    return true;
  }
}
