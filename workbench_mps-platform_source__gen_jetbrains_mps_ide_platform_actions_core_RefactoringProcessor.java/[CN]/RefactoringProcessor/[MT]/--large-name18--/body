{
  final Map<RefactoringParticipant,RefactoringParticipant.ParticipantState<?,?,T,S>> changes=askParticipantChanges(refactoringUI,repository,scope,participants,initialStates);
  if (changes == null) {
    return;
  }
  SearchResults searchResults=new SearchResults();
  for (  IMapping<RefactoringParticipant,RefactoringParticipant.ParticipantState<?,?,T,S>> participantState : MapSequence.fromMap(changes)) {
    List<? extends List<? extends RefactoringParticipant.Change<?,?>>> partivipantChanges=participantState.value().getChanges();
    for (    List<? extends RefactoringParticipant.Change<?,?>> nodeChanges : ListSequence.fromList(partivipantChanges)) {
      for (      RefactoringParticipant.Change<?,?> change : ListSequence.fromList(nodeChanges)) {
        searchResults.addAll(change.getSearchResults());
      }
    }
  }
  refactoringUI.runRefactoring(new Runnable(){
    public void run(){
      final _FunctionTypes._return_P1_E0<? extends S,? super T> getFinalObject=doRefactor.invoke(changes,refactoringSession);
      if (getFinalObject == null) {
        return;
      }
      for (      IMapping<RefactoringParticipant,RefactoringParticipant.ParticipantState<?,?,T,S>> participantChanges : MapSequence.fromMap(changes)) {
        participantChanges.value().doRefactor(ListSequence.fromList(initialStates).select(new ISelector<T,S>(){
          public S select(          T it){
            return getFinalObject.invoke(it);
          }
        }
).toListSequence(),repository,refactoringSession);
      }
    }
  }
,refactoringName,searchResults,refactoringSession);
}
