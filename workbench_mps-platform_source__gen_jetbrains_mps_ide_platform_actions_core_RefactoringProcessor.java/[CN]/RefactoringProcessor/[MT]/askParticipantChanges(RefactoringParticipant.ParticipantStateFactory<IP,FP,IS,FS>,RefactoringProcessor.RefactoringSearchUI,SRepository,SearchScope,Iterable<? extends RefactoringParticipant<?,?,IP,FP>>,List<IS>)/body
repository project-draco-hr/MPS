{
  final List<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS>> participantStates=ListSequence.fromList(new ArrayList<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS>>());
  final Wrappers._T<List<RefactoringParticipant.Option>> options=new Wrappers._T<List<RefactoringParticipant.Option>>();
  refactoringUI.prepare(new Runnable(){
    public void run(){
      for (      RefactoringParticipant<?,?,IP,FP> participant : Sequence.fromIterable(participants)) {
        ListSequence.fromList(participantStates).addElement(RefactoringParticipant.ParticipantApplied.create(factory,participant,nodes));
      }
      options.value=ListSequence.fromList(participantStates).translate(new ITranslator2<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS>,RefactoringParticipant.Option>(){
        public Iterable<RefactoringParticipant.Option> translate(        RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS> it){
          return it.getAvaliableOptions(repository);
        }
      }
).distinct().sort(new ISelector<RefactoringParticipant.Option,String>(){
        public String select(        RefactoringParticipant.Option it){
          return it.getDescription();
        }
      }
,true).toListSequence();
    }
  }
);
  final List<RefactoringParticipant.Option> selectedOptions=refactoringUI.selectParticipants(options.value);
  if (selectedOptions == null) {
    return null;
  }
  SearchTask searchTask=new SearchTask(){
    public boolean canExecute(){
      return true;
    }
    public SearchResults execute(    ModelAccess modelAccess,    final ProgressMonitor progressMonitor){
      final Wrappers._boolean cancelled=new Wrappers._boolean(false);
      modelAccess.runReadAction(new Runnable(){
        public void run(){
          int steps=ListSequence.fromList(participantStates).count();
          progressMonitor.start("Searching for usages",steps);
          for (          RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS> participantState : ListSequence.fromList(participantStates)) {
            try {
              participantState.findChanges(repository,selectedOptions,searchScope,progressMonitor.subTask(1,SubProgressKind.AS_COMMENT));
            }
 catch (            RuntimeException e) {
              if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Exception during usages search",e);
              }
              cancelled.value=true;
              break;
            }
            if (progressMonitor.isCanceled()) {
              cancelled.value=true;
              break;
            }
          }
          progressMonitor.done();
        }
      }
);
      if (cancelled.value) {
        return null;
      }
      SearchResults searchResults=new SearchResults();
      for (      RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS> participantState : ListSequence.fromList(participantStates)) {
        List<? extends List<? extends RefactoringParticipant.Change<?,?>>> participantChanges=participantState.getChanges();
        for (        List<? extends RefactoringParticipant.Change<?,?>> nodeChanges : ListSequence.fromList(participantChanges)) {
          for (          RefactoringParticipant.Change<?,?> change : ListSequence.fromList(nodeChanges)) {
            searchResults.addAll(change.getSearchResults());
          }
        }
      }
      return searchResults;
    }
  }
;
  return MultiTuple.<List<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IS,FS>>,SearchTask>from(participantStates,searchTask);
}
