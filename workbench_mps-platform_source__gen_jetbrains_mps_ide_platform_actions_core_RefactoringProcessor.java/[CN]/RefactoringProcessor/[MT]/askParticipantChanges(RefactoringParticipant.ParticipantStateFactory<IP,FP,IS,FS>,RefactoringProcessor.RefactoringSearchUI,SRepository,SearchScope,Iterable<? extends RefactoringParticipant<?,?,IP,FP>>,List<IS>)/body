{
  final List<RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS>> participantStates=ListSequence.fromList(new ArrayList<RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS>>());
  final Wrappers._T<List<RefactoringParticipant.Option>> options=new Wrappers._T<List<RefactoringParticipant.Option>>();
  refactoringUI.prepare(new Runnable(){
    public void run(){
      for (      RefactoringParticipant<?,?,IP,FP> participant : Sequence.fromIterable(participants)) {
        ListSequence.fromList(participantStates).addElement(RefactoringParticipant.ParticipantState.create(factory,participant,nodes));
      }
      options.value=ListSequence.fromList(participantStates).translate(new ITranslator2<RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS>,RefactoringParticipant.Option>(){
        public Iterable<RefactoringParticipant.Option> translate(        RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS> it){
          return it.getAvaliableOptions(repository);
        }
      }
).distinct().sort(new ISelector<RefactoringParticipant.Option,String>(){
        public String select(        RefactoringParticipant.Option it){
          return it.getDescription();
        }
      }
,true).toListSequence();
    }
  }
);
  final List<RefactoringParticipant.Option> selectedOptions=refactoringUI.selectParticipants(options.value);
  if (selectedOptions == null) {
    return null;
  }
  final Wrappers._boolean cancelled=new Wrappers._boolean(false);
  refactoringUI.runSearch(new _FunctionTypes._void_P1_E0<ProgressMonitor>(){
    public void invoke(    ProgressMonitor progressMonitor){
      int steps=ListSequence.fromList(participantStates).count();
      progressMonitor.start("Searching for usages",steps);
      for (      RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS> participantStates : ListSequence.fromList(participantStates)) {
        try {
          participantStates.findChanges(repository,selectedOptions,searchScope,progressMonitor.subTask(1,SubProgressKind.AS_COMMENT));
        }
 catch (        RuntimeException e) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Exception during usages search",e);
          }
          cancelled.value=true;
          break;
        }
        if (progressMonitor.isCanceled()) {
          cancelled.value=true;
          break;
        }
      }
      progressMonitor.done();
    }
  }
);
  if (cancelled.value) {
    return null;
  }
  return MultiTuple.<List<RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS>>,List<RefactoringParticipant.Option>>from(participantStates,selectedOptions);
}
