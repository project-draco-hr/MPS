{
  final Tuples._2<List<RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS>>,SearchTask> participantChanges=askParticipantChanges(factory,refactoringUI,repository,scope,participants,initialStates);
  if (participantChanges == null) {
    return;
  }
  final Wrappers._T<SearchResults> searchResults=new Wrappers._T<SearchResults>();
  refactoringUI.runSearch(new _FunctionTypes._void_P1_E0<ProgressMonitor>(){
    public void invoke(    ProgressMonitor progressMonitor){
      searchResults.value=participantChanges._1().execute(repository.getModelAccess(),progressMonitor);
    }
  }
);
  refactoringUI.runRefactoring(new Runnable(){
    public void run(){
      final _FunctionTypes._return_P1_E0<? extends FS,? super IS> getFinalObject=doRefactor.invoke(participantChanges._0(),refactoringSession);
      if (getFinalObject == null) {
        return;
      }
      for (      RefactoringParticipant.ParticipantState<?,?,IP,FP,IS,FS> participantState : ListSequence.fromList(participantChanges._0())) {
        participantState.doRefactor(ListSequence.fromList(initialStates).select(new ISelector<IS,FS>(){
          public FS select(          IS it){
            return getFinalObject.invoke(it);
          }
        }
).toListSequence(),repository,refactoringSession);
      }
    }
  }
,refactoringName,searchResults.value,participantChanges._1(),refactoringSession);
}
