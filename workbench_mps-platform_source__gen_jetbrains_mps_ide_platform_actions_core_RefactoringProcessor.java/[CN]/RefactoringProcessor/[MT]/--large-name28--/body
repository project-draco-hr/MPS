{
  final RefactoringSessionImpl refactoringSession=new RefactoringSessionImpl();
  performRefactoring(new RefactoringParticipant.CollectingParticipantStateFactory<IP,FP>(),new RefactoringProcessor.RefactoringUIImpl(project,refactoringSession),refactoringSession,project.getRepository(),project.getScope(),refactoringName,participants,initialStates,new _FunctionTypes._return_P1_E0<Map<IP,FP>,Iterable<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IP,FP>>>(){
    public Map<IP,FP> invoke(    Iterable<RefactoringParticipant.ParticipantApplied<?,?,IP,FP,IP,FP>> participantStates){
      return doRefactor.invoke(participantStates,refactoringSession);
    }
  }
,new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      refactoringSession.performAllRegistered();
      if (doCleanup != null) {
        doCleanup.invoke(refactoringSession);
      }
    }
  }
);
}
