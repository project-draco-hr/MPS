{
  final UsagesModelTracker usagesModelTracker=new UsagesModelTracker(myRepository);
  RefactoringAccessEx.getInstance().showRefactoringView(myProject,new RefactoringViewAction(){
    public void performAction(    final RefactoringViewItem refactoringViewItem){
      myRepository.getModelAccess().executeCommand(new Runnable(){
        public void run(){
          if (usagesModelTracker.isChanged()) {
            Messages.showMessageDialog(myProject,"Cannot perform refactoring operation.\nThere were changes in code after usages have been found.\nPlease perform usage search again.","Changes Detected",Messages.getErrorIcon());
          }
 else {
            try {
              performRefactoringTask.run();
              myRefactoringSession.close();
            }
 catch (            RuntimeException exception) {
              if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Exception during refactoring: ",exception);
              }
            }
            refactoringViewItem.close();
          }
        }
      }
);
    }
  }
,new Runnable(){
    public void run(){
      usagesModelTracker.dispose();
    }
  }
,searchResults,new SearchTask(){
    public boolean canExecute(){
      return rerunTask.canExecute();
    }
    public SearchResults execute(    ModelAccess modelAccess,    ProgressMonitor progressMonitor){
      usagesModelTracker.reset();
      return rerunTask.execute(modelAccess,progressMonitor);
    }
  }
,refactoringName);
}
