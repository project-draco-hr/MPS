{
  ListSequence.fromList(myTargetConcepts).addSequence(ListSequence.fromList(targets).<Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>>select(new ISelector<Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>,Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>>(){
    public Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> select(    Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> it){
      return MultiTuple.<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>from((it._0() == null ? ModelAccess.instance().runReadAction(new Computable<SNode>(){
        public SNode compute(){
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept");
        }
      }
) : it._0()),it._1());
    }
  }
));
  final Iterable<IModule> modules=ListSequence.fromList(myTargetConcepts).<IModule>select(new ISelector<Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>>,IModule>(){
    public IModule select(    final Tuples._2<SNode,_FunctionTypes._return_P1_E0<? extends Boolean,? super SNode>> it){
      final Wrappers._T<IModule> module=new Wrappers._T<IModule>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          module.value=SNodeOperations.getModel(it._0()).getModelDescriptor().getModule();
        }
      }
);
      return module.value;
    }
  }
);
  myScope=new GlobalFilteredScope(){
    @Nullable @Override protected Iterable<IModule> getRequiredModules(){
      return modules;
    }
  }
;
}
