{
  if (getNodes().size() != 0) {
    AbstractEditorComponent editor=editorContext.getNodeEditorComponent();
    SNode node=getNodes().get(0);
    EditorCell cell=editor.findNodeCell(node);
    List<Pair<EditorCellKeyMapAction,EditorCell>> actionsInfo=KeyMapUtil.getKeyMapActionsForEvent(cell,keyEvent,editorContext);
    if (actionsInfo.size() == 1) {
      EditorCellKeyMapAction action=actionsInfo.get(0).o1;
      EditorCell contextCell=actionsInfo.get(0).o2;
      KeyMapUtil.executeKeyMapAction(action,keyEvent,contextCell,editorContext);
      return true;
    }
 else     if (actionsInfo.size() > 1) {
      EditorUtil.showActionsMenu(actionsInfo,keyEvent,editorContext,cell);
      return true;
    }
  }
  String actionType=myEditorComponent.getActionType(keyEvent,editorContext);
  if (actionType == null) {
    if (keyEvent.getKeyCode() == KeyEvent.VK_DELETE || keyEvent.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
      actionType=EditorCellAction.DELETE;
    }
  }
  if (actionType != null) {
    if (actionType.equals(EditorCellAction.DELETE)) {
      doDeleteNodes(editorContext);
      return true;
    }
    if (actionType.equals(EditorCellAction.COPY)) {
      myEditorComponent.executeComponentAction(EditorCellAction.COPY);
      return true;
    }
    if (actionType.equals(EditorCellAction.CUT)) {
      myEditorComponent.executeComponentAction(EditorCellAction.CUT);
      return true;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_ESCAPE) {
    deactivate();
    return true;
  }
  if (!isSelectionKeystroke(keyEvent)) {
    if (keyEvent.getKeyCode() == KeyEvent.VK_UP || keyEvent.getKeyCode() == KeyEvent.VK_DOWN || keyEvent.getKeyCode() == KeyEvent.VK_LEFT || keyEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
      if (keyEvent.isAltDown()) {
        return false;
      }
      deactivate();
    }
    return true;
  }
  boolean next=(keyEvent.getKeyCode() == KeyEvent.VK_RIGHT || keyEvent.getKeyCode() == KeyEvent.VK_DOWN);
  SNode newLastNode=null;
  Iterator<SNode> iterator=myParentNode.getChildren(myRole).iterator();
  while (iterator.hasNext()) {
    SNode semanticNode=iterator.next();
    if (semanticNode == myLastNode) {
      if (next) {
        if (iterator.hasNext()) {
          newLastNode=iterator.next();
        }
 else {
          newLastNode=null;
        }
      }
      break;
    }
    newLastNode=semanticNode;
  }
  if (newLastNode != null) {
    myLastNode=newLastNode;
    myEditorComponent.scrollToNode(myLastNode);
    myEditorComponent.repaint();
  }
  return true;
}
