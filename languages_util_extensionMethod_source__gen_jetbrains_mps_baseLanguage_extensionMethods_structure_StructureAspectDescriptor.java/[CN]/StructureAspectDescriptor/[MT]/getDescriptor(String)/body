{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer","jetbrains.mps.baseLanguage.structure.GenericDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.GenericDeclaration","jetbrains.mps.baseLanguage.structure.IVisible","jetbrains.mps.baseLanguage.structure.IMemberContainer"},new String[]{},new String[]{},new String[]{"methods","staticFields"},new boolean[]{true,true});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodCall","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IOperation","jetbrains.mps.baseLanguage.structure.IMethodCall"},new String[]{},new String[]{"extension"},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.structure.ClassifierMember"},new String[]{},new String[]{},new String[]{"extendedType"},new boolean[]{false});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldDeclaration","jetbrains.mps.baseLanguage.structure.VariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldReference","jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.VariableReference"},new String[]{},new String[]{"staticFieldDeclaration"},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.LocalExtendedMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"instanceMethodDeclaration"},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer","jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer",false,new String[]{"jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.ThisExtensionExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension","jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer",false,new String[]{"jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer"},new String[]{},new String[]{},new String[]{"type"},new boolean[]{false});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
