{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("c72da2b9-7cce-4447-8389-f407dc1158b7"),"jetbrains.mps.lang.structure")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_AbstractConceptDeclaration;
case 1:
  return props_AggregationLinkDeclarationScopeKind;
case 2:
return props_AttributeInfo;
case 3:
return props_AttributeInfo_AttributedConcept;
case 4:
return props_AttributeInfo_IsMultiple;
case 5:
return props_ConceptDeclaration;
case 6:
return props_ConstrainedDataTypeDeclaration;
case 7:
return props_DataTypeDeclaration;
case 8:
return props_DeprecatedNodeAnnotation;
case 9:
return props_EnumerationDataTypeDeclaration;
case 10:
return props_EnumerationMemberDeclaration;
case 11:
return props_IConceptAspect;
case 12:
return props_IStructureDeprecatable;
case 13:
return props_InterfaceConceptDeclaration;
case 14:
return props_InterfaceConceptReference;
case 15:
return props_LinkDeclaration;
case 16:
return props_PrimitiveDataTypeDeclaration;
case 17:
return props_PropertyDeclaration;
case 18:
return props_ReferenceLinkDeclartionScopeKind;
}
throw new IllegalStateException();
}
