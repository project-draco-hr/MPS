{
  setupEnvironment();
  boolean doneSomething=false;
  Map<File,List<String>> mpsProjects=myWhatToDo.getMPSProjectFiles();
  for (  File file : mpsProjects.keySet()) {
    if (!(file.getName().endsWith(MPSExtentions.DOT_MPS_PROJECT))) {
      continue;
    }
    FileMPSProject p=new FileMPSProject(file);
    p.init(new FileMPSProject.ProjectDescriptor(file));
    makeProject();
    p.projectOpened();
    info("Loaded project " + p);
    executeTask(p,new MpsWorker.ObjectsToProcess(Collections.singleton(p),new HashSet<SModule>(),new HashSet<SModel>()));
    p.projectClosed();
    disposeProject(p);
    doneSomething=true;
  }
  LinkedHashSet<SModule> modules=new LinkedHashSet<SModule>();
  LinkedHashSet<SModel> models=new LinkedHashSet<SModel>();
  collectFromModuleFiles(modules);
  ModelAccess.instance().runWriteAction(new Runnable(){
    public void run(){
      ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
    }
  }
);
  collectFromModelFiles(models);
  MpsWorker.ObjectsToProcess go=new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET,modules,models);
  if (go.hasAnythingToGenerate()) {
    Project project=createDummyProject();
    executeTask(project,go);
    doneSomething=true;
  }
  if (!(doneSomething)) {
    error("Could not find anything to generate.");
  }
  dispose();
  showStatistic();
}
