{
  StringBuffer s=new StringBuffer("Generating:");
  for (  Project p : go.getProjects()) {
    s.append("\n    ");
    s.append(p);
  }
  for (  SModule m : go.getModules()) {
    s.append("\n    ");
    s.append(m);
  }
  for (  SModel m : go.getModels()) {
    s.append("\n    ");
    s.append(m);
  }
  info(s.toString());
  Iterable<MResource> resources=Sequence.fromIterable(collectResources(project,go)).toListSequence();
  ModelAccess.instance().flushEventQueue();
  MakeSession session=new MakeSession(project,myMessageHandler,true);
  AbstractMakeService.DefaultMonitor defaultMonitor=new AbstractMakeService.DefaultMonitor(session);
  IScriptController.Stub controller=new IScriptController.Stub(defaultMonitor,defaultMonitor){
    @Override public void setup(    IPropertiesPool ppool){
      new JavaCompileFacetInitializer().setJavaCompileOptions(myJavaCompilerOptions).populate(ppool);
    }
  }
;
  Future<IResult> res=new BuildMakeService().make(session,resources,null,controller,new EmptyProgressMonitor());
  try {
    if (!(res.get().isSucessful())) {
      myErrors.add("Make was not successful");
    }
  }
 catch (  InterruptedException e) {
    myErrors.add(e.toString());
  }
catch (  ExecutionException e) {
    myErrors.add(e.toString());
  }
  ModelAccess.instance().flushEventQueue();
}
