{
  if (!(PluginUtil.isGitPluginEnabled())) {
    return null;
  }
  VirtualFile mpsHome=LocalFileSystem.getInstance().findFileByPath(PathManager.getHomePath());
  if (mpsHome == null) {
    return null;
  }
  Project project=ProjectManager.getInstance().getOpenProjects()[0];
  try {
    String currentBranchName=check_9qzcwz_a0a0e0b(GitBranchUtil.getCurrentBranch(project,mpsHome));
    String currentRevision=getCurrentRevision(project,mpsHome);
    String mergeBase=getMergeBase(project,mpsHome);
    int distance=getDistance(project,mpsHome);
    String headDescription=currentRevision;
    if (mergeBase != null || distance == 0) {
      headDescription+=String.format(", origin/master@%s + %s",mergeBase,NameUtil.formatNumericalString(distance,"commit"));
    }
    if (currentBranchName != null) {
      headDescription=String.format("%s (%s)",currentBranchName,headDescription);
    }
    return headDescription;
  }
 catch (  VcsException e) {
  }
  return null;
}
