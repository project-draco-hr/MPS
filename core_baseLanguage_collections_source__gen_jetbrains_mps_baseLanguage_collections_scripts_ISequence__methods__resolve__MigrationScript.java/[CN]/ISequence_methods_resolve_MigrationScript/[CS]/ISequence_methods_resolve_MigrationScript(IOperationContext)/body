{
  super("Resolve ISequence methods references");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "fix dangling refs";
    }
    public String getAdditionalInfo(){
      return "fix dangling refs";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (SLinkOperations.getTarget(node,"baseMethodDeclaration",false) == null);
    }
    public void doUpdateInstanceNode(    SNode node){
      List<SNode> seqCls=new ArrayList<SNode>();
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a1a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a2a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a3a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a4a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a5a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a6a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a7a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a8a4a0a0a1a0().createNode(),"classifier",false));
      ListSequence.fromList(seqCls).addElement(SLinkOperations.getTarget(new ISequence_methods_resolve_MigrationScript.QuotationClass_3k0ck2_a0a0a9a4a0a0a1a0().createNode(),"classifier",false));
      List<SReference> refs=node.getReferences();
      if (refs.size() > 0) {
        SReference ref=refs.get(0);
        if (ref.getTargetNode() == null) {
          with_cls:           for (          SNode iseq : seqCls) {
            for (            SNode imd : SLinkOperations.getTargets(iseq,"method",true)) {
              if (SPropertyOperations.getString(imd,"name").equals(ref.getResolveInfo())) {
                SLinkOperations.setTarget(node,"baseMethodDeclaration",imd,false);
                break with_cls;
              }
            }
          }
        }
      }
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
