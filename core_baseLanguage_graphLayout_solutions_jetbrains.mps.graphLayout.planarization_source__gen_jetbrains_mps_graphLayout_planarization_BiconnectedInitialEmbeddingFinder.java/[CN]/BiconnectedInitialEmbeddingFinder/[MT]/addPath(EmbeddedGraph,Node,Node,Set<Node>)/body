{
  Set<Edge> removed=SetSequence.fromSet(new HashSet<Edge>());
  for (  Edge edge : ListSequence.fromList(start.getEdges())) {
    if (SetSequence.fromSet(toBeAdded).contains(edge.getOpposite(start))) {
      SetSequence.fromSet(removed).addElement(edge);
    }
  }
  for (  Edge edge : SetSequence.fromSet(removed)) {
    edge.removeFromGraph();
  }
  List<Edge> path=ShortestPath.getPath(embeddedGraph.getGraph(),toAdd,start,Edge.Direction.BOTH);
  int endIndex=0;
  Node cur=toAdd;
  while (SetSequence.fromSet(toBeAdded).contains(cur)) {
    cur=ListSequence.fromList(path).getElement(endIndex).getOpposite(cur);
    endIndex++;
  }
  path=ListSequence.fromList(path).subListSequence(0,endIndex);
  for (  Edge edge : SetSequence.fromSet(removed)) {
    edge.addToGraph();
  }
  ListSequence.fromList(path).insertElement(0,ListSequence.fromList(SetSequence.fromSet(removed).where(new IWhereFilter<Edge>(){
    public boolean accept(    Edge it){
      return it.getOpposite(start) == toAdd;
    }
  }
).toListSequence()).getElement(0));
  for (  Edge edge : ListSequence.fromList(path)) {
    for (    Node node : ListSequence.fromList(edge.getAdjacentNodes())) {
      SetSequence.fromSet(toBeAdded).removeElement(node);
    }
  }
  connect(embeddedGraph,path,start,cur);
}
