{
  try {
    final List<String> finderClasses=ListSequence.fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        if (SNodeOperations.isInstanceOf(GoToInheritedClassifier_Action.this.classifierNode,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");
        }
 else {
          ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");
          ListSequence.fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder");
        }
      }
    }
);
    final List<SNode> nodes=new ArrayList<SNode>();
    ProgressManager.getInstance().run(new Task.Modal(GoToInheritedClassifier_Action.this.project,"Searching...",true){
      public void run(      @NotNull final ProgressIndicator p){
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            String finderClass : ListSequence.fromList(finderClasses)) {
              ListSequence.fromList(nodes).addSequence(ListSequence.fromList(FindUtils.executeFinder(finderClass,GoToInheritedClassifier_Action.this.classifierNode,GlobalScope.getInstance(),p)));
            }
          }
        }
);
      }
    }
);
    final Wrappers._T<List<SNode>> nodesIncludingEnumConstants=new Wrappers._T<List<SNode>>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        nodesIncludingEnumConstants.value=GoToInheritedClassifier_Action.this.appendEnumConstants(nodes);
      }
    }
);
    RelativePoint relativePoint;
    if (event.getInputEvent() instanceof MouseEvent) {
      relativePoint=new RelativePoint((MouseEvent)event.getInputEvent());
    }
 else {
      Rectangle cellBounds=GoToInheritedClassifier_Action.this.editorContext.getSelectedCell().getBounds();
      Point point=new Point(((int)cellBounds.getMinX()),((int)cellBounds.getMaxY()));
      relativePoint=new RelativePoint(GoToInheritedClassifier_Action.this.editorComponent,point);
    }
    GoToHelper.showInheritedClassesMenu(nodesIncludingEnumConstants.value,relativePoint,GoToInheritedClassifier_Action.this.project);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "GoToInheritedClassifier",t);
  }
}
