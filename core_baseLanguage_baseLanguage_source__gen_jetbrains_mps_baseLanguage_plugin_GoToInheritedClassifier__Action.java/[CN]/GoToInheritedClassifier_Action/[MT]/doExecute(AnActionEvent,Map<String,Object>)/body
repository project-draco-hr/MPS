{
  try {
    final List<String> finderClasses=ListSequence.<String>fromList(new ArrayList<String>());
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        if (SNodeOperations.isInstanceOf(((SNode)MapSequence.<String,Object>fromMap(_params).get("classifierNode")),"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
          ListSequence.<String>fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");
        }
 else {
          ListSequence.<String>fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");
          ListSequence.<String>fromList(finderClasses).addElement("jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder");
        }
      }
    }
);
    final List<SNode> nodes=new ArrayList<SNode>();
    ProgressManager.getInstance().run(new Task.Modal(((Project)MapSequence.<String,Object>fromMap(_params).get("project")),"Searching...",true){
      public void run(      @NotNull final ProgressIndicator p){
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            for (            String finderClass : ListSequence.<String>fromList(finderClasses)) {
              ListSequence.<SNode>fromList(nodes).addSequence(ListSequence.<SNode>fromList(FindUtils.executeFinder(finderClass,((SNode)MapSequence.<String,Object>fromMap(_params).get("classifierNode")),GlobalScope.getInstance(),p)));
            }
          }
        }
);
      }
    }
);
    final Wrappers._T<List<SNode>> nodesIncludingEnumConstants=new Wrappers._T<List<SNode>>();
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        nodesIncludingEnumConstants.value=GoToInheritedClassifier_Action.this.appendEnumConstants(nodes,_params);
      }
    }
);
    Rectangle cellBounds=((EditorContext)MapSequence.<String,Object>fromMap(_params).get("editorContext")).getSelectedCell().getBounds();
    Point point=new Point(((int)cellBounds.getMinX()),((int)cellBounds.getMaxY()));
    RelativePoint relPoint=new RelativePoint(((EditorComponent)MapSequence.<String,Object>fromMap(_params).get("editorComponent")),point);
    GoToHelper.showInheritedClassesMenu(nodesIncludingEnumConstants.value,relPoint,((Project)MapSequence.<String,Object>fromMap(_params).get("project")));
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "GoToInheritedClassifier",t);
  }
}
