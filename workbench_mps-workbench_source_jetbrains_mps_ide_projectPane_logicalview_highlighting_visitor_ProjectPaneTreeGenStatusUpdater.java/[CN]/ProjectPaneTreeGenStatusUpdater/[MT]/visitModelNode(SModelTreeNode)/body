{
  if (!ProjectPane.isShowGenStatus())   return;
  if (IMakeService.INSTANCE.isSessionActive())   return;
  Application application=ApplicationManager.getApplication();
  if (application.isDisposed() || application.isDisposeInProgress())   return;
  SModel md=modelNode.getModel();
  if (!(md instanceof EditableSModel))   return;
  if (!(md instanceof GeneratableSModel) || !(((GeneratableSModel)md).isGeneratable()))   return;
  if (md.getModule() == null)   return;
  TreeNode node=modelNode;
  final ProjectModuleTreeNode moduleNode=getContainingModuleNode(node);
  boolean wasChanged=md instanceof EditableSModel && ((EditableSModel)md).isChanged();
  if (moduleNode.getModule().isPackaged()) {
    ourUpdater.addUpdate(modelNode,new GenStatusNodeUpdate(GenerationStatus.PACKAGED.getMessage()));
    ourUpdater.addUpdate(moduleNode,new GenStatusNodeUpdate(GenerationStatus.PACKAGED.getMessage()));
    return;
  }
  if (wasChanged) {
    ourUpdater.addUpdate(modelNode,new GenStatusNodeUpdate(GenerationStatus.REQUIRED.getMessage()));
    ourUpdater.addUpdate(moduleNode,new GenStatusNodeUpdate(GenerationStatus.REQUIRED.getMessage()));
    if (moduleNode.getModule() instanceof Generator) {
      ourUpdater.addUpdate(getContainingModuleNode(moduleNode),new GenStatusNodeUpdate(GenerationStatus.REQUIRED.getMessage()));
    }
    return;
  }
  GenerationStatus modelStatus=ModelAccess.instance().runReadAction(new Computable<GenerationStatus>(){
    public GenerationStatus compute(){
      if (modelNode.getModel().getModule() == null) {
        return GenerationStatus.NOT_REQUIRED;
      }
      return getGenerationStatus(modelNode);
    }
  }
);
  updateModuleStatus(moduleNode);
  if (moduleNode.getModule() instanceof Generator) {
    updateModuleStatus(getContainingModuleNode(moduleNode));
  }
  ourUpdater.addUpdate(modelNode,new GenStatusNodeUpdate(modelStatus.getMessage()));
}
