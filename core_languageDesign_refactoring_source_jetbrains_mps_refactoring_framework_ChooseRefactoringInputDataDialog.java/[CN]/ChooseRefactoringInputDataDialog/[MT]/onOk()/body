{
  try {
    myResult=false;
    if (myRefactoring.doesUpdateModel()) {
      myRefactoringContext.setLocal(myIsLocalCheckBox.isSelected());
    }
    myRefactoringContext.setDoesGenerateModels(myGenerateModelsCheckBox.isSelected());
    for (    IChooseComponent component : myComponents) {
      myRefactoringContext.setParameter(component.getPropertyName(),component.submit());
    }
    boolean applicable=ModelAccess.instance().runReadAction(new Computable<Boolean>(){
      public Boolean compute(){
        return myRefactoring.isApplicable(myRefactoringContext);
      }
    }
);
    if (applicable) {
      myResult=true;
      dispose();
    }
 else {
      myResult=false;
      myRefactoringContext.clearParameters();
      JOptionPane.showMessageDialog(this,"refactoring is not applicable");
    }
  }
 catch (  InvalidInputValueException ex) {
    JOptionPane.showMessageDialog(this,ex.getMessage());
  }
}
