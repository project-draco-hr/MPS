{
  final String outputRoot=myWhatToDo.getProperty("OUTPUT_ROOT_DIR");
  final String cachesOutputRoot=myWhatToDo.getProperty("CACHES_OUTPUT_ROOT_DIR");
  final boolean useTransientOutput=Sequence.fromIterable(resources).any(new IWhereFilter<IMResource>(){
    public boolean accept(    IMResource r){
      return r.module().getModuleDescriptor().isUseTransientOutput();
    }
  }
);
  return new IScriptController.Stub(){
    @Override public void setup(    IPropertiesPool pp,    Iterable<ITarget> toExecute,    Iterable<? extends IResource> input){
      super.setup(pp,toExecute,input);
      Tuples._1<Boolean> skipReconcile=(Tuples._1<Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile"),Object.class);
      skipReconcile._0(true);
      Tuples._1<Boolean> skipCopyTraceinfo=(Tuples._1<Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.lang.traceable.CopyTraceInfo.copyTraceInfo"),Object.class);
      skipCopyTraceinfo._0(true);
      Tuples._2<Boolean,Boolean> compileProps=(Tuples._2<Boolean,Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),Object.class);
      compileProps._1(true);
      Tuples._1<List<String>> report=(Tuples._1<List<String>>)pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report"),Object.class);
      report._0(writtenFiles);
      Tuples._1<Map<String,String>> hashes=(Tuples._1<Map<String,String>>)pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect"),Object.class);
      hashes._0(fileHashes);
      if (useTransientOutput) {
        final ReducedGenerationWorker.ModuleOutputPaths paths=new ReducedGenerationWorker.ModuleOutputPaths(Sequence.fromIterable(resources).select(new ISelector<IMResource,IModule>(){
          public IModule select(          IMResource r){
            return r.module();
          }
        }
));
        Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile,? super String>> pathToFile=(Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile,? super String>>)pp.properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Object.class);
        pathToFile._0(new _FunctionTypes._return_P1_E0<IFile,String>(){
          public IFile invoke(          String path){
            String localOutPath=paths.toLocalPath(path);
            if (localOutPath != null) {
              return FileSystem.getInstance().getFileByPath(outputRoot).getDescendant(localOutPath);
            }
            String localOutCachePath=paths.toLocalCachePath(path);
            if (localOutCachePath != null) {
              return FileSystem.getInstance().getFileByPath(cachesOutputRoot).getDescendant(localOutCachePath);
            }
            return FileSystem.getInstance().getFileByPath(path);
          }
        }
);
      }
    }
  }
;
}
