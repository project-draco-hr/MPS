{
  ProjectOperationContext ctx=new ProjectOperationContext(project);
  final Iterable<IMResource> resources=Sequence.fromIterable(collectResources(ctx,go)).toListSequence();
  ModelAccess.instance().flushEventQueue();
  Future<IResult> res;
  final List<String> writtenFiles=ListSequence.fromList(new ArrayList<String>());
  final Map<String,String> fileHashes=MapSequence.fromMap(new HashMap<String,String>());
  IOperationContext context=new ProjectOperationContext(project);
  BuildMakeService bms=new BuildMakeService();
  MakeSession ms=new MakeSession(context,getMyMessageHandler(),true){
    @Override public IScript toScript(    ScriptBuilder scriptBuilder){
      scriptBuilder.withFacetNames(new IFacet.Name("jetbrains.mps.build.reduced.ReportFiles"),new IFacet.Name("jetbrains.mps.build.reduced.CollectHashes"));
      return scriptBuilder.toScript();
    }
  }
;
  final String outputRoot=myWhatToDo.getProperty("OUTPUT_ROOT_DIR");
  final String cachesOutputRoot=myWhatToDo.getProperty("CACHES_OUTPUT_ROOT_DIR");
  IScriptController.Stub scriptCtl=new IScriptController.Stub(){
    @Override public void setup(    IPropertiesPool pp,    Iterable<ITarget> toExecute,    Iterable<? extends IResource> input){
      super.setup(pp,toExecute,input);
      Tuples._1<Boolean> skipReconcile=(Tuples._1<Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile"),Object.class);
      skipReconcile._0(true);
      Tuples._2<Boolean,Boolean> compileProps=(Tuples._2<Boolean,Boolean>)pp.properties(new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile"),Object.class);
      compileProps._1(true);
      Tuples._1<List<String>> report=(Tuples._1<List<String>>)pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report"),Object.class);
      report._0(writtenFiles);
      Tuples._1<Map<String,String>> hashes=(Tuples._1<Map<String,String>>)pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect"),Object.class);
      hashes._0(fileHashes);
      if (outputRoot != null) {
        Sequence.fromIterable(resources).select(new ISelector<IMResource,IModule>(){
          public IModule select(          IMResource r){
            return r.module();
          }
        }
);
        final ReducedGenerationWorker.ModuleOutputPaths paths=new ReducedGenerationWorker.ModuleOutputPaths(Sequence.fromIterable(resources).select(new ISelector<IMResource,IModule>(){
          public IModule select(          IMResource r){
            return r.module();
          }
        }
));
        Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile,? super String>> pathToFile=(Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile,? super String>>)pp.properties(new ITarget.Name("jetbrains.mps.lang.core.Make.make"),Object.class);
        pathToFile._0(new _FunctionTypes._return_P1_E0<IFile,String>(){
          public IFile invoke(          String path){
            String localOutPath=paths.toLocalPath(path);
            if (localOutPath != null) {
              return FileSystem.getInstance().getFileByPath(outputRoot).getDescendant(localOutPath);
            }
            String localOutCachePath=paths.toLocalCachePath(path);
            if (localOutCachePath != null) {
              return FileSystem.getInstance().getFileByPath(cachesOutputRoot).getDescendant(localOutCachePath);
            }
            return FileSystem.getInstance().getFileByPath(path);
          }
        }
);
      }
    }
  }
;
  try {
    res=bms.make(ms,resources,null,scriptCtl);
    if (!(res.get().isSucessful())) {
      myErrors.add("Make was not successful");
    }
    if (writtenFiles != null) {
      for (      String f : writtenFiles) {
        System.out.println("##WRITTEN##" + f);
      }
    }
  }
 catch (  InterruptedException e) {
    myErrors.add(e.toString());
  }
catch (  ExecutionException e) {
    myErrors.add(e.toString());
  }
}
