{
  init(direction,edgeFilter);
  for (int iter=0; iter < myGraph.getNumNodes() - 1; iter++) {
    for (    Node node : ListSequence.fromList(myGraph.getNodes())) {
      int sourceDist=MapSequence.fromMap(myDist).get(node);
      if (sourceDist == ShortestPath.INF) {
        continue;
      }
      for (      Edge edge : ListSequence.fromList(node.getEdges(direction)).where(new IWhereFilter<Edge>(){
        public boolean accept(        Edge it){
          return edgeFilter.invoke(it);
        }
      }
)) {
        Node target=edge.getOpposite(node);
        int targetDist=MapSequence.fromMap(myDist).get(target);
        if (sourceDist + MapSequence.fromMap(myWeights).get(edge) < targetDist) {
          MapSequence.fromMap(myDist).put(target,sourceDist + MapSequence.fromMap(myWeights).get(edge));
          MapSequence.fromMap(myPrev).put(target,edge);
        }
      }
    }
  }
}
