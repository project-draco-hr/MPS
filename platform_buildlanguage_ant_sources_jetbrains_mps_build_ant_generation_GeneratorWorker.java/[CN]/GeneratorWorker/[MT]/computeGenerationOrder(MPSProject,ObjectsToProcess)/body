{
  final Map<IModule,List<EditableSModelDescriptor>> moduleToModels=new LinkedHashMap<IModule,List<EditableSModelDescriptor>>();
  extractModels(go.getProjects(),go.getModules(),(Set)go.getModels(),(Map)moduleToModels);
  List<Set<IModule>> modulesOrder=ModelAccess.instance().runReadAction(new Computable<List<Set<IModule>>>(){
    public List<Set<IModule>> compute(){
      return StronglyConnectedModules.getInstance().getStronglyConnectedComponents(moduleToModels.keySet(),new IModuleDecoratorBuilder<IModule,IModuleDecorator<IModule>>(){
        public IModuleDecorator<IModule> decorate(        IModule module){
          return new ModuleDecorator(module);
        }
      }
);
    }
  }
);
  List<Cycle> cycles=new ArrayList<Cycle>();
  for (  Set<IModule> modulesSet : modulesOrder) {
    SimpleModuleCycle cycle=new SimpleModuleCycle(project,modulesSet,moduleToModels);
    cycles.add(cycle);
  }
  return cycles;
}
