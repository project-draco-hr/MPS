{
  final ITarget make=Mockups.target(context,"make");
  final ITarget gen=Mockups.target(context,"gen",new Class[]{IResource.class});
  final ITarget res=Mockups.target(context,"res");
  final IResource resA=Mockups.resource(context,"resA");
  final IResource resB=Mockups.resource(context,"resB");
  final IResult okresult=Mockups.result(context,"okresult",true);
  final IResult failresult=Mockups.result(context,"failresult",false);
  final IScriptController mons=Mockups.monitors(context,"mons");
  final IJobMonitor jmon=context.mock(IJobMonitor.class);
  final IFeedback[] fbk=new IFeedback[1];
  context.checking(new Expectations(){
{
      final Object[] job=new Object[1];
      exactly(1).of(mons).runJobWithMonitor((_FunctionTypes._void_P1_E0<? super IJobMonitor>)with(new BaseMatcher<Object>(){
        public boolean matches(        Object o){
          job[0]=o;
          return true;
        }
        public void describeTo(        Description p0){
        }
      }
));
      will(new Action(){
        public Object invoke(        Invocation invocation) throws Throwable {
          ((_FunctionTypes._void_P1_E0<? super IJobMonitor>)job[0]).invoke(jmon);
          return null;
        }
        public void describeTo(        Description description){
        }
      }
);
      exactly(1).of(mons).setup(with(aNonNull(IPropertiesPool.class)),with(aNonNull(Iterable.class)),with(any(Iterable.class)));
      exactly(1).of(jmon).reportFeedback(with(new BaseMatcher<IFeedback>(){
        public boolean matches(        Object o){
          if (o instanceof IFeedback.ERROR) {
            fbk[0]=(IFeedback)o;
            return true;
          }
          return false;
        }
        public void describeTo(        Description p0){
        }
      }
));
      atLeast(1).of(res).before();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
      atLeast(1).of(res).producesOutput();
      will(returnValue(true));
      exactly(1).of(res).createJob();
      will(returnValue(Mockups.job(context,"resjob",new _FunctionTypes._return_P0_E0<IResult>(){
        public IResult invoke(){
          return okresult;
        }
      }
)));
      atLeast(1).of(okresult).output();
      will(returnValue(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)));
      atLeast(1).of(gen).before();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("make")})));
      atLeast(1).of(gen).after();
      will(returnValue(Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("res")})));
      IJob genjob=new IJob(){
        public IResult execute(        Iterable<IResource> input,        IJobMonitor mon,        IPropertiesAccessor pa){
          Assert.assertTrue(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<IResource>(),resA,resB)).disjunction(Sequence.fromIterable(input)).isEmpty());
          return failresult;
        }
      }
;
      exactly(1).of(gen).createJob();
      will(returnValue(genjob));
      never(make).createJob();
    }
  }
);
  Mockups.allowing(context,res);
  Mockups.allowing(context,gen);
  Mockups.allowing(context,make);
  Mockups.allowing(context,okresult);
  Mockups.allowing(context,failresult);
  Mockups.allowing(context,mons);
  Mockups.allowing(context,jmon);
  TargetRange tr=new TargetRange();
  tr.addTarget(make);
  tr.addRelated(ListSequence.fromListAndArray(new ArrayList<ITarget>(),gen,res));
  Script sc=new Script(tr,new ITarget.Name("make"));
  sc.validate();
  Assert.assertTrue(sc.isValid());
  IResult r=sc.execute(mons,null,new EmptyProgressMonitor());
  Assert.assertNotNull(r);
  Assert.assertFalse(r.isSucessful());
  Assert.assertTrue(Sequence.fromIterable(r.output()).isEmpty());
  Assert.assertTrue(fbk[0] instanceof IFeedback.ERROR);
}
