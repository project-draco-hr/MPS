{
  super("Add missing parentheses to TernaryOperatorExpressionExpression");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Find TernaryOperatorExpressions with required but missing parens around them and add them";
    }
    public String getAdditionalInfo(){
      return "Find TernaryOperatorExpressions with required but missing parens around them and add them";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.BinaryOperation") || (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression") && eq_lkooh4_a0a0a0a3a0a0a0a1a0(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node),"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1163668896201l,1163668914799l,"condition")),node));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SNodeFactoryOperations.replaceWithNewChild(node,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1079359253375l,1079359253376l,"expression"),node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
