{
  super("Add missing parentheses to TernaryOperatorExpressionExpression");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Find TernaryOperatorExpressions with required but missing parens around them and add them";
    }
    public String getAdditionalInfo(){
      return "Find TernaryOperatorExpressions with required but missing parens around them and add them";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation")) || (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) && eq_lkooh4_a0a0a0a3a0a0a0a1a0(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012826fL,"condition")),node));
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SNodeFactoryOperations.replaceWithNewChild(node,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,0xfb4ed32b80L,"expression"),node);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
