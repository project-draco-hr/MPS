{
  myChangeGroupLayouts=changeGroupLayouts;
  myLastEditor=firstEditor;
  final SelectionListener selectionListener=new SelectionListener(){
    public void selectionChanged(    EditorComponent editorComponent,    Selection oldSelection,    Selection newSelection){
      setLastEditor(editorComponent);
      updateToolbar();
    }
  }
;
  ListSequence.fromList(myChangeGroupLayouts).visitAll(new IVisitor<ChangeGroupLayout>(){
    public void visit(    ChangeGroupLayout cgb){
      cgb.addInvalidateListener(new ChangeGroupInvalidateListener(){
        public void changeGroupsInvalidated(){
          updateToolbar();
        }
      }
);
    }
  }
);
  SetSequence.fromSet(SetSequence.fromSetWithValues(new HashSet<EditorComponent>(),ListSequence.fromList(myChangeGroupLayouts).translate(new ITranslator2<ChangeGroupLayout,EditorComponent>(){
    public Iterable<EditorComponent> translate(    ChangeGroupLayout b){
      return Arrays.<EditorComponent>asList(b.getLeftComponent(),b.getRightComponent());
    }
  }
))).visitAll(new IVisitor<EditorComponent>(){
    public void visit(    EditorComponent ec){
      ec.getSelectionManager().addSelectionListener(selectionListener);
    }
  }
);
}
