{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression",operationContext.getScope());
    Calculable calculable=new Calculable(){
      public Object calculate(){
        return TraversalAxis.getConstants();
      }
    }
;
    Iterable<TraversalAxis> parameterObjects=(Iterable<TraversalAxis>)calculable.calculate();
    for (    TraversalAxis parameter : parameterObjects) {
      result.add(new AbstractRTransformHintSubstituteAction(parameter,sourceNode){
        public SNode doSubstitute(        String pattern){
          SNode tpoExp=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.TreePathOperationExpression");
          SLinkOperations.setTarget(tpoExp,"expression",sourceNode,true);
          SNode op=SModelOperations.createNewNode(model,"jetbrains.mps.ypath.structure.IterateOperation",null);
          SPropertyOperations.set(SLinkOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.IterateOperation"),"axis",((TraversalAxis)this.getParameterObject()).getValue());
          return tpoExp;
        }
        public String getMatchingText(        String text){
          return TraversalAxisUtil.getOperationSign(((TraversalAxis)this.getParameterObject()));
        }
        public String getDescriptionText(        String text){
          return "find " + ((TraversalAxis)this.getParameterObject()).getName();
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode tpoExp=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.TreePathOperationExpression");
        SLinkOperations.setTarget(tpoExp,"expression",sourceNode,true);
        SLinkOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.WhereOperation");
        return tpoExp;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getDescriptionText(      String pattern){
        return "where condition";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode tpoExp=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.TreePathOperationExpression");
        SLinkOperations.setTarget(tpoExp,"expression",sourceNode,true);
        SLinkOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.MatchKindOperation");
        return tpoExp;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getDescriptionText(      String pattern){
        return "match kind operation";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode tpoExp=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.TreePathOperationExpression");
        SLinkOperations.setTarget(tpoExp,"expression",sourceNode,true);
        SLinkOperations.setNewChild(tpoExp,"operation","jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation");
        return tpoExp;
      }
      public String getMatchingText(      String pattern){
        return "[[";
      }
      public String getDescriptionText(      String pattern){
        return "match default property operation";
      }
    }
);
  }
  return result;
}
