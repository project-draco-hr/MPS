{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode res=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.IsWithinRangeExpression");
        SLinkOperations.setTarget(res,"range",sourceNode,true);
        return res;
      }
      public String getMatchingText(      String pattern){
        return ".isWithinRange ()";
      }
      public String getDescriptionText(      String pattern){
        return "IRange expression";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode res=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.IsAtInsertionPointExpression");
        SLinkOperations.setTarget(res,"range",sourceNode,true);
        return res;
      }
      public String getMatchingText(      String pattern){
        return ".isAtInsertionPoint ()";
      }
      public String getDescriptionText(      String pattern){
        return "IRange expression";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode res=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.NextElementStatement");
        SLinkOperations.setTarget(res,"range",sourceNode,true);
        return res;
      }
      public String getMatchingText(      String pattern){
        return ".next ()";
      }
      public String getDescriptionText(      String pattern){
        return "IRange statement";
      }
    }
);
  }
  return result;
}
