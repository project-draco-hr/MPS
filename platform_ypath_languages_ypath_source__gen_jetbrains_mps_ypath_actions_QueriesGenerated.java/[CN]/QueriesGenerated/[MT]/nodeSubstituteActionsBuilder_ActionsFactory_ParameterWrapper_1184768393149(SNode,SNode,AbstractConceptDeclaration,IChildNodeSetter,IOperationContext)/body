{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ParameterWrapper",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode op=parentNode;
        SNode tpoe=SNodeOperations.getParent(parentNode,null,false,false);
        return FeatureTargetTypeUtil.getParameterObjects(SLinkOperations.getTarget(op,"usedFeature",false),SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe,"expression",true)),"nodeType",true));
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return ((SNode)this.getParameterObject());
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(((SNode)this.getParameterObject()),"name");
        }
      }
);
    }
  }
  return result;
}
