{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathAdapterExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode tpaExp=SNodeOperations.replaceWithNewChild(sourceNode,"jetbrains.mps.ypath.structure.TreePathAdapterExpression");
        SLinkOperations.setTarget(tpaExp,"expression",sourceNode,true);
        return tpaExp;
      }
      public String getMatchingText(      String pattern){
        return ":";
      }
      public String getDescriptionText(      String pattern){
        return "Cast to treepath expression";
      }
    }
);
  }
  return result;
}
