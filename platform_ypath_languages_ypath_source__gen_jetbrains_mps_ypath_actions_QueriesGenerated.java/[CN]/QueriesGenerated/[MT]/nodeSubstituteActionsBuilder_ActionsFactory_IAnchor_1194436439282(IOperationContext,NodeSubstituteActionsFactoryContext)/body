{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration conceptToAdd=((ConceptDeclaration)SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.IndexAnchor",operationContext.getScope()));
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext);
    result.addAll(defaultActions);
  }
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ElementAnchor",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode anchor=SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementAnchor",null);
          SPropertyOperations.set(anchor,"before","" + (true));
          return anchor;
        }
        public String getMatchingText(        String pattern){
          return "BEFORE";
        }
      }
);
    }
  }
{
    AbstractConceptDeclaration outputConcept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ElementAnchor",operationContext.getScope());
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName((SNode)BaseAdapter.fromAdapter(outputConcept)))) {
      result.add(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode anchor=SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementAnchor",null);
          SPropertyOperations.set(anchor,"before","" + (false));
          return anchor;
        }
        public String getMatchingText(        String pattern){
          return "AFTER";
        }
      }
);
    }
  }
  return result;
}
