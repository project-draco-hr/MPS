{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration conceptToAdd=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.IndexAnchor",operationContext.getScope());
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope());
    result.addAll(defaultActions);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ElementAnchor",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode anchor=SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementAnchor",null);
        SPropertyOperations.set(anchor,"before","" + (true));
        return anchor;
      }
      public String getMatchingText(      String pattern){
        return "BEFORE";
      }
    }
);
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ElementAnchor",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        SNode anchor=SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementAnchor",null);
        SPropertyOperations.set(anchor,"before","" + (false));
        return anchor;
      }
      public String getMatchingText(      String pattern){
        return "AFTER";
      }
    }
);
  }
  return result;
}
