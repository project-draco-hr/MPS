{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new DefaultSimpleSubstituteAction(concept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
      public SNode createChildNode(      Object parameterObject,      SModel model,      String pattern){
        return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.EmptySequenceExpression",null);
      }
      public boolean hasSubstitute(){
        return true;
      }
      public boolean canSubstitute_internal(      String pattern){
        return SNodeOperations.isInstanceOf(_context.getParentNode(),"jetbrains.mps.ypath.structure.ReplaceWritePathStatement");
      }
      public String getMatchingText(      String pattern){
        return "NOTHING";
      }
    }
);
  }
  return result;
}
