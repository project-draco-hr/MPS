{
  final Set<SearchResult<SNode>> results=SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
  ListSequence.fromList(refactoringContext.getSelectedNodes()).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
      SearchResults<SNode> searchResults=FindUtils.getSearchResults(new EmptyProgressMonitor(),refactoringContext.getSelectedNode(),GlobalScope.getInstance(),"jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder");
      SetSequence.fromSet(results).addSequence(ListSequence.fromList(searchResults.getSearchResults()));
    }
  }
);
  Set<SNode> nodes=SetSequence.fromSetWithValues(new HashSet<SNode>(),SetSequence.fromSet(results).select(new ISelector<SearchResult<SNode>,SNode>(){
    public SNode select(    SearchResult<SNode> it){
      return it.getObject();
    }
  }
));
  for (  SearchResult<SNode> searchResult : ListSequence.fromListWithValues(new ArrayList<SearchResult<SNode>>(),results)) {
    SNode resultNode=searchResult.getObject();
    for (    SNode anc : ListSequence.fromList(SNodeOperations.getAncestors(resultNode,null,false))) {
      if (SetSequence.fromSet(nodes).contains(anc)) {
        SetSequence.fromSet(results).removeElement(searchResult);
        break;
      }
    }
  }
  return new SearchResults(SetSequence.fromSetWithValues(new HashSet<SNode>(),refactoringContext.getSelectedNodes()),SetSequence.fromSet(results).toListSequence());
}
