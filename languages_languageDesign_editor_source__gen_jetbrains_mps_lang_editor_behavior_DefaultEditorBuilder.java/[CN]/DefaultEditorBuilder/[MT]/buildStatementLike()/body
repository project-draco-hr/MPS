{
  pushCollection();
  addLabel(camelToLabel(SPropertyOperations.getString(conceptDeclaration,"name")));
  final SNode nameProperty=getNameProperty(conceptDeclaration);
  if ((nameProperty != null)) {
    addProperty(nameProperty);
  }
  Iterable<SNode> props=ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(conceptDeclaration)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return it != nameProperty && SNodeOperations.getParent(it) != SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
    }
  }
);
  List<SNode> children=ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(conceptDeclaration)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.getParent(it) != SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
    }
  }
).toListSequence();
  List<SNode> references=ListSequence.fromList(children).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.hasValue(it,"metaClass","reference","reference") || isSmartReference(it);
    }
  }
).toListSequence();
  ListSequence.fromList(children).removeSequence(ListSequence.fromList(references));
  buildHeader(references);
  if (Sequence.fromIterable(props).isNotEmpty() || ListSequence.fromList(children).isNotEmpty()) {
    addLabel("{");
    setMatchingLabel("body-brace");
    newLine();
    pushCollection();
    indent();
    boolean first=true;
    for (    SNode property : Sequence.fromIterable(props)) {
      if (SNodeOperations.getParent(property) == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626")) {
        continue;
      }
      addLabel(camelToLabel(SPropertyOperations.getString(property,"name")));
      addPunctuation(":");
      addProperty(property);
      newLine();
      first=false;
    }
    for (    SNode linkDeclaration : ListSequence.fromList(children)) {
      if (!(first)) {
        addEmptyLine();
      }
      addLabel(camelToLabel(SPropertyOperations.getString(linkDeclaration,"role")));
      addPunctuation(":");
      newLine();
      if (LinkDeclaration_Behavior.call_isSingular_1213877254557(linkDeclaration)) {
        addRefNode(linkDeclaration);
      }
 else {
        addRefNodeList(linkDeclaration,null);
        setBooleanStyle(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.IndentLayoutNewLineChildrenStyleClassItem"));
      }
      indent();
      newLine();
      first=false;
    }
    popCollection();
    addLabel("}");
    setMatchingLabel("body-brace");
  }
 else {
    addPunctuation(";");
  }
  popCollection();
}
