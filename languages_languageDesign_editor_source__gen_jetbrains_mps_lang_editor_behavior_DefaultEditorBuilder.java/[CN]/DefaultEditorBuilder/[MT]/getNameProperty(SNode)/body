{
  final Map<SNode,Integer> idProperties=MapSequence.fromMap(new HashMap<SNode,Integer>());
  for (  SNode property : ListSequence.fromList(AbstractConceptDeclaration_BehaviorDescriptor.getPropertyDeclarations_idhEwILLM.invoke(concept))) {
    if (SNodeOperations.getParent(property) == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626")) {
      continue;
    }
    if (!(isStringProperty(property))) {
      continue;
    }
    String name=SPropertyOperations.getString(property,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    int prio=(name.equals("name") ? 10000 : 0);
    prio+=(name.toLowerCase().indexOf("identifier") >= 0 ? 1700 : 0);
    prio+=(name.toLowerCase().indexOf("name") >= 0 ? 1000 : 0);
    prio+=(name.toLowerCase().indexOf("qualified") >= 0 ? 200 : 0);
    MapSequence.fromMap(idProperties).put(property,prio);
  }
  return SetSequence.fromSet(MapSequence.fromMap(idProperties).keySet()).sort(new ISelector<SNode,Integer>(){
    public Integer select(    SNode it){
      return MapSequence.fromMap(idProperties).get(it);
    }
  }
,false).first();
}
