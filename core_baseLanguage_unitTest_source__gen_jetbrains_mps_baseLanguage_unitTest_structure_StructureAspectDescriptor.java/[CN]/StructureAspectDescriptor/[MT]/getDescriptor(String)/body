{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AfterTest","jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod"},new String[]{},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertEquals","jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertFalse","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertInNotNull","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertIsNull","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertSame","jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert"},new String[]{},new String[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertThrows","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.AssertTrue","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.BTestCase","jetbrains.mps.baseLanguage.structure.ClassConcept",false,new String[]{"jetbrains.mps.baseLanguage.structure.ClassConcept","jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"},new String[]{"testCaseName"},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.BeforeTest","jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod",false,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod"},new String[]{},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.Fail","jetbrains.mps.baseLanguage.structure.Statement",false,new String[]{"jetbrains.mps.baseLanguage.structure.Statement","jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder"},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase",null,true,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.ITestable","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod",null,true,new String[]{"jetbrains.mps.baseLanguage.unitTest.structure.ITestable"},new String[]{},new String[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.ITestable",null,true,new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.Message","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder",null,true,new String[]{},new String[]{},new String[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.TestMethod","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration","jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"},new String[]{"methodName"},new String[]{});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.unitTest.structure.TestMethodList","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
