{
  EditorCell_Property editorCell=EditorCell_Property.create(context,new ModelAccessor(){
    public String getText(){
      SNode annotation=ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"key",false),"annotation",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.getString(SLinkOperations.getTarget(it,"annotation",false),"name").equals(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(new _Quotations.QuotationClass_4().createNode(),"classifier",false),"jetbrains.mps.baseLanguage.structure.Annotation"),"name"));
        }
      }
).first();
      if (annotation == null) {
        return "";
      }
      SNode longDescription=ListSequence.fromList(SLinkOperations.getTargets(annotation,"value",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.getString(SLinkOperations.getTarget(it,"key",false),"name").equals("longDescription");
        }
      }
).last();
      if (longDescription == null) {
        return "";
      }
      String longDescriptionString=SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(longDescription,"value",true),"jetbrains.mps.baseLanguage.structure.StringLiteral"),"value");
      return longDescriptionString;
    }
    public void setText(    String s){
    }
    public boolean isValidText(    String s){
      return EqualUtil.equals(s,this.getText());
    }
  }
,node);
  editorCell.setAction(CellActionType.DELETE,new CellAction_Empty());
  setupBasic_ReadOnlyModelAccessor_6715_1(editorCell,node,context);
  setupLabel_ReadOnlyModelAccessor_6715_1(editorCell,node,context);
  return editorCell;
}
