{
  super("Show java.util.* References");
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "find java util refrences";
    }
    @Override public String getAdditionalInfo(){
      return "find java util refrences";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x10802efe25aL,"jetbrains.mps.lang.core.structure.BaseConcept");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      for (      SReference ref : node.getReferences()) {
        String targetModelFQName=ref.getTargetSModelReference().getModelName();
        if ("java.util@java_stub".equals(targetModelFQName)) {
          return true;
        }
      }
      return false;
    }
    @Override public void doUpdateInstanceNode(    SNode node){
    }
    @Override public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
