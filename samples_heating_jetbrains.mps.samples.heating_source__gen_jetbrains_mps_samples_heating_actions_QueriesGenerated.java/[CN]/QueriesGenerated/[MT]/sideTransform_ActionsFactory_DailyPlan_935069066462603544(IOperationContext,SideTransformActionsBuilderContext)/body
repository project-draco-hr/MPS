{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL,0x98ce995a7aa66941L,0x4644aa4ce08aec4fL,"jetbrains.mps.samples.heating.structure.DailyPlan").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode ref=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL,0x98ce995a7aa66941L,0xcfa085c9af5e830L,"jetbrains.mps.samples.heating.structure.DailyPlanReference")),null);
      SLinkOperations.setTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0xa7d67633e8d9473bL,0x98ce995a7aa66941L,0x4644aa4ce08aec4fL,0xcfa085c9af881f8L,"customizes"),ref);
      return ref;
    }
    public String getMatchingText(    String pattern){
      return "customizes";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL,0x98ce995a7aa66941L,0x4644aa4ce08aec4fL,"jetbrains.mps.samples.heating.structure.DailyPlan").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL,0x98ce995a7aa66941L,0x4644aa4ce08aec4fL,"jetbrains.mps.samples.heating.structure.DailyPlan").getDeclarationNode(),null));
    }
  }
);
  return result;
}
