{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.heating.structure.DailyPlan"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode ref=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-6352760259037542597l,-7435837320858277567l),935069066462619696l,"jetbrains.mps.samples.heating.structure.DailyPlanReference"),null);
      SLinkOperations.setTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-6352760259037542597l,-7435837320858277567l),5063359128232717391l,935069066462790136l,"customizes"),ref);
      return ref;
    }
    public String getMatchingText(    String pattern){
      return "customizes";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.heating.structure.DailyPlan"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.heating.structure.DailyPlan"),null));
    }
  }
);
  return result;
}
