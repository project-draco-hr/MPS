{
  if (getBuffer().hasPositionsSupport()) {
    TraceInfoGenerationUtil.createPositionInfo(this,node);
    TraceInfoGenerationUtil.createScopeInfo(this,node);
  }
  if (SLinkOperations.getTarget(node,"loopLabel",true) != null) {
    this.appendNewLine();
    this.append(SPropertyOperations.getString(SLinkOperations.getTarget(node,"loopLabel",true),"name"));
    this.append(":");
  }
 else   if (SPropertyOperations.getString(node,"label") != null) {
    this.appendNewLine();
    this.append(SPropertyOperations.getString(node,"label"));
    this.append(":");
  }
  this.appendNewLine();
  this.indentBuffer();
  this.append("for (");
  if ((SLinkOperations.getTarget(node,"variable",true) != null)) {
    appendNode(SLinkOperations.getTarget(node,"variable",true));
  }
  for (  SNode additionalVar : SLinkOperations.getTargets(node,"additionalVar",true)) {
    this.append(", ");
    appendNode(additionalVar);
  }
  this.append("; ");
  if ((SLinkOperations.getTarget(node,"condition",true) != null)) {
    appendNode(SLinkOperations.getTarget(node,"condition",true));
  }
  this.append(";");
  if (ListSequence.fromList(SLinkOperations.getTargets(node,"iteration",true)).isNotEmpty()) {
    this.append(" ");
  }
{
    Iterable<SNode> collection=SLinkOperations.getTargets(node,"iteration",true);
    final SNode lastItem=Sequence.fromIterable(collection).last();
    for (    SNode item : collection) {
      appendNode(item);
      if (item != lastItem) {
        append(", ");
      }
    }
  }
  this.append(") {");
  this.increaseDepth();
  appendNode(SLinkOperations.getTarget(node,"body",true));
  this.decreaseDepth();
  this.appendNewLine();
  this.appendWithIndent("}");
  if (getBuffer().hasPositionsSupport()) {
{
      String traceableProperty="";
      try {
        traceableProperty=BehaviorReflection.invokeVirtual(String.class,SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.TraceableConcept"),"virtual_getTraceableProperty_5067982036267369901",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate traceable prorerty for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillPositionInfo(this,node,traceableProperty);
    }
{
      List<SNode> scopeVariables=new ArrayList<SNode>();
      try {
        scopeVariables=BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.cast(node,"jetbrains.mps.lang.traceable.structure.ScopeConcept"),"virtual_getScopeVariables_5067982036267369894",new Object[]{});
      }
 catch (      Throwable t) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Can't calculate scope variables for a node " + node + ".",t);
        }
      }
      TraceInfoGenerationUtil.fillScopeInfo(this,node,scopeVariables);
    }
  }
}
