{
  Set<SNode> result=SetSequence.fromSet(new HashSet<SNode>());
  Iterable<SNode> implementList;
  if (SNodeOperations.isInstanceOf(((SNode)thisConcept),"jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
    implementList=ListSequence.fromList(SLinkOperations.getTargets(((SNode)thisConcept),"implements",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"intfc",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SConceptOperations.isSubConceptOf(((SNode)it),"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation") && (SConceptOperations.isSuperConceptOf(((SNode)it),NameUtil.nodeFQName(((SNode)thisConcept))));
      }
    }
);
  }
 else {
    SetSequence.fromSet(result).addElement(BehaviorReflection.invokeVirtualStatic((Class<SNode>)((Class)Object.class),SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode)thisConcept))),"virtual_getApplicableType_5994574781955586127",new Object[]{}));
    implementList=ListSequence.fromList(SLinkOperations.getTargets(((SNode)thisConcept),"extends",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,"intfc",false);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SConceptOperations.isSubConceptOf(((SNode)it),"jetbrains.mps.baseLanguage.collections.structure.IContainerOperation") && (SConceptOperations.isSuperConceptOf(((SNode)it),NameUtil.nodeFQName(((SNode)thisConcept))));
      }
    }
);
  }
  for (  SNode impl : Sequence.fromIterable(implementList)) {
    SetSequence.fromSet(result).addSequence(SetSequence.fromSet(IApplicableToNothing_Behavior.call_getAllApplicableTypes_5994574781955687463(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode)impl))))));
  }
  return result;
}
