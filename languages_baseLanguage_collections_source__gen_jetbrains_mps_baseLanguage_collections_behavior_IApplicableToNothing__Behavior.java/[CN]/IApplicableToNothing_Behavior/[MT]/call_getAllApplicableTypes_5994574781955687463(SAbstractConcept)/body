{
  Set<SNode> result=SetSequence.fromSet(new HashSet<SNode>());
  List<SNode> implementList;
  SNode thisc=SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName());
  if (SNodeOperations.isInstanceOf(thisc,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,"jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
    implementList=ListSequence.fromList(SLinkOperations.getChildren(((SNode)thisc),MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979ba0450L,0x110358d693eL,"implements"))).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x110356fc618L,0x110356fe029L,"intfc"));
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return IApplicableToNothing_Behavior.call_hasApplicableTypes_2142237368811537351(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName())),it);
      }
    }
).toListSequence();
  }
 else {
    SetSequence.fromSet(result).addSequence(ListSequence.fromList(BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>)((Class)Object.class),SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName())),"virtual_getApplicableTypes_5994574781955586127",new Object[]{})));
    implementList=ListSequence.fromList(SLinkOperations.getChildren(((SNode)thisc),MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103556dcafL,0x110356e9df4L,"extends"))).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x110356fc618L,0x110356fe029L,"intfc"));
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return IApplicableToNothing_Behavior.call_hasApplicableTypes_2142237368811537351(SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName())),it);
      }
    }
).toListSequence();
  }
  for (  SNode impl : ListSequence.fromList(implementList)) {
    SNode conceptNode=impl;
    SetSequence.fromSet(result).addSequence(ListSequence.fromList(BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>)((Class)Object.class),SNodeOperations.asSConcept(((SNode)conceptNode)),"virtual_getApplicableTypes_5994574781955586127",new Object[]{})));
  }
  return result;
}
