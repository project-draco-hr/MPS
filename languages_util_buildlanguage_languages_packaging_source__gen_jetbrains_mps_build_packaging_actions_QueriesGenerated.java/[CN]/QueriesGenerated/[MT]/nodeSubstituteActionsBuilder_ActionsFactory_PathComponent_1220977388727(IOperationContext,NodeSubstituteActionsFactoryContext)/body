{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.packaging.structure.PathComponent");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          File baseDir=new File(Path_Behavior.call_getPathUntilCurrent_55204148067303513(SNodeOperations.cast(SNodeOperations.getParent(_context.getParentNode()),"jetbrains.mps.build.packaging.structure.Path"),_context.getCurrentTargetNode()));
          boolean inRootDir=false;
          File[] suggestFiles=baseDir.listFiles();
          if (suggestFiles == null) {
            inRootDir=true;
            suggestFiles=File.listRoots();
            if (suggestFiles.length == 1 && suggestFiles[0].getAbsolutePath().equals("/")) {
              suggestFiles=suggestFiles[0].listFiles();
            }
          }
          SNode abstractProjectComponent=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.build.packaging.structure.AbstractProjectComponent",true,false);
          final boolean isFile=(abstractProjectComponent == null ? true : SConceptPropertyOperations.getBoolean(abstractProjectComponent,"acceptFiles"));
          return Sequence.fromIterable(Sequence.fromArray(suggestFiles)).where(new IWhereFilter<File>(){
            public boolean accept(            File it){
              return it.exists() && (isFile || it.isDirectory());
            }
          }
).select(new ISelector<File,String>(){
            public String select(            File it){
              return (String)it.getName();
            }
          }
).union(Sequence.fromIterable((inRootDir ? Sequence.fromIterable(Collections.<String>emptyList()) : Sequence.<String>singleton("..")))).toListSequence();
        }
      }
;
      Iterable<String> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode pathComponent=SNodeFactoryOperations.createNewNode("jetbrains.mps.build.packaging.structure.PathComponent",null);
              SPropertyOperations.set(pathComponent,"path",(item));
              return pathComponent;
            }
          }
);
        }
      }
    }
  }
  return result;
}
