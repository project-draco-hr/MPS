{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
  final String no_macro;
{
    Computable calc=new Computable(){
      public Object compute(){
        return "no macro";
      }
    }
;
    no_macro=(String)calc.compute();
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.packaging.structure.MacroReference");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          List<String> allMacroNames=IMacroHolder_Behavior.call_getAllMacroNames_1234975567387(SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.build.packaging.structure.IMacroHolder",true,false),SConceptPropertyOperations.getBoolean(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.build.packaging.structure.IPath"),"canStartFromBasedir"));
          ListSequence.fromList(allMacroNames).addElement(no_macro);
          return allMacroNames;
        }
      }
;
      Iterable<String> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final String item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode macro=SNodeFactoryOperations.createNewNode("jetbrains.mps.build.packaging.structure.MacroReference",null);
              if ((item).equals(no_macro)) {
                SPropertyOperations.set(macro,"name","");
              }
 else {
                SPropertyOperations.set(macro,"name",(item));
              }
              return macro;
            }
          }
);
        }
      }
    }
  }
  return result;
}
