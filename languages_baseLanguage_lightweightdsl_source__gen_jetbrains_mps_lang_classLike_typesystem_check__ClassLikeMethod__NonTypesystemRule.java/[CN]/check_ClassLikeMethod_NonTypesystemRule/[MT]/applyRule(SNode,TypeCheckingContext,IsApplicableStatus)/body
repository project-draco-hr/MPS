{
  ClassLikeMethodErrorNotifier notifier=new ClassLikeMethodErrorNotifier();
  new ClassLikeMethodChecker().checkMethod(method,notifier);
  ClassLikeMethodChecker.ErrorState errorState=notifier.getErrorState();
  if (errorState == ClassLikeMethodChecker.ErrorState.OK) {
    return;
  }
  if (errorState == ClassLikeMethodChecker.ErrorState.REPAIRABLE) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(method,"Method is not in sync with its declaration","c7d5b9dd-a05f-4be2-bc73-f2e16994cc67/r:e04b7053-8c89-4f87-b296-94779c625d9d(jetbrains.mps.lang.classLike/jetbrains.mps.lang.classLike.typesystem)","5777317442205621758",null,errorTarget);
{
        BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("jetbrains.mps.lang.classLike.typesystem.FixMethodAutomatically_QuickFix",true);
        intentionProvider.putArgument("method",method);
        _reporter_2309309498.addIntentionProvider(intentionProvider);
      }
    }
    return;
  }
  if (errorState == ClassLikeMethodChecker.ErrorState.NON_REPAIRABLE) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(method,"Wrong method signature. Can't repair automatically. " + notifier.getErrorMessage(),"c7d5b9dd-a05f-4be2-bc73-f2e16994cc67/r:e04b7053-8c89-4f87-b296-94779c625d9d(jetbrains.mps.lang.classLike/jetbrains.mps.lang.classLike.typesystem)","5777317442205623103",null,errorTarget);
{
        BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("jetbrains.mps.lang.classLike.typesystem.fix_SignatureMismatch_QuickFix",false);
        _reporter_2309309498.addIntentionProvider(intentionProvider);
      }
    }
    return;
  }
}
