{
  Iterable<SNode> methods=SLinkOperations.getChildren(SLinkOperations.getTarget(thisNode,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6b4ccabL,0x114a6b85d40L,"annotation")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,0x101f2cc410bL,"method"));
{
    SNode concept_c0a;
    concept_c0a=kind;
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_c0a),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x114a6a17a27L,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"))) {
      return new NamedElementsScope(methods);
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_c0a),MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x5ce6f8ed8648519aL,"jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind"))) {
      return (Sequence.fromIterable(methods).count() == 1 ? new NamedElementsScope(methods) : new EmptyScope());
    }
  }
  return ScopeUtils.lazyParentScope(thisNode,kind);
}
