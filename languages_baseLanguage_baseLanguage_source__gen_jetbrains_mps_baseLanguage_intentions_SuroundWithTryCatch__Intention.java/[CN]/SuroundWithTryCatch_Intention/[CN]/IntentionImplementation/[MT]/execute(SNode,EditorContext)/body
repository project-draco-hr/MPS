{
  final SNode tryCatchStatement=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TryCatchStatement",null);
  List<SNode> selectedNodes=editorContext.getSelectedNodes();
  SNodeOperations.insertNextSiblingChild(node,tryCatchStatement);
  for (  SNode selectedNode : ListSequence.fromList(selectedNodes)) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(tryCatchStatement,"body",true),"statement",true)).addElement(SNodeOperations.getAncestor(selectedNode,"jetbrains.mps.baseLanguage.structure.Statement",true,false));
  }
  Iterable<SNode> caughtExceptions=ListSequence.fromList(SNodeOperations.getAncestors(tryCatchStatement,"jetbrains.mps.baseLanguage.structure.ITryCatchStatement",false)).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),it,"virtual_getCatchClauses_3718132079121388582",new Object[]{})).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"throwable",true) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"throwable",true);
        }
      }
).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"type",true) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"type",true);
        }
      }
);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false);
    }
  }
);
  Iterable<SNode> thrownExceptions=ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),SNodeOperations.getAncestor(tryCatchStatement,"jetbrains.mps.baseLanguage.structure.IMethodLike",false,false),"virtual_getThrowableTypes_6204026822016975623",new Object[]{})).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false);
    }
  }
);
  final Iterable<SNode> handledExceptions=Sequence.fromIterable(caughtExceptions).concat(Sequence.fromIterable(thrownExceptions));
  Set<SNode> uncaughtThrowables=StatementList_Behavior.call_uncaughtThrowables_3331512479731115649(SLinkOperations.getTarget(tryCatchStatement,"body",true),false);
  if (SetSequence.fromSet(uncaughtThrowables).isNotEmpty()) {
    ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement,"catchClause",true)).clear();
    SetSequence.fromSet(uncaughtThrowables).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        if (Sequence.fromIterable(handledExceptions).contains(it)) {
          return;
        }
        SNode type=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType",null);
        SLinkOperations.setTarget(type,"classifier",it,false);
        SNode clause=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.CatchClause",null);
        SLinkOperations.setTarget(clause,"throwable",SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration",null),true);
        SLinkOperations.setTarget(SLinkOperations.getTarget(clause,"throwable",true),"type",type,true);
        SPropertyOperations.set(SLinkOperations.getTarget(clause,"throwable",true),"name","e");
        ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement,"catchClause",true)).addElement(clause);
      }
    }
);
    if (ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement,"catchClause",true)).isEmpty()) {
      SNodeFactoryOperations.addNewChild(tryCatchStatement,"catchClause","jetbrains.mps.baseLanguage.structure.CatchClause");
    }
  }
  editorContext.select(SLinkOperations.getTarget(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement,"catchClause",true)).first(),"throwable",true),"type",true));
}
