{
  SNode clas=classToCheck;
  while ((clas != null)) {
    startNewClass(clas);
    for (    SNode m : Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(clas)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return DispatchUtil.isReadyMethod(it);
      }
    }
)) {
      addMethod(m);
    }
    clas=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(clas,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,0x10f6353296dL,"superclass")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"));
  }
  for (  DispatchGroup g : Sequence.fromIterable(MapSequence.fromMap(groups).values())) {
    g.finalize();
  }
  for (  SNode m : Sequence.fromIterable(ClassConcept_Behavior.call_staticMethods_5292274854859435867(classToCheck)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return DispatchUtil.isReadyMethod(it);
    }
  }
)) {
    addMethod(m);
  }
}
