{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_rwbd_a0b=null;
      final Iterable<ITestResource> input=(Iterable<ITestResource>)(Iterable)rawInput;
switch (0) {
case 0:
        if (vars(pa.global()).testListener() == null) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("No test listener provided, stopping")));
          return new IResult.FAILURE(_output_rwbd_a0b);
        }
      monitor.currentProgress().beginWork("Testing",Sequence.fromIterable(input).count() * 100,monitor.currentProgress().workLeft());
    for (    ITestResource resource : Sequence.fromIterable(input)) {
      String fqn=resource.getModule().getModuleName();
      monitor.currentProgress().advanceWork("Testing",1,fqn);
      ProcessBuilder pb=new ProcessBuilder(resource.buildCommandLine());
      try {
        Process process=pb.start();
        UnitTestOutputReader reader=new UnitTestOutputReader(process,vars(pa.global()).testListener());
        int exitCode=reader.start();
        if (exitCode != 0) {
          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Process Exited With Code " + exitCode)));
        }
      }
 catch (      IOException ioe) {
        monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(ioe.getMessage())));
      }
      monitor.currentProgress().advanceWork("Testing",99,fqn);
    }
  monitor.currentProgress().finishWork("Testing");
default :
return new IResult.SUCCESS(_output_rwbd_a0b);
}
}
}
;
}
