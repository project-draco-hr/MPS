{
  StructureAspectDescriptor structureDescriptor=(StructureAspectDescriptor)LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("f3347d8a-0e79-4f35-8ac9-1574f25c986f"),"jetbrains.mps.execution.commands")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
switch (structureDescriptor.internalIndex(c)) {
case 0:
    return props_BuilderBlockStatement;
case 1:
  return props_BuilderParameter;
case 2:
return props_CommandBuilderExpression;
case 3:
return props_CommandDebuggerOperation;
case 4:
return props_CommandDeclaration;
case 5:
return props_CommandMethod;
case 6:
return props_CommandParameterAssignment;
case 7:
return props_CommandParameterDeclaration;
case 8:
return props_CommandParameterReference;
case 9:
return props_CommandPartLengthOperation;
case 10:
return props_CommandPartToListOperation;
case 11:
return props_CommandProcessType;
case 12:
return props_CommandReferenceExpression;
case 13:
return props_CommandType;
case 14:
return props_DebuggerSettingsCommandParameterDeclaration;
case 15:
return props_ExecuteCommandPart;
case 16:
return props_ExplicitCommandParameterDeclaration;
case 17:
return props_KeyValueCommandPart;
case 18:
return props_ListCommandPart;
case 19:
return props_NewProcessBuilderExpression;
case 20:
return props_ProcessBuilderCommandPart;
case 21:
return props_ProcessBuilderCommandPartType;
case 22:
return props_ProcessType;
case 23:
return props_PropertyCommandPart;
case 24:
return props_RedirectOutputExpression;
case 25:
return props_ReportErrorStatement;
case 26:
return props_ReportExecutionError;
case 27:
return props_StartAndWaitOperation;
}
throw new IllegalStateException();
}
