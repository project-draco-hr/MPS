{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0db.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_BuilderBlockStatement;
      }
    break;
case 1:
  if (true) {
    return props_BuilderParameter;
  }
break;
case 2:
if (true) {
return props_CommandBuilderExpression;
}
break;
case 3:
if (true) {
return props_CommandDebuggerOperation;
}
break;
case 4:
if (true) {
return props_CommandDeclaration;
}
break;
case 5:
if (true) {
return props_CommandMethod;
}
break;
case 6:
if (true) {
return props_CommandParameterAssignment;
}
break;
case 7:
if (true) {
return props_CommandParameterDeclaration;
}
break;
case 8:
if (true) {
return props_CommandParameterReference;
}
break;
case 9:
if (true) {
return props_CommandPartLengthOperation;
}
break;
case 10:
if (true) {
return props_CommandPartToListOperation;
}
break;
case 11:
if (true) {
return props_CommandProcessType;
}
break;
case 12:
if (true) {
return props_CommandReferenceExpression;
}
break;
case 13:
if (true) {
return props_CommandType;
}
break;
case 14:
if (true) {
return props_DebuggerSettingsCommandParameterDeclaration;
}
break;
case 15:
if (true) {
return props_ExecuteCommandPart;
}
break;
case 16:
if (true) {
return props_ExplicitCommandParameterDeclaration;
}
break;
case 17:
if (true) {
return props_KeyValueCommandPart;
}
break;
case 18:
if (true) {
return props_ListCommandPart;
}
break;
case 19:
if (true) {
return props_NewProcessBuilderExpression;
}
break;
case 20:
if (true) {
return props_ProcessBuilderCommandPart;
}
break;
case 21:
if (true) {
return props_ProcessBuilderCommandPartType;
}
break;
case 22:
if (true) {
return props_ProcessType;
}
break;
case 23:
if (true) {
return props_PropertyCommandPart;
}
break;
case 24:
if (true) {
return props_RedirectOutputExpression;
}
break;
case 25:
if (true) {
return props_ReportErrorStatement;
}
break;
case 26:
if (true) {
return props_ReportExecutionError;
}
break;
case 27:
if (true) {
return props_StartAndWaitOperation;
}
break;
default :
}
}
throw new IllegalStateException();
}
