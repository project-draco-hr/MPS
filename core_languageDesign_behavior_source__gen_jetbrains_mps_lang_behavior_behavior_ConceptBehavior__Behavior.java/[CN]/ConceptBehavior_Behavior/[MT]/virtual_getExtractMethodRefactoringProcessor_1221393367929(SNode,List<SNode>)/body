{
  AbstractExtractMethodRefactoringProcessor result=new AbstractExtractMethodRefactoringProcessor(thisNode,nodesToExtract){
    public SNode createMethodCall(    SNode declaration,    List<SNode> arguments){
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall",null);
        SLinkOperations.setTarget(call,"baseMethodDeclaration",SNodeOperations.cast(declaration,"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"),false);
        ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
        SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
        SLinkOperations.setTarget(result,"operand",SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ThisNodeExpression",null),true);
        SLinkOperations.setTarget(result,"operation",call,true);
        return result;
      }
      if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration")) {
        SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall",null);
        SLinkOperations.setTarget(call,"baseMethodDeclaration",SNodeOperations.cast(declaration,"jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration"),false);
        ListSequence.fromList(SLinkOperations.getTargets(call,"actualArgument",true)).addSequence(ListSequence.fromList(arguments));
        SLinkOperations.setTarget(call,"concept",SLinkOperations.getTarget(SNodeOperations.cast(this.myNode,"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"concept",false),false);
        return call;
      }
      return null;
    }
  }
;
  return result;
}
