{
  return new AbstractStaticContainerProcessor(node){
    public SNode createNewMethod(    VisibilityLevel visiblity,    SNode type,    String name,    List<SNode> params,    SNode body){
      SNode method=SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration",null);
      SLinkOperations.setTarget(method,"visibility",visiblity.getNode(),true);
      SLinkOperations.setTarget(method,"returnType",type,true);
      SPropertyOperations.set(method,"name",name);
      SLinkOperations.addAll(method,"parameter",params);
      SLinkOperations.setTarget(method,"body",body,true);
      return method;
    }
    public SNode createMethodCall(    SNode method,    List<SNode> arguments){
      SNode call=SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall",null);
      SLinkOperations.setTarget(call,"baseMethodDeclaration",((SNode)method),false);
      SLinkOperations.setTarget(call,"concept",SLinkOperations.getTarget(((SNode)this.myStaticContainer),"concept",false),false);
      SLinkOperations.addAll(call,"actualArgument",arguments);
      return call;
    }
  }
;
}
