{
  List<SNode> newChildren=null;
  String newIds=null;
  if (verbose) {
    newChildren=IterableUtil.asList(getParent(true).getChildren(myRole));
    newIds=IterableUtils.join(ListSequence.fromList(newChildren).page(myResultBegin,myResultEnd).select(new ISelector<SNode,String>(){
      public String select(      SNode n){
        return "#" + n.getNodeId();
      }
    }
),", ");
  }
  String oldStuff=(myEnd - myBegin == 1 ? getRole() : NameUtil.formatNumericalString(myEnd - myBegin,getRole()));
  String newStuff=(myResultEnd - myResultBegin == 1 ? getRole() : NameUtil.formatNumericalString(myResultEnd - myResultBegin,getRole()));
  if (eq_yjf6x2_a0a7a82(newStuff,getRole()) && eq_yjf6x2_a0a7a82_0(oldStuff,getRole())) {
    newStuff="another";
  }
 else   if (myEnd != myBegin) {
    newStuff="another " + newStuff;
  }
  if (myEnd == myBegin) {
    if (verbose) {
      String addedOrInserted=(myResultEnd == ListSequence.fromList(newChildren).count() ? "Added" : "Inserted");
      return String.format("%s %s: %s",addedOrInserted,newStuff,newIds);
    }
 else {
      return String.format("Added %s",newStuff);
    }
  }
  if (myResultEnd == myResultBegin) {
    return String.format("Removed %s",oldStuff);
  }
  if (verbose) {
    return String.format("Replaced %s with %s: %s",oldStuff,newStuff,newIds);
  }
 else {
    return String.format("Replaced %s with %s",oldStuff,newStuff);
  }
}
