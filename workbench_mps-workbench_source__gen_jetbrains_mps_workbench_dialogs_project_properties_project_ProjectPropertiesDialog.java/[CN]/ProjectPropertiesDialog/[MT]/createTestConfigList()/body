{
  final JBList list=new JBList(new ProjectPropertiesDialog.TestConfigListModel());
  list.setCellRenderer(new TestConfigListCellRenderer());
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(list);
  decorator.setAddAction(new AnActionButtonRunnable(){
    public void run(    AnActionButton button){
      TestConfigurationDialog dialog=new TestConfigurationDialog(getMPSProject(),null);
      dialog.show();
      BaseTestConfiguration config=dialog.getResult();
      if (config == null) {
        return;
      }
      ((ProjectPropertiesDialog.TestConfigListModel)list.getModel()).addTestConfig(config);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    public void run(    AnActionButton button){
      ((ProjectPropertiesDialog.TestConfigListModel)list.getModel()).removeTestConfig(list.getSelectedValue());
    }
  }
).disableUpAction().disableDownAction().setEditAction(new AnActionButtonRunnable(){
    public void run(    AnActionButton button){
      Object value=list.getSelectedValue();
      if (value == null) {
        return;
      }
      TestConfigurationDialog dialog=new TestConfigurationDialog(getMPSProject(),(BaseTestConfiguration)value);
      dialog.show();
      BaseTestConfiguration config=dialog.getResult();
      if (config == null) {
        return;
      }
      ((ProjectPropertiesDialog.TestConfigListModel)list.getModel()).removeTestConfig(value);
      ((ProjectPropertiesDialog.TestConfigListModel)list.getModel()).addTestConfig(config);
    }
  }
);
  decorator.setPreferredSize(new Dimension(300,150));
  JPanel panel=decorator.createPanel();
  panel.setBorder(IdeBorderFactory.createTitledBorder("Test Configurations",false));
  return panel;
}
