{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0xc.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myBuildCompositePath__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myBuildExternalDependency__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myBuildExternalLayout__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myBuildExternalLayoutDependency__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myBuildFolderMacro__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myBuildInputFiles__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myBuildInputSingleFile__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myBuildInputSingleFolder__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myBuildJavaPlugin__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myBuildLayout__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myBuildLayout_AbstractContainer__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myBuildLayout_AbstractCopy__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myBuildLayout_CompileOutputOf__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myBuildLayout_Container__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myBuildLayout_ContainerAcceptingFileSet__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myBuildLayout_Copy__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myBuildLayout_CopyProcessor__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myBuildLayout_CustomCopy__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myBuildLayout_EchoProperties__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myBuildLayout_EchoXml__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myBuildLayout_ExportAsJavaLibrary__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myBuildLayout_File__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myBuildLayout_FileSet__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myBuildLayout_FileStub__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myBuildLayout_Filemode__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myBuildLayout_Files__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myBuildLayout_Folder__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myBuildLayout_Import__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myBuildLayout_ImportContent__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myBuildLayout_InJarNode__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myBuildLayout_Jar__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myBuildLayout_JarManifest__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myBuildLayout_JarManifest_Attribute__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myBuildLayout_NamedContainer__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myBuildLayout_Node__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myBuildLayout_PathElement__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myBuildLayout_Tar__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myBuildLayout_TransparentContainer__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myBuildLayout_War__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myBuildLayout_Zip__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myBuildMacro__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myBuildNamedLayout__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myBuildPlugin__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myBuildProject__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myBuildProjectDependency__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myBuildRelativePath__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myBuildSourceArchiveRelativePath__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myBuildSourceMacroRelativePath__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return myBuildSourcePath__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myBuildSourceProjectRelativePath__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myBuildSource_JavaCP__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myBuildSource_JavaContentFolder__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myBuildSource_JavaDependencyExternalJar__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myBuildSource_JavaDependencyExternalJarInFolder__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myBuildSource_JavaDependencyLibrary__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myBuildSource_JavaDependencyModule__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myBuildSource_JavaExternalJarFolderRef__BehaviorDescriptor;
}
break;
case 57:
if (true) {
return myBuildSource_JavaExternalJarRef__BehaviorDescriptor;
}
break;
case 58:
if (true) {
return myBuildSource_JavaLibrary__BehaviorDescriptor;
}
break;
case 59:
if (true) {
return myBuildSource_JavaLibraryExternalJar__BehaviorDescriptor;
}
break;
case 60:
if (true) {
return myBuildSource_JavaLibraryExternalJarFolder__BehaviorDescriptor;
}
break;
case 61:
if (true) {
return myBuildSource_JavaModule__BehaviorDescriptor;
}
break;
case 62:
if (true) {
return myBuildSource_SingleFile__BehaviorDescriptor;
}
break;
case 63:
if (true) {
return myBuildSource_SingleFolder__BehaviorDescriptor;
}
break;
case 64:
if (true) {
return myBuildString__BehaviorDescriptor;
}
break;
case 65:
if (true) {
return myBuildStringContainer__BehaviorDescriptor;
}
break;
case 66:
if (true) {
return myBuildStringPart__BehaviorDescriptor;
}
break;
case 67:
if (true) {
return myBuildTextStringPart__BehaviorDescriptor;
}
break;
case 68:
if (true) {
return myBuildVarRefStringPart__BehaviorDescriptor;
}
break;
case 69:
if (true) {
return myBuildVariableMacro__BehaviorDescriptor;
}
break;
case 70:
if (true) {
return myBuildVariableMacroInitValue__BehaviorDescriptor;
}
break;
case 71:
if (true) {
return myIWorkflowParticipant__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
