{
  super("buildScript migration");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "wow";
    }
    public String getAdditionalInfo(){
      return "wow";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.build.structure.BuildLayout_NamedContainer";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SNodeOperations.getChildren(node)).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildStringPart");
        }
      }
);
    }
    public void doUpdateInstanceNode(    final SNode node){
      Iterable<SNode> seq=ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildStringPart");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildStringPart");
        }
      }
).toListSequence();
      Sequence.fromIterable(seq).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          node.removeChild(it);
        }
      }
);
      SLinkOperations.setNewChild(node,"containerName","jetbrains.mps.build.structure.BuildStringNotEmpty");
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"containerName",true),"parts",true)).addSequence(Sequence.fromIterable(seq));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "wow2";
    }
    public String getAdditionalInfo(){
      return "wow2";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.build.structure.BuildVariableMacro";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return ListSequence.fromList(SNodeOperations.getChildren(node)).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildStringPart");
        }
      }
);
    }
    public void doUpdateInstanceNode(    final SNode node){
      Iterable<SNode> seq=ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildStringPart");
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildStringPart");
        }
      }
).toListSequence();
      Sequence.fromIterable(seq).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          node.removeChild(it);
        }
      }
);
      SLinkOperations.setNewChild(node,"value","jetbrains.mps.build.structure.BuildString");
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node,"value",true),"parts",true)).addSequence(Sequence.fromIterable(seq));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
