{
  try {
    final SNode newClass=SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(ClassLikeDescriptor_Behavior.call_getPreferredConcept_1825613483881161085(NewClassLike_Action.this.descr)),null);
    AttributeOperations.setAttribute(newClass,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation"),SConceptOperations.createNewNode("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation",null));
    SLinkOperations.setTarget(AttributeOperations.getAttribute(newClass,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation")),"descriptor",NewClassLike_Action.this.descr,false);
    ListSequence.fromList(SLinkOperations.getTargets(NewClassLike_Action.this.descr,"member",true)).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        BehaviorReflection.invokeVirtual(Void.class,it,"virtual_init_6478870542308635887",new Object[]{newClass});
      }
    }
);
    if (!(NewRootNodeAction.trySelectInCurrentPane(((Project)MapSequence.fromMap(_params).get("project")),newClass))) {
      ProjectOperationContext context=new ProjectOperationContext(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")));
      NavigationSupport.getInstance().selectInTree(context,newClass,false);
    }
    NavigationSupport.getInstance().openNode(((IOperationContext)MapSequence.fromMap(_params).get("context")),newClass,true,false);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "NewClassLike",t);
    }
  }
}
