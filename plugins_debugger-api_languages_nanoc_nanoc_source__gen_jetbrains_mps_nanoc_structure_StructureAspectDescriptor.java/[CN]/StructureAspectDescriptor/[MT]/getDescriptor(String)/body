{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CAssignmentExpression").super_("jetbrains.mps.nanoc.structure.CExpression").parents("jetbrains.mps.nanoc.structure.CExpression").children(new String[]{"value","variable"},new boolean[]{false,false}).create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CBinaryOp").super_("jetbrains.mps.nanoc.structure.CExpression").parents("jetbrains.mps.nanoc.structure.CExpression").children(new String[]{"left","right"},new boolean[]{false,false}).abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CBody").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"statement"},new boolean[]{true}).create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CChar").super_("jetbrains.mps.nanoc.structure.CType").parents("jetbrains.mps.nanoc.structure.CType").alias("char","").create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CDouble").super_("jetbrains.mps.nanoc.structure.CType").parents("jetbrains.mps.nanoc.structure.CType").alias("double","").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CExpressionStatement").super_("jetbrains.mps.nanoc.structure.CStatement").parents("jetbrains.mps.nanoc.structure.CStatement").children(new String[]{"expression"},new boolean[]{false}).create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CFloat").super_("jetbrains.mps.nanoc.structure.CType").parents("jetbrains.mps.nanoc.structure.CType").alias("float","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CFor").super_("jetbrains.mps.nanoc.structure.CStatement").parents("jetbrains.mps.nanoc.structure.CStatement").children(new String[]{"initial","condition","iteration","body"},new boolean[]{false,false,false,false}).alias("for","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CInt").super_("jetbrains.mps.nanoc.structure.CType").parents("jetbrains.mps.nanoc.structure.CType").alias("int","").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CLong").super_("jetbrains.mps.nanoc.structure.CType").parents("jetbrains.mps.nanoc.structure.CType").alias("long","").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CParenthesis").super_("jetbrains.mps.nanoc.structure.CExpression").parents("jetbrains.mps.nanoc.structure.CExpression").children(new String[]{"innerExpression"},new boolean[]{false}).alias("( ... )","nanoc parenthesis").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CShort").super_("jetbrains.mps.nanoc.structure.CType").parents("jetbrains.mps.nanoc.structure.CType").alias("short","").create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.traceable.structure.TraceableConcept").abstract_().create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.CWhile").super_("jetbrains.mps.nanoc.structure.CStatement").parents("jetbrains.mps.nanoc.structure.CStatement").children(new String[]{"condition","body"},new boolean[]{false,false}).alias("while","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.DivOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("/","").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.EqualOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("==","").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.File").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.traceable.structure.UnitConcept").children(new String[]{"body"},new boolean[]{false}).create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.GreaterEqOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias(">=","").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.GreaterOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias(">","").create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.IntConst").super_("jetbrains.mps.nanoc.structure.CExpression").parents("jetbrains.mps.nanoc.structure.CExpression").properties("value").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.LessEqOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("<=","").create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.LessOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("<","").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.MinusOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("-","").create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.MultOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("*","").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.PlusOp").super_("jetbrains.mps.nanoc.structure.CBinaryOp").parents("jetbrains.mps.nanoc.structure.CBinaryOp").alias("+","").create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.VarDecl").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"initializer"},new boolean[]{false}).create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.VarDeclStatement").super_("jetbrains.mps.nanoc.structure.CStatement").parents("jetbrains.mps.nanoc.structure.CStatement").children(new String[]{"varDecl","type"},new boolean[]{true,false}).create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.nanoc.structure.VarRef").super_("jetbrains.mps.nanoc.structure.CExpression").parents("jetbrains.mps.nanoc.structure.CExpression").references("declaration").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
