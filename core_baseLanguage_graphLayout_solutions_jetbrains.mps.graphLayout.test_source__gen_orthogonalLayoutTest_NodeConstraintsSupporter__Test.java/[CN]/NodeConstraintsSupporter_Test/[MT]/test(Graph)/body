{
  EmbeddedGraph embeddedGraph=new TreeEmbeddingFinder().find(graph);
  System.out.println(embeddedGraph);
  Node s=ListSequence.fromList(embeddedGraph.getOuterFace().getDarts()).getElement(0).getSource();
  Node t=ListSequence.fromList(embeddedGraph.getOuterFace().getDarts()).getElement(0).getTarget();
  GraphOrientation.orientST(graph,s,t);
  System.out.println(graph);
  STPlanarGraph stPlanarGraph=new STPlanarGraph(embeddedGraph,s,t);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    System.out.println("node " + node + " left "+ stPlanarGraph.getLeftFace(node));
  }
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    System.out.println("node " + node + " right "+ stPlanarGraph.getRightFace(node));
  }
  Map<Node,Integer> x=new NodeMap<Integer>(graph);
  Map<Node,Integer> y=new NodeMap<Integer>(graph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    if (node.isDummy()) {
      MapSequence.fromMap(x).put(node,0);
      MapSequence.fromMap(y).put(node,0);
    }
 else {
      MapSequence.fromMap(x).put(node,5);
      MapSequence.fromMap(y).put(node,5);
    }
  }
  Map<Object,Rectangle> rep=new NodeConstraintsSupporter().getRepresentation(stPlanarGraph,x,y);
  for (  Object object : SetSequence.fromSet(MapSequence.fromMap(rep).keySet())) {
    System.out.println("!!!" + object);
    System.out.println(MapSequence.fromMap(rep).get(object));
  }
  NodeConstraintsChecker.check(graph,rep,x,y);
}
