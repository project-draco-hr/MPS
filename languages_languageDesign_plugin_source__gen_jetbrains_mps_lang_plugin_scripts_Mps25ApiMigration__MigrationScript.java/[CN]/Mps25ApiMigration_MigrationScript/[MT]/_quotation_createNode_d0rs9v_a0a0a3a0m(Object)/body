{
  SNode quotedNode_2=null;
  SNode quotedNode_3=null;
  SNode quotedNode_4=null;
  SNode quotedNode_5=null;
  quotedNode_2=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_3=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator",null,null,GlobalScope.getInstance(),false);
  quotedNode_3.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",quotedNode_3,SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.util(JDK/java.util@java_stub)"),SNodeId.fromString("~ArrayList.<init>(java.util.Collection)")));
  quotedNode_4=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType",null,null,GlobalScope.getInstance(),false);
  quotedNode_4.setReference("classifier",SReference.create("classifier",quotedNode_4,SModelReference.fromString("f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)"),SNodeId.fromString("~SNode")));
  quotedNode_3.addChild("typeParameter",quotedNode_4);
  quotedNode_5=(SNode)parameter_1;
  if (quotedNode_5 != null) {
    quotedNode_3.addChild("actualArgument",HUtil.copyIfNecessary(quotedNode_5));
  }
  quotedNode_2.addChild("creator",quotedNode_3);
  return quotedNode_2;
}
