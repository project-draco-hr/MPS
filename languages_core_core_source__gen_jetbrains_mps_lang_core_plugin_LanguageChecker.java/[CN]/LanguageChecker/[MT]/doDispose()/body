{
  for (  LanguageErrorsComponent comp : MapSequence.fromMap(myNodePointersToComponents).values()) {
    comp.dispose();
  }
  for (  EditorComponent component : myEditorComponents) {
    component.removeDisposeListener(myDisposeListener);
  }
  SModelRepository.getInstance().removeModelRepositoryListener(myRepositoryListener);
  for (  SModelDescriptor modelDescriptor : SetSequence.<SModelDescriptor>fromSetWithValues(new HashSet<SModelDescriptor>(),myListenedModels)) {
    removeModelListener(modelDescriptor);
  }
  super.doDispose();
}
