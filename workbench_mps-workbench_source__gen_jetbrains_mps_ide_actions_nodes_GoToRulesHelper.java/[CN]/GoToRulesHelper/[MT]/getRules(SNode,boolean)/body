{
  Language language=getDeclaringLanguage(concept);
  if (language == null) {
    return Collections.emptyList();
  }
  EditableSModel typesystem=LanguageAspect.TYPESYSTEM.get(language);
  if (typesystem == null) {
    return Collections.emptyList();
  }
  SModel typesystemModel=((SModel)typesystem).getSModel();
  if (typesystemModel == null) {
    return Collections.emptyList();
  }
  List<SNode> rules=ListSequence.fromList(SModelOperations.getRoots(typesystemModel,"jetbrains.mps.lang.typesystem.structure.AbstractRule")).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode node){
      return isApplicable(node,concept,exactConcept);
    }
  }
).toListSequence();
  List<SNode> overriding=ListSequence.fromList(rules).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(it,"jetbrains.mps.lang.typesystem.structure.InferenceRule");
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(it,"jetbrains.mps.lang.typesystem.structure.InferenceRule");
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SPropertyOperations.getBoolean(it,"overrides");
    }
  }
).toListSequence();
  for (  SNode overridingRule : overriding) {
    final SNode subConcept=getApplicableConcept(SLinkOperations.getTarget(overridingRule,"applicableNode",true));
    ListSequence.fromList(rules).removeWhere(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return getApplicableConcept(it) == subConcept;
      }
    }
);
  }
  return rules;
}
