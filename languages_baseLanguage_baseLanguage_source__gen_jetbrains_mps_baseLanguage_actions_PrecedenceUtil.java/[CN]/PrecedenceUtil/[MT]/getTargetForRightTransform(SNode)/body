{
  SNode targetNode=contextNode;
  for (SNode parentNode=SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode,"jetbrains.mps.baseLanguage.structure.Expression"); parentNode=SNodeOperations.getParent(targetNode)) {
    if (SNodeOperations.isInstanceOf(parentNode,"jetbrains.mps.baseLanguage.structure.IMethodCall") || SNodeOperations.isInstanceOf(parentNode,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
      break;
    }
    SNode targetContainingLink=SNodeOperations.getContainingLinkDeclaration(targetNode);
    if (SNodeOperations.isInstanceOf(parentNode,"jetbrains.mps.baseLanguage.structure.BinaryOperation") && targetContainingLink == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation","leftExpression")) {
      break;
    }
    if (SNodeOperations.isInstanceOf(parentNode,"jetbrains.mps.baseLanguage.structure.DotExpression") && targetContainingLink == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression","operand")) {
      break;
    }
    targetNode=SNodeOperations.cast(parentNode,"jetbrains.mps.baseLanguage.structure.Expression");
  }
  return targetNode;
}
