{
  SNode nodeToProcess=PrecedenceUtil.getTargetForLeftTransform(sourceNode,result);
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(nodeToProcess),"jetbrains.mps.baseLanguage.structure.BinaryOperation") && SNodeOperations.getContainingLinkDeclaration(nodeToProcess) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation","rightExpression")) {
    SNode parentBinaryOperation=SNodeOperations.cast(SNodeOperations.getParent(nodeToProcess),"jetbrains.mps.baseLanguage.structure.BinaryOperation");
    if (PrecedenceUtil.isSamePriority(parentBinaryOperation,result)) {
      SNodeOperations.replaceWithAnother(parentBinaryOperation,result);
      SLinkOperations.setTarget(result,"rightExpression",nodeToProcess,true);
      SLinkOperations.setTarget(result,"leftExpression",parentBinaryOperation,true);
      return result;
    }
  }
  SNodeOperations.replaceWithAnother(nodeToProcess,result);
  SLinkOperations.setTarget(result,"rightExpression",nodeToProcess,true);
  PrecedenceUtil.parenthesiseIfNecessary(result);
  return result;
}
