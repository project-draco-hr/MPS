{
  super("Add missing parentheses to CastExpressions");
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "Find CastExpressions with required but missing parens around their nested expressions and add them";
    }
    @Override public String getAdditionalInfo(){
      return "Find CastExpressions with required but missing parens around their nested expressions and add them";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940dabe4aL,"jetbrains.mps.baseLanguage.structure.CastExpression");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940dabe4aL,0xf940dabe4cL,"expression")),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression"))) && PrecedenceUtil.needsParensAroundCastExpression(node);
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SNode expression=SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf940dabe4aL,0xf940dabe4cL,"expression"));
      SNode result=SNodeFactoryOperations.replaceWithNewChild(expression,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")));
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,0xfb4ed32b80L,"expression"),expression);
    }
    @Override public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
