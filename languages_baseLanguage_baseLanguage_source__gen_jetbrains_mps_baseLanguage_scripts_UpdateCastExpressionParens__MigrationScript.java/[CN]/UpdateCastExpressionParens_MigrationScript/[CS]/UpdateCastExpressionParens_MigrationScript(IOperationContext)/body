{
  super("Add missing parentheses to CastExpressions");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Find CastExpressions with required but missing parens around their nested expressions and add them";
    }
    public String getAdditionalInfo(){
      return "Find CastExpressions with required but missing parens around their nested expressions and add them";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.CastExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1070534934090l,1070534934092l,"expression")),"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) && PrecedenceUtil.needsParensAroundCastExpression(node);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode expression=SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1070534934090l,1070534934092l,"expression"));
      SNode result=SNodeFactoryOperations.replaceWithNewChild(expression,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
      SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1079359253375l,1079359253376l,"expression"),expression);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
