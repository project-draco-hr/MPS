{
  List<SNode> resultList=new ArrayList<SNode>();
  Iterable<SNode> nodesAndComments=AttributeOperations.getChildNodesAndAttributes(myOwnerNode,myLink);
  if (!myIsReverseOrder) {
    resultList.addAll(IterableUtil.asCollection(nodesAndComments));
  }
 else {
    List<? extends SNode> children=IterableUtil.copyToList(nodesAndComments);
    Collections.reverse(children);
    resultList.addAll(children);
  }
  Iterator<SNode> it=resultList.iterator();
  while (it.hasNext()) {
    SNode next=it.next();
    SNode nodeToFilter=next;
    if (CommentUtil.isComment(next)) {
      nodeToFilter=CommentUtil.getCommentedNode(next);
    }
    if (!filter(nodeToFilter)) {
      it.remove();
    }
  }
  return resultList;
}
