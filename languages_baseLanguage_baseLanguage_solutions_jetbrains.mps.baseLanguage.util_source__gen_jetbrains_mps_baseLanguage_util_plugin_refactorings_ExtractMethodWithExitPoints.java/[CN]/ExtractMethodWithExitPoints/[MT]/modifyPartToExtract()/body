{
  SNode ret=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,"jetbrains.mps.baseLanguage.structure.ReturnStatement"));
  SNode constant=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b201L,"jetbrains.mps.baseLanguage.structure.BooleanConstant"));
  SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b201L,0xf8cc56b202L,"value"),"" + (false));
  SLinkOperations.setTarget(ret,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,0xf8cc6bf96cL,"expression"),constant);
  ListSequence.fromList(this.myStatements).addElement(SNodeOperations.copyNode(ret));
  SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b201L,0xf8cc56b202L,"value"),"" + (true));
  for (  SNode exitPoint : ListSequence.fromList(this.myAnalyzer.getIntenalExitPoints())) {
    SNodeOperations.replaceWithAnother(exitPoint,SNodeOperations.copyNode(ret));
  }
}
