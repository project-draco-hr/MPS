{
  SNode ret=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242878l,"jetbrains.mps.baseLanguage.structure.ReturnStatement"));
  SNode constant=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123137l,"jetbrains.mps.baseLanguage.structure.BooleanConstant"));
  SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123137l,1068580123138l,"value"),"" + (false));
  SLinkOperations.setTarget(ret,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068581242878l,1068581517676l,"expression"),constant);
  ListSequence.fromList(this.myStatements).addElement(SNodeOperations.copyNode(ret));
  SPropertyOperations.set(constant,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068580123137l,1068580123138l,"value"),"" + (true));
  for (  SNode exitPoint : ListSequence.fromList(this.myAnalyzer.getIntenalExitPoints())) {
    SNodeOperations.replaceWithAnother(exitPoint,SNodeOperations.copyNode(ret));
  }
}
