{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.nanoj.structure.DotExpression");
    result.add(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode dotConceptInstance=SConceptOperations.createNewNode("jetbrains.mps.nanoj.structure.DotExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),dotConceptInstance);
        SLinkOperations.setTarget(dotConceptInstance,"leftPart",_context.getSourceNode(),true);
        return dotConceptInstance;
      }
      public String getMatchingText(      String pattern){
        return ". dot";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
