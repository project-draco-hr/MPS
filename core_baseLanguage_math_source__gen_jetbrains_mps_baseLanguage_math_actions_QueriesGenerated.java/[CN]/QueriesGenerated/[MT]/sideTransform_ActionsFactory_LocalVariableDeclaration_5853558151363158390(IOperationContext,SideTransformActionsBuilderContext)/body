{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode lso=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation",null);
        do {
          SNode matchedNode_fo7if3_b0a0a0=SLinkOperations.getTarget(_context.getSourceNode(),"type",true);
{
            boolean matches_fo7if3_a1a0a0a=false;
{
              SNode matchingNode_fo7if3_a1a0a0a=SLinkOperations.getTarget(_context.getSourceNode(),"type",true);
              if (matchingNode_fo7if3_a1a0a0a != null) {
                matches_fo7if3_a1a0a0a=SModelUtil_new.isAssignableConcept(matchingNode_fo7if3_a1a0a0a.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.MatrixType");
              }
            }
            if (matches_fo7if3_a1a0a0a) {
              SLinkOperations.setTarget(lso,"type",SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),"type",true),"jetbrains.mps.baseLanguage.math.structure.MatrixType"),true);
              break;
            }
          }
{
            boolean matches_fo7if3_b1a0a0a=false;
{
              SNode matchingNode_fo7if3_b1a0a0a=SLinkOperations.getTarget(_context.getSourceNode(),"type",true);
              if (matchingNode_fo7if3_b1a0a0a != null) {
                matches_fo7if3_b1a0a0a=SModelUtil_new.isAssignableConcept(matchingNode_fo7if3_b1a0a0a.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.VectorType");
              }
            }
            if (matches_fo7if3_b1a0a0a) {
              SLinkOperations.setTarget(lso,"type",SNodeOperations.cast(SLinkOperations.getTarget(_context.getSourceNode(),"type",true),"jetbrains.mps.baseLanguage.math.structure.VectorType"),true);
              break;
            }
          }
        }
 while (false);
        SPropertyOperations.set(lso,"name",SPropertyOperations.getString(_context.getSourceNode(),"name"));
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),lso);
        return SLinkOperations.getTarget(lso,"matrix",true);
      }
      public String getMatchingText(      String pattern){
        return ":";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "Initialize as a vector satisfying linear equation";
      }
    }
);
  }
  return result;
}
