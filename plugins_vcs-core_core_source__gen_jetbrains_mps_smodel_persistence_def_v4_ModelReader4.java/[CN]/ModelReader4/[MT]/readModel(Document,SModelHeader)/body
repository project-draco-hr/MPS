{
  SModelVersionsInfo versionsInfo=new SModelVersionsInfo();
  Element rootElement=document.getRootElement();
  SModelReference modelReference=PersistenceFacade.getInstance().createModelReference(rootElement.getAttributeValue(ModelPersistence.MODEL_UID));
  DefaultSModel model=new DefaultSModel(modelReference,header);
  List languages=rootElement.getChildren(ModelPersistence.LANGUAGE);
  for (  Object language : languages) {
    Element element=(Element)language;
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    new SModelLegacy(model).addLanguage(PersistenceFacade.getInstance().createModuleReference(languageNamespace));
    List<Element> aspectElements=element.getChildren(ModelPersistence.LANGUAGE_ASPECT);
    readLanguageAspects(model,aspectElements);
  }
  List<Element> aspectElements=rootElement.getChildren(ModelPersistence.LANGUAGE_ASPECT);
  readLanguageAspects(model,aspectElements);
  List languagesEOG=rootElement.getChildren(ModelPersistence.LANGUAGE_ENGAGED_ON_GENERATION);
  for (  Object languageEOG : languagesEOG) {
    Element element=(Element)languageEOG;
    String languageNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addEngagedOnGenerationLanguage(PersistenceFacade.getInstance().createModuleReference(languageNamespace));
  }
  List devkits=rootElement.getChildren(ModelPersistence.DEVKIT);
  for (  Object devkit : devkits) {
    Element element=(Element)devkit;
    String devkitNamespace=element.getAttributeValue(ModelPersistence.NAMESPACE);
    model.addDevKit(PersistenceFacade.getInstance().createModuleReference(devkitNamespace));
  }
  List imports=rootElement.getChildren(ModelPersistence.IMPORT_ELEMENT);
  for (  Object anImport : imports) {
    Element element=(Element)anImport;
    String indexValue=element.getAttributeValue(ModelPersistence.MODEL_IMPORT_INDEX,element.getAttributeValue("referenceID"));
    int importIndex=Integer.parseInt(indexValue);
    String importedModelUIDString=element.getAttributeValue(ModelPersistence.MODEL_UID);
    if (importedModelUIDString == null) {
      importedModelUIDString=getLegacyImportedModelUIDString(element);
    }
    if (importedModelUIDString == null) {
      LOG.error("Error loading import element for index " + importIndex + " in "+ model.getReference());
      continue;
    }
    SModelReference importedModelReference=PersistenceFacade.getInstance().createModelReference(importedModelUIDString);
    model.addModelImport(new SModel.ImportElement(importedModelReference,importIndex,-1));
  }
  ArrayList<IReferencePersister> referenceDescriptors=new ArrayList<IReferencePersister>();
  readRefactorings(rootElement,model);
  List children=rootElement.getChildren(ModelPersistence.NODE);
  for (  Object child : children) {
    Element element=(Element)child;
    SNode snode=readNode(element,model,referenceDescriptors,false,versionsInfo);
    if (snode != null) {
      model.addRootNode(snode);
    }
  }
  VisibleModelElements visibleModelElements=new DOMVisibleModelElements(rootElement);
  for (  IReferencePersister referencePersister : referenceDescriptors) {
    referencePersister.createReferenceInModel(model,visibleModelElements);
  }
  return model;
}
