{
  if (ListSequence.fromList(SNodeOperations.getAncestors(pastedNode,"jetbrains.mps.baseLanguage.structure.ClassifierMember",false)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(ClassifierMember_Behavior.call_isStatic_8986964027630462944(it));
    }
  }
).isEmpty()) {
    return;
  }
  SNode containingClass=SNodeOperations.getAncestor(pastedNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  if (containingClass == null) {
    return;
  }
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(pastedNode),"jetbrains.mps.baseLanguage.structure.DotExpression")) {
    SNode parentDotExpression=(SNode)SNodeOperations.getParent(pastedNode);
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(parentDotExpression,"operation",true),"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
      SNode fieldReferenceOperation=(SNode)SLinkOperations.getTarget(parentDotExpression,"operation",true);
      SReference fieldDeclarationReference=SNodeOperations.getReference(fieldReferenceOperation,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation","fieldDeclaration"));
      final String resolveInfo=SLinkOperations.getResolveInfo(fieldDeclarationReference);
      List<SNode> possibleClassConcepts=new ArrayList<SNode>();
      for (SNode clazz=containingClass; clazz != null; clazz=(Classifier_Behavior.call_isStatic_521412098689998668(clazz) ? null : SNodeOperations.getAncestor(clazz,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false))) {
        ListSequence.fromList(possibleClassConcepts).addElement(clazz);
      }
      for (      SNode nextClassConcept : ListSequence.fromList(possibleClassConcepts)) {
        if (ListSequence.fromList(Classifier_Behavior.call_getVisibleMembers_1213877306257(nextClassConcept,pastedNode,IClassifiersSearchScope.INSTANCE_FIELD)).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return SNodeOperations.as(it,"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
          }
        }
).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return resolveInfo.equals(SPropertyOperations.getString(it,"name"));
          }
        }
).isNotEmpty()) {
          if (nextClassConcept != containingClass) {
            SLinkOperations.setTarget(pastedNode,"classConcept",nextClassConcept,false);
          }
 else           if (SNodeOperations.getReference(pastedNode,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression","classConcept")) != null) {
            SReference reference=SNodeOperations.getReference(pastedNode,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression","classConcept"));
            SLinkOperations.setTarget(pastedNode,"classConcept",null,false);
            reference.setRole(null);
          }
          break;
        }
      }
    }
  }
}
