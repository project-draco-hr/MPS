{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_xor3la_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ModelPlusImportedScope(_context.getModel(),false,MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL,0x84036750153aa615L,0x5ae6ebde781f8014L,"jetbrains.mps.execution.configurations.structure.BeforeTaskParameter"));
        }
      }
;
    }
  }
);
  return references;
}
