{
  GenerationSessionContext generationContext=generator.getGeneratorSessionContext();
  String modelsLongName=inputModel.getLongName();
  SModel currentInputModel=inputModel;
  List<MappingScript> preMappingScripts=generationContext.getPreMappingScripts();
  if (!preMappingScripts.isEmpty()) {
    boolean needToCloneInputMode=!myDiscardTransients;
    if (!needToCloneInputMode) {
      for (      MappingScript preMappingScript : preMappingScripts) {
        if (preMappingScript.getScriptKind() == MappingScriptKind.pre_process_input_model) {
          if (preMappingScript.getModifiesModel()) {
            needToCloneInputMode=true;
            break;
          }
        }
      }
    }
    if (needToCloneInputMode) {
      SModel currentInputModel_clone=createTransientModel(modelsLongName);
      addMessage(MessageKind.INFORMATION,"clone model '" + currentInputModel.getUID() + "' --> '"+ currentInputModel_clone.getUID()+ "'");
      CloneUtil.cloneModel(currentInputModel,currentInputModel_clone,generator.getScope());
      if (!myDiscardTransients) {
        generationContext.getGenerationTracer().registerPreMappingScripts(currentInputModel,currentInputModel_clone,preMappingScripts);
      }
      recycleWasteModel(currentInputModel);
      currentInputModel=currentInputModel_clone;
    }
  }
  for (  MappingScript preMappingScript : preMappingScripts) {
    if (preMappingScript.getScriptKind() != MappingScriptKind.pre_process_input_model) {
      addMessage(MessageKind.WARNING,"skip script '" + preMappingScript + "' ("+ preMappingScript.getModel().getUID()+ ") - wrong script kind");
      continue;
    }
    addMessage(MessageKind.INFORMATION,"pre-process '" + preMappingScript + "' ("+ preMappingScript.getModel().getUID()+ ")");
    GeneratorUtil.executeMappingScript(preMappingScript,currentInputModel,generator);
  }
  SModel currentOutputModel=createTransientModel(modelsLongName);
  generationContext.getGenerationTracer().startTracing(currentInputModel,currentOutputModel);
  currentInputModel.setLoading(false);
  boolean somethingHasBeenGenerated=generator.doPrimaryMapping(currentInputModel,currentOutputModel);
  if (!somethingHasBeenGenerated) {
    currentOutputModel.validateLanguagesAndImports();
    recycleWasteModel(currentInputModel);
    return currentOutputModel;
  }
  int secondaryMappingRepeatCount=1;
  while (true) {
    currentOutputModel.validateLanguagesAndImports();
    addMessage(MessageKind.INFORMATION,"generating model '" + currentOutputModel.getUID() + "'");
    generationContext.clearTransientObjects();
    SModel transientModel=createTransientModel(modelsLongName);
    recycleWasteModel(currentInputModel);
    currentInputModel=currentOutputModel;
    currentInputModel.setLoading(false);
    generationContext.getGenerationTracer().startTracing(currentInputModel,transientModel);
    if (!generator.doSecondaryMapping(currentInputModel,transientModel)) {
      generationContext.getGenerationTracer().discardTracing(currentInputModel,transientModel);
      addMessage(MessageKind.INFORMATION,"remove empty model '" + transientModel.getUID() + "'");
      SModelRepository.getInstance().removeModelDescriptor(transientModel.getModelDescriptor());
      myTransientModelsCount--;
      break;
    }
    if (++secondaryMappingRepeatCount > 10) {
      generator.showErrorMessage(null,"failed to generate output after 10 repeated mappings");
      if (generationContext.getGenerationTracer().hasTracebackData(transientModel.getUID())) {
        generator.showErrorMessage(null,"last rules applied:");
        List<Pair<SNode,SNode>> pairs=generationContext.getGenerationTracer().getAllAppiedRulesWithInputNodes(transientModel.getUID());
        for (        Pair<SNode,SNode> pair : pairs) {
          generator.showErrorMessage(pair.o1,"rule: " + pair.o1.getDebugText());
          generator.showErrorMessage(pair.o2,"-- input: " + (pair.o2 != null ? pair.o2.getDebugText() : "n/a"));
        }
      }
 else {
        generator.showErrorMessage(null,"to get more diagnostic generate model with the 'save transient models' option");
      }
      throw new GenerationFailedException("failed to generate output after 10 repeated mappings");
    }
    currentOutputModel=transientModel;
  }
  currentOutputModel.setLoading(true);
  List<MappingScript> postMappingScripts=generationContext.getPostMappingScripts();
  if (!postMappingScripts.isEmpty() && !myDiscardTransients) {
    SModel currentOutputModel_clone=createTransientModel(modelsLongName);
    addMessage(MessageKind.INFORMATION,"clone model '" + currentOutputModel.getUID() + "' --> '"+ currentOutputModel_clone.getUID()+ "'");
    CloneUtil.cloneModel(currentOutputModel,currentOutputModel_clone,generator.getScope());
    generationContext.getGenerationTracer().registerPostMappingScripts(currentOutputModel,currentOutputModel_clone,postMappingScripts);
    currentOutputModel=currentOutputModel_clone;
  }
  for (  MappingScript postMappingScript : postMappingScripts) {
    if (postMappingScript.getScriptKind() != MappingScriptKind.post_process_output_model) {
      addMessage(MessageKind.WARNING,"skip script '" + postMappingScript + "' ("+ postMappingScript.getModel().getUID()+ ") - wrong script kind");
      continue;
    }
    addMessage(MessageKind.INFORMATION,"post-process '" + postMappingScript + "' ("+ postMappingScript.getModel().getLongName()+ ")");
    GeneratorUtil.executeMappingScript(postMappingScript,currentOutputModel,generator);
  }
  return currentOutputModel;
}
