{
  myRoot=node;
  myMerger=merger;
  final SNode[] change1Node=new SNode[1];
  final SNode[] resultNode=new SNode[1];
  final SNode[] change2Node=new SNode[1];
  merger.rebuldResultModel();
  final SModel resultModel=merger.getResultModel();
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      change1Node[0]=myChange1Model.getNodeById(node.getSNodeId());
      resultNode[0]=resultModel.getNodeById(node.getSNodeId());
      change2Node[0]=myChange2Model.getNodeById(node.getSNodeId());
    }
  }
);
  myTopComponent=new JPanel(new GridLayout(1,3));
  myBottomComponent=new JPanel(new GridLayout(1,3));
  for (  Change conflict : merger.getConflictingChanges()) {
    conflict.setError(true);
  }
  myChange1EditorComponent=addEditor(myContext,change1Node[0],"My Changes");
  myResultEditorComponent=addEditor(myContext,resultNode[0],"Merge Result");
  myChange2EditorComponent=addEditor(myContext,change2Node[0],"Repository Changes");
  rebuildChangeBlocks();
  JSplitPane modelsPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,myTopComponent,myBottomComponent);
  modelsPane.setResizeWeight(1);
  myContainer=new JPanel(new BorderLayout());
  myContainer.add(modelsPane);
  myContainer.add(createControlsPanel(),BorderLayout.PAGE_START);
}
