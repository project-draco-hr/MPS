{
  try {
    final List<SNode> nodes=new ArrayList<SNode>();
    ListSequence.fromList(nodes).addElement(((SNode)MapSequence.fromMap(_params).get("node")));
    SearchResults<SNode> results;
    if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.Interface")) {
      results=FindUtils.getSearchResults(new EmptyProgressMonitor(),((SNode)MapSequence.fromMap(_params).get("node")),GlobalScope.getInstance(),"jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");
    }
 else     if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.ClassConcept") && SPropertyOperations.getBoolean(SNodeOperations.cast(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.ClassConcept"),"abstractClass")) {
      results=FindUtils.getSearchResults(new EmptyProgressMonitor(),((SNode)MapSequence.fromMap(_params).get("node")),GlobalScope.getInstance(),"jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");
    }
 else     if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(((SNode)MapSequence.fromMap(_params).get("node"))),"jetbrains.mps.baseLanguage.structure.Interface")) {
      results=FindUtils.getSearchResults(new EmptyProgressMonitor(),((SNode)MapSequence.fromMap(_params).get("node")),GlobalScope.getInstance(),"jetbrains.mps.baseLanguage.findUsages.InterfaceMethodImplementations_Finder");
    }
 else     if (SNodeOperations.isInstanceOf(((SNode)MapSequence.fromMap(_params).get("node")),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(((SNode)MapSequence.fromMap(_params).get("node"))),"jetbrains.mps.baseLanguage.structure.Classifier")) {
      results=FindUtils.getSearchResults(new EmptyProgressMonitor(),((SNode)MapSequence.fromMap(_params).get("node")),GlobalScope.getInstance(),"jetbrains.mps.baseLanguage.findUsages.DerivedMethods_Finder");
    }
 else {
      return;
    }
    for (    SearchResult<SNode> searchResult : results.getSearchResults()) {
      SNode foundNode=searchResult.getObject();
      if ((foundNode != null)) {
        ListSequence.fromList(nodes).addElement(foundNode);
      }
    }
    final Project project=((Project)MapSequence.fromMap(_params).get("project"));
    ModelAccess.instance().runWriteActionInCommandAsync(new Runnable(){
      public void run(){
        String title="Definition of " + ((SNode)MapSequence.fromMap(_params).get("node")).getPresentation();
        final ShowImplementationComponent component=new ShowImplementationComponent(nodes,((IOperationContext)MapSequence.fromMap(_params).get("context")));
        JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component.getPrefferedFocusableComponent()).setRequestFocus(true).setProject(((Project)MapSequence.fromMap(_params).get("project"))).setMovable(true).setResizable(true).setTitle(title).setCancelCallback(new Computable<Boolean>(){
          public Boolean compute(){
            ModelAccess.instance().runCommandInEDT(new Runnable(){
              public void run(){
                component.dispose();
              }
            }
,ProjectHelper.toMPSProject(project));
            return Boolean.TRUE;
          }
        }
).createPopup();
        popup.show(new RelativePoint(((EditorCell)MapSequence.fromMap(_params).get("cell")).getEditor(),new Point(((EditorCell)MapSequence.fromMap(_params).get("cell")).getX(),((EditorCell)MapSequence.fromMap(_params).get("cell")).getY())));
        component.getPrefferedFocusableComponent().setRequestFocusEnabled(true);
        component.setPopup(popup);
      }
    }
,(project != null ? project.getComponent(MPSProject.class) : null));
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "ShowImplementations",t);
  }
}
