{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("call",new BaseReferenceConstraintsDescriptor("call",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(),null,true,true),"jetbrains.mps.buildlanguage.structure.AbstractCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return (SPropertyOperations.getString(it,"name") != null && SPropertyOperations.getString(it,"name").length() > 0);
            }
          }
);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_vtj1k2_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
