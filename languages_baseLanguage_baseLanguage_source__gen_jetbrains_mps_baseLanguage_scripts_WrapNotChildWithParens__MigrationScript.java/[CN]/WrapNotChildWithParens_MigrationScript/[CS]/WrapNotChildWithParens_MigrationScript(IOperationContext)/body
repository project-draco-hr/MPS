{
  super("Wrap Not Expression Child with Parentheses");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Find Not Expressions and wrap their child expression in parentheses, if needed";
    }
    public String getAdditionalInfo(){
      return "Find Not Expressions and wrap their child expression in parentheses, if needed";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.structure.NotExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return PrecedenceUtil.needsParensAroundNotExpression(node);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode childExpr=SLinkOperations.getTarget(node,"expression",true);
      SNode parens=SNodeFactoryOperations.replaceWithNewChild(childExpr,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
      SLinkOperations.setTarget(parens,"expression",childExpr,true);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
