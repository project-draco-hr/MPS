{
  super("Wrap Not Expression Child with Parentheses");
  this.addRefactoring(new AbstractMigrationRefactoring(){
    @Override public String getName(){
      return "Find Not Expressions and wrap their child expression in parentheses, if needed";
    }
    @Override public String getAdditionalInfo(){
      return "Find Not Expressions and wrap their child expression in parentheses, if needed";
    }
    @Override public SAbstractConcept getApplicableConcept(){
      return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbcf6bd10dL,"jetbrains.mps.baseLanguage.structure.NotExpression");
    }
    @Override public boolean isApplicableInstanceNode(    SNode node){
      return PrecedenceUtil.needsParensAroundNotExpression(node);
    }
    @Override public void doUpdateInstanceNode(    SNode node){
      SNode childExpr=SLinkOperations.getTarget(node,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbcf6bd10dL,0xfbcf6c30a4L,"expression"));
      SNode parens=SNodeFactoryOperations.replaceWithNewChild(childExpr,SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")));
      SLinkOperations.setTarget(parens,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfb4ed32b7fL,0xfb4ed32b80L,"expression"),childExpr);
    }
    @Override public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
