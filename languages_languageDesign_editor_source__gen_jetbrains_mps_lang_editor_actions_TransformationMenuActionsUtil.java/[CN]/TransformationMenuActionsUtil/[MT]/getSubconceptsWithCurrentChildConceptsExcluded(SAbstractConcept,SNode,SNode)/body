{
  Iterable<SAbstractConcept> subConcepts=ListSequence.fromList(SConceptOperations.getAllSubConcepts(concept,SNodeOperations.getModel(parentNode))).where(new IWhereFilter<SAbstractConcept>(){
    public boolean accept(    SAbstractConcept it){
      return !(it.isAbstract());
    }
  }
);
  Iterable<SConcept> currentConcepts=((Iterable<SConcept>)ListSequence.fromList(SNodeOperations.getChildren(parentNode,currentTargetNode.getContainmentLink())).select(new ISelector<SNode,SConcept>(){
    public SConcept select(    SNode it){
      return SNodeOperations.getConcept(it);
    }
  }
).where(new IWhereFilter<SConcept>(){
    public boolean accept(    SConcept it){
      return neq_wnuenf_a0a0a0a0a0a0a1a0(it,SNodeOperations.getConcept(currentTargetNode));
    }
  }
));
  return Sequence.fromIterable(subConcepts).subtract(Sequence.fromIterable(currentConcepts));
}
