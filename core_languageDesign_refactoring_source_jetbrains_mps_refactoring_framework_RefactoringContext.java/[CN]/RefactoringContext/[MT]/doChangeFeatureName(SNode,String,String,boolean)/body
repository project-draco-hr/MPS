{
  BaseAdapter adapter=feature.getAdapter();
  String oldConceptFQName="";
  String oldFeatureName="";
  ConceptFeatureKind kind=ConceptFeatureKind.NONE;
  RenameType renameType=null;
  if (adapter instanceof LinkDeclaration) {
    LinkDeclaration linkDeclaration=(LinkDeclaration)adapter;
    oldConceptFQName=NameUtil.nodeFQName(linkDeclaration.getParent());
    oldFeatureName=linkDeclaration.getRole();
    if (linkDeclaration.getMetaClass() == LinkMetaclass.aggregation) {
      kind=ConceptFeatureKind.CHILD;
      renameType=RenameType.CHILD;
    }
 else {
      kind=ConceptFeatureKind.REFERENCE;
      renameType=RenameType.REFERENCE;
    }
    if (delete) {
      linkDeclaration.delete();
    }
 else {
      if (newFeatureName != null && !newFeatureName.equals(oldFeatureName)) {
        linkDeclaration.setRole(newFeatureName);
      }
    }
  }
  if (adapter instanceof PropertyDeclaration) {
    oldConceptFQName=NameUtil.nodeFQName(adapter.getParent());
    oldFeatureName=adapter.getName();
    kind=ConceptFeatureKind.PROPERTY;
    renameType=RenameType.PROPERTY;
    if (delete) {
      adapter.delete();
    }
 else {
      if (newFeatureName != null && !newFeatureName.equals(oldFeatureName)) {
        feature.setName(newFeatureName);
      }
    }
  }
  if (adapter instanceof AbstractConceptDeclaration) {
    oldConceptFQName=NameUtil.nodeFQName(adapter);
    oldFeatureName=adapter.getName();
    kind=ConceptFeatureKind.CONCEPT;
    renameType=RenameType.CONCEPT;
    if (delete) {
      adapter.delete();
    }
 else {
      if (newFeatureName != null && !newFeatureName.equals(oldFeatureName)) {
        feature.setName(newFeatureName);
      }
    }
  }
  if (kind != ConceptFeatureKind.NONE) {
    myData.addToConceptFeatureMap(kind,oldConceptFQName,oldFeatureName,newConceptFQName,delete ? null : newFeatureName);
    myLoggedData.getData().add(new RenameNode(new SNodePointer(feature),renameType,newFeatureName,oldFeatureName));
  }
}
