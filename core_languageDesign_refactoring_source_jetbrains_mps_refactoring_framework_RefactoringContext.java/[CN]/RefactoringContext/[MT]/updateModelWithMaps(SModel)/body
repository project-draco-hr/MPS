{
  assert myCachesAreUpToDate;
  for (  SNode node : model.allNodes()) {
    String conceptFQName=node.getConceptFqName();
    Set<ConceptFeature> exactConceptFeatures=myFQNamesToConceptFeaturesCache.get(conceptFQName);
    if (exactConceptFeatures != null) {
      for (      ConceptFeature conceptFeature : exactConceptFeatures) {
        ConceptFeature newConceptFeature=myConceptFeatureMap.get(conceptFeature);
        ConceptFeatureKind kind=conceptFeature.getConceptFeatureKind();
        if (kind == ConceptFeatureKind.CONCEPT) {
          if (newConceptFeature == null) {
            node.delete();
          }
 else {
            String newConceptFQName=newConceptFeature.getConceptFQName();
            HackSNodeUtil.setConceptFqName(node,newConceptFQName);
          }
        }
      }
    }
    Set<ConceptFeature> allConceptFeatures=new HashSet<ConceptFeature>();
    if (exactConceptFeatures != null) {
      allConceptFeatures.addAll(exactConceptFeatures);
    }
    Language l;
    l=SModelUtil_new.getDeclaringLanguage(node.getConceptFqName(),GlobalScope.getInstance());
    if (l == null) {
      LOG.warning("language for node " + node.toString() + " is null; concept is "+ node.getConceptFqName());
      continue;
    }
    for (    String parentConceptFQName : l.getAncestorsNames(conceptFQName)) {
      Set<ConceptFeature> conceptFeatures=myFQNamesToConceptFeaturesCache.get(parentConceptFQName);
      if (conceptFeatures != null) {
        allConceptFeatures.addAll(conceptFeatures);
      }
    }
    for (    ConceptFeature conceptFeature : allConceptFeatures) {
      ConceptFeature newConceptFeature=myConceptFeatureMap.get(conceptFeature);
      boolean delete=newConceptFeature == null;
      ConceptFeatureKind kind=conceptFeature.getConceptFeatureKind();
      if (kind == ConceptFeatureKind.REFERENCE) {
        String oldRole=conceptFeature.getFeatureName();
        String newRole=null;
        if (!delete) {
          newRole=newConceptFeature.getFeatureName();
        }
        for (        SReference reference : node.getReferences()) {
          if (reference.getRole().equals(oldRole)) {
            if (delete) {
              node.removeReference(reference);
            }
 else {
              reference.setRole(newRole);
            }
          }
        }
        for (        SNode linkAttribute : node.getLinkAttributesForLinkRole(oldRole)) {
          if (delete) {
            linkAttribute.delete();
          }
 else {
            String linkAttributeRole=AttributesRolesUtil.getFeatureAttributeRoleFromChildRole(linkAttribute.getRole_());
            linkAttribute.setRoleInParent(AttributesRolesUtil.childRoleFromLinkAttributeRole(linkAttributeRole,newRole));
          }
        }
      }
      if (kind == ConceptFeatureKind.CHILD) {
        String oldRole=conceptFeature.getFeatureName();
        String newRole=null;
        if (!delete) {
          newRole=newConceptFeature.getFeatureName();
        }
        for (        SNode child : new ArrayList<SNode>(node.getChildren())) {
          String childRole=child.getRole_();
          if (childRole != null && childRole.equals(oldRole)) {
            if (delete) {
              child.delete();
            }
 else {
              child.setRoleInParent(newRole);
            }
          }
        }
      }
      if (kind == ConceptFeatureKind.PROPERTY) {
        String oldName=conceptFeature.getFeatureName();
        String newName=null;
        if (!delete) {
          newName=newConceptFeature.getFeatureName();
          HackSNodeUtil.changePropertyName(node,oldName,newName);
        }
 else {
          node.setProperty(oldName,null,false);
        }
        for (        SNode propertyAttribute : node.getPropertyAttributesForPropertyName(oldName)) {
          if (delete) {
            propertyAttribute.delete();
          }
 else {
            String propertyAttributeRole=AttributesRolesUtil.getFeatureAttributeRoleFromChildRole(propertyAttribute.getRole_());
            propertyAttribute.setRoleInParent(AttributesRolesUtil.childRoleFromPropertyAttributeRole(propertyAttributeRole,newName));
          }
        }
      }
    }
    for (    SReference reference : node.getReferences()) {
      if (reference instanceof StaticReference) {
        StaticReference staticReference=(StaticReference)reference;
        SNodeId id=staticReference.getTargetNodeId();
        Set<FullNodeId> ids=myNodeIdsToFullNodeIdsCache.get(id);
        if (ids != null) {
          for (          FullNodeId fullNodeId : ids) {
            FullNodeId newFullNodeId=myMoveMap.get(fullNodeId);
            if (fullNodeId.getModelUID().equals(staticReference.getTargetSModelReference())) {
              staticReference.setTargetSModelReference(newFullNodeId.getModelUID());
              staticReference.setTargetNodeId(newFullNodeId.getNodeId());
            }
          }
        }
      }
    }
  }
}
