{
  report(MessageKind.INFORMATION,"started: " + SPropertyOperations.getString(executable,"name"),null);
  EvaluationEnvironment env=new EvaluationEnvironment(){
    @Override public void report(    int kind,    String message,    SNode hintNode){
      WorkflowRunner.this.report((kind == KIND_ERR ? MessageKind.ERROR : MessageKind.WARNING),message,hintNode);
    }
  }
;
  EvaluationContext rootContext=new EvaluationContext(null,null);
  for (  SNode st : SLinkOperations.getTargets(executable,"statements",true)) {
    if (SNodeOperations.isInstanceOf(st,"jetbrains.mps.workflow.structure.WflowExpressionStatement")) {
      try {
        SNode exprst=SNodeOperations.cast(st,"jetbrains.mps.workflow.structure.WflowExpressionStatement");
        Object result=MqlExpression_Behavior.call_evaluate_1671449901154581105(SLinkOperations.getTarget(exprst,"expression",true),env,rootContext);
        String asString=env.getRuntime().objectDebugText(result);
        report(MessageKind.INFORMATION,SPropertyOperations.getString(exprst,"varname") + " = " + asString,null);
      }
 catch (      Exception ex) {
        Throwable thr=unwrap(ex);
        report(MessageKind.ERROR,thr.toString(),(thr instanceof EvaluationException ? ((EvaluationException)thr).getQuery() : null));
      }
    }
  }
}
