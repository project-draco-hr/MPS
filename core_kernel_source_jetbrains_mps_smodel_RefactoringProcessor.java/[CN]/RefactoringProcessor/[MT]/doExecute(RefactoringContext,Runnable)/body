{
  final ILoggableRefactoringOld refactoring=refactoringContext.getRefactoring();
  final Map<IModule,List<SModel>> moduleToModelsMap=ModelAccess.instance().runReadAction(new Computable<Map<IModule,List<SModel>>>(){
    public Map<IModule,List<SModel>> compute(){
      return refactoring.getModelsToGenerate(refactoringContext);
    }
  }
);
  final SModelDescriptor modelDescriptor=refactoringContext.getSelectedModel();
  final SModelReference initialModelReference=modelDescriptor.getSModelReference();
  Runnable runnable=new Runnable(){
    public void run(){
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          refactoring.doRefactor(refactoringContext);
        }
      }
);
      final List<SNode> nodesToOpen=ModelAccess.instance().runReadAction(new Computable<List<SNode>>(){
        public List<SNode> compute(){
          return refactoring.getNodesToOpen(refactoringContext);
        }
      }
);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          for (          SNode nodeToOpen : nodesToOpen) {
            IOperationContext context=refactoringContext.getCurrentOperationContext();
            context.getComponent(MPSEditorOpener.class).editNode(nodeToOpen,context);
          }
        }
      }
);
      MPSProject mpsProject=refactoringContext.getSelectedMPSProject();
      ProgressManager.getInstance().run(new Modal(mpsProject.getComponent(Project.class),"Updating models...",false){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          indicator.pushState();
          try {
            indicator.setIndeterminate(true);
            ModelAccess.instance().runWriteAction(new Runnable(){
              public void run(){
                updateModels(modelDescriptor,refactoringContext,refactoring,initialModelReference);
              }
            }
);
          }
  finally {
            indicator.popState();
          }
        }
      }
);
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (moduleToModelsMap != null && !moduleToModelsMap.isEmpty()) {
            ProgressManager.getInstance().run(new Modal(refactoringContext.getCurrentOperationContext().getComponent(Project.class),"Generation",true){
              public void run(              @NotNull ProgressIndicator progress){
                generateModels(moduleToModelsMap,refactoringContext,progress);
              }
            }
);
            if (continuation != null) {
              continuation.run();
            }
          }
        }
      }
);
    }
  }
;
  ThreadUtils.runInUIThreadNoWait(runnable);
}
