{
  final boolean result[]=new boolean[]{false};
  ThreadUtils.runInUIThreadAndWait(new Runnable(){
    public void run(){
      final boolean[] wasError=new boolean[]{false};
      ProgressManager.getInstance().run(new Modal(refactoringContext.getCurrentOperationContext().getComponent(Project.class),"Finding usages...",false){
        public void run(        @NotNull ProgressIndicator indicator){
          indicator.setIndeterminate(true);
          ModelAccess.instance().runReadAction(new Runnable(){
            public void run(){
              try {
                refactoringContext.setCurrentOperationContext(new ProjectOperationContext(refactoringContext.getSelectedMPSProject()));
                IRefactoring refactoring=refactoringContext.getRefactoring();
                SearchResults usages=refactoring.getAffectedNodes(refactoringContext);
                refactoringContext.setUsages(usages);
              }
 catch (              Throwable t) {
                LOG.error(t);
                wasError[0]=true;
              }
            }
          }
);
        }
      }
);
      if (!wasError[0]) {
        result[0]=true;
        return;
      }
      int promptResult=JOptionPane.showConfirmDialog(MPSDataKeys.FRAME.getData(DataManager.getInstance().getDataContext()),"An exception occurred during searching affected nodes. Do you want to continue anyway?","Exception",JOptionPane.YES_NO_OPTION);
      result[0]=promptResult == JOptionPane.YES_OPTION;
    }
  }
);
  return result[0];
}
