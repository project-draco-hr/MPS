{
  CommandProcessor.instance().executeLightweightCommand(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
    }
  }
);
  AbstractProjectFrame projectFrame=context.get(AbstractProjectFrame.class);
  IAdaptiveProgressMonitor monitor_=new NullAdaptiveProgressMonitor();
  boolean hasMonitor=projectFrame != null;
  if (hasMonitor) {
    monitor_=projectFrame.createAdaptiveProgressMonitor();
  }
  final IAdaptiveProgressMonitor monitor=monitor_;
  final ILoggableRefactoring refactoring=refactoringContext.getRefactoring();
  final String refactoringTaskName="refactoring_" + refactoring.getClass().getName();
  final long estimatedTime=monitor.getEstimatedTime(refactoringTaskName);
  try {
    monitor.start("refactoring",estimatedTime);
    monitor.startLeafTask(refactoringTaskName,"refactoring",estimatedTime);
    Map<IModule,List<SModel>> moduleToModelsMap=CommandProcessor.instance().executeCommand(new Calculable<Map<IModule,List<SModel>>>(){
      public Map<IModule,List<SModel>> calculate(){
        SModelDescriptor modelDescriptor=context.getModel();
        SModelUID initialModelUID=modelDescriptor.getModelUID();
        refactoring.doRefactor(context,refactoringContext);
        SModel model=modelDescriptor.getSModel();
        refactoringContext.computeCaches();
        SearchResults usages=refactoringContext.getUsages();
        Map<IModule,List<SModel>> moduleToModelsMap=refactoring.getModelsToGenerate(context,refactoringContext);
        if (!refactoringContext.isLocal()) {
          if (refactoring.doesUpdateModel()) {
            writeIntoLog(model,refactoringContext);
            for (            SModelDescriptor anotherDescriptor : SModelRepository.getInstance().getAllModelDescriptors()) {
              String stereotype=anotherDescriptor.getStereotype();
              if (!stereotype.equals(SModelStereotype.NONE) && !stereotype.equals(SModelStereotype.TEMPLATES)) {
                continue;
              }
              if (!anotherDescriptor.isInitialized())               continue;
              SModel anotherModel=anotherDescriptor.getSModel();
              Set<SModelUID> dependenciesModels=anotherModel.getDependenciesModelUIDs();
              if (model != anotherModel && !dependenciesModels.contains(initialModelUID))               continue;
              processModel(anotherModel,model,refactoringContext);
            }
          }
        }
 else {
          if (refactoring.doesUpdateModel() && usages != null) {
            Set<SModel> modelsToProcess=usages.getModelsWithResults();
            for (            List<SModel> sModels : moduleToModelsMap.values()) {
              modelsToProcess.addAll(sModels);
            }
            for (            SModel anotherModel : modelsToProcess) {
              processModel(anotherModel,model,refactoringContext);
            }
          }
        }
        return moduleToModelsMap;
      }
    }
);
    if (moduleToModelsMap != null && !moduleToModelsMap.isEmpty()) {
      generateModels(context,moduleToModelsMap,refactoringContext);
    }
  }
  finally {
    monitor.finishTask();
    monitor.finish();
  }
}
