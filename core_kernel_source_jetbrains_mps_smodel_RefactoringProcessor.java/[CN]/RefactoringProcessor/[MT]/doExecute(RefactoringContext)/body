{
  final IRefactoring refactoring=refactoringContext.getRefactoring();
  final SModelDescriptor modelDescriptor=refactoringContext.getSelectedModel();
  final SModelReference initialModelReference=modelDescriptor.getSModelReference();
  Runnable runnable=new Runnable(){
    public void run(){
      final List<SModel> modelsToGenerate=ModelAccess.instance().runReadAction(new Computable<List<SModel>>(){
        public List<SModel> compute(){
          try {
            return refactoring.getModelsToGenerate(refactoringContext);
          }
 catch (          Throwable t) {
            LOG.error("An error occured while trying to collect models to generate from refactoring " + refactoring.getUserFriendlyName() + ". No models will be generated",t);
            return new ArrayList<SModel>();
          }
        }
      }
);
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          try {
            refactoring.refactor(refactoringContext);
          }
 catch (          Throwable t) {
            LOG.error("An exception occyred while trying to execute refactoring " + refactoring.getUserFriendlyName() + ". Models could have been corrupted.",t);
          }
        }
      }
);
      MPSProject mpsProject=refactoringContext.getSelectedMPSProject();
      if (refactoring instanceof ILoggableRefactoring) {
        ProgressManager.getInstance().run(new Modal(mpsProject.getComponent(Project.class),"Updating models...",false){
          public void run(          @NotNull ProgressIndicator indicator){
            indicator.pushState();
            try {
              indicator.setIndeterminate(true);
              ModelAccess.instance().runWriteAction(new Runnable(){
                public void run(){
                  updateModels(modelDescriptor,refactoringContext,((ILoggableRefactoring)refactoring),initialModelReference);
                }
              }
);
            }
  finally {
              indicator.popState();
            }
          }
        }
);
      }
      if (!modelsToGenerate.isEmpty()) {
        generateModels(modelsToGenerate,refactoringContext);
      }
      try {
        refactoring.doWhenDone(refactoringContext);
      }
 catch (      Throwable t) {
        LOG.error("An error occured in doWhenDone(), refactoring: " + refactoring.getUserFriendlyName(),t);
      }
    }
  }
;
  ThreadUtils.runInUIThreadNoWait(runnable);
}
