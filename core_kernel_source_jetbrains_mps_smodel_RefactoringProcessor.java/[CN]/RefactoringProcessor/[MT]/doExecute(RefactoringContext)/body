{
  final IRefactoring refactoring=refactoringContext.getRefactoring();
  final SModelDescriptor modelDescriptor=refactoringContext.getSelectedModel();
  final SModelReference initialModelReference=modelDescriptor.getSModelReference();
  Runnable runnable=new Runnable(){
    public void run(){
      final List<SModel> modelsToGenerate=ModelAccess.instance().runReadAction(new Computable<List<SModel>>(){
        public List<SModel> compute(){
          return refactoring.getModelsToGenerate(refactoringContext);
        }
      }
);
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        public void run(){
          refactoring.refactor(refactoringContext);
        }
      }
);
      MPSProject mpsProject=refactoringContext.getSelectedMPSProject();
      if (refactoring instanceof ILoggableRefactoring) {
        ProgressManager.getInstance().run(new Modal(mpsProject.getComponent(Project.class),"Updating models...",false){
          public void run(          @NotNull ProgressIndicator indicator){
            indicator.pushState();
            try {
              indicator.setIndeterminate(true);
              ModelAccess.instance().runWriteAction(new Runnable(){
                public void run(){
                  updateModels(modelDescriptor,refactoringContext,((ILoggableRefactoring)refactoring),initialModelReference);
                }
              }
);
            }
  finally {
              indicator.popState();
            }
          }
        }
);
      }
      if (!modelsToGenerate.isEmpty()) {
        generateModels(modelsToGenerate,refactoringContext);
      }
      refactoring.doWhenDone(refactoringContext);
    }
  }
;
  ThreadUtils.runInUIThreadNoWait(runnable);
}
