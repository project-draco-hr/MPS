{
  refactoringContext.setRefactoring(refactoring);
  boolean success=refactoring.askForInfo(refactoringContext);
  if (!success)   return;
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      if (refactoring.showsAffectedNodes()) {
        Thread thread=new Thread(){
          public void run(){
            final boolean toReturn[]=new boolean[]{false};
            ThreadUtils.runInUIThreadAndWait(new Runnable(){
              public void run(){
                final boolean[] wasError=new boolean[]{false};
                ProgressManager.getInstance().run(new Modal(refactoringContext.getCurrentOperationContext().getComponent(Project.class),"Finding usages...",false){
                  public void run(                  @NotNull ProgressIndicator indicator){
                    indicator.setIndeterminate(true);
                    ModelAccess.instance().runReadAction(new Runnable(){
                      public void run(){
                        try {
                          refactoringContext.setCurrentOperationContext(new ProjectOperationContext(refactoringContext.getSelectedMPSProject()));
                          refactoringContext.setUsages(refactoring.getAffectedNodes(refactoringContext));
                        }
 catch (                        Throwable t) {
                          LOG.error(t);
                          wasError[0]=true;
                        }
                      }
                    }
);
                  }
                }
);
                if (wasError[0]) {
                  int promptResult=JOptionPane.showConfirmDialog(MPSDataKeys.FRAME.getData(DataManager.getInstance().getDataContext()),"An exception occurred during searching affected nodes. Do you want to continue anyway?","Exception",JOptionPane.YES_NO_OPTION);
                  toReturn[0]=promptResult == JOptionPane.NO_OPTION;
                }
              }
            }
);
            if (toReturn[0])             return;
            SearchResults usages=refactoringContext.getUsages();
            if (usages == null || (refactoring.refactorImmediatelyIfNoUsages() && usages.getSearchResults().isEmpty())) {
              doExecuteInThread(refactoringContext);
            }
 else {
              ThreadUtils.runInUIThreadNoWait(new Runnable(){
                public void run(){
                  ModelAccess.instance().runReadAction(new Runnable(){
                    public void run(){
                      refactoringContext.getCurrentOperationContext().getComponent(NewRefactoringView.class).showRefactoringView(new LoggableRefactoringViewAction(refactoringContext),refactoringContext.getUsages());
                    }
                  }
);
                }
              }
);
            }
          }
        }
;
        thread.start();
      }
 else {
        doExecuteInThread(refactoringContext);
      }
    }
  }
);
}
