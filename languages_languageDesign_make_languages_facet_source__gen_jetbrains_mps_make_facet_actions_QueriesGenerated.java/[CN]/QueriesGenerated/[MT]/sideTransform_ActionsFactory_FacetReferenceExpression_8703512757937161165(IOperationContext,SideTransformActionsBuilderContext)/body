{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x639ef64ff4850bb0L,0x639ef64ff4850bb2L,"reference")),MetaAdapterFactory.getReferenceLink(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x5979ed6d2b21b2f2L,0x5979ed6d2b21b2f3L,"facet")),MetaAdapterFactory.getContainmentLink(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x5912a2ab1cd24c13L,0x5912a2ab1cd4153eL,"targetDeclaration"));
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x78c916bd7aecaff7L,"jetbrains.mps.make.facet.structure.TargetReferenceExpression").getDeclarationNode(),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode tre=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),MetaAdapterFactory.getConcept(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x78c916bd7aecaff7L,"jetbrains.mps.make.facet.structure.TargetReferenceExpression"));
            SLinkOperations.setTarget(tre,MetaAdapterFactory.getContainmentLink(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x78c916bd7aecaff7L,0x78c916bd7aecc3aeL,"facetRef"),_context.getSourceNode());
            SLinkOperations.setTarget(tre,MetaAdapterFactory.getReferenceLink(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x78c916bd7aecaff7L,0x78c916bd7aecc3bcL,"target"),(item));
            return tre;
          }
          public String getMatchingText(          String pattern){
            return ":" + SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x78c916bd7aecaff7L,"jetbrains.mps.make.facet.structure.TargetReferenceExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x78c916bd7aecaff7L,"jetbrains.mps.make.facet.structure.TargetReferenceExpression").getDeclarationNode(),null));
          }
        }
);
      }
    }
  }
  return result;
}
