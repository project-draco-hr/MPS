{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(),"reference",true),"facet",false),"targetDeclaration",true);
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.make.facet.structure.TargetReferenceExpression"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode tre=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.make.facet.structure.TargetReferenceExpression");
            SLinkOperations.setTarget(tre,"facetRef",_context.getSourceNode(),true);
            SLinkOperations.setTarget(tre,"target",(item),false);
            return tre;
          }
          public String getMatchingText(          String pattern){
            return ":" + SPropertyOperations.getString((item),"name");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.make.facet.structure.TargetReferenceExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.make.facet.structure.TargetReferenceExpression"),null));
          }
        }
);
      }
    }
  }
  return result;
}
