{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.make.facet.structure.ForeignParametersComponentExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          final SNode td=SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.make.facet.structure.TargetDeclaration",false,false);
          SNode fd=SNodeOperations.cast(SNodeOperations.getParent(td),"jetbrains.mps.make.facet.structure.FacetDeclaration");
          return ListSequence.fromList(SLinkOperations.getTargets(fd,"targetDeclaration",true)).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode sibl){
              return sibl != td;
            }
          }
).concat(ListSequence.fromList(SLinkOperations.getTargets(fd,"required",true)).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode rfd){
              return SLinkOperations.getTargets(SLinkOperations.getTarget(rfd,"facet",false),"targetDeclaration",true);
            }
          }
)).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode rtd){
              return SLinkOperations.getTarget(rtd,"parameters",true);
            }
          }
).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode p){
              return SLinkOperations.getTargets(p,"component",true);
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode fve=_quotation_createNode_gb3jz3_a0a0a0a0(SNodeOperations.getAncestor((item),"jetbrains.mps.make.facet.structure.TargetDeclaration",false,false));
              SNode op=_quotation_createNode_gb3jz3_a0b0a0a0((item));
              return _quotation_createNode_gb3jz3_a2a0a0a(fve,op);
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString(SNodeOperations.getAncestor((item),"jetbrains.mps.make.facet.structure.TargetDeclaration",false,false),"name") + "." + SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
