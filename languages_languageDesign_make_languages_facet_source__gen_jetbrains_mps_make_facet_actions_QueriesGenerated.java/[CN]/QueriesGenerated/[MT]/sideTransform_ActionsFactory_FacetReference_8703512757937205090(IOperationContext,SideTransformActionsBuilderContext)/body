{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.getNodeAncestor(_context.getSourceNode(),MetaAdapterFactory.getConcept(0x696c11654a59463bL,0xbc5d902caab85dd0L,0x639ef64ff4850bb0L,"jetbrains.mps.make.facet.structure.FacetReferenceExpression"),false,false);
    }
  }
.compute(),_context.getSide(),_context.getTransformationTag(),operationContext)));
  return result;
}
