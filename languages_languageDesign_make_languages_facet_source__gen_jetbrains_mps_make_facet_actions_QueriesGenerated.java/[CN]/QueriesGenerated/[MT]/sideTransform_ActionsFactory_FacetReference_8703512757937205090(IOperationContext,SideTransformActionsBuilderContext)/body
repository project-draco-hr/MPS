{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>(){
    public SNode compute(){
      return SNodeOperations.getNodeAncestor(_context.getSourceNode(),MetaAdapterFactory.getConcept(new UUID(7596465798203917883l,-4873580700227838512l),7178445679340358576l,"jetbrains.mps.make.facet.structure.FacetReferenceExpression"),false,false);
    }
  }
.compute(),_context.getSide(),_context.getTransformationTag(),operationContext)));
  return result;
}
