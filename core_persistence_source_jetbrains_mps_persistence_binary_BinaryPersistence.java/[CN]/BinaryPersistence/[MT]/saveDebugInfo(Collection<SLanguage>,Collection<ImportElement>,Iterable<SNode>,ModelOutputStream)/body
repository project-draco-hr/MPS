{
  os.writeInt(languages.size());
  for (  SLanguage language : languages) {
    os.writeString(IdHelper.getLanguageId(language).serialize());
    os.writeString(language.getQualifiedName());
  }
  os.writeInt(importedModels.size());
  for (  ImportElement ie : importedModels) {
    SModelReference ref=ie.getModelReference();
    org.jetbrains.mps.openapi.model.SModel model=ref.resolve(MPSModuleRepository.getInstance());
    String name=model != null ? model.getModelName() : DebugRegistry.getInstance().getModelName(ref);
    os.writeModelReference(ref);
    os.writeString(name);
  }
  Map<SConcept,String> conceptIds=new HashMap<SConcept,String>();
  Map<SProperty,String> propIds=new HashMap<SProperty,String>();
  Map<SReferenceLink,String> refIds=new HashMap<SReferenceLink,String>();
  Map<SContainmentLink,String> roleIds=new HashMap<SContainmentLink,String>();
  IdInfoCollector.getDebugInfoById(rootNodes,conceptIds,propIds,refIds,roleIds);
  os.writeInt(conceptIds.size());
  for (  Entry<SConcept,String> e : conceptIds.entrySet()) {
    os.writeString(IdHelper.getConceptId(e.getKey()).serialize());
    os.writeString(e.getValue());
  }
  os.writeInt(propIds.size());
  for (  Entry<SProperty,String> e : propIds.entrySet()) {
    os.writeString(IdHelper.getPropertyId(e.getKey()).serialize());
    os.writeString(e.getValue());
  }
  os.writeInt(refIds.size());
  for (  Entry<SReferenceLink,String> e : refIds.entrySet()) {
    os.writeString(IdHelper.getRefId(e.getKey()).serialize());
    os.writeString(e.getValue());
  }
  os.writeInt(roleIds.size());
  for (  Entry<SContainmentLink,String> e : roleIds.entrySet()) {
    os.writeString(IdHelper.getLinkId(e.getKey()).serialize());
    os.writeString(e.getValue());
  }
}
