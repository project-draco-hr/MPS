{
  os.writeInt(REGISTRY_START);
  IdInfoCollector metaInfo=new IdInfoCollector();
  metaInfo.fill(myModelData.getRootNodes(),myMetaInfoProvider);
  List<LangInfo> languagesInUse=metaInfo.getLanguagesInUse();
  os.writeShort(languagesInUse.size());
  int langIndex, conceptIndex, propertyIndex, associationIndex, aggregationIndex;
  langIndex=conceptIndex=propertyIndex=associationIndex=aggregationIndex=0;
  for (  LangInfo ul : languagesInUse) {
    os.writeUUID(ul.getLanguageId().getId());
    os.writeString(ul.getName());
    ul.setIntIndex(langIndex++);
    List<ConceptInfo> conceptsInUse=ul.getConceptsInUse();
    os.writeShort(conceptsInUse.size());
    for (    ConceptInfo ci : conceptsInUse) {
      os.writeLong(ci.getConceptId().getConceptId());
      os.writeString(ci.getBriefName());
      os.writeByte(ci.getKind().ordinal() << 4 | ci.getScope().ordinal());
      ci.setIntIndex(conceptIndex++);
      List<PropertyInfo> propertiesInUse=ci.getPropertiesInUse();
      os.writeShort(propertiesInUse.size());
      for (      PropertyInfo pi : propertiesInUse) {
        os.writeLong(pi.getPropertyId().getPropertyId());
        os.writeString(pi.getName());
        pi.setIntIndex(propertyIndex++);
      }
      List<AssociationLinkInfo> associationsInUse=ci.getAssociationsInUse();
      os.writeShort(associationsInUse.size());
      for (      AssociationLinkInfo li : associationsInUse) {
        os.writeLong(li.getLinkId().getReferenceLinkId());
        os.writeString(li.getName());
        li.setIntIndex(associationIndex++);
      }
      List<AggregationLinkInfo> aggregationsInUse=ci.getAggregationsInUse();
      os.writeShort(aggregationsInUse.size());
      for (      AggregationLinkInfo li : aggregationsInUse) {
        os.writeLong(li.getLinkId().getContainmentLinkId());
        os.writeString(li.getName());
        os.writeBoolean(li.isUnordered());
        li.setIntIndex(aggregationIndex++);
      }
    }
  }
  os.writeInt(REGISTRY_END);
  return metaInfo;
}
