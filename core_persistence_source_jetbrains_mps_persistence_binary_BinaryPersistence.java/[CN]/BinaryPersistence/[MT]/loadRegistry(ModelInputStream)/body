{
  assertSyncToken(is,REGISTRY_START);
  int langIndex, conceptIndex, propertyIndex, associationIndex, aggregationIndex;
  langIndex=conceptIndex=propertyIndex=associationIndex=aggregationIndex=0;
  ReadHelper rh=new ReadHelper(myMetaInfoProvider);
  int langCount=is.readShort();
  while (langCount-- > 0) {
    final SLanguageId languageId=new SLanguageId(is.readUUID());
    final String langName=is.readString();
    rh.withLanguage(languageId,langName,langIndex++);
    int conceptCount=is.readShort();
    while (conceptCount-- > 0) {
      final SConceptId conceptId=new SConceptId(languageId,is.readLong());
      final String conceptName=NameUtil.conceptFQNameFromNamespaceAndShortName(langName,is.readString());
      int flags=is.readByte();
      rh.withConcept(conceptId,conceptName,StaticScope.values()[flags & 0x0f],ConceptKind.values()[flags >> 4 & 0x0f],conceptIndex++);
      int propertyCount=is.readShort();
      while (propertyCount-- > 0) {
        rh.property(new SPropertyId(conceptId,is.readLong()),is.readString(),propertyIndex++);
      }
      int associationCount=is.readShort();
      while (associationCount-- > 0) {
        rh.association(new SReferenceLinkId(conceptId,is.readLong()),is.readString(),associationIndex++);
      }
      int aggregationCount=is.readShort();
      while (aggregationCount-- > 0) {
        rh.aggregation(new SContainmentLinkId(conceptId,is.readLong()),is.readString(),is.readBoolean(),aggregationIndex++);
      }
    }
  }
  assertSyncToken(is,REGISTRY_END);
  return rh;
}
