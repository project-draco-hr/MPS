{
  for (  TemplateModule generator : myGenerators) {
    Collection<TemplateMappingPriorityRule> priorities=generator.getPriorities();
    if (priorities == null) {
      continue;
    }
    for (    TemplateMappingPriorityRule rule : priorities) {
      processRule((MappingPriorityRule)rule,generator);
    }
  }
  MultiMap<SLanguage,TemplateModule> lang2gen=new MultiMap<SLanguage,TemplateModule>();
  for (  TemplateModule generator : myGenerators) {
    SLanguage lang=SConceptRepository.getInstance().getLanguage(generator.getSourceLanguage().getNamespace());
    lang2gen.putValue(lang,generator);
  }
  for (  TemplateModule generator : myGenerators) {
    final RuleHelper lhsHelper=new RuleHelper(generator,new MappingConfig_RefAllLocal());
    if (lhsHelper.getAllMappings().isEmpty()) {
      continue;
    }
    HashSet<TemplateModule> targetGenerators=new HashSet<TemplateModule>();
    for (    SLanguage targetLang : generator.getTargetLanguages()) {
      targetGenerators.addAll(lang2gen.get(targetLang));
    }
    targetGenerators.remove(generator);
    if (targetGenerators.isEmpty()) {
      continue;
    }
    for (    TemplateModule tg : targetGenerators) {
      if (myExplicitDependencies.contains(new Pair<TemplateModule,TemplateModule>(generator,tg))) {
        continue;
      }
      RuleHelper rhsHelper=new RuleHelper(tg,new MappingConfig_RefAllLocal());
      if (rhsHelper.getAllMappings().isEmpty()) {
        continue;
      }
      if (rhsHelper.getTopPriMappings().isEmpty()) {
        MappingPriorityRule r=new MappingPriorityRule();
        r.setLeft(new MappingConfig_RefAllLocal());
        r.setRight(createRefs(tg,rhsHelper.getRegularMappings()));
        r.setType(RuleType.BEFORE_OR_TOGETHER);
        processRule(r,generator);
      }
 else {
        if (!lhsHelper.getTopPriMappings().isEmpty()) {
          MappingPriorityRule r=new MappingPriorityRule();
          r.setLeft(createRefs(generator,lhsHelper.getTopPriMappings()));
          r.setRight(createRefs(tg,rhsHelper.getTopPriMappings()));
          r.setType(RuleType.BEFORE_OR_TOGETHER);
          processRule(r,generator);
        }
        if (!lhsHelper.getRegularMappings().isEmpty() && !rhsHelper.getRegularMappings().isEmpty()) {
          MappingPriorityRule r=new MappingPriorityRule();
          r.setLeft(createRefs(generator,lhsHelper.getRegularMappings()));
          r.setRight(createRefs(tg,rhsHelper.getRegularMappings()));
          r.setType(RuleType.BEFORE_OR_TOGETHER);
          processRule(r,generator);
        }
      }
    }
  }
}
