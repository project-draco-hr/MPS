{
  MappingConfig_AbstractRef left=rule.getLeft();
  MappingConfig_AbstractRef right=rule.getRight();
  if (left == null || right == null)   return;
  List<SNode> greaterPriMappings=getMappingsFromRef(left,generator);
  List<SNode> lesserPriMappings=getMappingsFromRef(right,generator);
  if (rule.getType() == RuleType.STRICTLY_TOGETHER) {
    Set<SNode> coherentMappings=new HashSet<SNode>(lesserPriMappings);
    coherentMappings.addAll(greaterPriMappings);
    myCoherentMappings.add(new CoherentSetData(coherentMappings,rule));
  }
 else {
    lesserPriMappings=CollectionUtil.subtract(lesserPriMappings,greaterPriMappings);
    for (    SNode lesserPriMapping : lesserPriMappings) {
      Map<SNode,PriorityData> grtPriMappingsFromMap=myPriorityMap.get(lesserPriMapping);
      for (      SNode grtPriMapping : greaterPriMappings) {
        boolean isStrict=(rule.getType() == RuleType.STRICTLY_BEFORE);
        if (!grtPriMappingsFromMap.containsKey(grtPriMapping)) {
          grtPriMappingsFromMap.put(grtPriMapping,new PriorityData(isStrict,rule));
        }
 else {
          PriorityData priorityData=grtPriMappingsFromMap.get(grtPriMapping);
          if (isStrict)           priorityData.myStrict=true;
          priorityData.myCauseRules.add(rule);
        }
      }
    }
  }
}
