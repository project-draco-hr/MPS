{
  MappingConfig_AbstractRef left=rule.getLeft();
  MappingConfig_AbstractRef right=rule.getRight();
  if (left == null || right == null)   return;
  Collection<TemplateMappingConfiguration> lhs=getMappingsFromRef(left,generator,generator.getAlias());
  Collection<TemplateMappingConfiguration> rhs=getMappingsFromRef(right,generator,generator.getAlias());
switch (rule.getType()) {
case STRICTLY_TOGETHER:
    Set<TemplateMappingConfiguration> coherentMappings=new HashSet<TemplateMappingConfiguration>(rhs);
  coherentMappings.addAll(lhs);
mySolver.registerCoherent(coherentMappings,rule);
return;
case STRICTLY_BEFORE:
case BEFORE_OR_TOGETHER:
mySolver.establishDependency(lhs,rhs,rule);
return;
case AFTER_OR_TOGETHER:
case STRICTLY_AFTER:
mySolver.establishDependency(rhs,lhs,rule);
return;
default :
throw new IllegalStateException(String.valueOf(rule.getType()));
}
}
