{
  MappingConfig_AbstractRef left=rule.getLeft();
  MappingConfig_AbstractRef right=rule.getRight();
  if (left == null || right == null)   return;
  Collection<TemplateMappingConfiguration> hiPrio=getMappingsFromRef(left,generator,generator.getAlias());
  Collection<TemplateMappingConfiguration> loPrio=getMappingsFromRef(right,generator,generator.getAlias());
  if (rule.getType() == RuleType.STRICTLY_TOGETHER) {
    Set<TemplateMappingConfiguration> coherentMappings=new HashSet<TemplateMappingConfiguration>(loPrio);
    coherentMappings.addAll(hiPrio);
    myCoherentMappings.add(new CoherentSetData(coherentMappings,rule));
  }
 else {
    if (rule.getType() == RuleType.STRICTLY_AFTER || rule.getType() == RuleType.AFTER_OR_TOGETHER) {
      Collection<TemplateMappingConfiguration> temp=hiPrio;
      hiPrio=loPrio;
      loPrio=temp;
    }
    loPrio=CollectionUtil.subtract(loPrio,hiPrio);
    boolean isStrict=rule.getType() == RuleType.STRICTLY_BEFORE || rule.getType() == RuleType.STRICTLY_AFTER;
    for (    TemplateMappingConfiguration lesserPriMapping : loPrio) {
      for (      TemplateMappingConfiguration grtPriMapping : hiPrio) {
        myPriorityMap.updateLock(lesserPriMapping,grtPriMapping,new PriorityData(isStrict,rule));
      }
    }
  }
}
