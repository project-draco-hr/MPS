{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("inequation",new BaseNodeReferenceSearchScopeProvider(){
    public boolean hasPresentation(){
      return true;
    }
    public String getPresentation(    final IOperationContext operationContext,    final PresentationReferentConstraintContext _context){
      if (StringUtils.isNotEmpty(SPropertyOperations.getString(_context.getParameterNode(),"label"))) {
        return SPropertyOperations.getString(_context.getParameterNode(),"label") + " " + SConceptPropertyOperations.getString(_context.getParameterNode(),"alias");
      }
 else {
        return SConceptPropertyOperations.getString(_context.getParameterNode(),"alias");
      }
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
  }
);
  return result;
}
