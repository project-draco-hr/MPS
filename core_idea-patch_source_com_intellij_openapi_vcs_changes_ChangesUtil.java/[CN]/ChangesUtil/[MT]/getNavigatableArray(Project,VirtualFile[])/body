{
  List<Navigatable> result=new ArrayList<Navigatable>();
  for (  final VirtualFile selectedFile : selectedFiles) {
    if (!selectedFile.isDirectory()) {
      if (MPSFileTypesManager.instance().isModelFile(selectedFile) || MPSFileTypesManager.instance().isModuleFile(selectedFile)) {
        result.add(new Navigatable(){
          @Override public void navigate(          boolean requestFocus){
            ChangeListManager changes=ChangeListManager.getInstance(project);
            Change change=changes.getChange(selectedFile);
            AbstractVcs vcs=ProjectLevelVcsManager.getInstance(project).getVcsFor(selectedFile);
            if (vcs != null && change != null && change.getFileStatus() == FileStatus.MERGED_WITH_CONFLICTS) {
              AbstractVcsHelper.getInstance(project).showMergeDialog(Arrays.asList(selectedFile),vcs.getMergeProvider());
              return;
            }
            ProjectPane projectPane=ProjectPane.getInstance(project);
            if (MPSFileTypesManager.instance().isModelFile(selectedFile)) {
              SModelDescriptor model=ModelAccess.instance().runReadAction(new Computable<SModelDescriptor>(){
                public SModelDescriptor compute(){
                  return SModelRepository.getInstance().findModel(VirtualFileUtils.toIFile(selectedFile));
                }
              }
);
              if (model != null) {
                projectPane.selectModel(model,false);
              }
            }
 else             if (MPSFileTypesManager.instance().isModuleFile(selectedFile)) {
              IModule module=ModelAccess.instance().runReadAction(new Computable<IModule>(){
                public IModule compute(){
                  return MPSModuleRepository.getInstance().getModuleByFile(VirtualFileUtils.toIFile(selectedFile));
                }
              }
);
              if (module != null) {
                projectPane.selectModule(module,true);
              }
            }
          }
          @Override public boolean canNavigate(){
            return true;
          }
          @Override public boolean canNavigateToSource(){
            return true;
          }
        }
);
      }
 else {
        result.add(new OpenFileDescriptor(project,selectedFile));
      }
    }
  }
  return result.toArray(new Navigatable[result.size()]);
}
