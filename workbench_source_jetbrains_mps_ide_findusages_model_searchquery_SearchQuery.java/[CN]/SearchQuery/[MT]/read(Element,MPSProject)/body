{
  Element scopeXML=element.getChild(SCOPE);
  String scopeType=scopeXML.getAttribute(SCOPE_TYPE).getValue();
  if (scopeType.equals(SCOPE_TYPE_GLOBAL)) {
    myScope=GlobalScope.getInstance();
  }
 else   if (scopeType.equals(SCOPE_TYPE_PROJECT)) {
    myScope=project.getScope();
  }
 else   if (scopeType.equals(SCOPE_TYPE_MODULE)) {
    String moduleUID=scopeXML.getAttribute(MODULE_ID).getValue();
    myScope=null;
    for (    IModule module : project.getModules()) {
      if (module.getModuleUID().equals(moduleUID)) {
        myScope=module.getScope();
      }
    }
    if (myScope == null) {
      throw new ContainerInnerPartClassNotFoundException("module scope not found for module  " + moduleUID);
    }
  }
 else   if (scopeType.equals(SCOPE_TYPE_MODEL)) {
    String modelUID=scopeXML.getAttribute(MODEL_ID).getValue();
    SModelDescriptor sModelDescriptor=project.getScope().getModelDescriptor(SModelUID.fromString(modelUID));
    if (sModelDescriptor == null) {
      throw new ContainerInnerPartClassNotFoundException("model scope not found for model  " + modelUID);
    }
    myScope=new ModelScope(project.getScope(),sModelDescriptor);
  }
  Element nodeXML=element.getChild(NODE);
  SNode node;
  if (nodeXML == null) {
    node=null;
  }
 else {
    node=ComponentsUtil.nodeFromElement((Element)nodeXML.getChildren().get(0));
  }
  if (node == null) {
    throw new ContainerInnerPartClassNotFoundException("node not found");
  }
  myNodePointer=new SNodePointer(node);
}
