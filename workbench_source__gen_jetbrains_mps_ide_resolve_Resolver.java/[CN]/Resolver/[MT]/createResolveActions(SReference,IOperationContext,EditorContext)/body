{
  String resolveInfo=reference.getResolveInfo();
  String role=reference.getRole();
  final SNode sourceNode=reference.getSourceNode();
  SNode sourceConcept=sourceNode.getConceptDeclarationNode();
  SNode refLinkDeclaration=SModelSearchUtil.findLinkDeclaration(sourceConcept,role);
  SNode sourceParent=sourceNode.getParent();
  if (sourceParent == null) {
    sourceParent=sourceNode;
  }
  SNode childLinkDeclaration=SModelSearchUtil.findLinkDeclaration(sourceParent.getConceptDeclarationNode(),sourceNode.getRole_());
  EditorCell editorCell=editorContext.createNodeCell(sourceParent);
  EditorCell inspectedCell=editorContext.createInspectedCell(sourceNode,null);
  EditorCell refCell=Resolver.searchForRefCell(editorCell,sourceNode,refLinkDeclaration,childLinkDeclaration);
  if (refCell == null) {
    refCell=Resolver.searchForRefCell(inspectedCell,sourceNode,refLinkDeclaration,childLinkDeclaration);
  }
  if (refCell == null) {
    refCell=editorCell;
  }
  NodeSubstituteInfo substituteInfo=refCell.getSubstituteInfo();
  if (substituteInfo == null) {
    substituteInfo=new NullSubstituteInfo();
  }
  List<INodeSubstituteAction> actions=substituteInfo.getMatchingActions(resolveInfo,false);
  List<INodeSubstituteAction> matchingActions=new ArrayList<INodeSubstituteAction>();
  for (  INodeSubstituteAction action : actions) {
    if (action.canSubstituteStrictly(resolveInfo)) {
      matchingActions.add(action);
    }
  }
  if (matchingActions.isEmpty()) {
    for (    INodeSubstituteAction action : actions) {
      if (action.canSubstitute(resolveInfo)) {
        matchingActions.add(action);
      }
    }
  }
  Collections.sort(matchingActions,new Comparator<INodeSubstituteAction>(){
    public int compare(    INodeSubstituteAction o1,    INodeSubstituteAction o2){
      if (!((o2 instanceof DefaultReferentNodeSubstituteAction))) {
        return 1;
      }
      if (!((o1 instanceof DefaultReferentNodeSubstituteAction))) {
        return -1;
      }
      DefaultReferentNodeSubstituteAction action1=(DefaultReferentNodeSubstituteAction)o1;
      DefaultReferentNodeSubstituteAction action2=(DefaultReferentNodeSubstituteAction)o2;
      SModel model1=null;
      SModel model2=null;
      if (action1.getOutputConcept() != null) {
        model1=((SNode)action1.getOutputConcept()).getModel();
      }
      if (action2.getOutputConcept() != null) {
        model2=((SNode)action2.getOutputConcept()).getModel();
      }
      if (model1 == sourceNode.getModel()) {
        return 1;
      }
      if (model2 == sourceNode.getModel()) {
        return -1;
      }
      return 0;
    }
  }
);
  return matchingActions;
}
