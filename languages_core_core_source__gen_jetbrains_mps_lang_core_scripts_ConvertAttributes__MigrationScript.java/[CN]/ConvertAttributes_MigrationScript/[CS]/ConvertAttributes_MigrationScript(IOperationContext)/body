{
  super("Convert Attributes");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Convert Attributes";
    }
    public String getAdditionalInfo(){
      return "Convert Attributes";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.Attribute";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      return role != null && role.contains("$") && !(role.equals("_$attribute"));
    }
    public void doUpdateInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      if (role.indexOf("$link_attribute$") > 0) {
        String link=role.substring(role.indexOf("$link_attribute$") + "$link_attribute$".length());
        SNode attribute=SNodeOperations.as(node,"jetbrains.mps.lang.core.structure.LinkAttribute");
        if ((attribute == null)) {
          LOG.error("Incompatible attribute concept type and stereotype" + (role + " in model " + SNodeOperations.getModel(node).getSModelFqName()+ ", node "+ node+ "["+ node.getId()+ "]"));
        }
        SPropertyOperations.set(attribute,"linkRole",link);
        if (SNodeOperations.getParent(node).getLinkDeclaration(link) == null) {
          LOG.error("No link declaration was found for link attribute " + (role + " in model " + SNodeOperations.getModel(node).getSModelFqName()+ ", node "+ node+ "["+ node.getId()+ "]"));
        }
      }
 else       if (role.indexOf("$property_attribute$") > 0) {
        String prop=role.substring(role.indexOf("$property_attribute$") + "$property_attribute$".length());
        SNode attribute=SNodeOperations.as(node,"jetbrains.mps.lang.core.structure.PropertyAttribute");
        if ((attribute == null)) {
          LOG.error("Incompatible attribute concept type and stereotype for " + (role + " in model " + SNodeOperations.getModel(node).getSModelFqName()+ ", node "+ node+ "["+ node.getId()+ "]"));
        }
        SPropertyOperations.set(attribute,"propertyName",prop);
        if (SNodeOperations.getParent(node).getPropertyDeclaration(prop) == null) {
          LOG.error("No property declaration was found for property attribute " + (role + " in model " + SNodeOperations.getModel(node).getSModelFqName()+ ", node "+ node+ "["+ node.getId()+ "]"));
        }
      }
 else       if (role.endsWith("$attribute")) {
        if (!(SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.core.structure.NodeAttribute"))) {
          LOG.error("Incompatible attribute concept type and stereotype for " + (role + " in model " + SNodeOperations.getModel(node).getSModelFqName()+ ", node "+ node+ "["+ node.getId()+ "]"));
        }
      }
 else {
        LOG.warning("Link looks similar to attribute: " + role + " in model "+ SNodeOperations.getModel(node).getSModelFqName()+ ", node "+ node+ "["+ node.getId()+ "]");
        return;
      }
      node.setRoleInParent("smodelAttribute");
      SModelRepository.getInstance().markChanged(SNodeOperations.getModel(node));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Rename _$attribute role to smodelAttribute";
    }
    public String getAdditionalInfo(){
      return "Rename _$attribute role to smodelAttribute";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.lang.core.structure.Attribute";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      String role=SNodeOperations.getContainingLinkRole(node);
      return role != null && role.equals("_$attribute");
    }
    public void doUpdateInstanceNode(    SNode node){
      node.setRoleInParent("smodelAttribute");
      SModelRepository.getInstance().markChanged(SNodeOperations.getModel(node));
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
