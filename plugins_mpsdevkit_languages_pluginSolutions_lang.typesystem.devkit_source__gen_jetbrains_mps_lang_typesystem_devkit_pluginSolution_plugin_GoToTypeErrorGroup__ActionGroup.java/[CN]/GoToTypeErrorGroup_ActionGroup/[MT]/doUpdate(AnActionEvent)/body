{
  removeAll();
  SNode node=event.getData(MPSCommonDataKeys.NODE);
  if (node == null) {
    GoToTypeErrorGroup_ActionGroup.this.disable(event.getPresentation());
    return;
  }
  EditorComponent editorComponent=event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
  if (editorComponent == null) {
    GoToTypeErrorGroup_ActionGroup.this.disable(event.getPresentation());
    return;
  }
  IErrorReporter error=editorComponent.getErrorReporterFor(editorComponent.getSelectedCell());
  if (error == null || error.getRuleNode() == null || error.getAdditionalRulesIds().isEmpty()) {
    GoToTypeErrorGroup_ActionGroup.this.disable(event.getPresentation());
    return;
  }
  for (  SNodeReference id : error.getAdditionalRulesIds()) {
    GoToTypeErrorGroup_ActionGroup.this.addParameterizedAction(new GoToTypeErrorRule_InGroup_Action(id,false),PluginId.getId("jetbrains.mps.lang.typesystem.devkit.pluginSolution"),id,false);
  }
  GoToTypeErrorGroup_ActionGroup.this.addParameterizedAction(new GoToTypeErrorRule_InGroup_Action(error.getRuleNode(),true),PluginId.getId("jetbrains.mps.lang.typesystem.devkit.pluginSolution"),error.getRuleNode(),true);
  for (  Pair<ActionPlace,Condition<BaseAction>> p : this.myPlaces) {
    this.addPlace(p.first,p.second);
  }
}
