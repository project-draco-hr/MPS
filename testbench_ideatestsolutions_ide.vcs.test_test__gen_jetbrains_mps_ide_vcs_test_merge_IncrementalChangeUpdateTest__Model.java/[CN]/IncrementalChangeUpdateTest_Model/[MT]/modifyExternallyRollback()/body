{
  String model=PersistenceUtil.saveModel(getTestModel(),getDefaultExt());
  SModel changedCopy=PersistenceUtil.loadModel(model,getDefaultExt());
  SModelOperations.addRootNode(changedCopy,createClassConcept_2jv4hj_a0a2a6());
  final String changedContent=PersistenceUtil.saveModel(changedCopy,getDefaultExt());
  ModelAccess.instance().runWriteInEDT(new Runnable(){
    public void run(){
      try {
        getTestModelFile().setBinaryContent(changedContent.getBytes(FileUtil.DEFAULT_CHARSET));
      }
 catch (      IOException e) {
        throw new AssertionError(e);
      }
    }
  }
);
  ModelAccess.instance().flushEventQueue();
  myWaitHelper.waitForFileStatusChange(getTestModelFile(),FileStatus.MODIFIED);
  myWaitHelper.waitForChangesManager();
  Assert.assertTrue(ListSequence.fromList(check_2jv4hj_a0a9a6(myDiff.getChangeSet())).isNotEmpty());
  revertDiskChangesAndWait(getTestModelFile());
  revertMemChangesAndWait();
  myWaitHelper.waitForFileStatusChange(getTestModelFile(),FileStatus.NOT_CHANGED);
  myWaitHelper.waitForChangesManager();
  Assert.assertTrue(ListSequence.fromList(check_2jv4hj_a0a51a6(myDiff.getChangeSet())).isEmpty());
}
