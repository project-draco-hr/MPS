{
  makeChangeAndWait(new Runnable(){
    public void run(){
      SNodeOperations.deleteNode(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)","5876208808348821705"));
      getTestModel().save();
    }
  }
);
  VirtualFile modelFile=getTestModelFile();
  myWaitHelper.waitForFileStatusChange(modelFile,FileStatus.MODIFIED);
  myChangeListManager.ensureUpToDate(false);
  Change change=myChangeListManager.getChange(modelFile);
  Assert.assertTrue(change != null);
  myGitVcs.getCheckinEnvironment().commit(Arrays.asList(change),"dumb commit");
  myWaitHelper.waitForFileStatusChange(modelFile,FileStatus.NOT_CHANGED);
  myWaitHelper.waitForChangesManager();
  Assert.assertNull(myDiff.getChangeSet());
  try {
    GitSimpleHandler h=new GitSimpleHandler(myIdeaProject,myIdeaProject.getBaseDir(),GitCommand.RESET);
    h.addParameters("--mixed","HEAD^");
    h.run();
  }
 catch (  VcsException e) {
    throw new AssertionError(e);
  }
  myWaitHelper.waitForFileStatusChange(modelFile,FileStatus.MODIFIED);
  myWaitHelper.waitForChangesManager();
  Assert.assertTrue(ListSequence.fromList(check_2jv4hj_a0a02a0(myDiff.getChangeSet())).isNotEmpty());
  revertDiskChangesAndWait(getTestModelFile());
}
