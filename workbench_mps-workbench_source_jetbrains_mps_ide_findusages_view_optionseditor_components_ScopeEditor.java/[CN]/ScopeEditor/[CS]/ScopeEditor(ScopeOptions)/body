{
  super(defaultOptions);
  myPanel=new JPanel();
  myPanel.setLayout(new BoxLayout(myPanel,BoxLayout.Y_AXIS));
  myPanel.setBorder(IdeBorderFactory.createTitledBorder("Scope",false));
  myGlobalScopeButton=new JRadioButton(new AbstractAction(GLOBAL_SCOPE){
    @Override public void actionPerformed(    ActionEvent e){
      setCompletionFieldsState(false,false);
    }
  }
);
  myProjectScopeButton=new JRadioButton(new AbstractAction(PROJECT_SCOPE){
    @Override public void actionPerformed(    ActionEvent e){
      setCompletionFieldsState(false,false);
    }
  }
);
  myModuleScopeButton=new JRadioButton(new AbstractAction(MODULE_SCOPE){
    @Override public void actionPerformed(    ActionEvent e){
      setCompletionFieldsState(true,false);
    }
  }
);
  myModelScopeButton=new JRadioButton(new AbstractAction(MODEL_SCOPE){
    @Override public void actionPerformed(    ActionEvent e){
      setCompletionFieldsState(false,true);
    }
  }
);
  if (InternalFlag.isInternalMode()) {
    myBootstrapScopeButton=new JRadioButton(new AbstractAction(BOOTSTRAP_SCOPE){
      @Override public void actionPerformed(      ActionEvent e){
        setCompletionFieldsState(false,false);
      }
    }
);
  }
  myButtonGroup=new ButtonGroup();
  myButtonGroup.add(myGlobalScopeButton);
  myButtonGroup.add(myProjectScopeButton);
  myButtonGroup.add(myModuleScopeButton);
  myButtonGroup.add(myModelScopeButton);
  if (myBootstrapScopeButton != null) {
    myButtonGroup.add(myBootstrapScopeButton);
  }
  Set<IModule> moduleList=MPSModuleRepository.getInstance().getAllModules();
  List<String> moduleNameList=new ArrayList<String>();
  for (  IModule iModule : moduleList) {
    String namespace=iModule.getModuleName();
    if (namespace != null) {
      moduleNameList.add(namespace);
    }
  }
  myModuleNameList=moduleNameList;
  myModuleNameList.add(0,ScopeOptions.DEFAULT_VALUE);
  myModuleField=new DefaultCompletionTextField(moduleNameList);
  myModuleField.setText(ScopeOptions.DEFAULT_VALUE);
  List<SModel> modelList=SModelRepository.getInstance().getModelDescriptors();
  myModelNameList=new ArrayList<String>();
  for (  SModel md : modelList) {
    if (SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(md)))     continue;
    myModelNameList.add(SNodeOperations.getModelLongName(md));
  }
  myModelNameList.add(0,ScopeOptions.DEFAULT_VALUE);
  myModelField=new DefaultCompletionTextField(myModelNameList);
  myModelField.setText(ScopeOptions.DEFAULT_VALUE);
  JPanel row;
  row=new JPanel();
  row.setLayout(new BorderLayout());
  row.add(myModelScopeButton,BorderLayout.WEST);
  row.add(myModelField,BorderLayout.CENTER);
  myPanel.add(row);
  row=new JPanel();
  row.setLayout(new BorderLayout());
  row.add(myModuleScopeButton,BorderLayout.WEST);
  row.add(myModuleField,BorderLayout.CENTER);
  myPanel.add(row);
  row=new JPanel();
  row.setLayout(new BorderLayout());
  row.add(myProjectScopeButton,BorderLayout.WEST);
  myPanel.add(row);
  row=new JPanel();
  row.setLayout(new BorderLayout());
  row.add(myGlobalScopeButton,BorderLayout.WEST);
  myPanel.add(row);
  if (InternalFlag.isInternalMode()) {
    row=new JPanel();
    row.setLayout(new BorderLayout());
    row.add(myBootstrapScopeButton,BorderLayout.WEST);
    myPanel.add(row);
  }
  setDefaults(defaultOptions);
}
