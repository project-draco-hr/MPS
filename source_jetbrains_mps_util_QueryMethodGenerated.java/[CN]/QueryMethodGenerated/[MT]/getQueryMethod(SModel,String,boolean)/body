{
  Pair<SModelUID,String> pair=new Pair<SModelUID,String>(sourceModel.getUID(),methodName);
  if (QueryMethodGenerated.ourMethods.containsKey(pair)) {
    return QueryMethodGenerated.ourMethods.get(pair);
  }
  String packageName=JavaNameUtil.packageNameForModelUID(sourceModel.getUID());
  String queriesClassName=packageName + ".QueriesGenerated";
  Class queriesClass;
  try {
    queriesClass=Class.forName(queriesClassName,true,ClassLoaderManager.getInstance().getClassLoader());
  }
 catch (  ClassNotFoundException cfe) {
    if (!suppressErrorLogging) {
      LOG.error("couldn't find class 'QueriesGenerated' for model '" + sourceModel.getUID() + "' : TRY TO GENERATE");
    }
    throw cfe;
  }
  Method method=null;
  Method[] declaredMethods=queriesClass.getDeclaredMethods();
  for (  Method declaredMethod : declaredMethods) {
    if (declaredMethod.getName().equals(methodName)) {
      method=declaredMethod;
      break;
    }
  }
  if (method == null) {
    LOG.error("couldn't find method '" + methodName + "' in '"+ queriesClassName+ "' : TRY TO GENERATE model '"+ sourceModel.getUID()+ "'");
    throw new NoSuchMethodException("couldn't find method '" + methodName + "' in '"+ queriesClassName+ "'");
  }
  method.setAccessible(true);
  QueryMethodGenerated.ourMethods.put(pair,method);
  return method;
}
