{
  LOG.debug("Compiling " + modules.size() + " modules");
  monitor.start("Compiling",12);
  myTracer.push("making " + modules.size() + " modules",false);
  try {
    LOG.debug("Collecting dependent candidates");
    monitor.step("Collecting candidates");
    myTracer.push("collecting candidates",false);
    Collection<SModule> candidates=new GlobalModuleDependenciesManager(modules).getModules(Deptype.COMPILE);
    myTracer.pop();
    monitor.advance(1);
    LOG.debug("Loading dependencies");
    myTracer.push("loading deps",false);
    monitor.step("Loading dependencies");
    myDependencies=new Dependencies(candidates);
    myTracer.pop();
    monitor.advance(1);
    LOG.debug("Totally " + modules.size() + " modules to compile");
    myTracer.push("modules to compile",false);
    monitor.step("Calculating modules to compile");
    Set<SModule> toCompile=getModulesToCompile(candidates);
    myTracer.pop();
    monitor.advance(1);
    int errorCount=0;
    int warnCount=0;
    List<IMessage> messages=new ArrayList<IMessage>();
    Set<SModule> changedModules=new HashSet<SModule>();
    LOG.debug("Building module cycles");
    monitor.step("Building module cycles");
    myTracer.push("building cycles",false);
    List<Set<SModule>> schedule=StronglyConnectedModules.getInstance().getStronglyConnectedComponents(toCompile);
    myTracer.pop();
    monitor.advance(1);
    ProgressMonitor inner=monitor.subTask(8);
    inner.start("",toCompile.size());
    try {
      for (      Set<SModule> cycle : schedule) {
        if (monitor.isCanceled())         break;
        LOG.debug("Processing " + cycle + " cycle");
        inner.step("compiling " + cycle);
        myTracer.push("processing cycle",false);
        MPSCompilationResult result=compile(cycle,compilerOptions);
        inner.advance(cycle.size());
        myTracer.pop();
        errorCount+=result.getErrors();
        warnCount+=result.getWarnings();
        changedModules.addAll(result.getChangedModules());
        messages.addAll(result.getMessages());
        for (        IMessage msg : result.getMessages()) {
          if (msg.getKind() == MessageKind.ERROR) {
            handle(msg);
          }
        }
      }
    }
  finally {
      inner.done();
      LOG.debug("Make is done");
    }
    return new MPSCompilationResult(errorCount,warnCount,false,changedModules,messages);
  }
  finally {
    myTracer.pop();
    final String report=myTracer.report();
    if (report != null) {
      handle(new Message(MessageKind.INFORMATION,report));
    }
    monitor.done();
  }
}
