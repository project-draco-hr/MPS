{
  Set<SModule> candidates=modulesContainer.getModules();
  myTracer.push("checking if " + candidates.size() + " modules are dirty",false);
  List<SModule> dirtyModules=new ArrayList<SModule>(candidates.size());
  for (  SModule m : candidates) {
    if (modulesContainer.isDirty(m)) {
      dirtyModules.add(m);
    }
  }
  myTracer.pop();
  Map<SModule,Set<SModule>> backDependencies=new HashMap<SModule,Set<SModule>>();
  myTracer.push("building back deps",false);
  for (  SModule m : candidates) {
    for (    SModule dep : new GlobalModuleDependenciesManager(m).getModules(Deptype.COMPILE)) {
      Set<SModule> incoming=backDependencies.get(dep);
      if (incoming == null) {
        incoming=new HashSet<SModule>();
        backDependencies.put(dep,incoming);
      }
      incoming.add(m);
    }
  }
  myTracer.pop();
  myTracer.push("adding modules dependent on dirty ones - " + dirtyModules.size(),false);
  Set<SModule> toCompile=new LinkedHashSet<SModule>();
  LinkedList<SModule> queue=new LinkedList<SModule>(dirtyModules);
  while (!queue.isEmpty()) {
    SModule m=queue.removeFirst();
    if (candidates.contains(m)) {
      toCompile.add(m);
    }
    Set<SModule> backDeps=backDependencies.remove(m);
    if (backDeps != null) {
      queue.addAll(backDeps);
    }
  }
  myTracer.pop();
  return toCompile;
}
