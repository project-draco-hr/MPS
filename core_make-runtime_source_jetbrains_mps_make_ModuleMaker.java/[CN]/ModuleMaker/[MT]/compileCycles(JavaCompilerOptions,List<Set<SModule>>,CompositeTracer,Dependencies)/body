{
  List<MPSCompilationResult> cycleCompilationResults=new ArrayList<>();
  tracer.start("",cyclesToCompile.size());
  try {
    int cycleNumber=0;
    for (    Set<SModule> modulesInCycle : cyclesToCompile) {
      if (tracer.isMonitorCanceled()) {
        break;
      }
      ++cycleNumber;
      CompositeTracer cycleTracer=tracer.subTracer(1);
      cycleTracer.start(getCycleString(cycleNumber,modulesInCycle),1);
      ModulesContainer modulesContainer=new ModulesContainer(modulesInCycle,dependencies);
      InternalJavaCompiler internalJavaCompiler=new InternalJavaCompiler(modulesContainer,compilerOptions);
      MPSCompilationResult cycleCompilationResult=internalJavaCompiler.compile(cycleTracer.subTracer(1,SubProgressKind.AS_COMMENT));
      cycleCompilationResults.add(cycleCompilationResult);
      cycleTracer.done(0);
    }
  }
  finally {
    tracer.done();
  }
  return combineCycleCompilationResults(cycleCompilationResults);
}
