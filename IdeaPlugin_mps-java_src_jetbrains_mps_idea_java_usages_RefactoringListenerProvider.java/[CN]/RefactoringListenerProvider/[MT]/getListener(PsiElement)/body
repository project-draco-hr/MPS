{
  if (!(element instanceof PsiClass || element instanceof PsiMethod || element instanceof PsiField)) {
    return null;
  }
  final SNodeId oldNodeId=JavaForeignIdBuilder.computeNodeId(element);
  final SModelReference oldModelRef=JavaForeignIdBuilder.computeModelReference(element);
  return new RefactoringElementListener(){
    @Override public void elementMoved(    @NotNull PsiElement newElement){
      handleMoveOrRename(newElement);
    }
    @Override public void elementRenamed(    @NotNull PsiElement newElement){
      handleMoveOrRename(newElement);
    }
    private void handleMoveOrRename(    @NotNull final PsiElement newElement){
      final SNodeId newNodeId=JavaForeignIdBuilder.computeNodeId(newElement);
      final SModelReference newModelRef=JavaForeignIdBuilder.computeModelReference(newElement);
      final Project project=newElement.getProject();
      ModelAccess.instance().runUndoTransparentCommand(new Runnable(){
        @Override public void run(){
          for (          Module module : ModuleManager.getInstance(project).getModules()) {
            MPSFacet facet=FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);
            if (facet == null)             continue;
            final Solution facetSolution=facet.getSolution();
            ModelAccess.instance().runReadAction(new Runnable(){
              @Override public void run(){
                for (                SModel model : SModelRepository.getInstance().getModelDescriptors(facetSolution)) {
                  Deque<SNode> stack=new ArrayDeque<SNode>();
                  for (                  SNode node : model.getRootNodes()) {
                    stack.addLast(node);
                  }
                  while (!stack.isEmpty()) {
                    SNode node=stack.pop();
                    for (                    SNode child : node.getChildren()) {
                      stack.push(child);
                    }
                    for (                    SReference ref : node.getReferences()) {
                      if (!(ref instanceof StaticReference))                       continue;
                      SNodeId targetNodeId=ref.getTargetNodeId();
                      if (!(targetNodeId instanceof Foreign))                       continue;
                      String targetNodeIdString=targetNodeId.toString();
                      String oldNodeIdString=oldNodeId.toString();
                      String newNodeIdString=newNodeId.toString();
                      if (targetNodeIdString.startsWith(oldNodeIdString)) {
                        String newTarget=targetNodeIdString.replaceFirst(oldNodeIdString,newNodeIdString);
                        SNodeId newTargetId=new Foreign(newTarget);
                        SNode source=ref.getSourceNode();
                        if (!newModelRef.equals(oldModelRef)) {
                          System.out.println("Element moved: model changed !");
                        }
                        String resolveInfo="";
                        if (newElement instanceof PsiNamedElement) {
                          resolveInfo=((PsiNamedElement)newElement).getName();
                        }
                        SReference newRef=StaticReference.create(ref.getRole(),source,new SNodePointer(newModelRef,newTargetId),resolveInfo);
                        source.setReference(ref.getRole(),newRef);
                      }
                    }
                  }
                }
              }
            }
);
          }
        }
      }
,new MPSProject(project));
    }
  }
;
}
