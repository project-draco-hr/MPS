{
  StringBuilder error=new StringBuilder();
  try {
    String paramsReport=DefaultJUnit_Configuration.this.getStateObject().myJavaRunParameters.getErrorReport();
    if (paramsReport != null) {
      error.append(paramsReport).append("\n");
    }
    if (DefaultJUnit_Configuration.this.getStateObject().type != null) {
      final Wrappers._T<String> errorReport=new Wrappers._T<String>();
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          errorReport.value=DefaultJUnit_Configuration.this.getStateObject().type.check(DefaultJUnit_Configuration.this);
        }
      }
);
      MPSProject mpsProject=MPSDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext());
      if (DefaultJUnit_Configuration.this.collectWhatToTest(mpsProject).isEmpty()) {
        errorReport.value="could not find tests to run";
      }
      if (errorReport.value != null) {
        error.append(errorReport.value).append("\n");
      }
    }
  }
 catch (  Throwable t) {
    if (t instanceof RuntimeConfigurationException) {
      throw (RuntimeConfigurationException)t;
    }
    if (t instanceof RuntimeConfigurationError) {
      throw (RuntimeConfigurationError)t;
    }
    LOG.error(t);
  }
  if (error.length() != 0) {
    throw new RuntimeConfigurationException(error.toString());
  }
}
