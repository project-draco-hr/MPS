{
  return new RunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      JComponent consoleComponent;
      Runnable consoleDispose=null;
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler=null;
{
        Project project=MPSDataKeys.PROJECT.getData(environment.getDataContext());
        final RunComponent runComponent=new RunComponent(project);
        final UnitTestClassRunner testRunner=new UnitTestClassRunner(runComponent);
        testRunner.setRunParams(DefaultJUnit_Configuration.this.getStateObject().myParams);
        ListSequence.fromList(actions).addSequence(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<AnAction>(),runComponent.getConsoleView().createConsoleActions())));
        consoleComponent=runComponent;
        consoleDispose=new Runnable(){
          public void run(){
            runComponent.dispose();
          }
        }
;
        final Wrappers._T<Process> process=new Wrappers._T<Process>(null);
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            if (DefaultJUnit_Configuration.this.getStateObject().type != null) {
              if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.METHOD) {
                SNode method=(SNode)SModelUtil.findNodeByFQName(DefaultJUnit_Configuration.this.getStateObject().method,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"),GlobalScope.getInstance());
                testRunner.runTestMethod(method);
              }
 else               if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.TESTCLASS) {
                SNode test=(SNode)SModelUtil.findNodeByFQName(DefaultJUnit_Configuration.this.getStateObject().node,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.BTestCase"),GlobalScope.getInstance());
                testRunner.runTest(test);
              }
 else               if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.MODEL) {
                SModel model=GlobalScope.getInstance().getModelDescriptor(SModelReference.fromString(DefaultJUnit_Configuration.this.getStateObject().model)).getSModel();
                testRunner.runTestInModel(model);
              }
 else               if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.MODULE) {
                for (                IModule module : GlobalScope.getInstance().getVisibleModules()) {
                  if (module.getModuleFqName().equals(module)) {
                    testRunner.runTestInModule(module);
                    break;
                  }
                }
              }
              process.value=testRunner.getProcess();
            }
          }
        }
);
        if (process.value != null) {
          handler=new BLProcessHandler(runComponent,process.value,"",Charset.defaultCharset());
        }
      }
      final JComponent finalConsoleComponent=consoleComponent;
      final Runnable finalConsoleDispose=consoleDispose;
      final ProcessHandler finalHandler=handler;
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
