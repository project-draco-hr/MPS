{
  return new RunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      Project project=MPSDataKeys.PROJECT.getData(environment.getDataContext());
      final ConsoleViewImpl consoleView=new ConsoleViewImpl(project,false);
      JComponent consoleComponent=null;
      Runnable consoleDispose=null;
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler=null;
{
        MPSProject mpsproject=MPSDataKeys.MPS_PROJECT.getData(environment.getDataContext());
        final JUnitTestViewComponent runComponent=new JUnitTestViewComponent(mpsproject,consoleView);
        final Wrappers._T<UnitTestRunner> testRunner=new Wrappers._T<UnitTestRunner>(null);
        try {
          testRunner.value=new UnitTestRunner(runComponent);
        }
 catch (        NullPointerException npe) {
          npe.printStackTrace();
        }
        ListSequence.fromList(actions).addSequence(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<AnAction>(),consoleView.createConsoleActions())));
        consoleComponent=runComponent;
        consoleDispose=new Runnable(){
          public void run(){
            runComponent.dispose();
          }
        }
;
        final List<SNode> all=new ArrayList<SNode>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            if (DefaultJUnit_Configuration.this.getStateObject().type != null) {
              IOperationContext context=MPSDataKeys.OPERATION_CONTEXT.getData(environment.getDataContext());
              List<SNode> tests=new ArrayList<SNode>();
              List<SNode> methods=new ArrayList<SNode>();
              if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.METHOD) {
                ListSequence.fromList(methods).addElement(TestRunUtil.getTestMethod(DefaultJUnit_Configuration.this.getStateObject().node,DefaultJUnit_Configuration.this.getStateObject().method));
              }
 else               if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.NODE) {
                ListSequence.fromList(tests).addElement(TestRunUtil.getTestNode(DefaultJUnit_Configuration.this.getStateObject().node));
              }
 else               if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.MODEL) {
                ListSequence.fromList(tests).addSequence(ListSequence.fromList(TestRunUtil.getModelTests(TestRunUtil.getModel(DefaultJUnit_Configuration.this.getStateObject().model))));
              }
 else               if (DefaultJUnit_Configuration.this.getStateObject().type == JUnitRunTypes.MODULE) {
                ListSequence.fromList(tests).addSequence(ListSequence.fromList(TestRunUtil.getModuleTests(DefaultJUnit_Configuration.this.getStateObject().module)));
              }
              runComponent.setTestCaseAndMethod(context,tests,methods);
              ListSequence.fromList(all).addSequence(ListSequence.fromList(tests));
              ListSequence.fromList(all).addSequence(ListSequence.fromList(methods));
            }
          }
        }
);
        if (DefaultJUnit_Configuration.this.getStateObject().myParams == null) {
          DefaultJUnit_Configuration.this.getStateObject().myParams=new ConfigRunParameters();
        }
        if (DefaultJUnit_Configuration.this.getStateObject().myParams.getMake() || !(DefaultJUnit_Configuration.this.getStateObject().withNotNullEditor)) {
          RunUtil.makeBeforeRun(mpsproject,all);
        }
        testRunner.value.setConfigParameters(DefaultJUnit_Configuration.this.getStateObject().myParams);
        if (DefaultJUnit_Configuration.this.getStateObject().myParams != null && DefaultJUnit_Configuration.this.getStateObject().myParams.getUseAlternativeJRE()) {
          testRunner.value.setJavaHomePath(DefaultJUnit_Configuration.this.getStateObject().myParams.getAlternativeJRE());
        }
        final Wrappers._T<Process> process=new Wrappers._T<Process>();
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            process.value=testRunner.value.run(all);
          }
        }
);
        if (process.value != null) {
          JUnitProcessHandler processHandler=new JUnitProcessHandler(runComponent,runComponent.getConsole(),process.value);
          runComponent.onStart(processHandler);
          handler=processHandler;
        }
      }
      final JComponent finalConsoleComponent=consoleComponent;
      final Runnable finalConsoleDispose=consoleDispose;
      final ProcessHandler finalHandler=handler;
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
