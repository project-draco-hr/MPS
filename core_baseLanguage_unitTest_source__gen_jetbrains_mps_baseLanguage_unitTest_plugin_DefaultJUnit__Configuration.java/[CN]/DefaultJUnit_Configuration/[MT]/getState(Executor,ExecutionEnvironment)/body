{
  return new BaseRunProfileState(){
    @Nullable public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      final ConsoleViewImpl consoleView=StacktraceUtil.createConsoleView(MPSDataKeys.PROJECT.getData(environment.getDataContext()));
      JComponent consoleComponent=null;
      Runnable consoleDispose=null;
      final List<AnAction> actions=ListSequence.fromList(new ArrayList<AnAction>());
      ProcessHandler handler=null;
      final MPSProject mpsProject=MPSDataKeys.MPS_PROJECT.getData(environment.getDataContext());
      final IOperationContext operationContext=MPSDataKeys.OPERATION_CONTEXT.getData(environment.getDataContext());
{
        final UnitTestExecutionController parameter=new _FunctionTypes._return_P0_E0<UnitTestExecutionController>(){
          public UnitTestExecutionController invoke(){
            List<SNode> stuffToTest=DefaultJUnit_Configuration.this.collectWhatToTest(mpsProject);
            if (DefaultJUnit_Configuration.this.getStateObject().myJavaRunParameters.getMake()) {
              RunUtil.makeBeforeRun(mpsProject,stuffToTest);
            }
            return new UnitTestExecutionController(stuffToTest,DefaultJUnit_Configuration.this.getStateObject().myJavaRunParameters);
          }
        }
.invoke();
        final Tuples._2<JComponent,Runnable> executeConsoleTmp=MultiTuple.<JComponent,Runnable>empty2().assign((Tuples._2<JComponent,Runnable>)new _FunctionTypes._return_P0_E0<Tuples._2<JComponent,Runnable>>(){
          public Tuples._2<JComponent,Runnable> invoke(){
            final UnitTestViewComponent runComponent=new UnitTestViewComponent(mpsProject,operationContext,consoleView,parameter);
            return MultiTuple.<JComponent,Runnable>from((JComponent)runComponent,new Runnable(){
              public void run(){
                runComponent.dispose();
              }
            }
);
          }
        }
.invoke());
        consoleComponent=executeConsoleTmp._0();
        consoleDispose=new Runnable(){
          public void run(){
            executeConsoleTmp._1().run();
          }
        }
;
        handler=(ProcessHandler)new _FunctionTypes._return_P0_E0<ProcessHandler>(){
          public ProcessHandler invoke(){
            return parameter.execute();
          }
        }
.invoke();
      }
      final JComponent finalConsoleComponent=consoleComponent;
      final Runnable finalConsoleDispose=consoleDispose;
      final ProcessHandler finalHandler=handler;
      return new ExecutionResult(){
        public ExecutionConsole getExecutionConsole(){
          return new ExecutionConsole(){
            public void dispose(){
              if (finalConsoleDispose == null) {
                return;
              }
              finalConsoleDispose.run();
            }
            public JComponent getComponent(){
              return finalConsoleComponent;
            }
            public JComponent getPreferredFocusableComponent(){
              return finalConsoleComponent;
            }
          }
;
        }
        public AnAction[] getActions(){
          return ListSequence.fromList(actions).toGenericArray(AnAction.class);
        }
        public ProcessHandler getProcessHandler(){
          return finalHandler;
        }
      }
;
    }
    public RunnerSettings getRunnerSettings(){
      return null;
    }
    public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
