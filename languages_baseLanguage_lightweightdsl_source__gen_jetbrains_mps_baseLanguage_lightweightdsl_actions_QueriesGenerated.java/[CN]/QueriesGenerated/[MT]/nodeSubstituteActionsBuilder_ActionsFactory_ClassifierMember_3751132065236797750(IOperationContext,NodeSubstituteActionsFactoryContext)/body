{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x340eb2bd2e03d154L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.MethodInstance").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SNodeOperations.ofConcept(SubstituteUtil.getMembers2Substitute(MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x340eb2bd2e03d167L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.MethodDescriptor"),_context.getParentNode()),MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x340eb2bd2e03d167L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.MethodDescriptor"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              Sequence.fromIterable(DSLClassMember__BehaviorDescriptor.findPlaceholders_id5ZzANK5B6wZ.invoke((item),SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")))).visitAll(new IVisitor<SNode>(){
                public void visit(                SNode it){
                  SNodeOperations.deleteNode(it);
                }
              }
);
              return ((SNode)DSLClassMember__BehaviorDescriptor.create_id7ay_HjIOVVe.invoke((item)));
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "method";
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x59e9926e840d9151L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.PropertyInstance").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SNodeOperations.ofConcept(SubstituteUtil.getMembers2Substitute(MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x72b255a0447fbb31L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.PropertyDescriptor"),_context.getParentNode()),MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x72b255a0447fbb31L,"jetbrains.mps.baseLanguage.lightweightdsl.structure.PropertyDescriptor"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              Sequence.fromIterable(DSLClassMember__BehaviorDescriptor.findPlaceholders_id5ZzANK5B6wZ.invoke((item),SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")))).visitAll(new IVisitor<SNode>(){
                public void visit(                SNode it){
                  SNodeOperations.deleteNode(it);
                }
              }
);
              return ((SNode)DSLClassMember__BehaviorDescriptor.create_id7ay_HjIOVVe.invoke((item)));
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "property";
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x112574373bdL,"jetbrains.mps.baseLanguage.structure.ClassifierMember").getDeclarationNode();
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return SNodeOperations.ofConcept(SubstituteUtil.getMembers2Substitute(MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x72b255a044805d9cL,"jetbrains.mps.baseLanguage.lightweightdsl.structure.CustomMemberDescriptor"),_context.getParentNode()),MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x72b255a044805d9cL,"jetbrains.mps.baseLanguage.lightweightdsl.structure.CustomMemberDescriptor"));
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              Sequence.fromIterable(DSLClassMember__BehaviorDescriptor.findPlaceholders_id5ZzANK5B6wZ.invoke((item),SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")))).visitAll(new IVisitor<SNode>(){
                public void visit(                SNode it){
                  SNodeOperations.deleteNode(it);
                }
              }
);
              return ((SNode)DSLClassMember__BehaviorDescriptor.create_id7ay_HjIOVVe.invoke((item)));
            }
            public String getMatchingText(            String pattern){
              return AbstractConceptDeclaration__BehaviorDescriptor.getPresentation_id280s3ZNTXNS.invoke(SLinkOperations.getTarget((item),MetaAdapterFactory.getReferenceLink(0xc7d5b9dda05f4be2L,0xbc73f2e16994cc67L,0x72b255a044805d9cL,0x72b255a044805d9fL,"cncpt")));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
