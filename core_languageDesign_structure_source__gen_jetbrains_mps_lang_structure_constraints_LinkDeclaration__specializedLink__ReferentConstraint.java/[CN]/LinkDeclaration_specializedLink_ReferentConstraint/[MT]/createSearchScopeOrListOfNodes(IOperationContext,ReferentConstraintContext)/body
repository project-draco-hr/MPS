{
  if (_context.getReferenceNode() == null) {
    return null;
  }
  final boolean aggregation=SPropertyOperations.hasValue(_context.getReferenceNode(),"metaClass","aggregation","reference");
  List<SNode> result=ListOperations.<SNode>createList();
  SNode enclosingConcept=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",true,false);
  List<SNode> directSupers=SConceptOperations.getDirectSuperConcepts(enclosingConcept,false);
  for (  SNode concept : ListSequence.fromList(directSupers)) {
    List<SNode> links=AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept);
    ListSequence.fromList(result).addSequence(ListSequence.fromList(links).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        if (aggregation) {
          return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
        }
        return SPropertyOperations.hasValue(it,"metaClass","reference","reference");
      }
    }
));
  }
  return new SimpleSearchScope(result);
}
