{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0bb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_ConstantValue;
      }
    break;
case 1:
  if (true) {
    return props_ExtractStatementListExpression;
  }
break;
case 2:
if (true) {
return props_ExtractStatementListInnerExpression;
}
break;
case 3:
if (true) {
return props_ExtractStaticInnerClassConcept;
}
break;
case 4:
if (true) {
return props_ExtractStaticInnerClassCreator;
}
break;
case 5:
if (true) {
return props_ExtractStaticInnerClassExpression;
}
break;
case 6:
if (true) {
return props_ExtractStaticMethodExpression;
}
break;
case 7:
if (true) {
return props_ExtractStaticMethod_CallExpression;
}
break;
case 8:
if (true) {
return props_ExtractToConstantExpression;
}
break;
case 9:
if (true) {
return props_ExtractToConstantRefExpression;
}
break;
case 10:
if (true) {
return props_InternalAnonymousClass;
}
break;
case 11:
if (true) {
return props_InternalAnonymousClassCreator;
}
break;
case 12:
if (true) {
return props_InternalClassCreator;
}
break;
case 13:
if (true) {
return props_InternalClassExpression;
}
break;
case 14:
if (true) {
return props_InternalClassifierType;
}
break;
case 15:
if (true) {
return props_InternalNewExpression;
}
break;
case 16:
if (true) {
return props_InternalPartialFieldReference;
}
break;
case 17:
if (true) {
return props_InternalPartialInstanceMethodCall;
}
break;
case 18:
if (true) {
return props_InternalStaticFieldReference;
}
break;
case 19:
if (true) {
return props_InternalStaticMethodCall;
}
break;
case 20:
if (true) {
return props_InternalSuperMethodCallOperation;
}
break;
case 21:
if (true) {
return props_InternalThisExpression;
}
break;
case 22:
if (true) {
return props_InternalTypedStaticFieldReference;
}
break;
case 23:
if (true) {
return props_InternalVariableReference;
}
break;
case 24:
if (true) {
return props_TypeHintExpression;
}
break;
case 25:
if (true) {
return props_WeakClassReference;
}
break;
default :
}
}
throw new IllegalStateException();
}
