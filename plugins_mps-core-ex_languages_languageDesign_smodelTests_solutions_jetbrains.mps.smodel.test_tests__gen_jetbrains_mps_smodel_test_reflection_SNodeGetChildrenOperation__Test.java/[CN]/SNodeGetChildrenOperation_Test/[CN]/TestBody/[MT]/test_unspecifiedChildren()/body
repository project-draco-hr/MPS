{
  this.addNodeById("8758390115029078425");
  this.addNodeById("5815925154349132136");
  this.addNodeById("2166349271756548530");
  int initialSize=ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.cast(this.getNodeById("2166349271756548531"),"jetbrains.mps.lang.smodelTests.structure.Root"))).count();
  jetbrains.mps.smodel.SNode unspecifiedChild=SConceptOperations.createNewNode("jetbrains.mps.lang.smodelTests.structure.GrandChild",null);
  String unspecifiedChildRole=this.addUnspecifiedChild(SNodeOperations.cast(this.getNodeById("2166349271756548531"),"jetbrains.mps.lang.smodelTests.structure.Root"),unspecifiedChild);
  Assert.assertEquals(initialSize + 1,ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.cast(this.getNodeById("2166349271756548531"),"jetbrains.mps.lang.smodelTests.structure.Root"))).count());
  Iterable<SNode> unspecifiedChildren=ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.cast(this.getNodeById("2166349271756548531"),"jetbrains.mps.lang.smodelTests.structure.Root"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SNodeOperations.getContainingLinkDeclaration(it) == null);
    }
  }
);
  Assert.assertEquals(1,Sequence.fromIterable(unspecifiedChildren).count());
  SNode theChild=Sequence.fromIterable(unspecifiedChildren).first();
  Assert.assertEquals(unspecifiedChildRole,SNodeOperations.getContainingLinkRole(theChild));
  Assert.assertEquals(unspecifiedChild,theChild);
}
