{
  XmlFastScanner s=new XmlFastScanner(myData);
  int token;
  boolean insideRegistry=false, insideImports=false, underNode=false;
  final Matcher attrMatcher=Pattern.compile(String.format("\\s(%s|%s|%s)\\s*=\\s*\"([^\"]+)\"",ModelPersistence9.ID,ModelPersistence9.TO,ModelPersistence9.REF)).matcher("");
  while ((token=s.next()) != XmlFastScanner.EOI) {
    if (token != XmlFastScanner.OPEN_TAG && token != XmlFastScanner.SIMPLE_TAG) {
      continue;
    }
    final String tokenName=s.getName();
    if (insideRegistry) {
      if (ModelPersistence9.REGISTRY_CONCEPT.equals(tokenName) && attrMatcher.reset(s.token()).find()) {
        handleConceptId(attrMatcher.group(2));
      }
    }
 else     if (insideImports) {
      if (ModelPersistence9.IMPORT.equals(tokenName) && attrMatcher.reset(s.token()).find()) {
        handleModelImportRef(JDOMUtil.unescapeText(attrMatcher.group(2)));
      }
    }
 else     if (underNode) {
      if (ModelPersistence9.NODE_REFERENCE.equals(tokenName) && attrMatcher.reset(s.token()).find()) {
        handleExternalReference(JDOMUtil.unescapeText(attrMatcher.group(2)));
      }
    }
    if (s.tagDepth() == 1) {
      if (ModelPersistence9.REGISTRY.equals(tokenName)) {
        insideRegistry=true;
        insideImports=underNode=false;
      }
 else       if (ModelPersistence9.IMPORTS.equals(tokenName)) {
        insideImports=true;
        insideRegistry=underNode=false;
      }
 else       if (ModelPersistence9.NODE.equals(tokenName)) {
        underNode=true;
        insideRegistry=insideImports=false;
      }
    }
  }
}
