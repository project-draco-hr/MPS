{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          SNode contextProject=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.build.structure.BuildProject",true,false);
          String target=null;
          if ((_context.getContextNode() != null) && contextProject != null) {
            Scope importedArtifactsScope=ScopeUtil.getVisibleArtifactsScope(contextProject,false);
            if (importedArtifactsScope != null && !(importedArtifactsScope instanceof ModelPlusImportedScope)) {
              target=importedArtifactsScope.getReferenceText(_context.getContextNode(),_context.getParameterNode());
            }
          }
          if (target == null) {
            target=BehaviorReflection.invokeVirtual(String.class,_context.getParameterNode(),"virtual_getPresentation_1213877396640",new Object[]{});
          }
          return (_context.getSmartReference() ? "import " + target : target);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_gjnfdd_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode contextProject=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.build.structure.BuildProject",true,false);
            if ((contextProject != null)) {
              return ScopeUtil.getVisibleArtifactsScope(contextProject,false);
            }
            return new EmptyScope();
          }
        }
      }
;
    }
  }
);
  return references;
}
