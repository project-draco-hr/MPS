{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0xbabdfbeee1350f2L,0xbabdfbeee1350f4L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0xbabdfbeee1350f2L,0xbabdfbeee1350f4L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          SNode contextProject=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x4df58c6f18f84a13L,"jetbrains.mps.build.structure.BuildProject"),true,false);
          String target=null;
          if ((_context.getContextNode() != null) && contextProject != null) {
            Scope importedArtifactsScope=ScopeUtil.getVisibleArtifactsScope(contextProject,false);
            if (importedArtifactsScope != null && !(importedArtifactsScope instanceof ModelPlusImportedScope)) {
              target=importedArtifactsScope.getReferenceText(_context.getContextNode(),_context.getParameterNode());
            }
          }
          if (target == null) {
            target=BaseConcept_BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(_context.getParameterNode());
          }
          return (_context.getSmartReference() ? "import " + target : target);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_gjnfdd_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode contextProject=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x4df58c6f18f84a13L,"jetbrains.mps.build.structure.BuildProject"),true,false);
            if ((contextProject != null)) {
              return ScopeUtil.getVisibleArtifactsScope(contextProject,false);
            }
            return new EmptyScope();
          }
        }
      }
;
    }
  }
);
  return references;
}
