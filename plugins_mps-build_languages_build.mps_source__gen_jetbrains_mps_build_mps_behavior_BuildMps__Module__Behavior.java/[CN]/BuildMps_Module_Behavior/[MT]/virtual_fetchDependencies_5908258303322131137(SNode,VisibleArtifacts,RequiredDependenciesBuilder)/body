{
  MPSModulesClosure closure=new MPSModulesClosure(artifacts.getGenContext(),thisNode).closure();
  boolean needsFetch=false;
  List<SNode> requiredJars=new ArrayList<SNode>();
  for (  SNode m : Sequence.fromIterable(closure.getModules())) {
    SNode artifact;
    if (SNodeOperations.getContainingRoot(m) != SNodeOperations.getContainingRoot(thisNode)) {
      artifact=SNodeOperations.as(artifacts.findArtifact(m),"jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        builder.add(artifact,m);
        needsFetch=true;
      }
    }
    for (    SNode dep : ListSequence.fromList(SLinkOperations.getTargets(m,"dependencies",true)).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return (SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency") ? SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency"),"dependency",true) : it);
      }
    }
).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar");
      }
    }
).select(new ISelector<SNode,SNode>(){
      public SNode select(      SNode it){
        return SNodeOperations.cast(it,"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar");
      }
    }
)) {
      if ((SLinkOperations.getTarget(dep,"customLocation",true) != null)) {
        Tuples._2<SNode,Boolean> dependencyTarget=BuildSource_JavaExternalJarRef_Behavior.call_getDependencyTarget_5610619299014309566(SLinkOperations.getTarget(dep,"customLocation",true),artifacts);
        if (dependencyTarget != null) {
          if ((boolean)dependencyTarget._1()) {
            builder.addWithContent(dependencyTarget._0());
          }
 else {
            builder.add(dependencyTarget._0());
          }
          needsFetch=true;
        }
      }
 else {
        if (SNodeOperations.getContainingRoot(m) == SNodeOperations.getContainingRoot(thisNode)) {
          continue;
        }
        ListSequence.fromList(requiredJars).addElement(SLinkOperations.getTarget(dep,"path",true));
      }
    }
  }
  for (  SNode lr : Sequence.fromIterable(closure.getLanguagesWithRuntime())) {
    for (    SNode runtime : SLinkOperations.getTargets(lr,"runtime",true)) {
      if (!(SNodeOperations.isInstanceOf(runtime,"jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime"))) {
        continue;
      }
      SNode jarRuntime=SNodeOperations.cast(runtime,"jetbrains.mps.build.mps.structure.BuildMps_ModuleJarRuntime");
      if ((SLinkOperations.getTarget(jarRuntime,"customLocation",true) != null)) {
        Tuples._2<SNode,Boolean> dependencyTarget=BuildSource_JavaExternalJarRef_Behavior.call_getDependencyTarget_5610619299014309566(SLinkOperations.getTarget(jarRuntime,"customLocation",true),artifacts);
        if (dependencyTarget != null) {
          if ((boolean)dependencyTarget._1()) {
            builder.addWithContent(dependencyTarget._0());
          }
 else {
            builder.add(dependencyTarget._0());
          }
          needsFetch=true;
        }
      }
 else {
        if (SNodeOperations.getContainingRoot(lr) == SNodeOperations.getContainingRoot(thisNode)) {
          continue;
        }
        ListSequence.fromList(requiredJars).addElement(SLinkOperations.getTarget(jarRuntime,"path",true));
      }
    }
  }
  for (  SNode path : ListSequence.fromList(requiredJars)) {
    Tuples._2<SNode,String> resource=artifacts.getResource(path);
    SNode artifact=SNodeOperations.as(resource._0(),"jetbrains.mps.build.structure.BuildLayout_Node");
    if (artifact != null) {
      if (isNotEmpty_va39l0_a0a0c0i0c(resource._1())) {
        builder.addWithContent(artifact);
      }
 else {
        builder.add(artifact);
      }
      needsFetch=true;
      if (SNodeOperations.isInstanceOf(artifact,"jetbrains.mps.build.structure.BuildLayout_AbstractCopy")) {
        SNode file=SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.cast(artifact,"jetbrains.mps.build.structure.BuildLayout_AbstractCopy"),"fileset",true),"jetbrains.mps.build.structure.BuildInputSingleFile");
        if ((file != null)) {
          artifacts.findArtifact(SLinkOperations.getTarget(file,"path",true));
        }
      }
    }
  }
  MPSModulesClosure.RequiredJavaModules requiredJava=closure.getRequiredJava();
  for (  SNode jm : Sequence.fromIterable(requiredJava.getModules())) {
    if (requiredJava.isReexported(jm)) {
      JavaExportUtil.requireModule(artifacts,jm,thisNode,builder);
    }
 else {
      if (SNodeOperations.getContainingRoot(jm) == SNodeOperations.getContainingRoot(thisNode)) {
        continue;
      }
      SNode artifact=SNodeOperations.as(artifacts.findArtifact(jm),"jetbrains.mps.build.structure.BuildLayout_Node");
      if (artifact != null) {
        needsFetch=true;
        builder.add(artifact,jm);
      }
    }
  }
  if (needsFetch) {
    artifacts.needsFetch(thisNode);
  }
}
