{
  boolean needStopReductionBlocking=false;
  ReductionRule reductionRule=null;
  GeneratedMatchingPattern pattern=null;
  try {
    ReductionRule[] conceptRules=myRuleManager.getRuleFinder().findReductionRules(inputNode);
    if (conceptRules == null) {
      return null;
    }
    for (    ReductionRule rule : conceptRules) {
      if (!getBlockedReductionsData().isReductionBlocked(inputNode,rule)) {
        if (rule instanceof Reduction_MappingRule) {
          if (getExecutor().checkCondition(((Reduction_MappingRule)rule).getConditionFunction(),false,inputNode,rule.getNode())) {
            getBlockedReductionsData().registerInputReduction(inputNode,rule);
            reductionRule=rule;
            break;
          }
        }
 else         if (rule instanceof PatternReduction_MappingRule) {
          pattern=getExecutor().checkIfApplicable((PatternReduction_MappingRule)rule,inputNode);
          if (pattern != null) {
            getBlockedReductionsData().registerInputReduction(inputNode,rule);
            reductionRule=rule;
            break;
          }
        }
      }
    }
    if (reductionRule != null) {
      needStopReductionBlocking=startReductionBlockingForInput(inputNode);
      List<SNode> outputNodes=applyReductionRule(inputNode,reductionRule,pattern);
      if (outputNodes != null && outputNodes.size() == 1) {
        SNode reducedNode=outputNodes.get(0);
        getMappings().addOutputNodeByInputNodeAndMappingName(inputNode,mappingName,reducedNode);
        getMappings().addCopiedOutputNodeForInputNode(inputNode,reducedNode);
        reducedNode.putUserObjects(inputNode);
        if (inputNode.getModel() == getGeneratorSessionContext().getOriginalInputModel()) {
          reducedNode.putUserObject(TemplateQueryContext.ORIGINAL_INPUT_NODE,inputNode);
          reducedNode.putUserObject(TemplateQueryContext.ORIGINAL_DEBUG_NODE,inputNode);
        }
      }
      return outputNodes;
    }
  }
 catch (  DismissTopMappingRuleException ex) {
    if (ex.isLoggingNeeded()) {
      String messageText="-- dismissed reduction rule: " + reductionRule.getDebugText();
      if (ex.isInfo()) {
        showInformationMessage(reductionRule.getNode(),messageText);
      }
 else       if (ex.isWarning()) {
        showWarningMessage(reductionRule.getNode(),messageText);
      }
 else {
        showErrorMessage(reductionRule.getNode(),messageText);
      }
    }
  }
 finally {
    if (needStopReductionBlocking) {
      stopReductionBlockingForInput(inputNode);
    }
  }
  return null;
}
