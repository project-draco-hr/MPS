{
  AbstractConceptDeclaration applicableConcept=rule.getApplicableConcept();
  if (applicableConcept == null) {
    showErrorMessage(null,null,BaseAdapter.fromAdapter(rule),"rule has no applicable concept defined");
    return;
  }
  boolean includeInheritors=rule.getApplyToConceptInheritors();
  Iterable<SNode> inputNodes=myInputModel.getModelDescriptor().getFastNodeFinder().getNodes(applicableConcept,includeInheritors);
  for (  SNode inputNode : inputNodes) {
    if (getGeneratorSessionContext().isCopiedRoot(inputNode)) {
      continue;
    }
    if (myExecutor.checkCondition(rule.getConditionFunction(),false,inputNode,rule.getNode())) {
      myGenerationTracer.pushInputNode(inputNode);
      myGenerationTracer.pushRule(rule.getNode());
      try {
        SNode templateNode=BaseAdapter.fromAdapter(rule.getTemplate());
        if (templateNode != null) {
          createRootNodeFromTemplate(GeneratorUtil.getMappingName(rule,null),templateNode,inputNode);
        }
 else {
          showErrorMessage(BaseAdapter.fromAdapter(rule),"no template is defined for the rule");
        }
        if (inputNode.isRoot() && rule.getKeepSourceRoot() == Options_DefaultTrue.default_) {
          rootsToCopy.remove(inputNode);
        }
      }
 catch (      DismissTopMappingRuleException e) {
      }
 finally {
        myGenerationTracer.closeInputNode(inputNode);
      }
    }
  }
}
