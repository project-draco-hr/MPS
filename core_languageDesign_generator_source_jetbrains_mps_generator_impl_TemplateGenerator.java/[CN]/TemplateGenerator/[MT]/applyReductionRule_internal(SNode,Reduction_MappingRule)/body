{
  String ruleMappingName=GeneratorUtil.getMappingName(rule,null);
  RuleConsequence ruleConsequence=rule.getRuleConsequence();
  if (ruleConsequence == null) {
    showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule: no rule consequence");
    return null;
  }
  List<Pair<SNode,String>> nodeAndMappingNamePairs=GeneratorUtil.getTemplateNodesFromRuleConsequence(ruleConsequence,inputNode,rule.getNode(),this);
  if (nodeAndMappingNamePairs == null) {
    showErrorMessage(inputNode,null,ruleConsequence.getNode(),"error processing reduction rule consequence");
    return null;
  }
  List<SNode> result=new ArrayList<SNode>(nodeAndMappingNamePairs.size());
  TemplateProcessor templateProcessor=new TemplateProcessor(this);
  for (  Pair<SNode,String> nodeAndMappingNamePair : nodeAndMappingNamePairs) {
    SNode templateNode=nodeAndMappingNamePair.o1;
    String mappingName=nodeAndMappingNamePair.o2 != null ? nodeAndMappingNamePair.o2 : ruleMappingName;
    try {
      result.addAll(templateProcessor.processTemplateNode(mappingName,templateNode,inputNode));
    }
 catch (    DismissTopMappingRuleException e) {
      throw e;
    }
catch (    TemplateProcessingFailureException e) {
      showErrorMessage(inputNode,templateNode,rule.getNode(),"error processing reduction rule");
    }
catch (    GenerationFailureException e) {
      throw e;
    }
catch (    GenerationCanceledException e) {
      throw e;
    }
catch (    Throwable t) {
      LOG.error(t,BaseAdapter.fromNode(templateNode));
      showErrorMessage(inputNode,templateNode,rule.getNode(),"error processing reduction rule");
    }
  }
  return result;
}
