{
  checkMonitorCanceled();
  if (isPrimary) {
    for (    CreateRootRule rule : myRuleManager.getCreateRootRules()) {
      checkMonitorCanceled();
      applyCreateRootRule(rule);
    }
  }
  List<SNode> rootsNotToCopy=new ArrayList<SNode>();
  for (  Root_MappingRule rule : myRuleManager.getRoot_MappingRules()) {
    checkMonitorCanceled();
    applyRoot_MappingRule(rule,rootsNotToCopy);
  }
  checkMonitorCanceled();
  getGeneratorSessionContext().clearCopiedRootsSet();
  List<SNode> copiedOutputRoots=copyRootsFromInputModel(rootsNotToCopy);
  for (  SNode copiedOutputRoot : copiedOutputRoots) {
    getGeneratorSessionContext().registerCopiedRoot(copiedOutputRoot);
    myOutputModel.addRoot(copiedOutputRoot);
  }
  for (  SNode outputRootNode : copiedOutputRoots) {
    checkMonitorCanceled();
    SNode inputRootNode=findInputNodeById(outputRootNode.getSNodeId());
    applyReductionRules(inputRootNode,outputRootNode);
  }
  applyWeaving_MappingRules();
  myDelayedChanges.doAllChanges();
  for (  SNode copiedRoot : copiedOutputRoots) {
    checkMonitorCanceled();
    invalidateReferencesInCopiedNode(copiedRoot);
  }
  revalidateAllReferences();
  checkMonitorCanceled();
  return isChanged();
}
