{
  List<SNode> resVdecls=ListSequence.fromList(new ArrayList<SNode>());
  SNode wrpPrgNode=SNodeOperations.getNodeAncestorWhereConceptInList(closure,new SConcept[]{MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123136l,"jetbrains.mps.baseLanguage.structure.StatementList"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")},false,false);
  if ((wrpPrgNode != null)) {
    Map<SNode,Integer> clsMap=collectVariableUsages(SLinkOperations.getTarget(closure,MetaAdapterFactory.getContainmentLink(new UUID(-200093298712821347l,-8038623698278341771l),1199569711397l,1199569916463l,"body")));
    for (    IMapping<SNode,Integer> m : SetSequence.fromSet(MapSequence.fromMap(clsMap).mappingsSet())) {
      ListSequence.fromList(resVdecls).addElement(SNodeOperations.cast(m.key(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431474542l,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")));
    }
    if (MapSequence.fromMap(clsMap).isNotEmpty()) {
      Map<SNode,Integer> wrpMap=collectVariableUsages(wrpPrgNode);
      for (      IMapping<SNode,Integer> m : SetSequence.fromSet(MapSequence.fromMap(clsMap).mappingsSet())) {
        if (m.value() == 0) {
          if (!(MapSequence.fromMap(wrpMap).containsKey(m.key())) || MapSequence.fromMap(wrpMap).get(m.key()) <= 1) {
            ListSequence.fromList(resVdecls).removeElement(SNodeOperations.cast(m.key(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068431474542l,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")));
          }
        }
      }
    }
  }
  return resVdecls;
}
