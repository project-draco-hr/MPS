{
  SNode expressionType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(node),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"),true);
  if (SNodeOperations.isInstanceOf(expressionType,"jetbrains.mps.baseLanguage.structure.IInternalType")) {
    expressionType=IInternalType_Behavior.call_getPublicType_1213877443338(SNodeOperations.cast(expressionType,"jetbrains.mps.baseLanguage.structure.IInternalType"));
  }
  if (SNodeOperations.isInstanceOf(expressionType,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
    SNode exprClassifier=SLinkOperations.getTarget(SNodeOperations.cast(expressionType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false);
    if (SNodeOperations.isInstanceOf(exprClassifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      List<SNode> params=SLinkOperations.getTargets(SNodeOperations.cast(expressionType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true);
      expressionType=new IntroduceVariableRefactoring.QuotationClass_x65dk2_a0a1a1a2a1().createNode(SLinkOperations.getTarget(SNodeOperations.cast(exprClassifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass"),"classifier",false));
      ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(expressionType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"parameter",true)).addSequence(ListSequence.<SNode>fromList(params));
    }
  }
  if (SNodeOperations.isInstanceOf(expressionType,"jetbrains.mps.baseLanguage.structure.WildCardType")) {
    expressionType=new IntroduceVariableRefactoring.QuotationClass_x65dk2_a0a0a3a1().createNode();
  }
  if (SNodeOperations.isInstanceOf(expressionType,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
    expressionType=SLinkOperations.getTarget(SNodeOperations.cast(expressionType,"jetbrains.mps.baseLanguage.structure.UpperBoundType"),"bound",true);
  }
  if (SNodeOperations.isInstanceOf(expressionType,"jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
    expressionType=SLinkOperations.getTarget(SNodeOperations.cast(expressionType,"jetbrains.mps.baseLanguage.structure.LowerBoundType"),"bound",true);
  }
  return expressionType;
}
