{
  Set<SNode> nodesToInvalidate=nonTypesystem ? myCurrentNodesToInvalidateNonTypesystem : myCurrentNodesToInvalidate;
  WeakHashMap<SNode,WeakSet<SNode>> nodesToDependentNodes=nonTypesystem ? myNodesToDependentNodesNonTypesystem : myNodesToDependentNodes;
  Set<SNode> invalidatedNodes=new HashSet<SNode>();
  Set<SNode> newNodesToInvalidate=new HashSet<SNode>();
  Set<SNode> currentNodesToInvalidate=nodesToInvalidate;
  while (!currentNodesToInvalidate.isEmpty()) {
    for (    SNode nodeToInvalidate : currentNodesToInvalidate) {
      if (invalidatedNodes.contains(nodeToInvalidate))       continue;
      invalidateNode(nodeToInvalidate,nonTypesystem);
      invalidatedNodes.add(nodeToInvalidate);
      WeakSet<SNode> nodes=nodesToDependentNodes.get(nodeToInvalidate);
      if (nodes != null) {
        newNodesToInvalidate.addAll(nodes);
      }
    }
    currentNodesToInvalidate=newNodesToInvalidate;
    newNodesToInvalidate=new HashSet<SNode>();
  }
  nodesToInvalidate.clear();
}
