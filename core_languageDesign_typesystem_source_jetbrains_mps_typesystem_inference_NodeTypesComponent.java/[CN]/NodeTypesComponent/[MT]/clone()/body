{
  NodeTypesComponent result=(NodeTypesComponent)super.clone();
  result.myNodesToTypesMap=new HashMap<SNode,SNode>();
  result.myNodesToErrorsMap=new HashMap<SNode,IErrorReporter>();
  result.myNodesToNonTypesystemErrorsMap=new HashMap<SNode,Stack<IErrorReporter>>();
  result.myFullyCheckedNodes=new WeakSet<SNode>();
  result.myPartlyCheckedNodes=new WeakSet<SNode>();
  result.myCheckedNodesNonTypesystem=new HashSet<Pair<SNode,NonTypesystemRule_Runtime>>();
  result.myNodesAndNTRulesToErrors=new HashMap<SNode,Map<NonTypesystemRule_Runtime,Set<IErrorReporter>>>();
  result.myNodesToDependentNodesWithNTRules=new HashMap<SNode,WeakHashMap<SNode,Set<NonTypesystemRule_Runtime>>>();
  result.myPropertiesToDependentNodesWithNTRules=new HashMap<Pair<SNode,String>,WeakHashMap<SNode,Set<NonTypesystemRule_Runtime>>>();
  result.myTypedTermsToDependentNodesWithNTRules=new HashMap<SNode,WeakHashMap<SNode,Set<NonTypesystemRule_Runtime>>>();
  result.myTypeCheckingContext=null;
  result.myEquationManager=new EquationManager(result.myTypeChecker,result.myTypeCheckingContext);
  result.myNodesToDependentNodes=new WeakHashMap<SNode,WeakSet<SNode>>();
  result.myModelDescriptorsWithListener=new HashSet<SModelDescriptor>();
  result.myModelListener=new MyModelListener();
  result.myTypeRecalculatedListener=new MyTypeRecalculatedListener();
  result.myNodesReadListener=new MyEventsReadListener();
  result.myCurrentNodesToInvalidate=new HashSet<SNode>();
  result.myCurrentNodesToInvalidateNonTypesystem=new HashSet<SNode>();
  result.myCurrentPropertiesToInvalidateNonTypesystem=new HashSet<Pair<SNode,String>>();
  result.myCurrentTypedTermsToInvalidateNonTypesystem=new HashSet<SNode>();
  result.myCurrentFrontier=null;
  result.myCurrentCheckedNode=null;
  result.myNodesToRules=new WeakHashMap<SNode,Set<Pair<String,String>>>();
  result.myRegisteredVariables=new HashMap<String,Set<SNode>>();
  return result;
}
