{
  SNode type=null;
  SNode prevNode=null;
  SNode node=initialNode;
  myIsSpecial=true;
  try {
    while (node != null) {
      List<SNode> additionalNodes=new ArrayList<SNode>(givenAdditionalNodes);
      if (prevNode != null) {
        additionalNodes.add(prevNode);
      }
      computeTypes(node,refreshTypes,false,additionalNodes);
      type=getType(initialNode);
      if (type == null || type.getAdapter() instanceof RuntimeTypeVariable || (type.getAdapter() instanceof RuntimeHoleType && myHoleTypeWrapper.getInequationSystem().isEmpty()) || !type.getAdapter().getDescendants(RuntimeTypeVariable.class).isEmpty()) {
        if (node.isRoot()) {
          computeTypes(node,refreshTypes,true,new ArrayList<SNode>());
          type=getType(initialNode);
          return type;
        }
        prevNode=node;
        node=node.getParent();
      }
 else {
        return type;
      }
    }
  }
  finally {
    myIsSpecial=false;
  }
  return type;
}
