{
  Map<SNode,List<IErrorReporter>> toAdd=new HashMap<SNode,List<IErrorReporter>>();
  for (  SNode node : myNodesToErrorsMap.keySet()) {
    List<IErrorReporter> iErrorReporters=myNodesToErrorsMap.get(node);
    if (iErrorReporters != null) {
      for (      IErrorReporter iErrorReporter : iErrorReporters) {
        String errorString=iErrorReporter.reportError();
        SimpleErrorReporter reporter=new SimpleErrorReporter(node,errorString,iErrorReporter.getRuleModel(),iErrorReporter.getRuleId(),iErrorReporter.getMessageStatus(),iErrorReporter.getErrorTarget());
        reporter.setIntentionProvider(iErrorReporter.getIntentionProvider());
        reporter.setAdditionalRulesIds(iErrorReporter.getAdditionalRulesIds());
        List<IErrorReporter> errorReporterList=toAdd.get(node);
        if (errorReporterList == null) {
          errorReporterList=new ArrayList<IErrorReporter>();
          toAdd.put(node,errorReporterList);
        }
        errorReporterList.add(iErrorReporter);
      }
    }
  }
  myNodesToErrorsMap.putAll(toAdd);
  myModelListenerManager.updateGCedNodes();
  TypeChecker.getInstance().addTypeRecalculatedListener(myTypeRecalculatedListener);
  LanguageHierarchyCache.getInstance().addCacheChangeListener(myLanguageCacheListener);
}
