{
  Set<NonTypesystemRule_Runtime> nonTypesystemRules=myTypeChecker.getRulesManager().getNonTypesystemRules(node);
  if (nonTypesystemRules != null) {
    for (    NonTypesystemRule_Runtime rule : nonTypesystemRules) {
      Pair<SNode,NonTypesystemRule_Runtime> nodeAndRule=new Pair<SNode,NonTypesystemRule_Runtime>(node,rule);
      MyTypesReadListener typesReadListener=new MyTypesReadListener();
      MyLanguageCachesReadListener languageCachesReadListener=new MyLanguageCachesReadListener();
      if (isIncrementalMode()) {
        if (myCheckedNodesNonTypesystem.contains(nodeAndRule)) {
          continue;
        }
        myNodesReadListener.clear();
        NodeReadEventsCaster.setNodesReadListener(myNodesReadListener);
        TypeChecker.getInstance().setTypesReadListener(typesReadListener);
        LanguageHierarchyCache.getInstance().setReadAccessListener(languageCachesReadListener);
        myNonTypesystemRuleAndNodeBeingChecked=new Pair<SNode,NonTypesystemRule_Runtime>(node,rule);
      }
      try {
        applyRuleToNode(node,rule);
      }
  finally {
        myNonTypesystemRuleAndNodeBeingChecked=null;
        if (isIncrementalMode()) {
          LanguageHierarchyCache.getInstance().removeReadAccessListener();
          TypeChecker.getInstance().removeTypesReadListener();
          NodeReadEventsCaster.removeNodesReadListener();
        }
      }
      if (isIncrementalMode()) {
synchronized (ACCESS_LOCK) {
          myNodesReadListener.setAccessReport(true);
          addDepedentNodesNonTypesystem(node,rule,new HashSet<SNode>(myNodesReadListener.myAccessedNodes));
          addDepedentPropertiesNonTypesystem(node,rule,new HashSet<Pair<SNode,String>>(myNodesReadListener.myAccessedProperties));
          myNodesReadListener.setAccessReport(false);
          languageCachesReadListener.setAccessReport(true);
          if (languageCachesReadListener.myIsCacheAccessed) {
            addCacheDependentNodesNonTypesystem(node,rule);
          }
          languageCachesReadListener.setAccessReport(false);
          typesReadListener.setAccessReport(true);
          addDepedentTypeTermsNonTypesystem(node,rule,new HashSet<SNode>(typesReadListener.myAccessedNodes));
          typesReadListener.setAccessReport(false);
        }
        myNodesReadListener.clear();
      }
      myCheckedNodesNonTypesystem.add(nodeAndRule);
    }
  }
}
