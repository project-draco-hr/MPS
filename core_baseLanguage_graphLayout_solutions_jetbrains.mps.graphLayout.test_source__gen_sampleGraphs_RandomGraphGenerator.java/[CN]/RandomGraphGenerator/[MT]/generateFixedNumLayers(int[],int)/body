{
  int n=0;
  int[] firstVertice=new int[numInLayer.length + 1];
  for (int i=0; i < numInLayer.length; i++) {
    firstVertice[i]=n;
    n+=numInLayer[i];
  }
  firstVertice[numInLayer.length]=n;
  int[] layers=new int[n];
  for (int i=0; i < numInLayer.length; i++) {
    for (int j=firstVertice[i]; j < firstVertice[i + 1]; j++) {
      layers[j]=i;
    }
  }
  Graph g=SimpleDirectedGraphs.emptyGraph(n);
  List<Set<Integer>> connected=ListSequence.fromList(new ArrayList<Set<Integer>>());
  for (int i=0; i < n; i++) {
    ListSequence.fromList(connected).addElement(SortedSetSequence.fromSet(new TreeSet<Integer>()));
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(i)).addElement(i);
  }
  if (numInLayer.length == 1) {
    return g;
  }
  int numAddedEdges=0;
  for (int i=firstVertice[1]; i < n; i++) {
    int source=firstVertice[layers[i] - 1] + RandomGraphGenerator.rand.nextInt(numInLayer[layers[i] - 1]);
    g.addEdgeByIndex(source,i);
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(source)).addElement(i);
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(i)).addElement(source);
    numAddedEdges++;
  }
  if (numAddedEdges > numEdges) {
    throw new IllegalArgumentException("not enought edges!");
  }
  int maxIter=1000;
  int countBad=0;
  for (int i=numAddedEdges; i < numEdges; i++) {
    int s=0;
    int t=0;
    int iter=0;
    for (; iter < maxIter; iter++) {
      int a=RandomGraphGenerator.rand.nextInt(n);
      int b=RandomGraphGenerator.rand.nextInt(n);
      s=Math.min(a,b);
      t=Math.max(a,b);
      if (layers[s] != layers[t] && !(SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).contains(t))) {
        break;
      }
    }
    if (iter == maxIter) {
      countBad++;
      s=0;
      while (s < n && SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).count() == n) {
        s++;
      }
      if (s == n) {
        throw new IllegalArgumentException("too much edges!");
      }
      t=s;
      while (t < n && (layers[t] == layers[s] || SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).contains(t))) {
        t++;
      }
      if (t == n) {
        throw new IllegalArgumentException("too much edges!");
      }
    }
    g.addEdgeByIndex(s,t);
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(s)).addElement(t);
    SetSequence.fromSet(ListSequence.fromList(connected).getElement(t)).addElement(s);
  }
  System.out.println("random failed " + countBad + " times!");
  return g;
}
