{
  final SNode contextClass=SNodeOperations.getAncestor(mySelectedNode,"jetbrains.mps.baseLanguage.structure.ClassConcept",true,false);
  final SNode contextMethod=SNodeOperations.getAncestor(mySelectedNode,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration",true,false);
  final SNodePointer[] methods=ModelAccess.instance().runReadAction(new Computable<SNodePointer[]>(){
    public SNodePointer[] compute(){
      List<SNode> methodsToOverride=(myIsOverride ? ((List<SNode>)BehaviorManager.getInstance().invoke(Object.class,contextClass,"virtual_getMethodsToOverride_5418393554803767537",new Class[]{SNode.class})) : ((List<SNode>)BehaviorManager.getInstance().invoke(Object.class,contextClass,"virtual_getMethodsToImplement_5418393554803775106",new Class[]{SNode.class})));
      return OverrideImplementMethodsDialog.toNodePointers(OverrideImplementMethodsDialog.sortMethods(contextClass,methodsToOverride));
    }
  }
);
  final OverrideImplementMethodsDialog dialog=new OverrideImplementMethodsDialog(methods,ProjectHelper.toIdeaProject(myProject)){
    @Override protected boolean showInsertOverride(){
      return myIsOverride;
    }
  }
;
  dialog.setTitle((myIsOverride ? "Select Methods to Override" : "Select Methods to Implement"));
  dialog.show();
  if (dialog.isOK()) {
    final Iterable<SNodePointer> selectedElements=(Iterable<SNodePointer>)dialog.getSelectedElements();
    ModelAccess.instance().runCommandInEDT(new Runnable(){
      public void run(){
        List<SNode> selection=Sequence.fromIterable(selectedElements).select(new ISelector<SNodePointer,SNode>(){
          public SNode select(          SNodePointer it){
            return SNodeOperations.cast(it.getNode(),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
          }
        }
).toListSequence();
        OverrideImplementMethodsHelper helper=new OverrideImplementMethodsHelper(myProject,contextClass,contextMethod,dialog.isRemoveAttributes(),dialog.isInsertOverrideAnnotation(),dialog.isAddReturn());
        List<SNode> insertedMethods=helper.insertMethods(selection);
        if (insertedMethods.isEmpty()) {
          return;
        }
        if (insertedMethods.size() == 1) {
          myEditorContext.selectAfter(ListSequence.fromList(insertedMethods).first());
        }
 else {
          myEditorContext.select(ListSequence.fromList(insertedMethods).last());
          myEditorContext.selectRange(ListSequence.fromList(insertedMethods).last(),ListSequence.fromList(insertedMethods).first());
        }
      }
    }
,myProject);
  }
}
