{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("declaration",new BaseReferenceConstraintsDescriptor("declaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> decls=SModelOperations.getNodesIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.buildlanguage.structure.IDeclaration");
          if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration") && SNodeOperations.hasRole(_context.getReferenceNode(),"jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration","fakeDeclaration")) {
            List<SNode> newDecls=new ArrayList<SNode>();
            for (            SNode decl : ListSequence.fromList(decls)) {
              if (SNodeOperations.isInstanceOf(decl,"jetbrains.mps.build.generictasks.structure.TaskInterfaceDeclaration")) {
                ListSequence.fromList(newDecls).addElement(decl);
              }
            }
            return new SimpleSearchScope(newDecls);
          }
 else           if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration") && SNodeOperations.hasRole(_context.getReferenceNode(),"jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration","fakeDeclaration")) {
            List<SNode> newDecls=new ArrayList<SNode>();
            for (            SNode decl : ListSequence.fromList(decls)) {
              if (!(SNodeOperations.isInstanceOf(decl,"jetbrains.mps.build.generictasks.structure.TaskInterfaceDeclaration"))) {
                ListSequence.fromList(newDecls).addElement(decl);
              }
            }
            return new SimpleSearchScope(newDecls);
          }
          return decls;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_6artq6_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
