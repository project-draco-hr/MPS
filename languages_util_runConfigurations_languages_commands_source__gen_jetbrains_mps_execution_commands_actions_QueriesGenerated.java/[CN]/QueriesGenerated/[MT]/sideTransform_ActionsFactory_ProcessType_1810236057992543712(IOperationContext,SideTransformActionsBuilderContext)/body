{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.execution.commands.structure.CommandProcessType");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        return SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.execution.commands.structure.CommandProcessType");
      }
      public String getMatchingText(      String pattern){
        return "<";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "command process";
      }
      public SNode getActionType(      String pattern){
        return new QueriesGenerated.QuotationClass_x583g4_a0a0e0a0a0b0a0b0g().createNode();
      }
    }
);
  }
  return result;
}
