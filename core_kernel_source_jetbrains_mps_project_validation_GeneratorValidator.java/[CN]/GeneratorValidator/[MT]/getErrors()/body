{
  List<String> errors=new ArrayList<String>(super.getErrors());
  for (  ModuleReference gen : myModule.getModuleDescriptor().getDepGenerators()) {
    if (MPSModuleRepository.getInstance().getModule(gen) == null) {
      errors.add("Can't find generator dependency: " + gen.getModuleFqName());
    }
  }
  Set<String> usedLanguages=new HashSet<String>();
  for (  SModelDescriptor model : myModule.getOwnTemplateModels()) {
    if (SModelStereotype.isGeneratorModel(model)) {
      usedLanguages.addAll(ModelContentUtil.getUsedLanguageNamespacesInTemplateModel(model.getSModel()));
    }
  }
  Set<String> extendedLanguages=new HashSet<String>();
  Language sourceLanguage=myModule.getSourceLanguage();
  usedLanguages.remove(sourceLanguage.getModuleFqName());
  for (  Language language : sourceLanguage.getDependenciesManager().getAllExtendedLanguages()) {
    extendedLanguages.add(language.getModuleFqName());
  }
  for (  String lang : usedLanguages) {
    Language language=ModuleRepositoryFacade.getInstance().getModule(lang,Language.class);
    if (language == null)     continue;
    if (!extendedLanguages.contains(lang) && !language.getRuntimeModulesReferences().isEmpty()) {
      errors.add(sourceLanguage + " should extend " + lang);
    }
  }
  return errors;
}
