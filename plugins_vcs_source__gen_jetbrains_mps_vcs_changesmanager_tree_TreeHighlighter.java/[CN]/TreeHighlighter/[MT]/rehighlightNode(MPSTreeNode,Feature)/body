{
  unhighlightNode(node);
  final Project mpsProject=ProjectHelper.toMPSProject(myRegistry.getProject());
  AbstractComputeRunnable<TreeMessage> cr=new AbstractComputeRunnable<TreeMessage>(){
    protected TreeMessage compute(){
      SModel model=feature.getModelReference().resolve(mpsProject.getRepository());
      if (model instanceof EditableSModel && !(model.isReadOnly())) {
        EditableSModel emd=(EditableSModel)model;
        if (feature instanceof ModelFeature) {
          return getMessage(emd);
        }
        myRegistry.getCurrentDifference(emd).setEnabled(true);
        ModelChange change=myMap.get(feature);
        if (change == null) {
          change=myMap.getAddedAncestorValue(feature);
        }
        if (change != null) {
          return getMessage(change,emd);
        }
 else         if (myMap.isAncestorOfAddedFeature(feature)) {
          return getMessage(FileStatus.MODIFIED);
        }
      }
      return null;
    }
  }
;
  mpsProject.getModelAccess().runReadAction(cr);
  TreeMessage message=cr.getResult();
  if (message != null) {
    node.addTreeMessage(message);
    updatePresentation(node);
  }
}
