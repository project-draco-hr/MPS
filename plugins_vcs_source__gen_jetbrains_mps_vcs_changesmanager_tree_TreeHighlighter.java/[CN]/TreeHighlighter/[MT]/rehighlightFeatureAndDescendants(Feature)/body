{
  if (myTree.isDisposed()) {
    return;
  }
  final List<Feature> toCheck=new ArrayList<Feature>();
synchronized (myFeaturesHolder) {
    SModelReference modelRef=feature.getModelReference();
    toCheck.addAll(myFeaturesHolder.getFeaturesByModelReference(modelRef));
  }
  final List<Feature> toUpdate=new ArrayList<Feature>();
  toUpdate.add(feature);
  getProjectRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      Feature anotherFeature : ListSequence.fromList(toCheck)) {
        if (Sequence.fromIterable(Sequence.fromArray(anotherFeature.getAncestors(getProjectRepository()))).any(new IWhereFilter<Feature>(){
          public boolean accept(          Feature a){
            return feature.equals(a);
          }
        }
)) {
          toUpdate.add(anotherFeature);
        }
      }
    }
  }
);
  for (  Feature f : ListSequence.fromList(toUpdate)) {
    rehighlightFeature(f);
  }
}
