{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("dependsOn",new BaseReferenceConstraintsDescriptor("dependsOn",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          Iterable<SNode> relatedFacets=FacetDeclaration_Behavior.call_allRelated_8351679702044331818(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.make.facet.structure.FacetDeclaration",false,false));
          return Sequence.fromIterable(relatedFacets).translate(new ITranslator2<SNode,SNode>(){
            public Iterable<SNode> translate(            SNode it){
              return SNodeOperations.getDescendants(it,"jetbrains.mps.make.facet.structure.TargetDeclaration",false,new String[]{});
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_hpg3kp_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
