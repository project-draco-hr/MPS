{
  return Sequence.fromIterable(MapSequence.fromMap(ConceptUtil.traverse(forConcept,new _FunctionTypes._return_P2_E0<IMapSequence<String,SNode>,SNode,Iterable<Map<String,SNode>>>(){
    public IMapSequence<String,SNode> invoke(    final SNode concept,    Iterable<Map<String,SNode>> inherited){
      final Map<String,SNode> result=MapSequence.fromMap(new HashMap<String,SNode>());
      Sequence.fromIterable(inherited).visitAll(new IVisitor<Map<String,SNode>>(){
        public void visit(        Map<String,SNode> inh){
          SetSequence.fromSet(MapSequence.fromMap(inh).mappingsSet()).visitAll(new IVisitor<IMapping<String,SNode>>(){
            public void visit(            IMapping<String,SNode> it){
              if (!(MapSequence.fromMap(result).containsKey(it.key()))) {
                MapSequence.fromMap(result).put(it.key(),it.value());
              }
            }
          }
);
        }
      }
);
      ListSequence.fromList(SLinkOperations.getTargets(concept,"members",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SNodeOperations.isInstanceOf(it,"jetbrains.mps.core.smodel.structure.SConceptQuery");
        }
      }
).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          SNode q=SNodeOperations.cast(it,"jetbrains.mps.core.smodel.structure.SConceptQuery");
          String signature=SConceptQuery_Behavior.call_getSignature_270269450479785542(q);
          if (concept == forConcept) {
            MapSequence.fromMap(result).removeKey(signature);
          }
 else {
            MapSequence.fromMap(result).put(signature,q);
          }
        }
      }
);
      return MapSequence.fromMap(result);
    }
  }
)).values()).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SPropertyOperations.getBoolean(it,"isFinal"));
    }
  }
);
}
