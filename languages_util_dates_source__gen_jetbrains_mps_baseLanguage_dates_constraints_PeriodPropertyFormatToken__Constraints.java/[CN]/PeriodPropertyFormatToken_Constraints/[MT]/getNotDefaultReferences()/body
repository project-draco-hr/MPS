{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("property",new BaseReferenceConstraintsDescriptor("property",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          String name=(isNotEmpty_bw6cj5_a0a0a0b0a0a0b0a1a0b0b(SPropertyOperations.getString(_context.getParameterNode(),"pluralForm")) ? SPropertyOperations.getString(_context.getParameterNode(),"pluralForm") : SPropertyOperations.getString(_context.getParameterNode(),"name"));
          return (_context.getSmartReference() ? "{" + name + "}" : name);
        }
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return DateFormatReferenceUtil.buildPeriodPropertySearchScope(_context.getEnclosingNode(),operationContext.getScope());
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_bw6cj5_a0a3a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
