{
  SNode reductionTemplateNode=null;
  String mappingName=null;
  RuleConsequence ruleConsequence=rule.getRuleConsequence();
  if (ruleConsequence != null) {
    Pair<SNode,String> nodeAndMappingName=getTemplateNodeFromRuleConsequence(ruleConsequence,inputNode,rule.getNode(),generator);
    if (nodeAndMappingName == null) {
      generator.showErrorMessage(inputNode,null,ruleConsequence.getNode(),"error processing reduction rule consequence");
      return null;
    }
    reductionTemplateNode=nodeAndMappingName.o1;
    mappingName=nodeAndMappingName.o2;
  }
 else {
    TemplateDeclaration template=rule.getTemplate();
    if (template == null) {
      generator.showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule: no template");
      return null;
    }
    TemplateFragment fragment=getFragmentFromTemplate(template,inputNode,rule.getNode(),generator);
    if (fragment != null) {
      reductionTemplateNode=fragment.getParent().getNode();
      mappingName=fragment.getName();
    }
  }
  if (reductionTemplateNode == null) {
    generator.showErrorMessage(inputNode,null,rule.getNode(),"error processing reduction rule");
    return new ArrayList<SNode>();
  }
  if (mappingName == null) {
    mappingName=rule.getName();
  }
  return applyReductionRuleTemplateFragment(mappingName,reductionTemplateNode,inputNode,rule,generator);
}
