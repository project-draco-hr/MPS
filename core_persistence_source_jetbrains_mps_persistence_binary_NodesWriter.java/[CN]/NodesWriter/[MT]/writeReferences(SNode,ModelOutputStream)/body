{
  Collection<? extends SReference> refs=IterableUtil.asCollection(node.getReferences());
  os.writeInt(refs.size());
  for (  SReference reference : refs) {
    SModelReference targetModelReference=reference.getTargetSModelReference();
    if (reference instanceof StaticReference) {
      os.writeInt(1);
      os.writeNodeId(reference.getTargetNodeId());
    }
 else     if (reference instanceof DynamicReference) {
      DynamicReferenceOrigin origin=((DynamicReference)reference).getOrigin();
      if (origin != null) {
        os.writeInt(3);
        os.writeNodePointer(origin.getTemplate());
        os.writeNodePointer(origin.getInputNode());
      }
 else {
        os.writeInt(2);
      }
    }
 else {
      throw new IOException("cannot store reference: " + reference.toString());
    }
    os.writeString(IdHelper.getRefId(reference.getReferenceLink()).serialize());
    os.writeString(reference.getReferenceLink().getRoleName());
    os.writeString(reference.getReferenceLink().getContainingConcept().getQualifiedName());
    if (targetModelReference != null && targetModelReference.equals(myModelReference)) {
      os.writeByte(17);
    }
 else {
      os.writeByte(18);
      os.writeModelReference(targetModelReference);
    }
    os.writeString(((jetbrains.mps.smodel.SReference)reference).getResolveInfo());
  }
}
