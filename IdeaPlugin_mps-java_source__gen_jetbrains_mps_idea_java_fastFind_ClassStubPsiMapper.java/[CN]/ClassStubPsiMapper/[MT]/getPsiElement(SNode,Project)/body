{
  ModelAccess.instance().checkReadAccess();
  SNode node=nodeParam;
  if (!(hasCorrespondingPsi(SNodeOperations.getModel(node)))) {
    return null;
  }
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Classifier")) {
    return findPsiClass(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Classifier"),project);
  }
 else   if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
    PsiClass psiClass=findPsiClass(SNodeOperations.getAncestor(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),"jetbrains.mps.baseLanguage.structure.Classifier",false,false),project);
    if (psiClass == null) {
      return null;
    }
    PsiField[] fields=psiClass.getFields();
    String expectedName=SPropertyOperations.getString(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.FieldDeclaration"),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
    for (    PsiField field : fields) {
      if (expectedName.equals(field.getName())) {
        return field;
      }
    }
  }
 else   if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
  }
  return null;
}
