{
  EmbeddedGraph embeddedGraph=new PQPlanarizationFinder().find(graph);
  System.out.println(embeddedGraph);
  Map<Dart,Integer> bends=MapSequence.fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.fromMap(new HashMap<Dart,Integer>());
  QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph,bends,angles);
  Set<Edge> oldEdges=SetSequence.fromSet(new HashSet<Edge>());
  SetSequence.fromSet(oldEdges).addSequence(ListSequence.fromList(graph.getEdges()));
  OrthogonalRepresentationChecker.checkOrthogonalRepresentation(graph,bends,angles,0);
  new QuasiRepresentationModifier(embeddedGraph,bends,angles).reduceToOrthogonalRepresentation();
  System.out.println(embeddedGraph);
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    System.out.println("node " + node);
    for (    Dart dart : ListSequence.fromList(embeddedGraph.getDartWithSource(node))) {
      System.out.println(dart + " angle = " + MapSequence.fromMap(angles).get(dart)+ ", bends = "+ MapSequence.fromMap(bends).get(dart)+ ", opposite bends = "+ MapSequence.fromMap(bends).get(embeddedGraph.getOpposite(dart)));
    }
  }
  CheckEmbeddedGraph.checkEmbeddedGraph(embeddedGraph);
  OrthogonalRepresentationChecker.checkOrthogonalRepresentation(graph,bends,angles,1);
}
