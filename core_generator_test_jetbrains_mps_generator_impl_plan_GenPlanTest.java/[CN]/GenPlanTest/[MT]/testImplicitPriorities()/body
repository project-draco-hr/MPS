{
  MockTemplateModel g1=new MockTemplateModel("G1");
  MockTemplateModel g2=new MockTemplateModel("G2");
  MockTemplateModel g3=new MockTemplateModel("G3");
  TemplateMappingConfiguration tmcA=newMapConfig(g1,"A");
  TemplateMappingConfiguration tmcB=newMapConfig(g2,"B");
  TemplateMappingConfiguration tmcC=newMapConfig(g3,"C");
  TemplateMappingConfiguration tmcD=newMapConfig(g3,"D");
  TemplateMappingConfiguration tmcE=newMapConfig(g3,"E");
  TemplateMappingConfiguration tmcF=newMapConfig(g3,"F");
  mySolver.prepare(Arrays.asList(tmcA,tmcB,tmcC,tmcD,tmcE,tmcF));
  addStrict(tmcA,tmcB);
  addWeak(tmcB,tmcC);
  addWeak(tmcB,tmcE);
  addStrict(tmcD,tmcB);
  addCoherentConfigs(tmcF,tmcB);
  addWeak(tmcC,tmcA);
  addWeak(tmcD,tmcA);
  addWeak(tmcE,tmcA);
  addWeak(tmcF,tmcA);
  final List<GenerationPhase> phases=mySolver.solve();
  print(phases);
  for (  Conflict c : myConflicts.getConflicts()) {
    System.out.println(c.getText());
  }
  final List<Conflict> cycles=myConflicts.getConflicts(Arrays.asList(Kind.Cycle));
  assertEquals(1,cycles.size());
}
