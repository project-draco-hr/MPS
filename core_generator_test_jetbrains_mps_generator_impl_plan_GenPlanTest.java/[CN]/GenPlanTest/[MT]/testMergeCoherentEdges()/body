{
  TemplateMappingConfiguration tmcA=new MockMapConfig("A",false);
  TemplateMappingConfiguration tmcB=new MockMapConfig("B",false);
  TemplateMappingConfiguration tmcC=new MockMapConfig("C",false);
  TemplateMappingConfiguration tmcD=new MockMapConfig("D",false);
  TemplateMappingConfiguration tmcE=new MockMapConfig("E",false);
  TemplateMappingConfiguration tmcX=new MockMapConfig("X",false);
  final List<TemplateMappingConfiguration> allConfigs=Arrays.asList(tmcA,tmcB,tmcC,tmcD,tmcE,tmcX);
  pmap.prepare(allConfigs);
  addCoherentConfigs(tmcA,tmcB);
  addCoherentConfigs(tmcB,tmcC);
  addCoherentConfigs(tmcC,tmcD);
  addCoherentConfigs(tmcE,tmcD);
  addStrict(tmcB,tmcX);
  pgraph.finalizeEdges(allConfigs);
  final PartitioningSolver partitioningSolver=new PartitioningSolver(pmap,pgraph,mySameStepConfigs);
  final List<GenerationPhase> phases=partitioningSolver.solveNew();
  assertFalse(myConflicts.hasConflicts());
  assertEquals(2,phases.size());
  List<Group> groupsPhase1=phases.get(0).getGroups();
  List<Group> groupsPhase2=phases.get(1).getGroups();
  assertEquals(1,groupsPhase1.size());
  assertEquals(1,groupsPhase2.size());
  Group g1=groupsPhase1.get(0);
  Group g2=groupsPhase2.get(0);
  assertEquals(new Group(allConfigs,Collections.<MappingPriorityRule>emptyList()).subtract(new Group(tmcX)),g1);
  assertEquals(new Group(tmcX),g2);
}
