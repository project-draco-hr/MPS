{
  TemplateMappingConfiguration tmcA=new MockMapConfig("A",false);
  TemplateMappingConfiguration tmcB=new MockMapConfig("B",false);
  TemplateMappingConfiguration tmcC=new MockMapConfig("C",false);
  TemplateMappingConfiguration tmcD=new MockMapConfig("D",false);
  TemplateMappingConfiguration tmcX=new MockMapConfig("X",false);
  TemplateMappingConfiguration tmcY=new MockMapConfig("Y",false);
  final List<TemplateMappingConfiguration> allConfigs=Arrays.asList(tmcA,tmcB,tmcC,tmcD,tmcX,tmcY);
  pmap.prepare(allConfigs);
  addWeak(tmcA,tmcB);
  addStrict(tmcB,tmcC);
  addWeak(tmcB,tmcD);
  addStrict(tmcX,tmcA);
  addWeak(tmcY,tmcA);
  pgraph.finalizeEdges(allConfigs);
  final PartitioningSolver partitioningSolver=new PartitioningSolver(pmap,pgraph,mySameStepConfigs);
  final List<GenerationPhase> phases=partitioningSolver.solveNew();
  assertFalse(myConflicts.hasConflicts());
  assertEquals(3,phases.size());
  List<Group> groupsPhase1=phases.get(0).getGroups();
  List<Group> groupsPhase2=phases.get(1).getGroups();
  List<Group> groupsPhase3=phases.get(2).getGroups();
  assertEquals(1,groupsPhase1.size());
  assertEquals(3,groupsPhase2.size());
  assertEquals(2,groupsPhase3.size());
  assertEquals(new Group(tmcX),groupsPhase1.get(0));
  HashSet<Group> expectedPhase2=new HashSet<Group>();
  expectedPhase2.add(new Group(tmcA));
  expectedPhase2.add(new Group(tmcB));
  expectedPhase2.add(new Group(tmcY));
  assertEquals(expectedPhase2,new HashSet<Group>(groupsPhase2));
  HashSet<Group> expectedPhase3=new HashSet<Group>();
  expectedPhase3.add(new Group(tmcC));
  expectedPhase3.add(new Group(tmcD));
  assertEquals(expectedPhase3,new HashSet<Group>(groupsPhase3));
}
