{
  return new _FunctionTypes._return_P2_E0<Boolean,Iterable<? extends Iterable<Integer>>,Iterable<? extends Iterable<Integer>>>(){
    public Boolean invoke(    Iterable<? extends Iterable<Integer>> leftSequence,    Iterable<? extends Iterable<Integer>> rightSequence){
      if (Sequence.fromIterable(leftSequence).count() != Sequence.fromIterable(rightSequence).count()) {
        return false;
      }
      Iterator<? extends Iterable<Integer>> leftIter=Sequence.fromIterable(leftSequence).iterator();
      Iterator<? extends Iterable<Integer>> rightIter=Sequence.fromIterable(rightSequence).iterator();
      while (leftIter.hasNext()) {
        Iterable<Integer> l=leftIter.next();
        Iterable<Integer> r=rightIter.next();
        if (!(new _FunctionTypes._return_P2_E0<Boolean,Iterable<Integer>,Iterable<Integer>>(){
          public Boolean invoke(          Iterable<Integer> leftSequence,          Iterable<Integer> rightSequence){
            if (Sequence.fromIterable(leftSequence).count() != Sequence.fromIterable(rightSequence).count()) {
              return false;
            }
            Iterator<? extends Integer> leftIter=Sequence.fromIterable(leftSequence).iterator();
            Iterator<? extends Integer> rightIter=Sequence.fromIterable(rightSequence).iterator();
            while (leftIter.hasNext()) {
              int l=leftIter.next();
              int r=rightIter.next();
              if (!(new _FunctionTypes._return_P2_E0<Boolean,Integer,Integer>(){
                public Boolean invoke(                Integer a,                Integer b){
                  return a == b;
                }
              }
.invoke(l,r))) {
                return false;
              }
            }
            return true;
          }
        }
.invoke(l,r))) {
          return false;
        }
      }
      return true;
    }
  }
.invoke(ListSequence.fromListAndArray(new ArrayList<Iterable<Integer>>(),ListSequence.fromListAndArray(new ArrayList<Integer>(),1),ListSequence.fromListAndArray(new ArrayList<Integer>(),2)),ListSequence.fromListAndArray(new ArrayList<Iterable<Integer>>(),ListSequence.fromListAndArray(new ArrayList<Integer>(),3),ListSequence.fromListAndArray(new ArrayList<Integer>(),4)));
}
