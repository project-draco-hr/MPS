{
  return new _FunctionTypes._return_P0_E0<ISetSequence<SNode>>(){
    public ISetSequence<SNode> invoke(){
      final Set<SNode> s=SetSequence.fromSetAndArray(new LinkedHashSet<SNode>(),thisNode,SLinkOperations.getTarget(thisNode,"child",true));
      final String string="sdasdasd";
      final Set<SNode> s2=SetSequence.fromSetWithValues(new LinkedHashSet<SNode>(),SetSequence.fromSet(s).intersect(SetSequence.fromSet(s)));
      final Set<SNode> s3=SetSequence.fromSetWithValues(new LinkedHashSet<SNode>(),SetSequence.fromSet(s2).disjunction(SetSequence.fromSet(s2)));
      final Set<SNode> s4=SetSequence.fromSetWithValues(new LinkedHashSet<SNode>(),SetSequence.fromSet(s3).union(Sequence.fromIterable(Sequence.<SNode>singleton(null))));
      final Iterable<Integer> emptyList=Sequence.fromIterable(Collections.<Integer>emptyList());
      final Set<String> emptySet=SetSequence.fromSet(new LinkedHashSet<String>());
      final Set<String> newList=SetSequence.fromSetWithValues(new LinkedHashSet<String>(),SetSequence.fromSet(emptySet).union(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(),"adasd"))));
      final Set<SNode> z=SetSequence.fromSetWithValues(new LinkedHashSet<SNode>(),SetSequence.fromSet(s).union(SetSequence.fromSet(SetSequence.fromSetAndArray(new LinkedHashSet<SNode>(),thisNode))));
      final SNode x=SNodeOperations.getParent(thisNode);
      final boolean y=BehaviorReflection.invokeVirtual(Boolean.TYPE,thisNode,"virtual_queryWithParam_6166572974641188535",new Object[]{SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:3f71a9ca-cfc6-445e-98ca-be6cc5953666(jetbrains.mps.sample.queryTest.structure)","MyKind"),"TWO")});
      final boolean yy=BehaviorReflection.invokeVirtual(Boolean.TYPE,thisNode,"virtual_queryWithParam_6166572974641188535",new Object[]{null});
      final SNode unr=SLinkOperations.getTarget(thisNode,"refr",false);
      return SetSequence.fromSetWithValues(new LinkedHashSet<SNode>(),SNodeOperations.ofConcept(SetSequence.fromSet(s).union(SetSequence.fromSet(SetSequence.fromSetAndArray(new LinkedHashSet<SNode>(),SLinkOperations.getTarget(thisNode,"z",true),SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode,"z",true),"z",true)))),NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(thisNode,"child",true)))));
    }
  }
.invoke();
}
