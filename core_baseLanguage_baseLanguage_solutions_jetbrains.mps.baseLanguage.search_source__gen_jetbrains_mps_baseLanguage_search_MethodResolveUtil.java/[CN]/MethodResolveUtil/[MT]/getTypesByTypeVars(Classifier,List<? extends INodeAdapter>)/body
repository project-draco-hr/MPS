{
  Iterator<? extends INodeAdapter> typeParms=typeParameters.iterator();
  Iterator<TypeVariableDeclaration> typeVars=classifier.getTypeVariableDeclarations().iterator();
  Map<TypeVariableDeclaration,Type> m=ClassifierAndSuperClassifiersCache.getInstance(classifier).getTypeByTypeVariableMap();
  Map<TypeVariableDeclaration,Type> typeByTypeVar=new java.util.HashMap<TypeVariableDeclaration,Type>(m);
  while (typeParms.hasNext() && typeVars.hasNext()) {
    TypeVariableDeclaration typeVar=typeVars.next();
    INodeAdapter typeParm=typeParms.next();
    if (typeParm instanceof TypeVariableReference) {
      if (((TypeVariableReference)typeParm).getTypeVariableDeclaration() != typeVar) {
        typeByTypeVar.put(typeVar,(Type)typeParm);
      }
    }
 else {
      if (typeParm instanceof Type) {
        typeByTypeVar.put(typeVar,(Type)typeParm);
      }
    }
  }
  return typeByTypeVar;
}
