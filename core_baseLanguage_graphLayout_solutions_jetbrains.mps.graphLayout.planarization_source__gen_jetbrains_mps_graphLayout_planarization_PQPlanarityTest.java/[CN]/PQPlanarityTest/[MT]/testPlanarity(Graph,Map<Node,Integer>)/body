{
  if (SHOW_LOG > 0) {
    System.out.println("GRAPH!!! " + graph);
    System.out.println(stNumbering);
  }
  myInEdgeOrder=new NodeMap<List<Edge>>(graph);
  Node[] nodeOrder=new Node[graph.getNumNodes()];
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    nodeOrder[MapSequence.fromMap(stNumbering).get(node)]=node;
  }
  PQTree graphTree=new PQTree();
  PQNode curPQNode=new PNode(nodeOrder[0],null);
  graphTree.setRoot(curPQNode);
  for (int i=0; i < nodeOrder.length - 1; i++) {
    Node curGraphNode=nodeOrder[i];
    for (    Edge edge : ListSequence.fromList(curGraphNode.getOutEdges())) {
      PNode node=new PNode(edge.getTarget(),edge);
      curPQNode.addLastChild(node);
    }
    Node nextGraphNode=nodeOrder[i + 1];
    if (SHOW_LOG > 0) {
      System.out.println(graphTree);
      System.out.println("next node is: " + nextGraphNode);
    }
    if (i < nodeOrder.length - 1) {
      curPQNode=graphTree.modifyTree(nextGraphNode);
    }
 else {
      MapSequence.fromMap(myInEdgeOrder).put(nextGraphNode,ListSequence.fromList(new LinkedList<Edge>()));
      getLastEdgeOrder(graphTree.getRoot(),MapSequence.fromMap(myInEdgeOrder).get(nextGraphNode));
    }
  }
  EdgesOrder order=((QNode)ListSequence.fromList(graphTree.getRoot().getChildren()).first()).getEdgesOrder();
  if (PQPlanarityTest.SHOW_LOG > 0) {
    System.out.println(graphTree);
    for (int i=nodeOrder.length - 1; i >= 0; i--) {
      Node node=nodeOrder[i];
      System.out.print("node " + node + ":");
      System.out.print(" in edges: " + order.getInEdgesOrder(node));
      System.out.println(" out edges: " + order.getOutEdgesOrder(node));
    }
  }
  EmbeddedGraph embeddedGraph=createEmbeddedGraph(graph,order,Arrays.asList(nodeOrder));
  if (PQPlanarityTest.SHOW_LOG > 0) {
    System.out.println(embeddedGraph);
    System.out.println("bad edges:");
    for (    Edge edge : ListSequence.fromList(graph.getEdges())) {
      if (!(MapSequence.fromMap(embeddedGraph.getAdjacentFacesMap()).containsKey(edge))) {
        System.out.println(edge);
      }
    }
  }
  return embeddedGraph;
}
