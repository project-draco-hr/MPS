{
  final DebugManagerComponent debugManager=DebugManagerComponent.getInstance(myProject);
  final VMEventsProcessorManagerComponent vmManager=VMEventsProcessorManagerComponent.getInstance(myProject);
  final AbstractDebugSession abstractSession=debugManager.getDebugSession(this);
  if (abstractSession instanceof DebugSession) {
    final DebugSession session=(DebugSession)abstractSession;
    final DebugProcessAdapter listener=new DebugProcessAdapter(){
      @Override public void processDetached(      @NotNull DebugVMEventsProcessor process,      boolean closedByUser){
        if (process == vmManager.getDebugVMEventsProcessor(session)) {
          vmManager.removeAllProcessListener(this);
          notifyProcessDetached();
        }
      }
    }
;
    vmManager.addAllProcessListener(listener);
    try {
      super.startNotify();
    }
  finally {
      if (session.isStopped()) {
        vmManager.removeAllProcessListener(listener);
        notifyProcessDetached();
      }
    }
  }
}
