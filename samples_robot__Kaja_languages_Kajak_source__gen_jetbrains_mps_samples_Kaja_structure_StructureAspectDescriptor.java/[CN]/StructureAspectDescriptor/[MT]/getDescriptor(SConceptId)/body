{
switch (myConceptIndex.index(id)) {
case LanguageConceptSwitch.AbstractCommand:
    return myConceptAbstractCommand;
case LanguageConceptSwitch.CommandList:
  return myConceptCommandList;
case LanguageConceptSwitch.CommentLine:
return myConceptCommentLine;
case LanguageConceptSwitch.Direction:
return myConceptDirection;
case LanguageConceptSwitch.Drop:
return myConceptDrop;
case LanguageConceptSwitch.East:
return myConceptEast;
case LanguageConceptSwitch.EmptyLine:
return myConceptEmptyLine;
case LanguageConceptSwitch.Heading:
return myConceptHeading;
case LanguageConceptSwitch.IfStatement:
return myConceptIfStatement;
case LanguageConceptSwitch.IsFull:
return myConceptIsFull;
case LanguageConceptSwitch.IsMark:
return myConceptIsMark;
case LanguageConceptSwitch.IsWall:
return myConceptIsWall;
case LanguageConceptSwitch.LeftTurn:
return myConceptLeftTurn;
case LanguageConceptSwitch.Library:
return myConceptLibrary;
case LanguageConceptSwitch.LogicalExpression:
return myConceptLogicalExpression;
case LanguageConceptSwitch.Looking:
return myConceptLooking;
case LanguageConceptSwitch.North:
return myConceptNorth;
case LanguageConceptSwitch.Not:
return myConceptNot;
case LanguageConceptSwitch.Pick:
return myConceptPick;
case LanguageConceptSwitch.Repeat:
return myConceptRepeat;
case LanguageConceptSwitch.Require:
return myConceptRequire;
case LanguageConceptSwitch.RoutineCall:
return myConceptRoutineCall;
case LanguageConceptSwitch.RoutineDefinition:
return myConceptRoutineDefinition;
case LanguageConceptSwitch.Script:
return myConceptScript;
case LanguageConceptSwitch.South:
return myConceptSouth;
case LanguageConceptSwitch.Step:
return myConceptStep;
case LanguageConceptSwitch.TraceMessage:
return myConceptTraceMessage;
case LanguageConceptSwitch.West:
return myConceptWest;
case LanguageConceptSwitch.While:
return myConceptWhile;
default :
return null;
}
}
