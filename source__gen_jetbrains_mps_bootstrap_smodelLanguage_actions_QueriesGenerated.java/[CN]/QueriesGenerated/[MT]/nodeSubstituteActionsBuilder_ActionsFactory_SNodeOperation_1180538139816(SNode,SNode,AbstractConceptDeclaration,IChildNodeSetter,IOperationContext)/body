{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final SNode leftConcept;
  final ISearchScope hierarchyScope;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode leftExpression=SLinkOperations.getTarget(parentNode,"leftExpression",true);
        SNode maybeConceptType=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),false);
        if (maybeConceptType != null) {
          if (SLinkOperations.getTarget(maybeConceptType,"conceptDeclaraton",false) != null) {
            return SLinkOperations.getTarget(maybeConceptType,"conceptDeclaraton",false);
          }
 else {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration");
          }
        }
        SNode maybeNodeType=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"),false);
        if (maybeNodeType != null) {
          if (SLinkOperations.getTarget(maybeNodeType,"concept",false) != null) {
            return SLinkOperations.getTarget(maybeNodeType,"concept",false);
          }
 else {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.BaseConcept");
          }
        }
        return null;
      }
    }
;
    leftConcept=(SNode)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return new ConceptHierarchyScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(leftConcept)));
      }
    }
;
    hierarchyScope=(ISearchScope)calc.calculate();
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        List<ConceptPropertyDeclaration> adapters=hierarchyScope.getAdapters(ConceptPropertyDeclaration.class);
        return (List<SNode>)BaseAdapter.toNodes(adapters);
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptPropertyAccess",currentTargetNode);
          SLinkOperations.setTarget(newNode,"conceptProperty",((SNode)this.getParameterObject()),false);
          return newNode;
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptLinkAccess",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        List<ConceptLinkDeclaration> adapters=hierarchyScope.getAdapters(ConceptLinkDeclaration.class);
        return (List<SNode>)BaseAdapter.toNodes(adapters);
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptLinkAccess",null);
          SLinkOperations.setTarget(newNode,"conceptLinkDeclaration",((SNode)this.getParameterObject()),false);
          return newNode;
        }
      }
);
    }
  }
  return result;
}
