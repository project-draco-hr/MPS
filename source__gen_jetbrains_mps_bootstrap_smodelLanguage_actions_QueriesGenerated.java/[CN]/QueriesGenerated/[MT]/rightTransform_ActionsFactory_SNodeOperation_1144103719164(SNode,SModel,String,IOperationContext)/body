{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.AbstractOperationParameter",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        return SLinkOperations.addNewChild(sourceNode,"parameter","jetbrains.mps.bootstrap.smodelLanguage.structure.AbstractOperationParameter");
      }
      public String getMatchingText(      String pattern){
        return "< .. >";
      }
      public String getDescriptionText(      String pattern){
        return "add operation parameters";
      }
    }
);
  }
  return result;
}
