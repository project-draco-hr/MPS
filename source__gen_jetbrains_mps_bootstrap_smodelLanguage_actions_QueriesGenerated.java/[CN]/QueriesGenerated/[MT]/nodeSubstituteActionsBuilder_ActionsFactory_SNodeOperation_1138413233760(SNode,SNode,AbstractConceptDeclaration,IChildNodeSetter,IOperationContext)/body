{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final SNode leftExpressionType;
  final Boolean leftIsModel;
  final Boolean leftIsNode;
  final Boolean leftIsConcept;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(parentNode,"leftExpression",true));
      }
    }
;
    leftExpressionType=(SNode)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SModelType"),false) != null;
      }
    }
;
    leftIsModel=(Boolean)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"),false) != null;
      }
    }
;
    leftIsNode=(Boolean)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce(leftExpressionType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptType"),false) != null;
      }
    }
;
    leftIsConcept=(Boolean)calc.calculate();
  }
  return result;
}
