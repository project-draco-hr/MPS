{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode expression=sourceNode;
        SNode opExpression=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeOperationExpression",null);
        SNodeOperations.replaceWithAnother(expression,opExpression);
        SLinkOperations.setTarget(opExpression,"leftExpression",expression,true);
        return opExpression;
      }
      public String getMatchingText(      String pattern){
        return ".";
      }
      public String getDescriptionText(      String pattern){
        return "smodel language operation";
      }
    }
);
  }
  return result;
}
