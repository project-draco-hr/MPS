{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
  final SNode leftNodeConcept;
  final ConceptHierarchyScope hierarhyScope;
  final List<SNode> links;
  final List<SNode> singularLinks;
  final List<SNode> pluralLinks;
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        SNode leftExpression=SLinkOperations.getTarget(parentNode,"leftExpression",true);
        SNode leftNodeType=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(leftExpression),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.bootstrap.smodelLanguage.structure.SNodeType"),false);
        if (SLinkOperations.getTarget(leftNodeType,"concept",false) == null) {
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.BaseConcept");
        }
        return SLinkOperations.getTarget(leftNodeType,"concept",false);
      }
    }
;
    leftNodeConcept=(SNode)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return new ConceptHierarchyScope(((AbstractConceptDeclaration)SNodeOperations.getAdapter(leftNodeConcept)));
      }
    }
;
    hierarhyScope=(ConceptHierarchyScope)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        List<LinkDeclaration> adapters=hierarhyScope.getLinkDeclarationsExcludingOverridden();
        return (List<SNode>)BaseAdapter.toNodes(adapters);
      }
    }
;
    links=(List<SNode>)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return SequenceOperations.toList(SequenceOperations.where(links,new zPredicate(null,null)));
      }
    }
;
    singularLinks=(List<SNode>)calc.calculate();
  }
{
    Calculable calc=new Calculable(){
      public Object calculate(){
        return SequenceOperations.toList(SequenceOperations.where(links,new zPredicate1(null,null)));
      }
    }
;
    pluralLinks=(List<SNode>)calc.calculate();
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        return singularLinks;
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccess",null);
          SLinkOperations.setTarget(newNode,"link",((SNode)this.getParameterObject()),false);
          return newNode;
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccessAsNode",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        return singularLinks;
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkAccessAsNode",null);
          SLinkOperations.setTarget(newNode,"link",((SNode)this.getParameterObject()),false);
          return newNode;
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(((SNode)this.getParameterObject()),"role") + "/node";
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        return pluralLinks;
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccess",null);
          SLinkOperations.setTarget(newNode,"link",((SNode)this.getParameterObject()),false);
          return newNode;
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccessAsList",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        return pluralLinks;
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SLinkListAccessAsList",null);
          SLinkOperations.setTarget(newNode,"link",((SNode)this.getParameterObject()),false);
          return newNode;
        }
        public String getMatchingText(        String pattern){
          return SPropertyOperations.getString(((SNode)this.getParameterObject()),"role") + "/list";
        }
      }
);
    }
  }
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptLinkAccess",operationContext.getScope());
    Calculable calc=new Calculable(){
      public Object calculate(){
        List<ConceptLinkDeclaration> adapters=hierarhyScope.getAdapters(ConceptLinkDeclaration.class);
        return (List<SNode>)BaseAdapter.toNodes(adapters);
      }
    }
;
    Iterable<SNode> queryResult=(Iterable)calc.calculate();
    for (    SNode item : queryResult) {
      result.add(new DefaultChildNodeSubstituteAction(item,parentNode,currentTargetNode,childSetter,operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          SNode newNode=SModelOperations.createNewNode(model,"jetbrains.mps.bootstrap.smodelLanguage.structure.SConceptLinkAccess",null);
          SLinkOperations.setTarget(newNode,"conceptLinkDeclaration",((SNode)this.getParameterObject()),false);
          return newNode;
        }
      }
);
    }
  }
  return result;
}
