{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("attribute",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode creator=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.xmlQuery.structure.XMLSAXNodeCreator",true,false);
      List<SNode> n=ListSequence.fromList(new ArrayList<SNode>());
      if ((creator != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(creator),"jetbrains.mps.xmlQuery.structure.XMLSAXNodeRule")) {
        ListSequence.fromList(n).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(creator),"jetbrains.mps.xmlQuery.structure.XMLSAXNodeRule"),"attrs",true)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SPropertyOperations.getBoolean(it,"isRequired");
          }
        }
));
      }
      return n;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:e79b58b4-ea58-4c9d-b43b-c3a260addf6a(jetbrains.mps.xmlQuery.constraints)","2286463592495228153");
    }
  }
);
  return result;
}
