{
  for (  Instruction instruction : SetSequence.<Instruction>fromSet(this.getInstructions())) {
    if ((instruction instanceof ReadInstruction)) {
      ReadInstruction read=(ReadInstruction)instruction;
      Set<WriteInstruction> writes=this.myReachingDefinitions.get(read);
      for (      WriteInstruction write : SetSequence.<WriteInstruction>fromSet(writes)) {
        if (write.getVariable() == read.getVariable()) {
          if (!(this.isInside(((SNode)write.getSource())))) {
            SNode declaration=((SNode)read.getVariable());
            if (!(MapSequence.fromMap(result).containsKey(declaration))) {
              SNode type=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(declaration),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"),true);
              SNode reference;
              if (SNodeOperations.isInstanceOf(declaration,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
                reference=VariableDeclaration_Behavior.call_createReference_1213877517482(SNodeOperations.cast(declaration,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
              }
 else {
                reference=((SNode)read.getSource());
              }
              MapSequence.<SNode,MethodParameter>fromMap(result).put(declaration,new MethodParameter(declaration,type,SPropertyOperations.getString(declaration,"name"),reference));
            }
          }
        }
      }
    }
  }
}
