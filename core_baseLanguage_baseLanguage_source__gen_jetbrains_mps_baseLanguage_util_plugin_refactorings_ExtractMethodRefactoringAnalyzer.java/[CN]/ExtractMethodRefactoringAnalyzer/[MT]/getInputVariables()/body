{
  Map<SNode,MethodParameter> result=MapSequence.<SNode,MethodParameter>fromMap(new LinkedHashMap<SNode,MethodParameter>(16,(float)0.75,false));
  this.addDataflowParameters(result);
  addExternalParameters(result);
  for (  SNode node : ListSequence.<SNode>fromList(this.myPartToExtract)) {
    for (    SNode parameter : ListSequence.<SNode>fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.IParameter",false,new String[]{}))) {
      SNode expressionType=TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(parameter),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"),true);
      MapSequence.<SNode,MethodParameter>fromMap(result).put(IParameter_Behavior.call_getDeclaration_1225282371351(parameter),new MethodParameter(IParameter_Behavior.call_getDeclaration_1225282371351(parameter),expressionType,IParameter_Behavior.call_getParameterName_1225280611056(parameter),parameter));
    }
  }
  return ListSequence.<MethodParameter>fromListWithValues(new ArrayList<MethodParameter>(),MapSequence.fromMap(result).values());
}
