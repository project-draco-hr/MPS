{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.pattern.structure.OrPattern");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode orPattern=SConceptOperations.createNewNode("jetbrains.mps.lang.pattern.structure.OrPattern",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),orPattern);
        return SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getTargets(orPattern,"clause",true)).first(),"patternNode",_context.getSourceNode(),true);
      }
      public String getMatchingText(      String pattern){
        return "|";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
