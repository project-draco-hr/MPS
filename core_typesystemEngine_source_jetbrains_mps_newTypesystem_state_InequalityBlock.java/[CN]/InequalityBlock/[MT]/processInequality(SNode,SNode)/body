{
  if (subType == null || superType == null || subType == superType) {
    return;
  }
  TypeChecker typeChecker=myState.getTypeCheckingContext().getTypeChecker();
  for (  jetbrains.mps.util.Pair<InequationReplacementRule_Runtime,IsApplicable2Status> inequalityReplacementRule : typeChecker.getRulesManager().getReplacementRules(subType,superType)) {
    final InequationReplacementRule_Runtime rule=inequalityReplacementRule.o1;
    final IsApplicable2Status status=inequalityReplacementRule.o2;
    myState.executeOperation(new AddRemarkOperation(subType + " is subtype of " + superType+ " by replacement rule",new Runnable(){
      @Override public void run(){
        ((AbstractInequationReplacementRule_Runtime)rule).processInequation(subType,superType,myEquationInfo,myState.getTypeCheckingContext(),status);
      }
    }
));
    return;
  }
  final SubTyping subTyping=myState.getTypeCheckingContext().getSubTyping();
  myState.executeOperation(new jetbrains.mps.newTypesystem.operation.AddRemarkOperation("checking whether " + subType + " is subtype of "+ superType,new Runnable(){
    @Override public void run(){
      if (!subTyping.isSubType(subType,superType,myEquationInfo,myRelationKind.isWeak(),false)) {
        myState.getNodeMaps().reportSubTypeError(subType,superType,myEquationInfo,myRelationKind.isWeak());
      }
    }
  }
));
}
