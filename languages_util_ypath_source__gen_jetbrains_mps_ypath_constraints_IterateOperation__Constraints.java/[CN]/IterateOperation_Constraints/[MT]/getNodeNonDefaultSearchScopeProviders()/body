{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("usedFeature",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode tpoe;
      if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
        tpoe=_context.getEnclosingNode();
      }
 else {
        tpoe=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",false,false);
      }
      return Sequence.fromIterable(TreePath_Behavior.call_getFeature_1213877481312(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(tpoe),"jetbrains.mps.ypath.structure.TreePathType"),"nodeType",true))).toListSequence();
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895905a8(jetbrains.mps.ypath.constraints)","1213104845582");
    }
  }
);
  return result;
}
