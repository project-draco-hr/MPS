{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("usedFeature",new BaseReferenceConstraintsDescriptor("usedFeature",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode tpoe;
          if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
            tpoe=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression");
          }
 else {
            tpoe=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.ypath.structure.TreePathOperationExpression",false,false);
          }
          return Sequence.fromIterable(TreePath_Behavior.call_getFeature_1213877481312(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe),SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(tpoe),"jetbrains.mps.ypath.structure.TreePathType"),"nodeType",true))).toListSequence();
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_8h4ewy_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
