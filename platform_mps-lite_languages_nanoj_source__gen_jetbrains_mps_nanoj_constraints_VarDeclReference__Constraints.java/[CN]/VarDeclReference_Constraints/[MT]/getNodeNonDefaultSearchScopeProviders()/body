{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("declaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> result=ListSequence.fromList(new ArrayList<SNode>());
      SNode currentStatement=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.nanoj.structure.NanoStatement",true,false);
      while (currentStatement != null) {
        SNode currentBlock=SNodeOperations.getAncestorWhereConceptInList(currentStatement,new String[]{"jetbrains.mps.nanoj.structure.NanoStatementList"},false,false);
        if ((currentBlock == null)) {
          break;
        }
        for (        SNode statement : ListSequence.fromList(SNodeOperations.getChildren(currentBlock)).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SNodeOperations.isInstanceOf(it,"jetbrains.mps.nanoj.structure.NanoStatement");
          }
        }
)) {
          if (statement == currentStatement) {
            break;
          }
          ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(statement,null,false,new String[]{})));
        }
        currentStatement=SNodeOperations.getAncestor(currentBlock,"jetbrains.mps.nanoj.structure.NanoStatement",true,false);
      }
      return result;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895905dc(jetbrains.mps.nanoj.constraints)","689680155165915394");
    }
  }
);
  return result;
}
