{
switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a,descriptor.getConceptFqName())) {
case 0:
    return new AbsExpression_Editor();
case 1:
  return new ComplexLiteral_Editor();
case 2:
return new DecimalBinaryOperation_Editor();
case 3:
return new DivExpressionFraction_Editor();
case 4:
return new ExponentialOperation_Editor();
case 5:
return new InIntervalExpression_Editor();
case 6:
return new IntervalContainsExpression_Editor();
case 7:
return new IntervalLiteral_Editor();
case 8:
return new IntervalType_Editor();
case 9:
return new LinearSolveOperation_Editor();
case 10:
return new LiteralI_Editor();
case 11:
return new MathFuncExpression_Editor();
case 12:
return new MathSymbol_Editor();
case 13:
return new MathSymbolFromToIndex_Editor();
case 14:
return new MathSymbolIndex_Editor();
case 15:
return new MathSymbolIndexReference_Editor();
case 16:
return new MathTypeCast_Editor();
case 17:
return new MatrixConstructor_Editor();
case 18:
return new MatrixElementAccessExpression_Editor();
case 19:
return new MatrixIndexWildcard_Editor();
case 20:
return new MatrixInitializer_Editor();
case 21:
return new MatrixInitializerIndex_Editor();
case 22:
return new MatrixInitializerIndexReference_Editor();
case 23:
return new MatrixInverseOperation_Editor();
case 24:
return new MatrixNorm_Editor();
case 25:
return new MatrixType_Editor();
case 26:
return new MatrixUnit_Editor();
case 27:
return new MatrixZero_Editor();
case 28:
return new PowExpression_Editor();
case 29:
return new VectorInitializer_Editor();
case 30:
return new VectorType_Editor();
default :
}
return null;
}
