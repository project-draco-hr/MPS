{
  SNode classifier_=super.resolve(referenceInfo,targetModelReference);
  if (classifier_ == null) {
    return null;
  }
  Classifier classifier=(Classifier)classifier_.getAdapter();
  if (classifier instanceof ClassConcept) {
    List<ConstructorDeclaration> constructors=((ClassConcept)classifier).getConstructors();
    if (constructors.size() == 1) {
      return constructors.get(0).getNode();
    }
 else     if (constructors.size() > 1) {
      constructors=(List<ConstructorDeclaration>)MethodResolveUtil.selectByParmCount(constructors,myActualArgs);
      if (constructors.size() == 1) {
        return constructors.get(0).getNode();
      }
 else {
        Iterator<Type> typeParms=myTypeParms.iterator();
        Iterator<TypeVariableDeclaration> typeVars=classifier.getTypeVariableDeclarations().iterator();
        Map<TypeVariableDeclaration,Type> typeByTypeVar=new HashMap<TypeVariableDeclaration,Type>();
        while (typeParms.hasNext() && typeVars.hasNext()) {
          typeByTypeVar.put(typeVars.next(),typeParms.next());
        }
        return MethodResolveUtil.chooseByParameterType(constructors,myActualArgs,typeByTypeVar).getNode();
      }
    }
  }
  return null;
}
