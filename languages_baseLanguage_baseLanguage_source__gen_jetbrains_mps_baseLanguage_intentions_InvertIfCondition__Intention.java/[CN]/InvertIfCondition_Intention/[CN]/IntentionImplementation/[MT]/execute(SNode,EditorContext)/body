{
  SNode condition=SLinkOperations.getTarget(node,"condition",true);
  if ((condition != null)) {
    if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.NotExpression")) {
      condition=SLinkOperations.getTarget(SNodeOperations.cast(condition,"jetbrains.mps.baseLanguage.structure.NotExpression"),"expression",true);
    }
 else {
      SNode newCondition=null;
      if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
        newCondition=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null);
      }
 else       if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
        newCondition=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression",null);
      }
 else       if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.GreaterThanExpression")) {
        newCondition=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression",null);
      }
 else       if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression")) {
        newCondition=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
      }
 else       if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.LessThanExpression")) {
        newCondition=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression",null);
      }
 else       if (SNodeOperations.isInstanceOf(condition,"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
        newCondition=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanExpression",null);
      }
      if (newCondition != null) {
        SLinkOperations.setTarget(newCondition,"leftExpression",SLinkOperations.getTarget(SNodeOperations.cast(condition,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"leftExpression",true),true);
        SLinkOperations.setTarget(newCondition,"rightExpression",SLinkOperations.getTarget(SNodeOperations.cast(condition,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),"rightExpression",true),true);
        condition=newCondition;
      }
 else {
        SNode notExpression=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression",null);
        SLinkOperations.setTarget(notExpression,"expression",condition,true);
        condition=notExpression;
      }
    }
    SLinkOperations.setTarget(node,"condition",condition,true);
  }
  SNode ifTrue=SLinkOperations.getTarget(node,"ifTrue",true);
  SNode ifFalse=SLinkOperations.getTarget(node,"ifFalseStatement",true);
  SNode newIfTrue;
  SNode newIfFalse;
  if (ListSequence.fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).isEmpty()) {
    newIfFalse=null;
  }
 else   if (ListSequence.fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).first(),"jetbrains.mps.baseLanguage.structure.IfStatement")) {
    newIfFalse=ListSequence.fromList(SLinkOperations.getTargets(ifTrue,"statement",true)).first();
  }
 else {
    newIfFalse=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BlockStatement",null);
    SLinkOperations.setTarget(SNodeOperations.cast(newIfFalse,"jetbrains.mps.baseLanguage.structure.BlockStatement"),"statements",ifTrue,true);
  }
  if (SNodeOperations.isInstanceOf(ifFalse,"jetbrains.mps.baseLanguage.structure.BlockStatement")) {
    newIfTrue=SLinkOperations.getTarget(SNodeOperations.cast(ifFalse,"jetbrains.mps.baseLanguage.structure.BlockStatement"),"statements",true);
  }
 else {
    newIfTrue=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList",null);
    if (ifFalse != null) {
      ListSequence.fromList(SLinkOperations.getTargets(newIfTrue,"statement",true)).addElement(ifFalse);
    }
  }
  SLinkOperations.setTarget(node,"ifTrue",newIfTrue,true);
  SLinkOperations.setTarget(node,"ifFalseStatement",newIfFalse,true);
}
