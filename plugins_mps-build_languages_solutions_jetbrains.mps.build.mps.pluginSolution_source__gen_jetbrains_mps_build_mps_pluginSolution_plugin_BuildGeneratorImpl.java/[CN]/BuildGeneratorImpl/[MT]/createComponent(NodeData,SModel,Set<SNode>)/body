{
  if (data instanceof ModuleData) {
    IModule module=((ModuleData)data).getModule();
    String relativeDescriptorPath;
    try {
      relativeDescriptorPath=new RelativePathHelper(myProject.getBasePath()).makeRelative(module.getDescriptorFile().getPath());
    }
 catch (    RelativePathHelper.PathException e) {
      if (log.isWarnEnabled()) {
        log.warn("Can't make relative path from build model base directory to module " + module,e);
      }
      return null;
    }
    String[] parts=relativeDescriptorPath.split("/");
    SNode path=new BuildGeneratorImpl.QuotationClass_un708i_a0a5a0a4().createNode();
    SNode compositePart=SLinkOperations.getTarget(path,"compositePart",true);
    for (    String part : parts) {
      SPropertyOperations.set(compositePart,"head",part);
      SLinkOperations.setNewChild(compositePart,"tail","jetbrains.mps.build.structure.BuildCompositePath");
      compositePart=SLinkOperations.getTarget(compositePart,"tail",true);
    }
    SNodeOperations.deleteNode(compositePart);
    SNode moduleNode;
    if (module instanceof Solution) {
      moduleNode=new BuildGeneratorImpl.QuotationClass_un708i_a0a0a11a0a4().createNode(path);
    }
 else     if (module instanceof Language) {
      moduleNode=new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0l0a0e().createNode(path);
    }
 else {
      moduleNode=new BuildGeneratorImpl.QuotationClass_un708i_a0a0a0l0a0e_0().createNode(path);
    }
    SetSequence.fromSet(modules).addElement(moduleNode);
    return new BuildGeneratorImpl.QuotationClass_un708i_a0n0a0e().createNode(moduleNode);
  }
 else   if (data instanceof NamespaceData) {
    String namespace=((NamespaceData)data).getText();
    return new BuildGeneratorImpl.QuotationClass_un708i_a0b0a0a4().createNode(namespace);
  }
  return null;
}
