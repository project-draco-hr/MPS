{
  MethodBinding b=x.binding;
  AbstractCreator creator=null;
  if (x.anonymousType != null) {
    AnonymousClassCreator anonymousClassCreator=AnonymousClassCreator.newInstance(myCurrentModel);
    creator=anonymousClassCreator;
    AnonymousClass anonymousClass=(AnonymousClass)myTypesProvider.getRaw(x.anonymousType.binding);
    MethodBinding superConstructorBinding=((ConstructorDeclaration)x.anonymousType.methods[0]).constructorCall.binding;
    SReference methodReference=myTypesProvider.createMethodReference(superConstructorBinding,AnonymousClass.BASE_METHOD_DECLARATION,anonymousClass.getNode());
    anonymousClass.getNode().addReference(methodReference);
    addCallArgs(x.arguments,anonymousClass);
    anonymousClassCreator.setCls(anonymousClass);
  }
 else {
    if (x.enclosingInstance() == null) {
      return processExpression((AllocationExpression)x);
    }
  }
  GenericNewExpression result=GenericNewExpression.newInstance(myCurrentModel);
  result.setCreator(creator);
  return result;
}
