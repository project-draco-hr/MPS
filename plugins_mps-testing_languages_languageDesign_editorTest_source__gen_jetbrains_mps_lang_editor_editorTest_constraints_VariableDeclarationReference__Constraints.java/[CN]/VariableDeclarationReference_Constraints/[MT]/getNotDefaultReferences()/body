{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("var",new BaseReferenceConstraintsDescriptor("var",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode block : SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.lang.editor.editorTest.structure.TestBlockList",true)) {
            for (            SNode child : ListSequence.fromList(SNodeOperations.getChildren(block))) {
              if (SNodeOperations.isInstanceOf(child,"jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock")) {
                ListSequence.fromList(result).addElement(SNodeOperations.cast(child,"jetbrains.mps.lang.editor.editorTest.structure.VariableDeclarationBlock"));
              }
            }
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_98f22q_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
