{
  Set<IModule> toCompile=new LinkedHashSet<IModule>();
  toCompile.addAll(go.getModules());
  for (  MPSProject p : go.getProjects()) {
    toCompile.addAll(p.getModules());
  }
  for (  final SModelDescriptor modelDescriptor : go.getModels()) {
    Set<IModule> owningModules=ModelAccess.instance().runReadAction(new Computable<Set<IModule>>(){
      public Set<IModule> compute(){
        return modelDescriptor.getModules();
      }
    }
);
    toCompile.addAll(owningModules);
  }
  final Set<IModule> finalToCompile=CollectionUtil.filter(toCompile,new Condition<IModule>(){
    @Override public boolean met(    IModule module){
      return module.isCompileInMPS() && !module.isPackaged();
    }
  }
);
  if (finalToCompile.isEmpty())   return;
  info("Starting compilation:");
  StringBuffer sb=new StringBuffer();
  for (  IModule m : finalToCompile) {
    sb.append("    ");
    sb.append(m.getModuleFqName());
    sb.append("\n");
  }
  info(sb.toString());
  MPSCompilationResult result=ModelAccess.instance().runReadAction(new Computable<MPSCompilationResult>(){
    public MPSCompilationResult compute(){
      return new ModuleMaker().make(finalToCompile,new EmptyProgressIndicator(){
        @Override public void setText2(        String text){
          info("    " + text);
        }
        @Override public void setText(        String text){
          info(text);
        }
      }
);
    }
  }
);
  info(result.toString());
}
