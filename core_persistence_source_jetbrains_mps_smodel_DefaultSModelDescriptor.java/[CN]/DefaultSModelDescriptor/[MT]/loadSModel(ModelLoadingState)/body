{
  SModelReference dsmRef=getReference();
  StreamDataSource source=getSource();
  if (!source.isReadOnly() && source.getTimestamp() == -1) {
    DefaultSModel model=new DefaultSModel(dsmRef,new RegularNodeIdMap());
    return new ModelLoadResult(model,ModelLoadingState.FULLY_LOADED);
  }
  ModelLoadResult result;
  try {
    result=ModelPersistence.readModel(myHeader,source,state);
  }
 catch (  ModelReadException e) {
    SuspiciousModelHandler.getHandler().handleSuspiciousModel(this,false);
    DefaultSModel newModel=new InvalidDefaultSModel(getSModelReference(),e);
    return new ModelLoadResult(newModel,ModelLoadingState.NOT_LOADED);
  }
  SModel model=result.getModel();
  if (result.getState() == ModelLoadingState.FULLY_LOADED) {
    boolean needToSave=((jetbrains.mps.smodel.SModel)model).updateSModelReferences() || ((jetbrains.mps.smodel.SModel)model).updateModuleReferences();
    if (needToSave && !source.isReadOnly()) {
      setChanged(true);
    }
  }
  LOG.assertLog(model.getReference().equals(dsmRef),"\nError loading model from: \"" + source.getLocation() + "\"\n"+ "expected model UID     : \""+ dsmRef+ "\"\n"+ "but was UID            : \""+ model.getReference()+ "\"\n"+ "the model will not be available.\n"+ "Make sure that all project's roots and/or the model namespace is correct");
  return result;
}
