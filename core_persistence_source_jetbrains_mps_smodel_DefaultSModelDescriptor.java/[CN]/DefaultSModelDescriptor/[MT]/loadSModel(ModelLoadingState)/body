{
  DataSource source=getSource();
  if (!source.isReadOnly() && source.getTimestamp() == -1) {
    DefaultSModel model=new DefaultSModel(getReference(),myHeader);
    return new ModelLoadResult(model,ModelLoadingState.FULLY_LOADED);
  }
  ModelLoadResult result;
  try {
    result=myPersistence.readModel(myHeader,state);
  }
 catch (  ModelReadException e) {
    LOG.warning(String.format("Failed to load model %s: %s",getSource().getLocation(),e.toString()));
    SuspiciousModelHandler.getHandler().handleSuspiciousModel(this,false);
    LazySModel newModel=new InvalidDefaultSModel(getReference(),e);
    return new ModelLoadResult(newModel,ModelLoadingState.NOT_LOADED);
  }
  jetbrains.mps.smodel.SModel model=result.getModel();
  if (result.getState() == ModelLoadingState.FULLY_LOADED) {
    boolean needToSave=model.updateSModelReferences() || model.updateModuleReferences();
    if (needToSave && !source.isReadOnly()) {
      setChanged(true);
    }
  }
  LOG.assertLog(model.getReference().equals(getReference()),"\nError loading model from: \"" + source.getLocation() + "\"\n"+ "expected model UID     : \""+ getReference()+ "\"\n"+ "but was UID            : \""+ model.getReference()+ "\"\n"+ "the model will not be available.\n"+ "Make sure that all project's roots and/or the model namespace is correct");
  return result;
}
