{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117987ff5eL,0x11179881f99L,"match"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xdaafa647f1f74b0bL,0xb09669cd7c8408c0L,0x1117987ff5eL,0x11179881f99L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return RegexUtil.collectMatchReferences(_context.getEnclosingNode());
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_8gk9io_a0a1a0a0a1a0b0a1a2;
        }
      }
;
    }
  }
);
  return references;
}
