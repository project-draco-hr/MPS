{
  SNode classConcept=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  SNode method;
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
    method=SLinkOperations.addNewChild(classConcept,"method","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
  }
 else {
    method=SLinkOperations.addNewChild(classConcept,"staticMethod","jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
  }
  SLinkOperations.setTarget(method,"returnType",SLinkOperations.getTarget(node,"returnType",true),true);
  SLinkOperations.addAll(method,"parameter",SLinkOperations.getTargets(node,"parameter",true));
  SLinkOperations.setTarget(method,"body",SLinkOperations.getTarget(node,"body",true),true);
  SLinkOperations.addAll(method,"throwsItem",SLinkOperations.getTargets(node,"throwsItem",true));
  SLinkOperations.setTarget(method,"visibility",SLinkOperations.getTarget(node,"visibility",true),true);
  SPropertyOperations.set(method,"name",SPropertyOperations.getString(node,"name"));
  SPropertyOperations.set(method,"isFinal","" + (SPropertyOperations.getBoolean(node,"isFinal")));
  SLinkOperations.addAll(method,"annotation",SLinkOperations.getTargets(node,"annotation",true));
  SNodeOperations.deleteNode(node);
}
