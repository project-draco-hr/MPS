{
  SNode classConcept=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
  SNode method;
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
    method=SLinkOperations.addNewChild(classConcept,"method","jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
  }
 else {
    method=SLinkOperations.addNewChild(classConcept,"staticMethod","jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
  }
  SLinkOperations.setTarget(method,"returnType",SLinkOperations.getTarget(node,"returnType",true),true);
  ListSequence.fromList(SLinkOperations.getTargets(method,"parameter",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"parameter",true)));
  SLinkOperations.setTarget(method,"body",SLinkOperations.getTarget(node,"body",true),true);
  ListSequence.fromList(SLinkOperations.getTargets(method,"throwsItem",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"throwsItem",true)));
  SLinkOperations.setTarget(SNodeOperations.cast(method,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",true),true);
  SPropertyOperations.set(method,"name",SPropertyOperations.getString(node,"name"));
  SPropertyOperations.set(method,"isFinal","" + (SPropertyOperations.getBoolean(node,"isFinal")));
  ListSequence.fromList(SLinkOperations.getTargets(method,"annotation",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node,"annotation",true)));
  SNodeOperations.deleteNode(node);
}
