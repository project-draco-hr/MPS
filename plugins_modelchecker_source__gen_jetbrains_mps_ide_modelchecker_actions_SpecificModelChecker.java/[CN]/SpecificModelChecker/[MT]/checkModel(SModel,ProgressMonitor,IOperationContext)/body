{
  final List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  monitor.start("Checking " + SModelOperations.getModelName(model),ListSequence.fromList(myLanguageCheckers).count());
  for (  final INodeChecker checker : myLanguageCheckers) {
    monitor.step(checker.getCategory());
    if (!(ModelCheckerSettings.getInstance().checkerIsOn(checker.getCategory()))) {
      continue;
    }
    if (monitor.isCanceled()) {
      break;
    }
    for (    final SNode rootNode : SModelOperations.getRoots(model,null)) {
      TypeContextManager.getInstance().runTypeCheckingAction(this,rootNode,new ITypechecking.Action(){
        public void run(        TypeCheckingContext p0){
          Set<IErrorReporter> iErrorReporters=checker.getErrors(rootNode,operationContext);
          for (          IErrorReporter errorReporter : SetSequence.fromSet(iErrorReporters)) {
            final IErrorReporter reporter=errorReporter;
            final QuickFix_Runtime quickFix=check_7763bz_a0b0b0a0a2a0a0d0d0d(check_7763bz_a0a1a1a0a0c0a0a3a3a3(errorReporter));
            IModelCheckerFix fix=null;
            if (quickFix != null) {
              fix=new IModelCheckerFix(){
                public boolean doFix(){
                  quickFix.execute(reporter.getSNode());
                  return true;
                }
              }
;
            }
            addIssue(results,errorReporter.getSNode(),errorReporter.reportError(),SpecificChecker.getResultCategory(errorReporter.getMessageStatus()),checker.getCategory(),fix);
          }
        }
      }
);
    }
    monitor.advance(1);
  }
  monitor.done();
  return results;
}
