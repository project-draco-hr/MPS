{
  String fileName="C:\\work\\stressPlanar.txt";
  int numNodes=Integer.parseInt(args[0]);
  int numEdges=Integer.parseInt(args[1]);
  int numIter=Integer.parseInt(args[2]);
  for (int iter=0; iter < numIter; iter++) {
    System.out.println("ITERATION: " + iter);
    Graph graph=RandomGraphGenerator.generateSimple(numNodes,numEdges);
    Map<Node,Integer> components=ConnectivityComponents.getComponents(graph);
    Graph firstComponent=new Graph();
    Map<Node,Node> nodeMap=MapSequence.<Node,Node>fromMap(new HashMap<Node,Node>());
    for (    Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      if (MapSequence.<Node,Integer>fromMap(components).get(node) == 0) {
        MapSequence.<Node,Node>fromMap(nodeMap).put(node,firstComponent.createNode());
      }
    }
    for (    Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
      if (MapSequence.<Node,Integer>fromMap(components).get(edge.getSource()) == 0) {
        firstComponent.connect(MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getSource()),MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getTarget()));
      }
    }
    if (firstComponent.getNumNodes() < 3) {
      System.out.println("skipped  :(");
      continue;
    }
    PrintWriter out=new PrintWriter(fileName);
    GraphIO.writeGraph(firstComponent,out);
    out.close();
    try {
      EmbeddedGraph embeddedGraph=new PQPlanarizationFinder().find(firstComponent);
      CheckEmbeddedGraph.checkEmbeddedGraph(embeddedGraph,true);
      System.out.println("number of faces: " + ListSequence.<Face>fromList(embeddedGraph.getFaces()).count());
    }
 catch (    Exception e) {
      System.out.println("planarization failed!!! " + iter);
      Graph orderedGraph=new Graph();
      nodeMap=MapSequence.<Node,Node>fromMap(new HashMap<Node,Node>());
      List<Node> sorting=TopologicalSorting.sort(firstComponent);
      for (      Node node : ListSequence.<Node>fromList(sorting)) {
        MapSequence.<Node,Node>fromMap(nodeMap).put(node,orderedGraph.createNode());
      }
      for (      Edge edge : ListSequence.<Edge>fromList(firstComponent.getEdges())) {
        orderedGraph.connect(MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getSource()),MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getTarget()));
      }
      System.out.println(e);
      System.exit(1);
    }
  }
  System.out.println("END!");
}
