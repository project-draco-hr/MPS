{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("containerDeclaration",new BaseReferenceConstraintsDescriptor("containerDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode expr=SNodeOperations.as(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Expression");
          return ((expr != null) ? CustomContainersUtil.containerDeclarations(SNodeOperations.getModel(expr),TypeDerivable_Behavior.call_deriveType_1213877435747(SNodeOperations.as(SNodeOperations.getParent(expr),"jetbrains.mps.baseLanguage.structure.TypeDerivable"),expr)) : Sequence.<SNode>fromIterable(Collections.<SNode>emptyList()));
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_rduypo_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
