{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("query",new BaseReferenceConstraintsDescriptor("query",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_j6o8lg_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            List<SNode> result=new ArrayList<SNode>();
            SNode type;
            if ((_context.getReferenceNode() != null)) {
              type=MqlSelector_Behavior.call_getContainerType_228266671027861723(_context.getReferenceNode());
            }
 else             if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(),"jetbrains.mps.core.query.structure.MqlDotExpression")) {
              type=MqlExpression_Behavior.call_getType_228266671027861783(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.core.query.structure.MqlDotExpression"),"left",true));
            }
 else {
              type=null;
            }
            if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.core.smodel.structure.MqlNodeType")) {
              SNode decl=SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.core.smodel.structure.MqlNodeType"),"concept",false);
              if ((decl != null)) {
                ListSequence.fromList(result).addSequence(Sequence.fromIterable(ConceptQueryUtil.getAvailableQueries(decl,null)));
              }
            }
            return new MultipleElementsScope(result,new _FunctionTypes._return_P1_E0<String,SNode>(){
              public String invoke(              SNode n){
                return SPropertyOperations.getString(SNodeOperations.cast(n,"jetbrains.mps.lang.core.structure.INamedConcept"),"name");
              }
            }
);
          }
        }
      }
;
    }
  }
);
  return references;
}
