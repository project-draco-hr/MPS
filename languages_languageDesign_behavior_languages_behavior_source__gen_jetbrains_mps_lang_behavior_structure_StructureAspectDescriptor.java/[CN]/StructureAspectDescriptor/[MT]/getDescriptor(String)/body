{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.ConceptBehavior","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.baseLanguage.structure.IMemberContainer","jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable","jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods","jetbrains.mps.lang.structure.structure.IConceptAspect"},new String[]{},new String[]{"concept"});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.ConceptConstructorDeclaration","jetbrains.mps.baseLanguage.structure.ConceptFunction",false,new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.structure.IVisible"},new String[]{"isVirtual","isPrivate","isAbstract"},new String[]{"overriddenMethod"});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"concept"});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationsHolder","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept"},new String[]{},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"declaration"});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration","jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","jetbrains.mps.baseLanguage.structure.IVisible"},new String[]{"isPrivate"},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.SuperNodeExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{"superConcept"});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.lang.behavior.structure.ThisNodeExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.baseLanguage.structure.IThisExpression"},new String[]{},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
