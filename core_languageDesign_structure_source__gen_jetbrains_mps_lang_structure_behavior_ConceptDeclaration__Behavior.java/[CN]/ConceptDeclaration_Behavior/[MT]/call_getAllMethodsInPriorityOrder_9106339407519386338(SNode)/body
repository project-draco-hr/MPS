{
  List<SNode> methods=ListSequence.<SNode>fromList(new ArrayList<SNode>());
  ListSequence.<SNode>fromList(methods).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(thisNode,LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"method",true)));
  SNode extendsNode=((SLinkOperations.getTarget(thisNode,"extends",false) != null) ? SLinkOperations.getTarget(thisNode,"extends",false) : SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626"));
  if (extendsNode != thisNode) {
    ListSequence.<SNode>fromList(methods).addSequence(ListSequence.<SNode>fromList(ConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386338(extendsNode)));
  }
  for (  SNode interfaceConcept : ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode,"implements",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,"intfc",false) != null);
    }
  }
).<SNode>select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,"intfc",false);
    }
  }
)) {
    ListSequence.<SNode>fromList(methods).addSequence(ListSequence.<SNode>fromList(InterfaceConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386413(interfaceConcept)));
  }
  return methods;
}
