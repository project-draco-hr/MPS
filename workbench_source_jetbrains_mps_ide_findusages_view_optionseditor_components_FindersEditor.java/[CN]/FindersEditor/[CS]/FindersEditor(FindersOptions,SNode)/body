{
  super(defaultOptions);
  myPanel=new JPanel();
  myPanel.setLayout(new BoxLayout(myPanel,BoxLayout.Y_AXIS));
  myPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Finders"),BorderFactory.createEmptyBorder(5,5,5,5)));
  Set<ReloadableFinder> availableFinders=FindersManager.getInstance().getAvailableFinders(node);
  List<ReloadableFinder> sortedFinders=new ArrayList<ReloadableFinder>(availableFinders);
  Collections.sort(sortedFinders,new Comparator<ReloadableFinder>(){
    public int compare(    ReloadableFinder o1,    ReloadableFinder o2){
      return o1.getDescription().compareToIgnoreCase(o2.getDescription());
    }
  }
);
  List<String> correctEnabledFinders=new ArrayList<String>();
  for (  final ReloadableFinder finder : sortedFinders) {
    boolean isEnabled=false;
    for (    String enabledFinderName : myOptions.getFindersClassNames()) {
      if (enabledFinderName.equals(finder.getFinder().getClass().getName())) {
        isEnabled=true;
      }
    }
    if (isEnabled) {
      correctEnabledFinders.add(finder.getFinder().getClass().getName());
    }
    JCheckBox finderCheckBox=new JCheckBox(finder.getFinder().getDescription(),isEnabled);
    finderCheckBox.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        String finderClassName=finder.getFinder().getClass().getName();
        if (((JCheckBox)e.getSource()).isSelected()) {
          if (!myOptions.getFindersClassNames().contains(finderClassName)) {
            myOptions.getFindersClassNames().add(finderClassName);
            findersListChangedByUser();
          }
        }
 else {
          myOptions.getFindersClassNames().remove(finderClassName);
          findersListChangedByUser();
        }
      }
    }
);
    finderCheckBox.addKeyListener(new KeyAdapter(){
      public void keyPressed(      KeyEvent e){
        if ((e.getKeyCode() == MenuKeyEvent.VK_B) && (e.getID() == MenuKeyEvent.KEY_PRESSED) && (e.isControlDown())) {
          if (finder.canNavigate()) {
            goToFinder(finder);
            e.consume();
          }
        }
      }
    }
);
    JButton goToFinderButton=new JButton("->");
    goToFinderButton.setFocusable(false);
    goToFinderButton.setToolTipText("Go to finder declaration");
    goToFinderButton.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (finder.canNavigate()) {
          goToFinder(finder);
        }
      }
    }
);
    if (!finder.getLongDescription().equals("")) {
      String htmlTooltipText="<html>" + finder.getLongDescription().replaceAll("\n","<br>") + "</html>";
      finderCheckBox.setToolTipText(htmlTooltipText);
    }
    JToolBar finderHolder=new JToolBar(JToolBar.HORIZONTAL);
    finderHolder.add(finderCheckBox);
    finderHolder.add(goToFinderButton);
    finderHolder.setBorder(new EmptyBorder(0,0,0,0));
    finderHolder.setFloatable(false);
    finderHolder.setAlignmentX(JToolBar.LEFT_ALIGNMENT);
    finderHolder.setBackground(myPanel.getBackground());
    myPanel.add(finderHolder);
  }
  myOptions.setFindersClassNames(correctEnabledFinders);
}
