{
{
    final SNode left=TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(nodeToCheck,"leftExpression",true),"jetbrains.mps.matrixLanguage.helgins","1210005562793",true);
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(left,new Runnable(){
      public void run(){
{
          final SNode right=TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(nodeToCheck,"rightExpression",true),"jetbrains.mps.matrixLanguage.helgins","1210005567145",true);
          TypeChecker.getInstance().getRuntimeSupport().whenConcrete(right,new Runnable(){
            public void run(){
              boolean done=false;
              if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(left),new QuotationClass_7().createNode())) {
{
                  IMatchingPattern pattern_=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.matrixLanguage.structure.MatrixType");
                  SNode coercedNode_=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getEquationManager().getRepresentator(right),pattern_);
                  if (coercedNode_ != null) {
                    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck,"jetbrains.mps.matrixLanguage.helgins","1210171765363",true),new QuotationClass_8().createNode(SLinkOperations.getTarget(coercedNode_,"scalarType",true)),nodeToCheck,null,"jetbrains.mps.matrixLanguage.helgins","1210171765353");
                    done=true;
                  }
                }
                if (!(done)) {
{
                    BaseIntentionProvider intentionProvider=null;
                    TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(nodeToCheck,"rightExpression",true),"Type must be Matrix but " + SNodeOperations.getConceptDeclaration(TypeChecker.getInstance().getEquationManager().getRepresentator(right)),"jetbrains.mps.matrixLanguage.helgins","1210175930104",intentionProvider);
                  }
                }
              }
 else               if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getEquationManager().getRepresentator(right),new QuotationClass_10().createNode())) {
{
                  IMatchingPattern pattern_1=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.matrixLanguage.structure.MatrixType");
                  SNode coercedNode_1=TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getEquationManager().getRepresentator(left),pattern_1);
                  if (coercedNode_1 != null) {
                    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck,"jetbrains.mps.matrixLanguage.helgins","1210174269273",true),new QuotationClass_9().createNode(SLinkOperations.getTarget(coercedNode_1,"scalarType",true)),nodeToCheck,null,"jetbrains.mps.matrixLanguage.helgins","1210174269263");
                    done=true;
                  }
                }
                if (!(done)) {
{
                    BaseIntentionProvider intentionProvider=null;
                    TypeChecker.getInstance().reportTypeError(SLinkOperations.getTarget(nodeToCheck,"leftExpression",true),"Type must be Matrix but " + SNodeOperations.getConceptDeclaration(TypeChecker.getInstance().getEquationManager().getRepresentator(left)),"jetbrains.mps.matrixLanguage.helgins","1210176257229",intentionProvider);
                  }
                }
              }
 else {
                final SNode v_typevar_1210174591724=TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable();
                TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(nodeToCheck,"jetbrains.mps.matrixLanguage.helgins","1210174591729",true),TypeChecker.getInstance().getEquationManager().getRepresentator(v_typevar_1210174591724),nodeToCheck,null,"jetbrains.mps.matrixLanguage.helgins","1210174591725");
                TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(nodeToCheck,"leftExpression",true),"jetbrains.mps.matrixLanguage.helgins","1210174591735",true),TypeChecker.getInstance().getEquationManager().getRepresentator(v_typevar_1210174591724),SLinkOperations.getTarget(nodeToCheck,"leftExpression",true),null,"jetbrains.mps.matrixLanguage.helgins","1210174591731");
                TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(nodeToCheck,"rightExpression",true),"jetbrains.mps.matrixLanguage.helgins","1210174591743",true),TypeChecker.getInstance().getEquationManager().getRepresentator(v_typevar_1210174591724),SLinkOperations.getTarget(nodeToCheck,"rightExpression",true),null,"jetbrains.mps.matrixLanguage.helgins","1210174591739");
                done=true;
              }
            }
          }
,"jetbrains.mps.matrixLanguage.helgins","1210004912543");
        }
      }
    }
,"jetbrains.mps.matrixLanguage.helgins","1210004689795");
  }
}
