{
  Map<Edge,Integer> horEdgeLengths=computeEdgeLengths(embeddedGraph,directions,Direction2D.RIGHT,predefinedLengths);
  Map<Edge,Integer> verEdgeLenghts=computeEdgeLengths(embeddedGraph,directions,Direction2D.DOWN,predefinedLengths);
  Map<Edge,Integer> lengths=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  Edge edge : ListSequence.<Edge>fromList(embeddedGraph.getGraph().getEdges())) {
    int length;
    if (MapSequence.fromMap(horEdgeLengths).containsKey(edge)) {
      length=MapSequence.<Edge,Integer>fromMap(horEdgeLengths).get(edge);
    }
 else {
      length=MapSequence.<Edge,Integer>fromMap(verEdgeLenghts).get(edge);
    }
    MapSequence.<Edge,Integer>fromMap(lengths).put(edge,length);
  }
  if (EdgeLengthComputer.SHOW_INFO > 0) {
    for (    Edge edge : ListSequence.<Edge>fromList(embeddedGraph.getGraph().getEdges())) {
      System.out.println("edge: " + edge + " length = "+ MapSequence.<Edge,Integer>fromMap(lengths).get(edge));
    }
  }
  return lengths;
}
