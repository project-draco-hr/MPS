{
  Graph graph=embeddedGraph.getGraph();
  Graph network=new Graph();
  Map<Edge,Edge> edgeMap=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  Map<Face,Node> faceMap=MapSequence.<Face,Node>fromMap(new HashMap<Face,Node>());
  Node source=network.createNode();
  Node target=network.createNode();
  for (  Face face : ListSequence.<Face>fromList(embeddedGraph.getFaces())) {
    if (!(embeddedGraph.isOuterFace(face))) {
      MapSequence.<Face,Node>fromMap(faceMap).put(face,network.createDummyNode());
    }
  }
  Map<Edge,Integer> low=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  Map<Edge,Integer> capacity=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  Map<Edge,Integer> cost=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  Edge backEdge=network.connect(target,source);
  MapSequence.<Edge,Integer>fromMap(low).put(backEdge,0);
  MapSequence.<Edge,Integer>fromMap(capacity).put(backEdge,Integer.MAX_VALUE / 2);
  MapSequence.<Edge,Integer>fromMap(cost).put(backEdge,0);
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Dart dart=ListSequence.<Dart>fromList(embeddedGraph.getDarts(edge)).findFirst(new IWhereFilter<Dart>(){
      public boolean accept(      Dart dart){
        return MapSequence.<Dart,Direction2D>fromMap(directions).get(dart) == direction;
      }
    }
);
    if (dart != null) {
      Face targetFace=embeddedGraph.getFace(dart);
      Face sourceFace=embeddedGraph.getFace(embeddedGraph.getOpposite(dart));
      Node sourceNode;
      Node targetNode;
      if (embeddedGraph.isOuterFace(sourceFace)) {
        sourceNode=source;
      }
 else {
        sourceNode=MapSequence.<Face,Node>fromMap(faceMap).get(sourceFace);
      }
      if (embeddedGraph.isOuterFace(targetFace)) {
        targetNode=target;
      }
 else {
        targetNode=MapSequence.<Face,Node>fromMap(faceMap).get(targetFace);
      }
      Edge newEdge=network.connect(sourceNode,targetNode);
      MapSequence.<Edge,Edge>fromMap(edgeMap).put(edge,newEdge);
      if (MapSequence.fromMap(predefinedLengths).containsKey(edge)) {
        MapSequence.<Edge,Integer>fromMap(low).put(newEdge,MapSequence.<Edge,Integer>fromMap(predefinedLengths).get(edge));
      }
 else {
        MapSequence.<Edge,Integer>fromMap(low).put(newEdge,myUnitLength);
      }
      MapSequence.<Edge,Integer>fromMap(capacity).put(newEdge,Integer.MAX_VALUE / 2);
      MapSequence.<Edge,Integer>fromMap(cost).put(newEdge,1);
    }
  }
  Map<Edge,Integer> circulation=MinCostCirculation.getCirculation(network,low,capacity,cost);
  Map<Edge,Integer> edgeLength=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    if (MapSequence.fromMap(edgeMap).containsKey(edge)) {
      MapSequence.<Edge,Integer>fromMap(edgeLength).put(edge,MapSequence.<Edge,Integer>fromMap(circulation).get(MapSequence.<Edge,Edge>fromMap(edgeMap).get(edge)));
    }
  }
  return edgeLength;
}
