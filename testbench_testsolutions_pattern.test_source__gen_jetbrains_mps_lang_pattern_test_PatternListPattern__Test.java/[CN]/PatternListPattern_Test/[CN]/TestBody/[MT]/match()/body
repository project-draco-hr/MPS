{
  SNode nodeToMatch=_quotation_createNode_i79cpz_a0a0c2();
  GeneratedMatchingPattern pattern=new Pattern_bvqxbpascp7q(_quotation_createNode_i79cpz_a0a0b0c2());
  boolean matchNeeded=true;
  boolean matches=pattern.match(nodeToMatch);
  if (matchNeeded != matches) {
    return false;
  }
  if (!(matchNeeded)) {
    return true;
  }
{
    List<SNode> list=(List<SNode>)pattern.getFieldValue("patternVar_list");
    int i=0;
{
      List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),list.get(i));
      List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),_quotation_createNode_i79cpz_a0a0b0a0c0g0c2());
      Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
    }
    i++;
{
      List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),list.get(i));
      List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),_quotation_createNode_i79cpz_a0a0b0a0d0g0c2());
      Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
    }
    i++;
  }
  return true;
}
