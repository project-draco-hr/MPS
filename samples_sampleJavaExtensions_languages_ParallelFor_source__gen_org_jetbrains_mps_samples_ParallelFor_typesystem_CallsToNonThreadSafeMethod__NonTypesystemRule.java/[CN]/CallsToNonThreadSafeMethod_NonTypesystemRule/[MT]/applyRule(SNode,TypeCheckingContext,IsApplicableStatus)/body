{
  SNode parentLoop=SNodeOperations.getAncestor(baseMethodCall,"org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor",false,false);
  if (parentLoop != null) {
    if (SNodeOperations.isInstanceOf(baseMethodCall,"jetbrains.mps.baseLanguage.structure.StaticMethodCall")) {
      if (AttributeOperations.getAttribute(SNodeOperations.cast(baseMethodCall,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe"))) != null) {
        return;
      }
      SNode classConcept=SLinkOperations.getTarget(SNodeOperations.cast(baseMethodCall,"jetbrains.mps.baseLanguage.structure.StaticMethodCall"),"classConcept",false);
      if (AttributeOperations.getAttribute(classConcept,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe"))) != null) {
        return;
      }
      if (AttributeOperations.getAttribute(classConcept,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass"))) != null) {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(baseMethodCall,"Calling a method on a non-thread-safe class","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","5384012304952426855",null,errorTarget);
        }
      }
 else {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportWarning(baseMethodCall,"Calling a method on a potentially non-thread-safe class","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","5384012304952426862",null,errorTarget);
        }
      }
    }
 else     if (SNodeOperations.isInstanceOf(baseMethodCall,"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall")) {
      SNode instanceMethodDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(baseMethodCall,"jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall"),"baseMethodDeclaration",false);
      SNode declaringClass=SNodeOperations.getAncestor(instanceMethodDeclaration,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
      if (declaringClass != null && AttributeOperations.getAttribute(declaringClass,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe"))) != null && SPropertyOperations.getBoolean(instanceMethodDeclaration,"isFinal")) {
        return;
      }
      if (declaringClass != null && AttributeOperations.getAttribute(declaringClass,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass"))) != null) {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(baseMethodCall,"Calling a method on a non-thread-safe shared object","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","5384012304952487123",null,errorTarget);
        }
      }
{
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportWarning(baseMethodCall,"Calling a method on a potentially non-thread-safe shared object","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","5384012304952427127",null,errorTarget);
      }
      return;
    }
 else     if (SNodeOperations.isInstanceOf(baseMethodCall,"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall")) {
      SNode staticMethodDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(baseMethodCall,"jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall"),"baseMethodDeclaration",false);
      SNode declaringClass=SNodeOperations.getAncestor(staticMethodDeclaration,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
      if (declaringClass != null && AttributeOperations.getAttribute(declaringClass,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe"))) != null) {
        return;
      }
      if (declaringClass != null && AttributeOperations.getAttribute(declaringClass,new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass"))) != null) {
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(baseMethodCall,"Calling a method on a non-thread-safe class","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","5384012304952487099",null,errorTarget);
        }
      }
{
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportWarning(baseMethodCall,"Calling a method on a potentially non-thread-safe class","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","5384012304952427264",null,errorTarget);
      }
    }
  }
}
