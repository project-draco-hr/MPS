{
  try {
    final ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    if (!(((SModule)MapSequence.fromMap(_params).get("module")).getModelRoots().iterator().hasNext())) {
      int code=JOptionPane.showConfirmDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"There are no model roots. Do you want to create one?","",JOptionPane.YES_NO_OPTION);
      if (code == JOptionPane.YES_OPTION) {
        MPSPropertiesConfigurable configurable=new ModulePropertiesConfigurable(((SModule)MapSequence.fromMap(_params).get("module")),((MPSProject)MapSequence.fromMap(_params).get("project")));
        final SingleConfigurableEditor configurableEditor=new SingleConfigurableEditor(((Project)MapSequence.fromMap(_params).get("ideaProject")),configurable,"#MPSPropertiesConfigurable");
        configurableEditor.show();
      }
      return;
    }
    if (!(((SModule)MapSequence.fromMap(_params).get("module")).getModelRoots().iterator().hasNext())) {
      JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),"Can't create a model in solution with no model roots","Can't create model",JOptionPane.ERROR_MESSAGE);
      return;
    }
    final Wrappers._T<NewModelDialog> dialog=new Wrappers._T<NewModelDialog>();
    modelAccess.runReadAction(new Runnable(){
      public void run(){
        String stereotype=NewModelFromSource_Action.this.getStereotype(_params);
        dialog.value=new NewModelDialog(((MPSProject)MapSequence.fromMap(_params).get("project")),(AbstractModule)((SModule)MapSequence.fromMap(_params).get("module")),NewModelFromSource_Action.this.getNamespace(_params),stereotype,NewModelFromSource_Action.this.isStrict(_params));
      }
    }
);
    dialog.value.show();
    SModel result=dialog.value.getResult();
    if (result == null) {
      return;
    }
    TreeFileChooser treeFileChooser=new TreeFileChooser();
    treeFileChooser.setDirectoriesAreAlwaysVisible(true);
    treeFileChooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
    final SModel sModel=result;
    File initial=ImportSourcesIntoModelUtils.getInitialDirectoryForImport((AbstractModule)((SModule)MapSequence.fromMap(_params).get("module")),SNodeOperations.getModelLongName(sModel));
    if (initial != null) {
      treeFileChooser.setInitialFile(FileSystem.getInstance().getFileByPath(initial.getAbsolutePath()));
    }
    IFile resultFile=treeFileChooser.showDialog(((Frame)MapSequence.fromMap(_params).get("frame")));
    if (resultFile != null) {
      IFileUtils.getAllFiles(FileSystem.getInstance().getFileByPath(resultFile.getPath()));
      final MultipleFilesParser parser=new MultipleFilesParser(((SModule)MapSequence.fromMap(_params).get("module")),((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository());
      final List<IFile> files=IFileUtils.getAllFiles(FileSystem.getInstance().getFileByPath(resultFile.getPath()));
      final Ref<JavaParseException> parseException=new Ref<JavaParseException>();
      ProgressManager.getInstance().run(new Task.Modal(((MPSProject)MapSequence.fromMap(_params).get("project")).getProject(),"Converting Java to MPS",true){
        public void run(        @NotNull ProgressIndicator progress){
          try {
            parser.convertToMps(files,new ProgressMonitorAdapter(progress));
          }
 catch (          JavaParseException e) {
            parseException.set(e);
          }
catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      if (!(parseException.isNull())) {
        JOptionPane.showMessageDialog(((Frame)MapSequence.fromMap(_params).get("frame")),parseException.get().getMessage(),"Parse error",JOptionPane.ERROR_MESSAGE);
      }
    }
    SModel modelDescriptor=result;
    ProjectPane.getInstance(((MPSProject)MapSequence.fromMap(_params).get("project"))).selectModel(modelDescriptor,false);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Priority.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "NewModelFromSource",t);
    }
  }
}
