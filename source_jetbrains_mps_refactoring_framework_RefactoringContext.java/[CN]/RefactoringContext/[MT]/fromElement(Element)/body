{
  try {
    String versionString=element.getAttributeValue(MODEL_VERSION);
    if (versionString != null) {
      myModelVersion=Integer.parseInt(versionString);
    }
 else {
      myModelVersion=-1;
    }
  }
 catch (  Throwable t) {
    myModelVersion=-1;
    LOG.error(t);
  }
{
    myRefactoring=null;
    Element refactoringElement=element.getChild(REFACTORING);
    String className=refactoringElement.getAttributeValue(REFACTORING_CLASS);
    try {
      String namespace=NameUtil.namespaceFromLongName(NameUtil.namespaceFromLongName(className));
      Language l=MPSModuleRepository.getInstance().getLanguage(namespace);
      if (l == null) {
        LOG.errorWithTrace("can't find a language " + namespace);
      }
 else {
        Class<ILoggableRefactoring> refactoringClass=(Class<ILoggableRefactoring>)l.getClass(className);
        Constructor<ILoggableRefactoring> constructor=refactoringClass.getConstructor();
        myRefactoring=constructor.newInstance();
      }
    }
 catch (    Throwable t) {
      LOG.error(t);
    }
  }
{
    Element moveMapElement=element.getChild(MOVE_MAP);
    for (    Element entryElement : (List<Element>)moveMapElement.getChildren(ENTRY)) {
      Element keyElement=entryElement.getChild(KEY);
      Element valueElement=entryElement.getChild(VALUE);
      myMoveMap.put(new FullNodeId(keyElement),new FullNodeId(valueElement));
    }
  }
{
    Element featureMapElement=element.getChild(CONCEPT_FEATURE_MAP);
    for (    Element entryElement : (List<Element>)featureMapElement.getChildren(ENTRY)) {
      Element keyElement=entryElement.getChild(KEY);
      Element valueElement=entryElement.getChild(VALUE);
      myConceptFeatureMap.put(new ConceptFeature(keyElement),new ConceptFeature(valueElement));
    }
  }
{
    Element parametersMapElement=element.getChild(PARAMETERS_MAP);
    for (    Element entryElement : (List<Element>)parametersMapElement.getChildren(ENTRY)) {
      Element keyElement=entryElement.getChild(KEY);
      Element valueElement=entryElement.getChild(VALUE);
      String parameterName=keyElement.getAttributeValue(PARAMETER_NAME);
      myAdditionalParametersMap.put(parameterName,deserialize(valueElement));
    }
  }
  computeCaches();
}
