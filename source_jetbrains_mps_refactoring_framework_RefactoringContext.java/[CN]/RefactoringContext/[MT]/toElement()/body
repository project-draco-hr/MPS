{
  Element refactoringContextElement=new Element(REFACTORING_CONTEXT);
{
    Element moveMapElement=new Element(MOVE_MAP);
    for (    Entry<FullNodeId,FullNodeId> entry : myMoveMap.entrySet()) {
      Element entryElement=new Element(ENTRY);
      Element keyElement=new Element(KEY);
      Element valueElement=new Element(VALUE);
      entry.getKey().toElement(keyElement);
      entry.getValue().toElement(valueElement);
      entryElement.addContent(keyElement);
      entryElement.addContent(valueElement);
      moveMapElement.addContent(entryElement);
    }
    refactoringContextElement.addContent(moveMapElement);
  }
{
    Element featureMapElement=new Element(CONCEPT_FEATURE_MAP);
    for (    Entry<ConceptFeature,ConceptFeature> entry : myConceptFeatureMap.entrySet()) {
      Element entryElement=new Element(ENTRY);
      Element keyElement=new Element(KEY);
      Element valueElement=new Element(VALUE);
      entry.getKey().toElement(keyElement);
      entry.getValue().toElement(valueElement);
      entryElement.addContent(keyElement);
      entryElement.addContent(valueElement);
      featureMapElement.addContent(entryElement);
    }
    refactoringContextElement.addContent(featureMapElement);
  }
{
    Element parametersMapElement=new Element(PARAMETERS_MAP);
    for (    Entry<String,Object> entry : myAdditionalParametersMap.entrySet()) {
      Element entryElement=new Element(ENTRY);
      Element keyElement=new Element(KEY);
      Element valueElement=new Element(VALUE);
      keyElement.setAttribute(PARAMETER_NAME,entry.getKey());
      serialize(valueElement,entry.getValue());
      entryElement.addContent(keyElement);
      entryElement.addContent(valueElement);
      parametersMapElement.addContent(entryElement);
    }
  }
  return refactoringContextElement;
}
