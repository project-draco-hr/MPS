{
  List<Node> nodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  ListSequence.<Node>fromList(nodes).addSequence(ListSequence.<Node>fromList(graph.getNodes()));
  for (  Node node : ListSequence.<Node>fromList(nodes)) {
    MapSequence.<Node,List<Node>>fromMap(nodeMap).put(node,ListSequence.<Node>fromList(new ArrayList<Node>()));
  }
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
  EmbeddedGraphModifier modifier=new EmbeddedGraphModifier(embeddedGraph);
  Set<Edge> edges=modifier.reduceNodesDegree(nodeMap,MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>()));
  Map<Dart,Integer> bends=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentation.getRepresentation(embeddedGraph,edges,bends,angles);
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  modifier.setDartDirections(directions);
  return modifier;
}
