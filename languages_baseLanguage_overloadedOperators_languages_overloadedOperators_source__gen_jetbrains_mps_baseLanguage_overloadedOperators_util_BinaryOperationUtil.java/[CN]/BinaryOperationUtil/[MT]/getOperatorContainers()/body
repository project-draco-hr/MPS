{
  Iterable<SNode> visibleContainers=ListSequence.fromList(SModelOperations.roots(myModel,MetaAdapterFactory.getConcept(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x66302c3c8df72c49L,"jetbrains.mps.baseLanguage.overloadedOperators.structure.ContainerImport"))).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return (SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x66302c3c8df72c49L,0x66302c3c8df72d45L,"container")) != null);
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x66302c3c8df72c49L,0x66302c3c8df72d45L,"container"));
    }
  }
);
  if (Sequence.fromIterable(visibleContainers).isEmpty()) {
    visibleContainers=SModelOperations.rootsIncludingImported(myModel,MetaAdapterFactory.getConcept(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x6b6f5c413011207L,"jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer"));
  }
  return Sequence.fromIterable(visibleContainers).translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getChildren(it,MetaAdapterFactory.getContainmentLink(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x6b6f5c413011207L,0x6b6f5c413011208L,"operators"));
    }
  }
);
}
