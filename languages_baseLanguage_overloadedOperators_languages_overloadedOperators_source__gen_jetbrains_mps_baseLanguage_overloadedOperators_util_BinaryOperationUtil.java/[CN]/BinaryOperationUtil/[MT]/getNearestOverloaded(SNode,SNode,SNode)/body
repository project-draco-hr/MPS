{
  if (!(SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,"jetbrains.mps.baseLanguage.structure.BinaryOperation")))) {
    return null;
  }
  SNode result=(SNode)(node.getUserObject("operator"));
  if (result != null) {
    return result;
  }
  Map<SNode,Boolean> operatorMap=getOverloadedOperators(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,"jetbrains.mps.baseLanguage.structure.BinaryOperation")),leftType,rightType);
  if (MapSequence.fromMap(operatorMap).isEmpty()) {
    return null;
  }
  result=MapSequence.fromMap(operatorMap).first().key();
  boolean resultReversed=MapSequence.fromMap(operatorMap).first().value();
  for (  IMapping<SNode,Boolean> operatorEntry : MapSequence.fromMap(operatorMap)) {
    SNode operator=operatorEntry.key();
    boolean reversed=operatorEntry.value() != resultReversed;
    if (isSubTypeOperator(operator,result,reversed)) {
      result=operator;
      resultReversed=operatorEntry.value();
    }
  }
  node.putUserObject("operator",result);
  node.putUserObject("reversed",resultReversed);
  return result;
}
