{
  Map<SNode,Boolean> result=MapSequence.fromMap(new HashMap<SNode,Boolean>());
  if (!(SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,"jetbrains.mps.baseLanguage.structure.BinaryOperation")))) {
    return result;
  }
  for (  SNode operator : getOperatorContainers()) {
    if (isOverloading(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,"jetbrains.mps.baseLanguage.structure.BinaryOperation")),leftType,rightType,operator)) {
      MapSequence.fromMap(result).put(operator,false);
    }
    if (SPropertyOperations.getBoolean(operator,MetaAdapterFactory.getProperty(new UUID(-248448403205894696l,-5239469005774541060l),483844232470132813l,2673276898228709090l,"commutative")) && isOverloading(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1081773326031l,"jetbrains.mps.baseLanguage.structure.BinaryOperation")),rightType,leftType,operator)) {
      MapSequence.fromMap(result).put(operator,true);
    }
  }
  return result;
}
