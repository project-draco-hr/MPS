{
  Map<SNode,Boolean> result=MapSequence.fromMap(new HashMap<SNode,Boolean>());
  if (!(SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation")))) {
    return result;
  }
  for (  SNode operator : getOperatorContainers()) {
    if (isOverloading(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation")),leftType,rightType,operator)) {
      MapSequence.fromMap(result).put(operator,false);
    }
    if (SPropertyOperations.getBoolean(operator,MetaAdapterFactory.getProperty(0xfc8d557e5de64dd8L,0xb749aab2fb23aefcL,0x6b6f5c41300f84dL,0x2519632ce12e26e2L,"commutative")) && isOverloading(SNodeOperations.cast(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation")),rightType,leftType,operator)) {
      MapSequence.fromMap(result).put(operator,true);
    }
  }
  return result;
}
