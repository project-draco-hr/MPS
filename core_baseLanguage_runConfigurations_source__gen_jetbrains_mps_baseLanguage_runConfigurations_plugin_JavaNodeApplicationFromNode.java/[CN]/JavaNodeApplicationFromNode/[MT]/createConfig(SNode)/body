{
  final String unitName=IMainClass_Behavior.call_getUnitName_4482685194810363969(parameter);
  if (StringUtils.isEmpty(unitName)) {
    return;
  }
  JavaNodeApplicationFromNode.this.setSourceElement(new MPSPsiElement(parameter));
{
    ConfigurationType configType=ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP),new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>(){
      public Class<ConfigurationType> invoke(){
        try {
          return (Class<ConfigurationType>)getClass().getClassLoader().loadClass("jetbrains.mps.baseLanguage.plugin.JavaApplication_ConfigurationType");
        }
 catch (        ClassNotFoundException cl) {
          return (Class<ConfigurationType>)null;
        }
      }
    }
.invoke());
    JavaNodeApplication_Configuration _config=new JavaNodeApplication_Configuration(JavaNodeApplicationFromNode.this.getContext().getProject(),findFactory(configType,"JavaNodeApplication"),"NewConfig"){
      @Override public String suggestedName(){
        return unitName;
      }
    }
;
    _config.setName(unitName);
    _config.getStateObject().nodeId=parameter.getId();
    _config.getStateObject().modelId=parameter.getModel().getModelDescriptor().getSModelReference().toString();
    JavaNodeApplicationFromNode.this.myConfig=_config;
  }
}
