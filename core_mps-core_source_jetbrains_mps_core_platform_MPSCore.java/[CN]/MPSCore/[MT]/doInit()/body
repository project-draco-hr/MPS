{
  SNodeAccessUtil.setInstance(new SNodeAccessUtilImpl());
  myPersistenceFacade=init(new PersistenceRegistry());
  init(new FacetsRegistry());
  SRepositoryRegistry repositoryRegistry=init(new SRepositoryRegistry());
  myModuleRepository=init(new MPSModuleRepository());
  SModelRepository modelRepository=init(new SModelRepository(myModuleRepository));
  init(new GlobalSModelEventsManager(modelRepository));
  myClassLoaderManager=init(new ClassLoaderManager(myModuleRepository));
  init(new DebugRegistry());
  init(new SModelFileTracker.Plug(repositoryRegistry));
  init(new ModuleRepositoryFacade(myModuleRepository));
  init(new ModuleFileTracker(myModuleRepository));
  CleanupManager cleanupManager=init(new CleanupManager(myClassLoaderManager));
  init(new PathMacros());
  myLibraryInitializer=init(new LibraryInitializer(myModuleRepository));
  init(new GlobalScope(myModuleRepository));
  init(new ImmatureReferences(myModuleRepository));
  init(new QueryMethodGenerated(myClassLoaderManager));
  myLanguageRegistry=init(new LanguageRegistry(myModuleRepository,myClassLoaderManager));
  init(new LanguageScopeFactory(myClassLoaderManager));
  init(new ConceptRegistry(myLanguageRegistry));
  init(new ExtensionRegistry(myClassLoaderManager,myModuleRepository));
  init(new ConceptDescendantsCache(myModuleRepository,myLanguageRegistry));
  init(new CachesManager(myClassLoaderManager,modelRepository));
  init(new DescriptorModelComponent(myModuleRepository,new LanguageDescriptorModelProvider(myClassLoaderManager),new GeneratorDescriptorModelProvider()));
  init(new ProjectStructureModule(myModuleRepository,myPersistenceFacade));
  init(new CopyPasteManager(myClassLoaderManager));
  init(new PasteWrappersManager(myClassLoaderManager));
  init(new BLDependenciesCache(myModuleRepository,cleanupManager));
  init(new ResolverComponent());
  init(new ValidationSettings());
  init(new BootstrapMakeFacets());
  init(new PropertySupportCache(myClassLoaderManager));
}
