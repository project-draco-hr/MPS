{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimeIntPropertyFormatConfiguration").super_("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyConfiguration").parents("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyConfiguration").references("dateTimeProperty").alias("format configuration for <{dateTimeProperty}>","").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimeProperty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("singleForm","pluralForm").references("jodaDateTimeFieldType","jodaPeriodType","jodaDurationType","periodFormatMethod").create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyCardinality").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("numberOfSymbols","meaning").create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyConfiguration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"dateTimePropertyFormatType"},new boolean[]{true}).abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyFormatType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("letter","meaning","examples").references("dateTimePropertyCardinality").create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertySettings").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"dateTimeProperty","durationType","locale","month","schedulePeriod","zone"},new boolean[]{true,true,true,true,true,true}).create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimeZone").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("country","continentOfCountry").create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimeZonePropertyFormatConfiguration").super_("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyConfiguration").parents("jetbrains.mps.baseLanguage.datesInternal.structure.DateTimePropertyConfiguration").alias("format configuration for zone","").create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.DurationType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"jodaDurationFieldType"},new boolean[]{false}).alias("duration type","").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.FormatTokenSettings").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"predefinedDateFormat","predefinedPeriodFormat","dateTimePropertyCardinality","dateTimePropertyFormatConfiguration"},new boolean[]{true,true,true,true}).create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.IDateFormat").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").properties("isPublic").create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.IPeriodFormat").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").properties("isPublic").create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.Locale").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"javaLocale"},new boolean[]{false}).create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.Month").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept").properties("shortName","days","number").create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.PredefinedDateFormat").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.datesInternal.structure.IDateFormat").children(new String[]{"formatter"},new boolean[]{false}).alias("predefined format","").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.PredefinedPeriodFormat").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.datesInternal.structure.IPeriodFormat").children(new String[]{"formatter"},new boolean[]{false}).alias("predefined period format","").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.datesInternal.structure.SchedulePeriod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.INamedConcept","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("second","minute","hour","dayOfWeek","dayOfMonth","month").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
