{
  Iterable<SNode> list=ListSequence.fromList(SLinkOperations.getTargets(myProject,"dependencies",true)).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.structure.BuildProjectDependency") && (SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildProjectDependency"),"artifacts",true) == null) && !(BuildProject_Behavior.call_isPackaged_4129895186893455885(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildProjectDependency"),"script",false),Context.defaultContext(myGenContext)));
    }
  }
).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SNodeOperations.cast(it,"jetbrains.mps.build.structure.BuildProjectDependency");
    }
  }
);
  String basePath=BuildProject_Behavior.call_getBasePath_4959435991187146924(myProject,Context.defaultContext(myGenContext));
  if ((basePath == null || basePath.length() == 0)) {
    return this;
  }
  final RelativePathHelper helper=new RelativePathHelper(basePath);
  ListSequence.fromList(myDependency).addSequence(Sequence.fromIterable(list).select(new ISelector<SNode,Tuples._2<SNode,String>>(){
    public Tuples._2<SNode,String> select(    SNode it){
      return MultiTuple.<SNode,String>from(SLinkOperations.getTarget(it,"script",false),calculatePath(it,helper));
    }
  }
));
  return this;
}
