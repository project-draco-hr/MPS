{
  SNode script=SLinkOperations.getTarget(node,MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL,0xb99171f8c50ce5d2L,0x454b730dd908c220L,0x4df58c6f18f84a24L,"script"));
  String filePath=BuildProject_Behavior.call_getScriptsPath_4796668409958419284(script,Context.defaultContext(myGenContext));
  if (filePath == null) {
    myGenContext.showErrorMessage(script,"no script path for required script " + SPropertyOperations.getString(script,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
    return ".";
  }
  try {
    String relative=helper.makeRelative(filePath);
    if ((relative == null || relative.length() == 0)) {
      return BuildProject_Behavior.call_getOutputFileName_4915877860351551360(script);
    }
    if (!(relative.endsWith("/"))) {
      relative+="/";
    }
    return relative + BuildProject_Behavior.call_getOutputFileName_4915877860351551360(script);
  }
 catch (  RelativePathHelper.PathException ex) {
    myGenContext.showErrorMessage(node,"cannot calculate relative path: " + ex.getMessage());
    return "????";
  }
}
