{
  if (pack.equals(SNodeOperations.getModelLongName(model))) {
    SNode nodeInSameModel=model.getNode(targetNodeId);
    if (nodeInSameModel != null) {
      return jetbrains.mps.smodel.SReference.create(role,source,model.getReference(),targetNodeId,resolveInfo);
    }
  }
  Set<SModelReference> possibleModels=StubModelsResolver.getInstance().resolveModel(module,new SModelFqName(pack,JAVA_STUB_STEREOTYPE).toString(),null);
  if (SetSequence.fromSet(possibleModels).isEmpty()) {
    return jetbrains.mps.smodel.SReference.create(role,source,new jetbrains.mps.smodel.SModelReference(pack,JAVA_STUB_STEREOTYPE),targetNodeId,resolveInfo);
  }
  for (  SModelReference m : possibleModels) {
    ((SModelInternal)model).addModelImport(m,false);
  }
  if (SetSequence.fromSet(possibleModels).count() > 1) {
    return new DynamicReference(role,source,new jetbrains.mps.smodel.SModelReference(pack,JAVA_STUB_STEREOTYPE),resolveInfo);
  }
  SModelReference targetModel=SetSequence.fromSet(possibleModels).first();
  SModuleReference targetModule=SModelRepository.getInstance().getModelDescriptor(targetModel).getModule().getModuleReference();
  SModelReference targetModelStubReference=StubHelper.uidForPackageInStubs(new SModelFqName(pack,JAVA_STUB_STEREOTYPE),targetModule,false);
  return jetbrains.mps.smodel.SReference.create(role,source,targetModelStubReference,targetNodeId,resolveInfo);
}
