{
  if (pack.equals(modelLongName)) {
    SNode nodeInSameModel=model.getNode(targetNodeId);
    if (nodeInSameModel != null) {
      return jetbrains.mps.smodel.SReference.create(role,source,model.getReference(),targetNodeId,resolveInfo);
    }
  }
  Set<SModelReference> possibleModels=StubModelsResolver.getInstance().resolveModel(module,new SModelFqName(pack,JAVA_STUB_STEREOTYPE).toString(),null);
  SModelReference modelRef=StubHelper.uidForPackageInStubs(module.getModuleReference(),pack);
  if (SetSequence.fromSet(possibleModels).isEmpty()) {
    return jetbrains.mps.smodel.SReference.create(role,source,modelRef,targetNodeId,resolveInfo);
  }
  for (  SModelReference m : possibleModels) {
    (model).addModelImport(m,false);
  }
  if (SetSequence.fromSet(possibleModels).count() > 1) {
    return new DynamicReference(role,source,modelRef,resolveInfo);
  }
  SModelReference targetModel=SetSequence.fromSet(possibleModels).first();
  SModuleReference targetModule=SModelRepository.getInstance().getModelDescriptor(targetModel).getModule().getModuleReference();
  SModelReference targetModelStubReference=StubHelper.uidForPackageInStubs(targetModule,pack);
  return jetbrains.mps.smodel.SReference.create(role,source,targetModelStubReference,targetNodeId,resolveInfo);
}
