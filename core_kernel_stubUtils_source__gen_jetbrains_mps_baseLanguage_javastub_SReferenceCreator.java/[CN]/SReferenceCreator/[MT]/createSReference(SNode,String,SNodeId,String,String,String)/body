{
  if (pack.equals(modelLongName)) {
    SNode nodeInSameModel=model.getNode(targetNodeId);
    if (nodeInSameModel != null) {
      return jetbrains.mps.smodel.SReference.create(role,source,model.getReference(),targetNodeId,resolveInfo);
    }
  }
  Set<SModelReference> possibleModels=StubModelsResolver.getInstance().resolveModel(module,SModelStereotype.withStereotype(pack,SModelStereotype.JAVA_STUB),null);
  if (SetSequence.fromSet(possibleModels).isEmpty()) {
    return jetbrains.mps.smodel.SReference.create(role,source,null,targetNodeId,resolveInfo);
  }
  Set<SModelReference> toImport=SetSequence.fromSetWithValues(new HashSet<SModelReference>(),possibleModels);
  SetSequence.fromSet(toImport).removeElement(model.getReference());
  for (  SModelReference m : toImport) {
    model.addModelImport(m,false);
  }
  if (SetSequence.fromSet(possibleModels).count() > 1) {
    return DynamicReference.createDynamicReference(role,source,pack,resolveInfo);
  }
  SModelReference targetModel=SetSequence.fromSet(possibleModels).first();
  SModuleReference targetModule=SModelRepository.getInstance().getModelDescriptor(targetModel).getModule().getModuleReference();
  SModelReference targetModelStubReference=StubHelper.uidForPackageInStubs(targetModule,pack);
  return jetbrains.mps.smodel.SReference.create(role,source,targetModelStubReference,targetNodeId,resolveInfo);
}
