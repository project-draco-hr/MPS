{
  MPSTreeNode currentNode=myModelTree.getCurrentNode();
  if (!(currentNode instanceof SNodeTreeNode)) {
    return;
  }
  SNodeTreeNode snodeNode=(SNodeTreeNode)currentNode;
  final SNode node=snodeNode.getSNode();
  Runnable openAction=ModelAccess.instance().runReadAction(new Computable<Runnable>(){
    public Runnable compute(){
      List<SModelDescriptor> descriptors=SModelRepository.getInstance().getModelDescriptorsByModelName(node.getModel().getLongName());
      for (      SModelDescriptor d : descriptors) {
        final SNode targetNode=d.getSModel().getNodeById(node.getId());
        if (targetNode != null) {
          Project[] openedProjects=ProjectManager.getInstance().getOpenProjects();
          if (openedProjects.length == 0)           break;
          final Project firstOpenedProject=openedProjects[0];
          return new Runnable(){
            public void run(){
              firstOpenedProject.getComponent(MPSProjectHolder.class).getMPSProject().getComponentSafe(MPSEditorOpener.class).openNode(targetNode,true);
            }
          }
;
        }
      }
      return null;
    }
  }
);
  if (openAction != null) {
    openAction.run();
  }
}
