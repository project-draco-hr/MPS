{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("property",new BaseReferenceConstraintsDescriptor("property",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_dd2wtm_a0a0a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            NotationContext context=ContextUtil.getContext(_context.getContextNode(),_context.getContextRole());
            if (context != null && !(context.isMultiple()) && SNodeOperations.isInstanceOf(context.getNode(),"jetbrains.mps.core.structure.structure.SAbstractConcept")) {
              return ScopeProvider_Behavior.call_getScope_3734116213129936182(SNodeOperations.cast(context.getNode(),"jetbrains.mps.core.structure.structure.SAbstractConcept"),SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SProperty"),null);
            }
            return new EmptyScope();
          }
        }
      }
;
    }
  }
);
  return references;
}
