{
  List<Document> editedDocumentsNew=new ArrayList<Document>();
  List<SNodePointer> editedNodesNew=new ArrayList<SNodePointer>();
  ArrayList<EditorTabDescriptor> tabs=new ArrayList<EditorTabDescriptor>(myPossibleTabs);
  Collections.sort(tabs,new EditorTabComparator());
  List<Pair<EditorTabDescriptor,List<SNode>>> result=new ArrayList<Pair<EditorTabDescriptor,List<SNode>>>();
  getTabRemovalListener().clearAspects();
  for (  EditorTabDescriptor d : tabs) {
    List<SNode> nodes=d.getNodes(myBaseNode.getNode());
    if (nodes.isEmpty())     continue;
    result.add(new Pair<EditorTabDescriptor,List<SNode>>(d,nodes));
    for (    SNode node : nodes) {
      getTabRemovalListener().aspectAdded(node.getContainingRoot());
      SNodePointer nodePointer=new SNodePointer(node);
      editedNodesNew.add(nodePointer);
      editedDocumentsNew.add(MPSUndoUtil.getDoc(nodePointer));
    }
  }
  myEditedDocuments=editedDocumentsNew;
  myEditedNodes=editedNodesNew;
  return result;
}
