{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0x.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AndOperation;
      }
    break;
case 1:
  if (true) {
    return props_Constant;
  }
break;
case 2:
if (true) {
return props_EqualsOperation;
}
break;
case 3:
if (true) {
return props_Expression;
}
break;
case 4:
if (true) {
return props_FloatingPointConstant;
}
break;
case 5:
if (true) {
return props_Formula;
}
break;
case 6:
if (true) {
return props_Function;
}
break;
case 7:
if (true) {
return props_GreaterThanOperation;
}
break;
case 8:
if (true) {
return props_IfFunction;
}
break;
case 9:
if (true) {
return props_IntegerConstant;
}
break;
case 10:
if (true) {
return props_IsNullOperation;
}
break;
case 11:
if (true) {
return props_LessThanOperation;
}
break;
case 12:
if (true) {
return props_MinusOperation;
}
break;
case 13:
if (true) {
return props_MultOperation;
}
break;
case 14:
if (true) {
return props_NotOperation;
}
break;
case 15:
if (true) {
return props_NullConstant;
}
break;
case 16:
if (true) {
return props_Operation;
}
break;
case 17:
if (true) {
return props_OrOperation;
}
break;
case 18:
if (true) {
return props_ParenthisizedExpression;
}
break;
case 19:
if (true) {
return props_PlusOperation;
}
break;
case 20:
if (true) {
return props_Reference;
}
break;
case 21:
if (true) {
return props_StringConstant;
}
break;
default :
}
}
throw new IllegalStateException();
}
