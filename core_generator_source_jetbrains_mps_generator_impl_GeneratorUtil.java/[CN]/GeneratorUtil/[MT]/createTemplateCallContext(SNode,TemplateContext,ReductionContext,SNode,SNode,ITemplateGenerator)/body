{
  final SNode[] arguments=getArguments(templateCall);
  final String[] parameters=getParameters(templateCall,generator);
  if (arguments == null && parameters == null) {
    return outerContext != null ? outerContext.subContext(null,newInputNode) : new DefaultTemplateContext(newInputNode);
  }
  if (arguments == null || parameters == null || arguments.length != parameters.length) {
    generator.showErrorMessage(inputNode,templateCall,"number of arguments doesn't match template");
    return outerContext != null ? outerContext.subContext(null,newInputNode) : new DefaultTemplateContext(newInputNode);
  }
  final Map<String,Object> vars=new HashMap<String,Object>(arguments.length);
  for (int i=0; i < arguments.length; i++) {
    SNode exprNode=arguments[i];
    String name=parameters[i];
    Object value=null;
    if (exprNode.getConcept().isSubConceptOf(SConceptRepository.getInstance().getConcept(RuleUtil.concept_TemplateArgumentParameterExpression)) && outerContext != null) {
      SNode parameter=RuleUtil.getTemplateArgumentParameterExpression_Parameter(exprNode);
      if (parameter == null) {
        generator.showErrorMessage(inputNode,exprNode,"cannot evaluate template argument #" + (i + 1) + ": invalid parameter reference");
      }
 else {
        value=outerContext.getVariable(parameter.getName());
      }
    }
 else     if (exprNode.getConcept().isSubConceptOf(SConceptRepository.getInstance().getConcept(RuleUtil.concept_TemplateArgumentPatternRef)) && outerContext != null) {
      String patternVar=GeneratorUtilEx.getPatternVariableName(exprNode);
      if (patternVar == null) {
        generator.showErrorMessage(inputNode,exprNode,"cannot evaluate template argument #" + (i + 1) + ": invalid pattern reference");
      }
 else {
        value=outerContext.getPatternVariable(patternVar);
      }
    }
 else {
      if (SNodeUtil.isInstanceOf(exprNode,SNodeOperations.getConcept(RuleUtil.concept_TemplateArgumentQueryExpression))) {
        SNode query=RuleUtil.getTemplateArgumentQueryExpression_Query(exprNode);
        value=reductionContext.getQueryExecutor().evaluateArgumentQuery(inputNode,query,outerContext);
      }
 else {
        try {
          value=RuleUtil.evaluateBaseLanguageExpression(exprNode);
        }
 catch (        IllegalArgumentException ex) {
          generator.showErrorMessage(inputNode,templateCall,"cannot evaluate template argument #" + (i + 1));
        }
      }
    }
    vars.put(name,value);
  }
  return new DefaultTemplateContext(null,vars,newInputNode);
}
