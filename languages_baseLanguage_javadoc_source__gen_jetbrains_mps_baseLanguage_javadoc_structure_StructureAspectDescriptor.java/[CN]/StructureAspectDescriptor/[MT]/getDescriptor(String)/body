{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
case 1:
  return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 2:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"body","author","since","version","deprecated","see"},new boolean[]{true,true,true,true,false,true}).abstract_().create();
case 3:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 4:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 5:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("param").abstract_().create();
case 6:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").references("declaration").abstract_().create();
case 7:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").children(new String[]{"param"},new boolean[]{true}).create();
case 8:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").references("classifier").create();
case 9:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").children(new String[]{"line"},new boolean[]{true}).alias("code","code piece").create();
case 10:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine").children(new String[]{"statement"},new boolean[]{true}).create();
case 11:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"part"},new boolean[]{true}).create();
case 12:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
case 13:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").children(new String[]{"text"},new boolean[]{false}).create();
case 14:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").references("parameterDeclaration").create();
case 15:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").references("typeVariableDeclaration").create();
case 16:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").create();
case 17:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").references("fieldDeclaration").create();
case 18:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").properties("name").children(new String[]{"line"},new boolean[]{true}).create();
case 19:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").alias("inheritDoc","inherit doc from parent").create();
case 20:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").children(new String[]{"tag"},new boolean[]{false}).create();
case 21:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").children(new String[]{"line","reference"},new boolean[]{true,false}).alias("link","link to type or member").create();
case 22:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").children(new String[]{"param","throwsTag","return"},new boolean[]{true,true,false}).create();
case 23:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").references("methodDeclaration").create();
case 24:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").children(new String[]{"parameter"},new boolean[]{false}).create();
case 25:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
case 26:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").children(new String[]{"reference"},new boolean[]{false}).create();
case 27:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
case 28:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").references("staticFieldDeclaration").create();
case 29:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").properties("text").create();
case 30:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").children(new String[]{"exceptionType"},new boolean[]{false}).create();
case 31:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").children(new String[]{"variableReference"},new boolean[]{false}).alias("value","constant value").create();
case 32:
return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
