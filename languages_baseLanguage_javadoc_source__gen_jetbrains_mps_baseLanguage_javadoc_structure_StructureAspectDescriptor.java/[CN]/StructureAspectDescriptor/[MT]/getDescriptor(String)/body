{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{},new String[]{"body","author","since","version","deprecated","see"},new boolean[]{true,true,true,true,false,true});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{"param"},new String[]{},new boolean[]{});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"},new String[]{},new String[]{"declaration"},new String[]{},new boolean[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment","jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"},new String[]{},new String[]{},new String[]{"param"},new boolean[]{true});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"},new String[]{},new String[]{"classifier"},new String[]{},new boolean[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"},new String[]{},new String[]{},new String[]{"line"},new boolean[]{true});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet","jetbrains.mps.baseLanguage.javadoc.structure.CommentLine",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"},new String[]{},new String[]{},new String[]{"statement"},new boolean[]{true});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{"part"},new boolean[]{true});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 14:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"},new String[]{},new String[]{"parameterDeclaration"},new String[]{},new boolean[]{});
case 15:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"},new String[]{},new String[]{"typeVariableDeclaration"},new String[]{},new boolean[]{});
case 16:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment","jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 17:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"},new String[]{},new String[]{"fieldDeclaration"},new String[]{},new boolean[]{});
case 18:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement","jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"},new String[]{"name"},new String[]{},new String[]{"line"},new boolean[]{true});
case 19:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"},new String[]{},new String[]{},new String[]{},new boolean[]{});
case 20:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart","jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"},new String[]{},new String[]{},new String[]{"tag"},new boolean[]{false});
case 21:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"},new String[]{},new String[]{},new String[]{"line","reference"},new boolean[]{true,false});
case 22:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment","jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"},new String[]{},new String[]{},new String[]{"param","throwsTag","return"},new boolean[]{true,true,false});
case 23:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"},new String[]{},new String[]{"methodDeclaration"},new String[]{},new boolean[]{});
case 24:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{"parameter"},new boolean[]{false});
case 25:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{});
case 26:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{"reference"},new boolean[]{false});
case 27:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{});
case 28:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference","jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"},new String[]{},new String[]{"staticFieldDeclaration"},new String[]{},new boolean[]{});
case 29:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart","jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{});
case 30:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{"exceptionType"},new boolean[]{false});
case 31:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"},new String[]{},new String[]{},new String[]{"variableReference"},new boolean[]{false});
case 32:
return new CompiledConceptDescriptor("jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag","jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag",false,new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"},new String[]{"text"},new String[]{},new String[]{},new boolean[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
