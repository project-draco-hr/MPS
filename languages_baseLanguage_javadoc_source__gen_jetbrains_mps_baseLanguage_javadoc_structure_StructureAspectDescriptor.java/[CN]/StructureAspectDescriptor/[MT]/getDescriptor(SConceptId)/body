{
  Integer index=myIndexMap.get(id);
  if (index == null) {
    return null;
  }
switch (((int)index)) {
case 0:
    return myConceptAuthorBlockDocTag;
case 1:
  return myConceptBaseBlockDocTag;
case 2:
return myConceptBaseDocComment;
case 3:
return myConceptBaseDocReference;
case 4:
return myConceptBaseInlineDocTag;
case 5:
return myConceptBaseParameterReference;
case 6:
return myConceptBaseVariableDocReference;
case 7:
return myConceptClassifierDocComment;
case 8:
return myConceptClassifierDocReference;
case 9:
return myConceptCodeInlineDocTag;
case 10:
return myConceptCodeSnippet;
case 11:
return myConceptCommentLine;
case 12:
return myConceptCommentLinePart;
case 13:
return myConceptDeprecatedBlockDocTag;
case 14:
return myConceptDocMethodParameterReference;
case 15:
return myConceptDocTypeParameterReference;
case 16:
return myConceptEmptyBlockDocTag;
case 17:
return myConceptFieldDocComment;
case 18:
return myConceptFieldDocReference;
case 19:
return myConceptHTMLElement;
case 20:
return myConceptInheritDocInlineDocTag;
case 21:
return myConceptInlineTagCommentLinePart;
case 22:
return myConceptLinkInlineDocTag;
case 23:
return myConceptMethodDocComment;
case 24:
return myConceptMethodDocReference;
case 25:
return myConceptParameterBlockDocTag;
case 26:
return myConceptReturnBlockDocTag;
case 27:
return myConceptSeeBlockDocTag;
case 28:
return myConceptSinceBlockDocTag;
case 29:
return myConceptStaticFieldDocReference;
case 30:
return myConceptTextCommentLinePart;
case 31:
return myConceptThrowsBlockDocTag;
case 32:
return myConceptValueInlineDocTag;
case 33:
return myConceptVersionBlockDocTag;
default :
throw new IllegalStateException();
}
}
