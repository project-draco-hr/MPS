{
  List<SNode> result=new ArrayList<SNode>();
  List<SNode> classNodes=FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder",node,scope,indicator);
  ListSequence.fromList(classNodes).addElement(node);
  for (  SNode classNode : ListSequence.fromList(classNodes)) {
    for (    SNode implementedInterface : ListSequence.fromList(SLinkOperations.getTargets((SNode)classNode,"implementedInterface",true))) {
      SNode interfaceNode=(SNode)SLinkOperations.getTarget(implementedInterface,"classifier",false);
      ListSequence.fromList(result).addElement(interfaceNode);
      ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SNode>)FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder",interfaceNode,scope,indicator)));
    }
  }
  for (  SNode interfaceNode : ListSequence.fromList(result)) {
    ListOperations.addElement(_results,interfaceNode);
  }
}
