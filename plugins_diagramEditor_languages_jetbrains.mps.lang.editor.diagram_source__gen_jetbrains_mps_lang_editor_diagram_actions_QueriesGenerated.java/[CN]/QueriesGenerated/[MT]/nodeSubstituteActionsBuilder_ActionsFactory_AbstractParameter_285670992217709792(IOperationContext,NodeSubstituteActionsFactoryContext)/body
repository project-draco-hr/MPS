{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.diagram.structure.ParameterLink");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Scope linkDeclarationScope=Scope.getScope(_context.getParentNode(),_context.getCurrentTargetNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration"));
          if (linkDeclarationScope == null) {
            return Collections.emptyList();
          }
          return Sequence.fromIterable(linkDeclarationScope.getAvailableElements("")).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.LinkDeclaration");
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode parameter=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.diagram.structure.ParameterLink",_context.getCurrentTargetNode());
              SLinkOperations.setTarget(parameter,"link",(item),false);
              return parameter;
            }
            @Override protected SNode selectChildNode(            SNode createdNode,            SModel model,            String pattern,            EditorContext editorContext){
              SelectionUtil.selectLabelCellAnSetCaret(editorContext,createdNode,SelectionManager.LAST_EDITABLE_CELL,-1);
              return null;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"role");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.diagram.structure.ParameterProperty");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          Scope propertyDeclarationScope=Scope.getScope(_context.getParentNode(),_context.getCurrentTargetNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.PropertyDeclaration"));
          if (propertyDeclarationScope == null) {
            return Collections.emptyList();
          }
          return Sequence.fromIterable(propertyDeclarationScope.getAvailableElements("")).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.cast(it,"jetbrains.mps.lang.structure.structure.PropertyDeclaration");
            }
          }
);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode parameter=SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.diagram.structure.ParameterProperty",_context.getCurrentTargetNode());
              SLinkOperations.setTarget(parameter,"property",(item),false);
              return parameter;
            }
            @Override protected SNode selectChildNode(            SNode createdNode,            SModel model,            String pattern,            EditorContext editorContext){
              SelectionUtil.selectLabelCellAnSetCaret(editorContext,createdNode,SelectionManager.LAST_EDITABLE_CELL,-1);
              return null;
            }
            public String getMatchingText(            String pattern){
              return SPropertyOperations.getString((item),"name");
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.diagram.structure.ParameterBLQuery");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
        public SNode createChildNode(        Object parameterObject,        SModel model,        String pattern){
          return SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.diagram.structure.ParameterBLQuery",_context.getCurrentTargetNode());
        }
        @Override protected SNode selectChildNode(        SNode createdNode,        SModel model,        String pattern,        EditorContext editorContext){
          SelectionUtil.selectLabelCellAnSetCaret(editorContext,createdNode,SelectionManager.LAST_EDITABLE_CELL,-1);
          return null;
        }
        public String getMatchingText(        String pattern){
          return "#<expression>";
        }
        public String getVisibleMatchingText(        String pattern){
          return getMatchingText(pattern);
        }
      }
);
    }
  }
  return result;
}
