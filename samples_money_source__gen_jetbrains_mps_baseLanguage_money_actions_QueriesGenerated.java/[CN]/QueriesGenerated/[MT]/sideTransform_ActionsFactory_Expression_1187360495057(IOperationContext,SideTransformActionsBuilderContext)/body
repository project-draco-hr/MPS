{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-850839507942816123l,-8275646104739946638l),1186669599053l,"jetbrains.mps.baseLanguage.money.structure.MoneyType"))) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.money.structure.MoneyGetCurrencyMethodCall",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,MetaAdapterFactory.getContainmentLink(new UUID(-850839507942816123l,-8275646104739946638l),1187357857395l,1187358164451l,"instance"),_context.getSourceNode());
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". currency";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "get currency";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-850839507942816123l,-8275646104739946638l),1186669599053l,"jetbrains.mps.baseLanguage.money.structure.MoneyType"))) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.money.structure.MoneyIsZeroMethodCall",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,MetaAdapterFactory.getContainmentLink(new UUID(-850839507942816123l,-8275646104739946638l),1187357857395l,1187358164451l,"instance"),_context.getSourceNode());
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". isZero";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "compare to zero";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),MetaAdapterFactory.getConcept(new UUID(-850839507942816123l,-8275646104739946638l),1186669599053l,"jetbrains.mps.baseLanguage.money.structure.MoneyType"))) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.money.structure.MoneyGetAmountMethodCall",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,MetaAdapterFactory.getContainmentLink(new UUID(-850839507942816123l,-8275646104739946638l),1187357857395l,1187358164451l,"instance"),_context.getSourceNode());
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". amount";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "get amount";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
