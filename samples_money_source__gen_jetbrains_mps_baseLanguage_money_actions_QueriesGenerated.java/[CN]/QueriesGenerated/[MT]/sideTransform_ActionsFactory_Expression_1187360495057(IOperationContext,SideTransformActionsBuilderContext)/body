{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x1144b05194dL,"jetbrains.mps.baseLanguage.money.structure.MoneyType"))) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x114740c6f9bL,"jetbrains.mps.baseLanguage.money.structure.MoneyGetCurrencyMethodCall")),null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,MetaAdapterFactory.getContainmentLink(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x114740b1673L,0x114740fc5e3L,"instance"),_context.getSourceNode());
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". currency";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "get currency";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x1144b05194dL,"jetbrains.mps.baseLanguage.money.structure.MoneyType"))) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x11483863450L,"jetbrains.mps.baseLanguage.money.structure.MoneyIsZeroMethodCall")),null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,MetaAdapterFactory.getContainmentLink(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x114740b1673L,0x114740fc5e3L,"instance"),_context.getSourceNode());
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". isZero";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "compare to zero";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),MetaAdapterFactory.getConcept(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x1144b05194dL,"jetbrains.mps.baseLanguage.money.structure.MoneyType"))) {
        SNode mgcmc=SNodeFactoryOperations.createNewNode(_context.getModel(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x114740b5d60L,"jetbrains.mps.baseLanguage.money.structure.MoneyGetAmountMethodCall")),null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),mgcmc);
        SLinkOperations.setTarget(mgcmc,MetaAdapterFactory.getContainmentLink(0xf43135f9b8334685L,0x8d26ffb6c8215f72L,0x114740b1673L,0x114740fc5e3L,"instance"),_context.getSourceNode());
        return mgcmc;
      }
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return ". amount";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "get amount";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),null));
    }
  }
);
  return result;
}
