{
  Frame frame=editorContext.getMainFrame();
  final Wrappers._T<SNode> superclass=new Wrappers._T<SNode>(null);
  final Wrappers._T<SNodePointer[]> ctors=new Wrappers._T<SNodePointer[]>(null);
  final Wrappers._boolean needsShowConstructorsDialog=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      superclass.value=SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(node,"superclass",true),"classifier",false),"jetbrains.mps.baseLanguage.structure.ClassConcept");
      if (superclass.value == null) {
        superclass.value=SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)","~Object");
      }
      if (ListSequence.fromList(SLinkOperations.getTargets(superclass.value,"constructor",true)).count() > 1) {
        needsShowConstructorsDialog.value=true;
        ctors.value=ListSequence.fromList(SLinkOperations.getTargets(superclass.value,"constructor",true)).select(new ISelector<SNode,SNodePointer>(){
          public SNodePointer select(          SNode it){
            return new SNodePointer(it);
          }
        }
).toGenericArray(SNodePointer.class);
      }
 else {
        intentionContext.getContextParametersMap().put("selectedConstructors",new SNodePointer[]{new SNodePointer(ListSequence.fromList(SLinkOperations.getTargets(superclass.value,"constructor",true)).first())});
      }
    }
  }
);
  if (needsShowConstructorsDialog.value) {
    SelectConstructorsDialog selectConstructorsDialog=new SelectConstructorsDialog(ctors.value,editorContext.getOperationContext().getProject());
    selectConstructorsDialog.show();
    if (!(selectConstructorsDialog.isOK())) {
      return false;
    }
    List<SNodePointer> selectedElements=selectConstructorsDialog.getSelectedElements();
    intentionContext.getContextParametersMap().put("selectedConstructors",(selectedElements != null ? selectedElements.toArray(new SNodePointer[selectedElements.size()]) : new SNodePointer[0]));
  }
  final Wrappers._boolean needsShowFieldsDialog=new Wrappers._boolean(false);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      if (ListSequence.fromList(SLinkOperations.getTargets(node,"field",true)).isNotEmpty()) {
        needsShowFieldsDialog.value=true;
      }
 else {
        intentionContext.getContextParametersMap().put("selectedFields",new SNodePointer[0]);
      }
    }
  }
);
  if (needsShowFieldsDialog.value) {
    SelectFieldsDialog selectFieldsDialog=new SelectFieldsDialog(editorContext,frame,node);
    selectFieldsDialog.showDialog();
    intentionContext.getContextParametersMap().put("selectedFields",ListSequence.fromList(selectFieldsDialog.getSelectedFields()).select(new ISelector<SNode,SNodePointer>(){
      public SNodePointer select(      SNode it){
        return new SNodePointer(it);
      }
    }
).toGenericArray(SNodePointer.class));
    return selectFieldsDialog.getAnswer();
  }
 else {
    return true;
  }
}
