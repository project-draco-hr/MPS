{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  SNode constructorDeclaration=null;
  Project project=editorContext.getOperationContext().getProject();
  for (  SNode selectedSuperConstructor : ((List<SNode>)intentionContext.getContextParametersMap().get("selectedConstructors"))) {
    SNode constructor=SLinkOperations.addNewChild(classConcept,"constructor","jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
    constructorDeclaration=constructor;
    SLinkOperations.setNewChild(constructor,"body","jetbrains.mps.baseLanguage.structure.StatementList");
    if (ListSequence.fromList(SLinkOperations.getTargets(selectedSuperConstructor,"parameter",true)).isNotEmpty()) {
      SNode invocation=SLinkOperations.addNewChild(SLinkOperations.getTarget(constructor,"body",true),"statement","jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation");
      SLinkOperations.setTarget(invocation,"baseMethodDeclaration",selectedSuperConstructor,false);
      for (      SNode superParam : SLinkOperations.getTargets(selectedSuperConstructor,"parameter",true)) {
        SNode parameter=SLinkOperations.addNewChild(constructor,"parameter","jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
        SPropertyOperations.set(parameter,"name",SPropertyOperations.getString(superParam,"name"));
        SLinkOperations.setTarget(parameter,"type",SNodeOperations.copyNode(SLinkOperations.getTarget(superParam,"type",true)),true);
        SNode paramReference=SLinkOperations.addNewChild(invocation,"actualArgument","jetbrains.mps.baseLanguage.structure.ParameterReference");
        SLinkOperations.setTarget(paramReference,"variableDeclaration",parameter,false);
      }
    }
    for (    SNode field : ((List<SNode>)intentionContext.getContextParametersMap().get("selectedFields"))) {
      SNode parameterDeclaration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
      SLinkOperations.setTarget(parameterDeclaration,"type",SNodeOperations.copyNode(SLinkOperations.getTarget(field,"type",true)),true);
      SPropertyOperations.set(parameterDeclaration,"name",NameUtil.decapitalize(GenerateGettersAndSettersUtil.getPreparedFieldName(field,project)));
      ListSequence.fromList(SLinkOperations.getTargets(constructor,"parameter",true)).addElement(parameterDeclaration);
      SNode expressionStatement=SLinkOperations.addNewChild(SLinkOperations.getTarget(constructor,"body",true),"statement","jetbrains.mps.baseLanguage.structure.ExpressionStatement");
      SNode assignmentExpression=SLinkOperations.setNewChild(expressionStatement,"expression","jetbrains.mps.baseLanguage.structure.AssignmentExpression");
      SNode dotExpression=SLinkOperations.setNewChild(assignmentExpression,"lValue","jetbrains.mps.baseLanguage.structure.DotExpression");
      SLinkOperations.setNewChild(dotExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
      SNode fieldRef=SLinkOperations.setNewChild(dotExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
      SLinkOperations.setTarget(fieldRef,"fieldDeclaration",field,false);
      SNode parameterReference=SLinkOperations.setNewChild(assignmentExpression,"rValue","jetbrains.mps.baseLanguage.structure.ParameterReference");
      SLinkOperations.setTarget(parameterReference,"variableDeclaration",parameterDeclaration,false);
    }
  }
  if (constructorDeclaration != null) {
    editorContext.select(constructorDeclaration);
  }
}
