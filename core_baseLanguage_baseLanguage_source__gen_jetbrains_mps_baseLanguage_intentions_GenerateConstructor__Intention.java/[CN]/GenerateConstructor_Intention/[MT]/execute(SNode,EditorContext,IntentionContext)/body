{
  SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  SNode constructor=SLinkOperations.addNewChild(classConcept,"constructor","jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
  SLinkOperations.setNewChild(constructor,"body","jetbrains.mps.baseLanguage.structure.StatementList");
  for (  SNode field : (List<SNode>)intentionContext.getContextParametersMap().get("selectedFields")) {
    SNode parameterDeclaration=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration",null);
    SLinkOperations.setTarget(parameterDeclaration,"type",SNodeOperations.copyNode(SLinkOperations.getTarget(field,"type",true)),true);
    SPropertyOperations.set(parameterDeclaration,"name",SPropertyOperations.getString(field,"name"));
    SLinkOperations.addChild(constructor,"parameter",parameterDeclaration);
    SNode expressionStatement=SLinkOperations.addNewChild(SLinkOperations.getTarget(constructor,"body",true),"statement","jetbrains.mps.baseLanguage.structure.ExpressionStatement");
    SNode assignmentExpression=SLinkOperations.setNewChild(expressionStatement,"expression","jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    SNode dotExpression=SLinkOperations.setNewChild(assignmentExpression,"lValue","jetbrains.mps.baseLanguage.structure.DotExpression");
    SLinkOperations.setNewChild(dotExpression,"operand","jetbrains.mps.baseLanguage.structure.ThisExpression");
    SNode fieldRef=SLinkOperations.setNewChild(dotExpression,"operation","jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
    SLinkOperations.setTarget(fieldRef,"fieldDeclaration",field,false);
    SNode parameterReference=SLinkOperations.setNewChild(assignmentExpression,"rValue","jetbrains.mps.baseLanguage.structure.ParameterReference");
    SLinkOperations.setTarget(parameterReference,"variableDeclaration",parameterDeclaration,false);
  }
}
