{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x118bd0e07f1L,0x118bd0e7418L,"whenConcreteVar"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x118bd0e07f1L,0x118bd0e7418L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> whenConcreteStatements=SNodeOperations.getNodeAncestors(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x114177ce6cdL,"jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement"),false);
          List<SNode> declarations=new ArrayList<SNode>();
          for (          SNode whenConcreteStatement : whenConcreteStatements) {
            SNode variableDeclaration=SLinkOperations.getTarget(whenConcreteStatement,MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L,0xab76d5ed1746f2b2L,0x114177ce6cdL,0x118bd03e53bL,"argumentRepresentator"));
            if (variableDeclaration != null) {
              ListSequence.fromList(declarations).addElement(variableDeclaration);
            }
          }
          return declarations;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_acirdv_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
