{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(8817443762339858024l,-6091446231697526094l),1205762656241l,1205762683928l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(8817443762339858024l,-6091446231697526094l),1205762656241l,1205762683928l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> whenConcreteStatements=SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement",false);
          List<SNode> declarations=new ArrayList<SNode>();
          for (          SNode whenConcreteStatement : whenConcreteStatements) {
            SNode variableDeclaration=SLinkOperations.getTarget(whenConcreteStatement,MetaAdapterFactory.getContainmentLink(new UUID(8817443762339858024l,-6091446231697526094l),1185805035213l,1205761991995l,"argumentRepresentator"));
            if (variableDeclaration != null) {
              ListSequence.fromList(declarations).addElement(variableDeclaration);
            }
          }
          return declarations;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_acirdv_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
