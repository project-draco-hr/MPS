{
  Map<SReferenceLink,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLink,ReferenceConstraintsDescriptor>();
  references.put(MetaAdapterFactory.getReferenceLink(0x6106f6117a7442d1L,0x80deedc5c602bfd1L,0x5bdb7aaec13745e9L,0x5bdb7aaec13ef3f4L,"elementsCreation"),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x6106f6117a7442d1L,0x80deedc5c602bfd1L,0x5bdb7aaec13745e9L,0x5bdb7aaec13ef3f4L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_s0k26e_a0a0a0a0a1a0b0a1a2;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            List<SNode> creationBlocks=ListSequence.fromList(new ArrayList<SNode>());
            ListSequence.fromList(creationBlocks).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(_context.getEnclosingNode()),MetaAdapterFactory.getConcept(0x6106f6117a7442d1L,0x80deedc5c602bfd1L,0x57869048dc89fbf7L,"jetbrains.mps.lang.editor.diagram.structure.CellModel_Diagram")),MetaAdapterFactory.getContainmentLink(0x6106f6117a7442d1L,0x80deedc5c602bfd1L,0x57869048dc89fbf7L,0x76f1cb20ba7a1c35L,"elementsCreation"))));
            ListSequence.fromList(creationBlocks).addSequence(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(_context.getEnclosingNode()),MetaAdapterFactory.getConcept(0x6106f6117a7442d1L,0x80deedc5c602bfd1L,0x57869048dc89fbf7L,"jetbrains.mps.lang.editor.diagram.structure.CellModel_Diagram")),MetaAdapterFactory.getContainmentLink(0x6106f6117a7442d1L,0x80deedc5c602bfd1L,0x57869048dc89fbf7L,0xd0b2f9de3717551L,"connectorCreation"))));
            return new SimpleScope(creationBlocks){
              @Nullable public String getReferenceText(              @NotNull SNode target){
                return target.getName();
              }
            }
;
          }
        }
      }
;
    }
  }
);
  return references;
}
