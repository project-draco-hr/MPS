{
  final IScope scope=(IScope)sm.getModule().getModuleScope();
  StringBuilder errorMessages=new StringBuilder();
  List<String> validationResult=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
    public List<String> compute(){
      return new ModelValidator(sm).validate(scope);
    }
  }
);
  if (!validationResult.isEmpty()) {
    errorMessages.append("errors in model: ").append(sm.getReference().toString()).append("\n");
    for (    String item : validationResult) {
      errorMessages.append("\t");
      errorMessages.append(item);
      errorMessages.append("\n");
    }
  }
  for (  SNode node : ((SModelDescriptor)sm).getSModel().nodes()) {
    Testbench.LOG.debug("Checking node " + node);
    if (SModelUtil.findConceptDeclaration(node.getConcept().getId(),GlobalScope.getInstance()) == null) {
      errorMessages.append("Unknown concept ");
      errorMessages.append(node.getConcept().getId());
      errorMessages.append("\n");
    }
  }
  for (  SNode node : ((SModelDescriptor)sm).getSModel().nodes()) {
    for (    SReference ref : node.getReferences()) {
      if (SNodeUtil.hasReferenceMacro(node,ref.getRole())) {
        continue;
      }
      if (jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(ref) == null) {
        errorMessages.append("Broken reference in model {").append(node.getModel().getLongName()).append("}").append(" node ").append(node.getNodeId().toString()).append("(").append(node).append(")\n");
      }
    }
  }
  return errorMessages;
}
