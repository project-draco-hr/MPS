{
  final IScope scope=sm.getModule().getScope();
  StringBuffer errorMessages=new StringBuffer();
  List<String> validationResult=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
    public List<String> compute(){
      return new ModelValidator(sm.getSModel()).validate(scope);
    }
  }
);
  for (  String item : validationResult) {
    errorMessages.append(item);
    errorMessages.append("\n");
  }
  for (  SNode node : sm.getSModel().nodes()) {
    Testbench.LOG.debug("Checking node " + node);
    if (SModelUtil.findConceptDeclaration(node.getConceptFqName(),GlobalScope.getInstance()) == null) {
      errorMessages.append("Unknown concept ");
      errorMessages.append(node.getConceptFqName());
      errorMessages.append("\n");
    }
  }
  for (  SNode node : sm.getSModel().nodes()) {
    for (    SReference ref : node.getReferences()) {
      if (AttributeOperations.getLinkAttribute(node,ReferenceMacro_AnnotationLink.REFERENCE_MACRO,ref.getRole()) != null) {
        continue;
      }
      if (ref.getTargetNode() == null) {
        errorMessages.append("Broken reference in model {").append(node.getModel().getLongName()).append("}").append(" node ").append(node.getId()).append("(").append(node).append(")\n");
      }
    }
  }
  return errorMessages;
}
