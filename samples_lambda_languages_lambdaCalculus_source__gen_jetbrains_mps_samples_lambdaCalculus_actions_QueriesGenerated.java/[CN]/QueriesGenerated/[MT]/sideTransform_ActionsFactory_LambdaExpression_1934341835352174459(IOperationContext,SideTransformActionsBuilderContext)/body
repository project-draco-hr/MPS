{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode application=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(8979658720047614716l,-5913038370385483627l),4022026349914762717l,"jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication"),null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),application);
      SLinkOperations.setTarget(application,MetaAdapterFactory.getContainmentLink(new UUID(8979658720047614716l,-5913038370385483627l),4022026349914762717l,4022026349914762720l,"function"),_context.getSourceNode());
      return application;
    }
    public String getMatchingText(    String pattern){
      return "[";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication"),null));
    }
  }
);
  return result;
}
