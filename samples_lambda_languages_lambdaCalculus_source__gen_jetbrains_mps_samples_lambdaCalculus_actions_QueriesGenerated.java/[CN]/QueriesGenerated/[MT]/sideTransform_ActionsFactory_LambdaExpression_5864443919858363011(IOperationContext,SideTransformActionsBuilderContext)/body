{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode multiple=SConceptOperations.createNewNode("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),multiple);
        ListSequence.fromList(SLinkOperations.getTargets(multiple,"expressions",true)).insertElement(0,_context.getSourceNode());
        return multiple;
      }
      public String getMatchingText(      String pattern){
        return ";";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
