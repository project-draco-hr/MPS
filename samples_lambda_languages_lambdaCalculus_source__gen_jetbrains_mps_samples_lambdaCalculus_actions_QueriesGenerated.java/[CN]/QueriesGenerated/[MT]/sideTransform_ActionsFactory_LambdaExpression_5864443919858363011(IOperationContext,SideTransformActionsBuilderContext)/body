{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode multiple=SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7c9e280794ad4afcL,0xadf0aaee45eb2895L,0x15b75b54f176d1a3L,"jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression")),null);
      SNodeOperations.replaceWithAnother(_context.getSourceNode(),multiple);
      ListSequence.fromList(SLinkOperations.getChildren(multiple,MetaAdapterFactory.getContainmentLink(0x7c9e280794ad4afcL,0xadf0aaee45eb2895L,0x15b75b54f176d1a3L,0x15b75b54f176d1a4L,"expressions"))).insertElement(0,_context.getSourceNode());
      return multiple;
    }
    public String getMatchingText(    String pattern){
      return ";";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression"),null));
    }
  }
);
  return result;
}
