{
  Collection<SModuleReference> unloaded=new LinkedHashSet<SModuleReference>();
  Collection<ModuleClassLoader> toDispose=new LinkedHashSet<ModuleClassLoader>();
  for (  SModuleReference mRef : toUnload) {
    if (!myMPSLoadableModules.containsKey(mRef)) {
      LOG.error("",new IllegalStateException("Module " + mRef + " is not loaded -- cannot unload"));
    }
 else {
      ClassLoadingProgress progress=myMPSLoadableModules.get(mRef);
      myMPSLoadableModules.remove(mRef);
      if (progress == null) {
        LOG.error("",new IllegalStateException("Module " + mRef + " must not be unloaded -- cannot unload it twice"));
      }
 else {
        if (progress == ClassLoadingProgress.LOADED) {
          if (myClassLoaders.containsKey(mRef)) {
            toDispose.add(myClassLoaders.get(mRef));
          }
 else {
            LOG.error("",new IllegalStateException("Module " + mRef + " is loaded but has no registered ModuleClassLoader"));
          }
        }
 else         if (progress == ClassLoadingProgress.LAZY_LOADED) {
          if (myClassLoaders.containsKey(mRef)) {
            LOG.error("",new IllegalStateException("Module " + mRef + " is lazy loaded but already has a registered ModuleClassLoader"));
            toDispose.add(myClassLoaders.get(mRef));
          }
        }
        myClassLoaders.remove(mRef);
        unloaded.add(mRef);
      }
    }
  }
  disposeClassLoadersInEDT(toDispose);
  return unloaded;
}
