{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x718e3f4cb7a0fa93L,0x718e3f4cb7a0fa95L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x718e3f4cb7a0fa93L,0x718e3f4cb7a0fa95L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_n8jbbc_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode lval=SNodeOperations.getNodeAncestor(_context.getContextNode(),MetaAdapterFactory.getConcept(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x4bb51009d20c8e1aL,"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink"),true,false);
            if (lval == null) {
              return new EmptyScope();
            }
            return new FilteringScope(new ModelPlusImportedScope(_context.getModel(),false,BehaviorReflection.invokeVirtual(String.class,SLinkOperations.getTarget(SLinkOperations.getTarget(lval,MetaAdapterFactory.getReferenceLink(0x3a13115c633c4c5cL,0xbbcc75c4219e9555L,0x4bb51009d20c8e1aL,0x4bb51009d20c8e1cL,"link")),MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98055fef0L,"target")),"virtual_getFqName_1213877404258",new Object[]{})));
          }
        }
      }
;
    }
  }
);
  return references;
}
