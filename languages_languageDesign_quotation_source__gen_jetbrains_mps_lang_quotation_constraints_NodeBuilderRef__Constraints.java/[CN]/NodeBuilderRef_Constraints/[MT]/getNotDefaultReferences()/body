{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_n8jbbc_a0a0a0a0a1a0b0a1a3;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode lval=SNodeOperations.getAncestor(_context.getContextNode(),"jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink",true,false);
            if (lval == null) {
              return new EmptyScope();
            }
            return new FilteringScope(new ModelPlusImportedScope(_context.getModel(),false,operationContext.getScope(),BehaviorReflection.invokeVirtual(String.class,SLinkOperations.getTarget(SLinkOperations.getTarget(lval,"link",false),"target",false),"virtual_getFqName_1213877404258",new Object[]{})));
          }
        }
      }
;
    }
  }
);
  return references;
}
