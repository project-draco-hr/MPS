{
  myCurrentTestName=escapeMessageForTeamCity("generating " + modulesSet);
  myErrorMessagesBuffer=new StringBuffer();
  System.out.println("##teamcity[testStarted name='" + myCurrentTestName + "']");
  final EditorGenerateType generationType=new EditorGenerateType(true);
  gm.generateModels(modelsToContext,generationType,emptyProgressIndicator,myMessageHandler,false);
  printDiffReportIfNeeded(generationType);
  List<CompilationResult> compilationResult=ModelAccess.instance().runReadAction(new Computable<List<CompilationResult>>(){
    public List<CompilationResult> compute(){
      return generationType.compile(IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR);
    }
  }
);
  List<String> diffReports;
  if (myWhatToGenerate.getShowDiff()) {
    diffReports=ModelAccess.instance().runReadAction(new Computable<List<String>>(){
      public List<String> compute(){
        return DiffReporter.createDiffReports(generationType);
      }
    }
);
  }
 else {
    diffReports=new ArrayList<String>();
  }
  TestResult testResult=new TestResult(myMessageHandler.getGenerationErrors(),myMessageHandler.getGenerationWarnings(),ProjectTester.createCompilationProblemsList(compilationResult),new ArrayList<TestFailure>(),diffReports);
  testResult.dump(new PrintStream(new LineOrientedOutputStream(){
    @Override protected void processLine(    String line) throws IOException {
      info(line);
    }
  }
));
  if (myErrorMessagesBuffer.length() > 0) {
    System.out.println("##teamcity[testFailed name='" + myCurrentTestName + "' message='generation errors' details='"+ myErrorMessagesBuffer.toString()+ "']");
  }
  System.out.println("##teamcity[testFinished name='" + myCurrentTestName + "']");
}
