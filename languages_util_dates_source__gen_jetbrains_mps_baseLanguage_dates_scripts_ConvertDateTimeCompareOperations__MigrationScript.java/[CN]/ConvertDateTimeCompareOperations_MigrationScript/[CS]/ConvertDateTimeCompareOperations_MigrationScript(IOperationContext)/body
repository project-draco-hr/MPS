{
  super("convert datetime compare operations ");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "convert with property";
    }
    public String getAdditionalInfo(){
      return "convert with property";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (SLinkOperations.getTarget(node,"datetimeProperty",false) != null);
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode result=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.dates.structure.WithPropertyCompareExpression",null);
      SLinkOperations.setTarget(result,"datetimeProperty",SLinkOperations.getTarget(node,"datetimeProperty",false),false);
      if (DateTimeCompareOperation_Behavior.call_isEQ_1213877526423(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SLinkOperations.setTarget(result,"operation",expression,true);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isGE_1213877526473(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SLinkOperations.setTarget(result,"operation",expression,true);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isGT_1213877526453(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SLinkOperations.setTarget(result,"operation",expression,true);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isLE_1213877526463(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SLinkOperations.setTarget(result,"operation",expression,true);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isLT_1213877526443(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SLinkOperations.setTarget(result,"operation",expression,true);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isNE_1213877526433(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SLinkOperations.setTarget(result,"operation",expression,true);
      }
      SNodeOperations.replaceWithAnother(node,result);
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "convert without property";
    }
    public String getAdditionalInfo(){
      return "convert without property";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return (SLinkOperations.getTarget(node,"datetimeProperty",false) == null);
    }
    public void doUpdateInstanceNode(    SNode node){
      if (DateTimeCompareOperation_Behavior.call_isEQ_1213877526423(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SNodeOperations.replaceWithAnother(node,expression);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isGE_1213877526473(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SNodeOperations.replaceWithAnother(node,expression);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isGT_1213877526453(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SNodeOperations.replaceWithAnother(node,expression);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isLE_1213877526463(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SNodeOperations.replaceWithAnother(node,expression);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isLT_1213877526443(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SNodeOperations.replaceWithAnother(node,expression);
      }
 else       if (DateTimeCompareOperation_Behavior.call_isNE_1213877526433(node)) {
        SNode expression=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null);
        SLinkOperations.setTarget(expression,"leftExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op1",true)),true);
        SLinkOperations.setTarget(expression,"rightExpression",SNodeOperations.copyNode(SLinkOperations.getTarget(node,"op2",true)),true);
        SNodeOperations.replaceWithAnother(node,expression);
      }
    }
    public boolean isShowAsIntention(){
      return true;
    }
  }
);
}
