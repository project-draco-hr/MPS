{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_4qogsf_a0w.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractFunctionType;
      }
    break;
case 1:
  if (true) {
    return props_ClosureArgReference;
  }
break;
case 2:
if (true) {
return props_ClosureControlStatement;
}
break;
case 3:
if (true) {
return props_ClosureLiteral;
}
break;
case 4:
if (true) {
return props_ClosureLiteralType;
}
break;
case 5:
if (true) {
return props_CompactInvokeFunctionExpression;
}
break;
case 6:
if (true) {
return props_ControlAbstractionContainer;
}
break;
case 7:
if (true) {
return props_ControlAbstractionDeclaration;
}
break;
case 8:
if (true) {
return props_ControlClosureLiteral;
}
break;
case 9:
if (true) {
return props_FunctionMethodDeclaration;
}
break;
case 10:
if (true) {
return props_FunctionType;
}
break;
case 11:
if (true) {
return props_InvokeExpression;
}
break;
case 12:
if (true) {
return props_InvokeFunctionExpression;
}
break;
case 13:
if (true) {
return props_InvokeFunctionOperation;
}
break;
case 14:
if (true) {
return props_PairOfInts;
}
break;
case 15:
if (true) {
return props_StringPropertyHolder;
}
break;
case 16:
if (true) {
return props_UnboundClosureParameterDeclaration;
}
break;
case 17:
if (true) {
return props_UnrestrictedClosureLiteral;
}
break;
case 18:
if (true) {
return props_UnrestrictedFunctionType;
}
break;
case 19:
if (true) {
return props_YieldAllStatement;
}
break;
case 20:
if (true) {
return props_YieldStatement;
}
break;
default :
}
}
throw new IllegalStateException();
}
