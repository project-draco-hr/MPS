{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("target",new BaseReferenceConstraintsDescriptor("target",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_q09jue_a0a0a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
{
            SNode group=(SNodeOperations.isInstanceOf(_context.getContextNode(),"jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup") ? SNodeOperations.cast(_context.getContextNode(),"jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup") : SNodeOperations.as(SNodeOperations.getParent(_context.getContextNode()),"jetbrains.mps.build.mps.structure.BuildMps_IdeaPluginGroup"));
            if ((group == null)) {
              return new EmptyScope();
            }
            return SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(group,"group",false),SLinkOperations.findLinkDeclaration("jetbrains.mps.build.mps.structure.BuildMps_Group","modules"));
          }
        }
      }
;
    }
  }
);
  return references;
}
