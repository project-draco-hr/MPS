{
  EmbeddedGraph embeddedGraph=new TreeEmbeddingFinder().find(graph);
  Node s=ListSequence.<Dart>fromList(embeddedGraph.getOuterFace().getDarts()).getElement(0).getSource();
  Node t=ListSequence.<Dart>fromList(embeddedGraph.getOuterFace().getDarts()).getElement(0).getTarget();
  GraphOrientation.orientST(graph,s,t);
  STPlanarGraph stPlanarGraph=new STPlanarGraph(embeddedGraph,s,t);
  Map<Node,Dimension> sizes=MapSequence.<Node,Dimension>fromMap(new HashMap<Node,Dimension>());
  Map<Edge,Dimension> edgeSizes=MapSequence.<Edge,Dimension>fromMap(new HashMap<Edge,Dimension>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    if (node.isDummy()) {
      MapSequence.<Node,Dimension>fromMap(sizes).put(node,new Dimension(0,0));
    }
 else {
      MapSequence.<Node,Dimension>fromMap(sizes).put(node,new Dimension(5,5));
    }
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    MapSequence.<Edge,Dimension>fromMap(edgeSizes).put(edge,new Dimension(5,5));
  }
  Map<Object,Rectangle> rep=new ConstraintsSupporter().getRepresentation(stPlanarGraph,sizes,edgeSizes);
  ConstraintsChecker.check(graph,rep,sizes);
}
