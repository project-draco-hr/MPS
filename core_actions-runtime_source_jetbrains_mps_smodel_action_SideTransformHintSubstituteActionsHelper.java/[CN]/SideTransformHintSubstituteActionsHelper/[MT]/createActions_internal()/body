{
  List<INodeSubstituteAction> resultActions=new LinkedList<INodeSubstituteAction>();
  List<SideTransformHintSubstituteActionsBuilder> actionsBuilders=getActionBuilders();
  List<RemoveSTByConditionPart> removesByCondition=new ArrayList<RemoveSTByConditionPart>();
  Set<SNode> conceptsToRemove=new HashSet<SNode>();
  for (  SideTransformHintSubstituteActionsBuilder builder : actionsBuilders) {
    for (    RemovePart rp : builder.getDescendants(RemovePart.class)) {
      conceptsToRemove.add(rp.getConceptToRemove().getNode());
    }
    for (    RemoveSTByConditionPart rp : builder.getDescendants(RemoveSTByConditionPart.class)) {
      removesByCondition.add(rp);
    }
    List<INodeSubstituteAction> addActions=invokeActionFactory(builder);
    resultActions.addAll(addActions);
  }
  for (  RemoveSTByConditionPart rbc : removesByCondition) {
    invokeRemoveByCondition(rbc,resultActions.iterator());
  }
  for (Iterator<INodeSubstituteAction> it=resultActions.iterator(); it.hasNext(); ) {
    INodeSubstituteAction action=it.next();
    Object parameterObject=action.getOutputConcept();
    if (parameterObject instanceof SNode && ((SNode)parameterObject).getAdapter() instanceof AbstractConceptDeclaration) {
      if (conceptsToRemove.contains(((SNode)parameterObject))) {
        it.remove();
        continue;
      }
    }
 else     if (parameterObject instanceof AbstractConceptDeclaration) {
      if (conceptsToRemove.contains(((AbstractConceptDeclaration)parameterObject).getNode())) {
        it.remove();
        continue;
      }
    }
    if (parameterObject instanceof SNode && !ModelConstraintsManager.getInstance().canBeAncestor(mySourceNode.getParent(),(SNode)parameterObject,myContext)) {
      it.remove();
    }
  }
  return resultActions;
}
