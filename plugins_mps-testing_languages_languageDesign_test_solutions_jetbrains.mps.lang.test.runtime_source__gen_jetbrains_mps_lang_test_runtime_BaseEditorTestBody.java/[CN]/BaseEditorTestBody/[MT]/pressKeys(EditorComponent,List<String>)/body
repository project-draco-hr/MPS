{
  final Component eventTargetComponent;
  EditorCell selectedCell=editorComponent.getSelectedCell();
  if (selectedCell != null) {
    Component eventTarget=getEventTargetComponent(selectedCell,editorComponent);
    if (eventTarget == editorComponent) {
      eventTargetComponent=null;
    }
 else {
      while ((eventTarget instanceof JComponent) && ((JComponent)eventTarget).getComponentCount() > 0) {
        eventTarget=((JComponent)eventTarget).getComponent(((JComponent)eventTarget).getComponentCount() - 1);
      }
      eventTargetComponent=eventTarget;
    }
  }
 else {
    eventTargetComponent=null;
  }
  final boolean[] eventWasPassed=new boolean[]{true};
  SwingUtilities.invokeAndWait(new Runnable(){
    @Override public void run(){
      for (      String code : keyStrokes) {
        KeyStroke stroke=KeyStroke.getKeyStroke(code);
        int keyCode=stroke.getKeyCode();
        char keyChar=stroke.getKeyChar();
        if (keyChar == KeyEvent.CHAR_UNDEFINED && keyCode != KeyEvent.VK_UNDEFINED && ((keyCode >= KeyEvent.VK_0 && keyCode <= KeyEvent.VK_9) || (keyCode >= KeyEvent.VK_A && keyCode <= KeyEvent.VK_Z))) {
          keyChar=(char)keyCode;
        }
        KeyEvent keyPressedEvent=new KeyEvent(editorComponent,KeyEvent.KEY_PRESSED,0,stroke.getModifiers(),keyCode,keyChar);
        KeyEvent keyReleasedEvent=new KeyEvent(editorComponent,KeyEvent.KEY_RELEASED,0,stroke.getModifiers(),keyCode,keyChar);
        if (eventTargetComponent == null) {
          editorComponent.processKeyPressed(keyPressedEvent);
          editorComponent.processKeyReleased(keyReleasedEvent);
        }
 else {
          Class<?> clazz=eventTargetComponent.getClass();
          Method theMethod=null;
          while (theMethod == null && clazz != null) {
            try {
              theMethod=clazz.getDeclaredMethod("processKeyEvent",KeyEvent.class);
              theMethod.setAccessible(true);
            }
 catch (            NoSuchMethodException e) {
            }
            clazz=clazz.getSuperclass();
          }
          if (theMethod != null) {
            try {
              theMethod.invoke(eventTargetComponent,keyPressedEvent);
              theMethod.invoke(eventTargetComponent,keyReleasedEvent);
            }
 catch (            IllegalAccessException e) {
              eventWasPassed[0]=false;
            }
catch (            InvocationTargetException e) {
              eventWasPassed[0]=false;
            }
          }
 else {
            eventWasPassed[0]=false;
          }
        }
      }
    }
  }
);
  Assert.assertTrue("Keyboard event was not passed to corresponding component",eventWasPassed[0]);
}
