{
  SNode mc;
  do {
    SNode matchedNode_8234_2=node;
{
      boolean matches_8234_8=false;
{
        SNode matchingNode_8234_8=node;
        if (matchingNode_8234_8 != null) {
          matches_8234_8=SModelUtil_new.isAssignableConcept(matchingNode_8234_8.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation");
        }
      }
      if (matches_8234_8) {
        mc=SLinkOperations.getTarget(matchedNode_8234_2,"context",true);
        break;
      }
    }
{
      boolean matches_8234_9=false;
{
        SNode matchingNode_8234_9=node;
        if (matchingNode_8234_9 != null) {
          matches_8234_9=SModelUtil_new.isAssignableConcept(matchingNode_8234_9.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation");
        }
      }
      if (matches_8234_9) {
        mc=SLinkOperations.getTarget(matchedNode_8234_2,"context",true);
        break;
      }
    }
{
      boolean matches_8234_10=false;
{
        SNode matchingNode_8234_10=node;
        if (matchingNode_8234_10 != null) {
          matches_8234_10=SModelUtil_new.isAssignableConcept(matchingNode_8234_10.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation");
        }
      }
      if (matches_8234_10) {
        mc=SLinkOperations.getTarget(matchedNode_8234_2,"context",true);
        break;
      }
    }
    return new MathUtil.QuotationClass_8234_18().createNode();
  }
 while (false);
switch (SPropertyOperations.getInteger_def(mc,"precisionSetting","0")) {
case 1:
    return new MathUtil.QuotationClass_8234_19().createNode();
case 2:
  return new MathUtil.QuotationClass_8234_20().createNode();
case 3:
return new MathUtil.QuotationClass_8234_21().createNode();
case 4:
return new MathUtil.QuotationClass_8234_22().createNode();
default :
SNode c=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
SPropertyOperations.set(c,"value","" + SPropertyOperations.getInteger(mc,"precision"));
return new MathUtil.QuotationClass_8234_23().createNode(c,MathUtil.getRoundingMode(SPropertyOperations.getInteger_def(mc,"roundingMode","4")));
}
}
