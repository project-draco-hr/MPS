{
  SNode mc;
  do {
    SNode matchedNode_2=node;
{
      boolean matches_8=false;
{
        SNode matchingNode_8=node;
        if (matchingNode_8 != null) {
          matches_8=SModelUtil_new.isAssignableConcept(matchingNode_8.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation");
        }
      }
      if (matches_8) {
        mc=SLinkOperations.getTarget(matchedNode_2,"context",true);
        break;
      }
    }
{
      boolean matches_9=false;
{
        SNode matchingNode_9=node;
        if (matchingNode_9 != null) {
          matches_9=SModelUtil_new.isAssignableConcept(matchingNode_9.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation");
        }
      }
      if (matches_9) {
        mc=SLinkOperations.getTarget(matchedNode_2,"context",true);
        break;
      }
    }
{
      boolean matches_10=false;
{
        SNode matchingNode_10=node;
        if (matchingNode_10 != null) {
          matches_10=SModelUtil_new.isAssignableConcept(matchingNode_10.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation");
        }
      }
      if (matches_10) {
        mc=SLinkOperations.getTarget(matchedNode_2,"context",true);
        break;
      }
    }
    return new _Quotations.QuotationClass_21().createNode();
  }
 while (false);
switch (SPropertyOperations.getInteger_def(mc,"precisionSetting","0")) {
case 1:
    return new _Quotations.QuotationClass_8().createNode();
case 2:
  return new _Quotations.QuotationClass_9().createNode();
case 3:
return new _Quotations.QuotationClass_10().createNode();
case 4:
return new _Quotations.QuotationClass_11().createNode();
default :
SNode c=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant",null);
SPropertyOperations.set(c,"value","" + SPropertyOperations.getInteger(mc,"precision"));
return new _Quotations.QuotationClass_12().createNode(c,MathUtil.getRoundingMode(SPropertyOperations.getInteger_def(mc,"roundingMode","4")));
}
}
