{
  do {
    SNode matchedNode_0=bmc;
{
      boolean matches_0=false;
{
        SNode matchingNode_0=bmc;
        if (matchingNode_0 != null) {
          matches_0=SModelUtil_new.isAssignableConcept(matchingNode_0.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression");
        }
      }
      if (matches_0) {
        return new _Quotations.QuotationClass_0().createNode(SLinkOperations.getTarget(matchedNode_0,"rightExpression",true),SLinkOperations.getTarget(matchedNode_0,"leftExpression",true));
      }
    }
{
      boolean matches_1=false;
{
        SNode matchingNode_1=bmc;
        if (matchingNode_1 != null) {
          matches_1=SModelUtil_new.isAssignableConcept(matchingNode_1.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression");
        }
      }
      if (matches_1) {
        return new _Quotations.QuotationClass_1().createNode(SLinkOperations.getTarget(matchedNode_0,"rightExpression",true),SLinkOperations.getTarget(matchedNode_0,"leftExpression",true));
      }
    }
{
      boolean matches_2=false;
{
        SNode matchingNode_2=bmc;
        if (matchingNode_2 != null) {
          matches_2=SModelUtil_new.isAssignableConcept(matchingNode_2.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression");
        }
      }
      if (matches_2) {
        return new _Quotations.QuotationClass_2().createNode(SLinkOperations.getTarget(matchedNode_0,"rightExpression",true),SLinkOperations.getTarget(matchedNode_0,"leftExpression",true));
      }
    }
{
      boolean matches_3=false;
{
        SNode matchingNode_3=bmc;
        if (matchingNode_3 != null) {
          matches_3=SModelUtil_new.isAssignableConcept(matchingNode_3.getConceptFqName(),"jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression");
        }
      }
      if (matches_3) {
        return new _Quotations.QuotationClass_3().createNode(SLinkOperations.getTarget(matchedNode_0,"rightExpression",true),SLinkOperations.getTarget(matchedNode_0,"leftExpression",true));
      }
    }
    return null;
  }
 while (false);
}
