{
  do {
    SNode matchedNode_1=bmc;
{
      boolean matches_4=false;
{
        SNode matchingNode_4=bmc;
        if (matchingNode_4 != null) {
          matches_4=SModelUtil_new.isAssignableConcept(matchingNode_4.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.PlusExpression");
        }
      }
      if (matches_4) {
        return new _Quotations.QuotationClass_4().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
{
      boolean matches_5=false;
{
        SNode matchingNode_5=bmc;
        if (matchingNode_5 != null) {
          matches_5=SModelUtil_new.isAssignableConcept(matchingNode_5.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.MinusExpression");
        }
      }
      if (matches_5) {
        return new _Quotations.QuotationClass_5().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
{
      boolean matches_6=false;
{
        SNode matchingNode_6=bmc;
        if (matchingNode_6 != null) {
          matches_6=SModelUtil_new.isAssignableConcept(matchingNode_6.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.MulExpression");
        }
      }
      if (matches_6) {
        return new _Quotations.QuotationClass_6().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
{
      boolean matches_7=false;
{
        SNode matchingNode_7=bmc;
        if (matchingNode_7 != null) {
          matches_7=SModelUtil_new.isAssignableConcept(matchingNode_7.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.DivExpression");
        }
      }
      if (matches_7) {
        return new _Quotations.QuotationClass_7().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
    return null;
  }
 while (false);
}
