{
  do {
    SNode matchedNode_8234_1=bmc;
{
      boolean matches_8234_4=false;
{
        SNode matchingNode_8234_4=bmc;
        if (matchingNode_8234_4 != null) {
          matches_8234_4=SModelUtil_new.isAssignableConcept(matchingNode_8234_4.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.PlusExpression");
        }
      }
      if (matches_8234_4) {
        return new MathUtil.QuotationClass_8234_14().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
{
      boolean matches_8234_5=false;
{
        SNode matchingNode_8234_5=bmc;
        if (matchingNode_8234_5 != null) {
          matches_8234_5=SModelUtil_new.isAssignableConcept(matchingNode_8234_5.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.MinusExpression");
        }
      }
      if (matches_8234_5) {
        return new MathUtil.QuotationClass_8234_15().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
{
      boolean matches_8234_6=false;
{
        SNode matchingNode_8234_6=bmc;
        if (matchingNode_8234_6 != null) {
          matches_8234_6=SModelUtil_new.isAssignableConcept(matchingNode_8234_6.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.MulExpression");
        }
      }
      if (matches_8234_6) {
        return new MathUtil.QuotationClass_8234_16().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
{
      boolean matches_8234_7=false;
{
        SNode matchingNode_8234_7=bmc;
        if (matchingNode_8234_7 != null) {
          matches_8234_7=SModelUtil_new.isAssignableConcept(matchingNode_8234_7.getConceptFqName(),"jetbrains.mps.baseLanguage.structure.DivExpression");
        }
      }
      if (matches_8234_7) {
        return new MathUtil.QuotationClass_8234_17().createNode(SLinkOperations.getTarget(bmc,"rightExpression",true),SLinkOperations.getTarget(bmc,"leftExpression",true));
      }
    }
    return null;
  }
 while (false);
}
