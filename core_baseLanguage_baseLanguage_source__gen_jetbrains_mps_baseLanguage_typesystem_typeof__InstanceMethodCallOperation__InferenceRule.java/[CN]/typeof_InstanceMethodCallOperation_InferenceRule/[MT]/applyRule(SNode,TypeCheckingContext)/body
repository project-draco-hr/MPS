{
  if (SLinkOperations.getTarget(imco,"baseMethodDeclaration",false) == null) {
    return;
  }
  final SNode methodClassifier=SNodeOperations.getAncestor(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  final SNode instanceType_typevar_1204064731338=typeCheckingContext.createNewRuntimeTypesVariable();
{
    SNode _nodeToCheck_1029348928467=IOperation_Behavior.call_getOperand_1213877410070(imco);
    BaseIntentionProvider intentionProvider=null;
    EquationInfo info=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1204064763142",0,intentionProvider);
    typeCheckingContext.createEquation((SNode)typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1204064731338),(SNode)typeCheckingContext.typeOf(_nodeToCheck_1029348928467,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1204064784351",false),info);
  }
{
    SNode _nodeToCheck_1029348928467=imco;
    BaseIntentionProvider intentionProvider=null;
    EquationInfo info=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1204065906120",0,intentionProvider);
    info.setInequationGroup("default");
    typeCheckingContext.createLessThanInequationStrong((SNode)typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1204064731338),(SNode)new _Quotations.QuotationClass_62().createNode(methodClassifier,typeCheckingContext),true,info);
  }
  Map<SNode,List<SNode>> mmap=MapSequence.fromMap(new HashMap<SNode,List<SNode>>());
  RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext,imco,SLinkOperations.getTarget(SLinkOperations.getTarget(imco,"baseMethodDeclaration",false),"returnType",true),mmap);
  RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariables(typeCheckingContext,methodClassifier,typeCheckingContext.getEquationManager().getRepresentator(instanceType_typevar_1204064731338),mmap);
  RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext,mmap);
}
