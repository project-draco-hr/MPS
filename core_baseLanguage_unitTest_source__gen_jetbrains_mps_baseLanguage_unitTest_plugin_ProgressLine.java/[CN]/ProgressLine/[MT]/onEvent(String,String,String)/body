{
  if (!(ListSequence.fromList(this.methodName).contains(testMethodName))) {
    return;
  }
  if (token.equals(TestEvent.END_TEST_PREFIX) || token.equals(TestEvent.ERROR_TEST_SUFFIX) || token.equals(TestEvent.FAILURE_TEST_SUFFIX)) {
    this.stateInfo.onComplete();
    if (token.equals(TestEvent.ERROR_TEST_SUFFIX) || token.equals(TestEvent.FAILURE_TEST_SUFFIX)) {
      this.stateInfo.onDefect();
      this.progressBar.setColor(ColorProgressBar.RED);
    }
    int indexOfMethod=ListSequence.fromList(this.methodName).indexOf(testMethodName);
    if (indexOfMethod > this.lostMethodCount) {
      this.lostMethodCount++;
      for (int i=0; i < indexOfMethod; i++) {
        ListSequence.fromList(this.currentLostMethods).addElement(ListSequence.fromList(this.methodName).getElement(i));
      }
    }
    ListSequence.fromList(this.methodName).removeElement(testMethodName);
  }
  this.stateInfo.setTestName(testMethodName,testClassName);
  this.progressBar.setFraction(this.stateInfo.getCompletedPercent());
  this.stateInfo.updateLabel(this.state);
}
