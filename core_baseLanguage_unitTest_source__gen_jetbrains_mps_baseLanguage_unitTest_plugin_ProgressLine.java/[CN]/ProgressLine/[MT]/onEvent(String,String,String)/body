{
  String key=testClassName + '.' + testMethodName;
  if (!(ListSequence.fromList(this.testMethods).contains(key))) {
    return;
  }
  if (token.equals(TestEvent.END_TEST_PREFIX) || token.equals(TestEvent.ERROR_TEST_SUFFIX) || token.equals(TestEvent.FAILURE_TEST_SUFFIX)) {
    this.stateInfo.onComplete();
    if (token.equals(TestEvent.ERROR_TEST_SUFFIX) || token.equals(TestEvent.FAILURE_TEST_SUFFIX)) {
      this.stateInfo.onDefect();
      this.progressBar.setColor(ColorProgressBar.RED);
    }
    ListSequence.fromList(this.testMethods).removeElement(key);
    ListSequence.fromList(this.currentLostMethods).clear();
  }
 else {
    int indexOfMethod=ListSequence.fromList(this.testMethods).indexOf(key);
    if (indexOfMethod > 0) {
      for (int i=0; i < indexOfMethod; i++) {
        String currentTestMethod=ListSequence.fromList(this.testMethods).getElement(i);
        if (ListSequence.fromList(this.lostMethods).contains(currentTestMethod)) {
          continue;
        }
        String currentClassName=currentTestMethod.substring(0,currentTestMethod.lastIndexOf("."));
        if (currentClassName.equals(testClassName)) {
          continue;
        }
        ListSequence.fromList(this.currentLostMethods).addElement(currentTestMethod);
        ListSequence.fromList(this.lostMethods).addElement(currentTestMethod);
      }
    }
  }
  this.stateInfo.setTestName(testMethodName,testClassName);
  this.progressBar.setFraction(this.stateInfo.getCompletedPercent());
  this.stateInfo.updateLabel(this.state);
}
