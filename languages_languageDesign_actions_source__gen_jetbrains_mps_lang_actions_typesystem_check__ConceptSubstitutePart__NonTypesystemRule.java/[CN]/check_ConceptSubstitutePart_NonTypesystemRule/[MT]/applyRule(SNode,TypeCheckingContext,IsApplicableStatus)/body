{
  SNode builder=SNodeOperations.getNodeAncestor(nodeToCheck,MetaAdapterFactory.getConcept(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x102ebd2e9eaL,"jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder"),false,false);
  SNode substituteConcept=SLinkOperations.getTarget(builder,MetaAdapterFactory.getReferenceLink(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x102ebd2e9eaL,0x102ebd3cd08L,"applicableConcept"));
  SNode conceptToAdd=SLinkOperations.getTarget(nodeToCheck,MetaAdapterFactory.getReferenceLink(0xaee9cad2acd44608L,0xaef20004f6a1cdbdL,0x112c58682cfL,0x112c58871bdL,"concept"));
  if (!(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(conceptToAdd),SNodeOperations.asSConcept(substituteConcept)))) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(nodeToCheck,"Wrong concept to add. Use subtype of " + BehaviorReflection.invokeVirtual(String.class,SNodeOperations.asNode(substituteConcept),"virtual_getFqName_1213877404258",new Object[]{}),"r:00000000-0000-4000-0000-011c895902a6(jetbrains.mps.lang.actions.typesystem)","1197896061431",null,errorTarget);
    }
  }
}
