{
  final Set<SNode> nodesToInvalidate=new HashSet<SNode>();
  for (  SModelEvent event : events) {
    event.accept(new SModelEventVisitorAdapter(){
      public void visitChildEvent(      SModelChildEvent event){
        markDependentNodesForInvalidation(event.getChild(),nodesToInvalidate);
        markDependentNodesForInvalidation(event.getParent(),nodesToInvalidate);
      }
      public void visitReferenceEvent(      SModelReferenceEvent event){
        markDependentNodesForInvalidation(event.getReference().getSourceNode(),nodesToInvalidate);
        markDependentNodesForInvalidation(event.getReference().getTargetNode(),nodesToInvalidate);
      }
    }
);
  }
  Set<SNode> invalidatedNodes=new HashSet<SNode>();
  Set<SNode> newNodesToInvalidate=new HashSet<SNode>();
  Set<SNode> currentNodesToInvalidate=nodesToInvalidate;
  while (!currentNodesToInvalidate.isEmpty()) {
    for (    SNode nodeToInvalidate : currentNodesToInvalidate) {
      if (invalidatedNodes.contains(nodeToInvalidate))       continue;
      invalidateNode(nodeToInvalidate);
      invalidatedNodes.add(nodeToInvalidate);
      WeakSet<SNode> nodes=myNodesToDependentNodes.get(nodeToInvalidate);
      if (nodes != null) {
        newNodesToInvalidate.addAll(nodes);
      }
    }
    currentNodesToInvalidate=newNodesToInvalidate;
    newNodesToInvalidate=new HashSet<SNode>();
  }
}
