{
  SNode type=null;
  SNode prevNode=null;
  while (node != null) {
    List<SNode> additionalNodes=new ArrayList<SNode>();
    if (prevNode != null) {
      additionalNodes.add(prevNode);
    }
    computeTypes(node,true,false,additionalNodes);
    type=getType(node);
    if (type == null || type.getAdapter() instanceof RuntimeTypeVariable || !type.allChildrenByAdaptor(RuntimeTypeVariable.class).isEmpty()) {
      if (node.isRoot()) {
        computeTypes(node,true,true,new ArrayList<SNode>());
        type=getType(node);
        continuation.run();
        return type;
      }
      prevNode=node;
      node=node.getParent();
    }
 else {
      if (node.isRoot()) {
        continuation.run();
      }
      return type;
    }
  }
  return type;
}
