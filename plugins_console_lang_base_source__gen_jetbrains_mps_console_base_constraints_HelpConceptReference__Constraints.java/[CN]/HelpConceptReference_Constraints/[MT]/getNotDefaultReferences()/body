{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("command",new BaseReferenceConstraintsDescriptor("command",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return BehaviorReflection.invokeVirtualStatic(String.class,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode)_context.getParameterNode()))),"virtual_getDisplayString_7006261637493126103",new Object[]{});
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_asp0i5_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new FilteringScope(new SubconceptsScope(SConceptOperations.findConceptDeclaration("jetbrains.mps.console.base.structure.ConsoleHelpProvider"),_context.getModel()){
            public String getName(            SNode child){
              return BehaviorReflection.invokeVirtualStatic(String.class,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(((SNode)child))),"virtual_getDisplayString_7006261637493126103",new Object[]{});
            }
          }
){
            @Override public boolean isExcluded(            SNode node){
              return SNodeOperations.isInstanceOf(node,"jetbrains.mps.lang.structure.structure.ConceptDeclaration") && !(AbstractConceptDeclaration_Behavior.call_isDefaultSubstitutable_7429110134803670673(SNodeOperations.cast(node,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")));
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
