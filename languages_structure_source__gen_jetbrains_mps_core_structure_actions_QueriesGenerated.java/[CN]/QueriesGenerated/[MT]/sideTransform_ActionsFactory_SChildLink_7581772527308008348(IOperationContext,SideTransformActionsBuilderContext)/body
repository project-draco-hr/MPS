{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SAbstractLink");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"cardinality","jetbrains.mps.core.structure.structure.SCardinality");
        SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isMultiple","" + true);
        return SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true);
      }
      public String getMatchingText(      String pattern){
        return "[0..n]";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "a list";
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.structure.structure.SAbstractLink");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNodeFactoryOperations.setNewChild(_context.getSourceNode(),"cardinality","jetbrains.mps.core.structure.structure.SCardinality");
        SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isRequired","" + true);
        SPropertyOperations.set(SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true),"isMultiple","" + true);
        return SLinkOperations.getTarget(_context.getSourceNode(),"cardinality",true);
      }
      public String getMatchingText(      String pattern){
        return "[1..n]";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "a list with at least one element";
      }
    }
);
  }
  return result;
}
