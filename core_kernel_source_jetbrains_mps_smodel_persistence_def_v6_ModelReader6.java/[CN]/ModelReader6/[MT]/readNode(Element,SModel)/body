{
  String conceptFqName=myHelper.parse(nodeElement.getAttributeValue(ModelPersistence.TYPE),false).text;
  SNode node=new SNode(model,conceptFqName);
  String idValue=nodeElement.getAttributeValue(ModelPersistence.ID);
  if (idValue != null) {
    SNodeId id=SNodeId.fromString(idValue);
    if (id == null) {
      LOG.error("invalid id string");
      return null;
    }
    node.setId(id);
  }
  for (  Element element : (List<Element>)nodeElement.getChildren(ModelPersistence.PROPERTY)) {
    String propertyName=myHelper.parse(element.getAttributeValue(ModelPersistence.NAME),true).text;
    String propertyValue=element.getAttributeValue(ModelPersistence.VALUE);
    if (propertyValue != null) {
      node.setProperty(propertyName,propertyValue);
    }
  }
  for (  Element link : (List<Element>)nodeElement.getChildren(ModelPersistence.LINK)) {
    SReference reference=readReference(link,node);
    if (reference != null)     node.addReference(reference);
  }
  for (  Element child : (List<Element>)nodeElement.getChildren(ModelPersistence.NODE)) {
    String role=myHelper.parse(child.getAttributeValue(ModelPersistence.ROLE),true).text;
    SNode childNode=readNode(child,model);
    if (role == null || childNode == null) {
      LOG.errorWithTrace("Error reading child node in node " + node.getDebugText());
    }
 else {
      node.addChild(role,childNode);
    }
  }
  return node;
}
