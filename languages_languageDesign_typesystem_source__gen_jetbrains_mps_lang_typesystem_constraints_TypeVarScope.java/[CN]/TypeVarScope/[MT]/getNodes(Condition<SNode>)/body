{
  List<SNode> vars=new ArrayList<SNode>();
  SNode enclosingNode=getEnclosingNode();
  SNode statementList;
  if (SNodeOperations.isInstanceOf(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"))) {
    statementList=SNodeOperations.cast(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"));
  }
 else {
    statementList=SNodeOperations.getNodeAncestor(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"),false,false);
  }
  if ((statementList != null)) {
    SNode currentStatement;
    if (SNodeOperations.isInstanceOf(myCurrentNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"))) {
      currentStatement=SNodeOperations.cast(myCurrentNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"));
    }
 else     if (SNodeOperations.isInstanceOf(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"))) {
      currentStatement=SNodeOperations.cast(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"));
    }
 else {
      currentStatement=SNodeOperations.getNodeAncestor(enclosingNode,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"),false,false);
    }
    populateLocalVariables(statementList,currentStatement,vars);
  }
  if (condition == AbstractSearchScope.TRUE_CONDITION) {
    return vars;
  }
  List<SNode> result=new ArrayList<SNode>();
  for (  SNode node : vars) {
    if (condition.met(node)) {
      result.add(node);
    }
  }
  return result;
}
