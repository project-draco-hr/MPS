{
  AbstractConceptDeclaration inputNodeConcept=inputNode.getConceptDeclarationAdapter();
  List<TemplateSwitch> switches;
synchronized (mySwitchLock) {
    if (myTemplateSwitchGraph == null) {
      myTemplateSwitchGraph=new TemplateSwitchGraph(myPlan.getTemplateModels());
      myTemplateSwitchToListCache=new HashMap<TemplateSwitch,List<TemplateSwitch>>();
    }
    switches=myTemplateSwitchToListCache.get(templateSwitch);
    if (switches == null) {
      switches=myTemplateSwitchGraph.getSubgraphAsList(templateSwitch);
      myTemplateSwitchToListCache.put(templateSwitch,switches);
    }
  }
  for (  TemplateSwitch aSwitch : switches) {
    List<Reduction_MappingRule> rules=aSwitch.getReductionMappingRules();
    for (    Reduction_MappingRule rule : rules) {
      if (checkPremiseForBaseMappingRule(inputNode,inputNodeConcept,rule,reductionContext)) {
        RuleConsequence ruleConsequence=rule.getRuleConsequence();
        if (ruleConsequence == null) {
          generator.showErrorMessage(inputNode,null,rule.getNode(),"couldn't apply reduction: no rule consequence");
        }
        return ruleConsequence;
      }
    }
    RuleConsequence ruleConsequence=aSwitch.getDefaultConsequence();
    if (ruleConsequence != null) {
      return ruleConsequence;
    }
  }
  return null;
}
