{
  myBaseNode=baseNode;
  myPossibleTabs=possibleTabs;
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          prevTab();
        }
      }
);
    }
  }
,KeyStroke.getKeyStroke("ctrl alt shift LEFT"),JComponent.WHEN_IN_FOCUSED_WINDOW);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          nextTab();
        }
      }
);
    }
  }
,KeyStroke.getKeyStroke("ctrl alt shift RIGHT"),JComponent.WHEN_IN_FOCUSED_WINDOW);
  GlobalSModelEventsManager.getInstance().addGlobalCommandListener(new SModelCommandListener(){
    public void eventsHappenedInCommand(    List<SModelEvent> events){
      outer:       for (      EditorTabDescriptor d : myPossibleTabs) {
        for (        EditorTab tab : myRealTabs) {
          if (tab.getDescriptor() == d)           continue outer;
        }
        if (d.getNodes(myBaseNode.getNode()).isEmpty())         continue;
        updateTabs();
      }
    }
  }
);
  setLayout(new BorderLayout());
  add(new JPanel(),BorderLayout.CENTER);
  myTabPanel=new JPanel();
  myTabPanel.setLayout(new FlowLayout());
  add(myTabPanel,BorderLayout.WEST);
  JPanel plusPanel=new JPanel();
  plusPanel.add(new AddConceptButton(myBaseNode,myPossibleTabs));
  add(plusPanel,BorderLayout.EAST);
  addListeners();
  updateTabs();
}
