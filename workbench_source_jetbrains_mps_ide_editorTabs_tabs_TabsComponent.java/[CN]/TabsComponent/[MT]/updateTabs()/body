{
  myTabPanel.removeAll();
  myRealTabs.clear();
  for (  EditorTabDescriptor d : myPossibleTabs) {
    List<SNode> nodes=d.getNodes(myBaseNode.getNode());
    if (nodes.isEmpty())     continue;
    for (    SNode node : nodes) {
      myListener.aspectAdded(node);
    }
    final EditorTab tab=new EditorTab(this,d,myBaseNode);
    myRealTabs.add(tab);
  }
  Collections.sort(myRealTabs,new Comparator<EditorTab>(){
    public int compare(    EditorTab o1,    EditorTab o2){
      List<String> list=Arrays.asList(new String[]{"Structure","Editor","Constraints","Behavior","Typesystem","Actions","Refactorings","Intentions","Find Usages","Data Flow","Generator","Textgen"});
      return list.indexOf(o1.getDescriptor().getTitle()) - list.indexOf(o2.getDescriptor().getTitle());
    }
  }
);
  DefaultActionGroup group=new DefaultActionGroup();
  for (  EditorTab tab : myRealTabs) {
    group.add(tab.getAction(this));
  }
  myToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  myTabPanel.add(myToolbar);
}
