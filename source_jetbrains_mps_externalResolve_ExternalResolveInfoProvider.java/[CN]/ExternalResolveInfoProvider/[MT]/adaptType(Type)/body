{
  if (t instanceof VoidType) {
    return new Pair<String,String>(void_,void_);
  }
  if (t instanceof BooleanType) {
    return new Pair<String,String>(boolean_,boolean_);
  }
  if (t instanceof CharType) {
    return new Pair<String,String>(char_,char_);
  }
  if (t instanceof ByteType) {
    return new Pair<String,String>(byte_,byte_);
  }
  if (t instanceof ShortType) {
    return new Pair<String,String>(short_,short_);
  }
  if (t instanceof IntegerType) {
    return new Pair<String,String>(int_,int_);
  }
  if (t instanceof LongType) {
    return new Pair<String,String>(long_,long_);
  }
  if (t instanceof DoubleType) {
    return new Pair<String,String>(double_,double_);
  }
  if (t instanceof FloatType) {
    return new Pair<String,String>(float_,float_);
  }
  if (t instanceof VariableType) {
    return new Pair<String,String>(any_,any_);
  }
  if (t instanceof TypeVariableReference) {
    return new Pair<String,String>(any_,any_);
  }
  if (t instanceof ClassifierType) {
    StringBuffer sb=new StringBuffer(classifier_);
    sb.append(" [");
    ClassifierType classifierType=(ClassifierType)t;
    sb.append(classifierType.getClassifier().getName());
    if (classifierType.parameters().hasNext()) {
      sb.append(", ");
      sb.append("<");
    }
    int i=0;
    for (    Type parameter : CollectionUtil.iteratorAsIterable(classifierType.parameters())) {
      String componentString=toString(parameter);
      if (componentString == null) {
        continue;
      }
      if (i > 0) {
        sb.append(", ");
      }
      sb.append(componentString);
      i++;
    }
    if (classifierType.parameters().hasNext()) {
      sb.append(">");
    }
    sb.append("]");
    return new Pair<String,String>(classifier_,sb.toString());
  }
  if (t instanceof ArrayType) {
    StringBuffer sb=new StringBuffer(array_);
    sb.append(" [");
    ArrayType arrayType=(ArrayType)t;
    sb.append(-1);
    sb.append(", ");
    sb.append(toString(arrayType.getComponentType()));
    sb.append("]");
    return new Pair<String,String>(array_,sb.toString());
  }
  return new Pair<String,String>("","");
}
