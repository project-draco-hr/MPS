{
  BaseGroup group=new BaseGroup("");
  List<Language> modelLanguages=SModelOperations.getLanguages(model,scope);
  Collections.sort(modelLanguages,new ToStringComparator());
  for (  final Language language : modelLanguages) {
    boolean hasChildren=false;
    for (    final SNode concept : language.getConceptDeclarations()) {
      if (SNodeUtil.getConceptDeclaration_IsRootable(concept) && (conceptsFilter == null || conceptsFilter.met(concept))) {
        BaseAction action=new BaseAction(NodePresentationUtil.matchingText(concept)){
          protected void doExecute(          AnActionEvent e,          Map<String,Object> _params){
            ModelAccess.instance().runWriteActionInCommand(new Runnable(){
              public void run(){
                SNode result=NodeFactoryManager.createNode(concept,null,null,model,scope);
                model.addRoot(result);
                if (newRootHandler != null) {
                  newRootHandler.set(result);
                }
              }
            }
);
          }
        }
;
        Icon icon=IconManager.getIconForConceptFQName(NameUtil.nodeFQName(concept));
        action.getTemplatePresentation().setIcon(icon);
        action.setExecuteOutsideCommand(true);
        group.add(action);
        hasChildren=true;
      }
    }
    if (hasChildren) {
      group.addSeparator();
    }
  }
  return group;
}
