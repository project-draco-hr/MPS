{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new AsBuilderStatement_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new AsTypeBuilder_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new BeanBuilder_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new BeanPropertyBuilder_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new Builder_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuilderCreator_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new BuilderStatement_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new ResultExpression_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilder_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderChild_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderDeclaration_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderExpression_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderExtensionDeclaration_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderParameter_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderParameterReference_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderProperty_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderPropertyBuilder_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilderPropertyExpression_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new SimpleBuilders_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
