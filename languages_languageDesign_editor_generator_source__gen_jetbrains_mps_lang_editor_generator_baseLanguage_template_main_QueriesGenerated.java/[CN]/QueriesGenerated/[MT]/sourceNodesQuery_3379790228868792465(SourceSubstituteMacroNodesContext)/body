{
  Iterable<SNode> allConcepts=Sequence.fromIterable(((Iterable<SNode>)Sequence.fromIterable(((Iterable<SModel>)_context.getOriginalInputModel().getModule().getModels())).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return LanguageAspect.STRUCTURE.is(it);
    }
  }
).first().getRootNodes())).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
    }
  }
);
  Iterable<SNode> editorDefinedConcepts=ListSequence.fromList(SModelOperations.roots(_context.getOriginalInputModel(),MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0xf9845363abL,"jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration"))).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(it,MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x10f7df344a9L,0x10f7df451aeL,"conceptDeclaration"));
    }
  }
);
  return Sequence.fromIterable(allConcepts).subtract(Sequence.fromIterable(editorDefinedConcepts));
}
