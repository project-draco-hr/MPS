{
  Set<SReference> usages=((Set)myUsagesManager.findUsages(Collections.<SNode>singleton(node),SearchType.USAGES,GlobalScopeMinusTransient.getInstance(),null));
  Set<SNode> result=new HashSet<SNode>();
  for (  SReference usage : usages) {
    SNode sourceNode=usage.getSourceNode();
    if ("classifier".equals(usage.getRole())) {
      if (SNodeOperations.isInstanceOf(sourceNode,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        SNode classifierType=SNodeOperations.cast(sourceNode,"jetbrains.mps.baseLanguage.structure.ClassifierType");
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(classifierType),"jetbrains.mps.baseLanguage.structure.ClassConcept") && "superclass".equals(classifierType.getRoleInParent())) {
          result.add(SNodeOperations.getParent(classifierType));
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(classifierType),"jetbrains.mps.baseLanguage.structure.ClassConcept") && "implementedInterface".equals(classifierType.getRoleInParent())) {
          result.add(SNodeOperations.getParent(classifierType));
        }
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(classifierType),"jetbrains.mps.baseLanguage.structure.Interface") && "extendedInterface".equals(classifierType.getRoleInParent())) {
          result.add(SNodeOperations.getParent(classifierType));
        }
      }
    }
    if ("classifier".equals(usage.getRole())) {
      if (SNodeOperations.isInstanceOf(sourceNode,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
        SNode anonymousClass=SNodeOperations.cast(sourceNode,"jetbrains.mps.baseLanguage.structure.AnonymousClass");
        result.add(anonymousClass);
      }
    }
  }
  return result;
}
