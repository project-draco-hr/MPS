{
  ArrayList<Group> rv=new ArrayList<Group>(mySameStepGroups.size());
  ArrayList<Group> toMerge=new ArrayList<Group>();
  LinkedList<Group> queue=new LinkedList<Group>(mySameStepGroups);
  while (!queue.isEmpty()) {
    Group head=queue.removeFirst();
    for (Iterator<Group> it=queue.iterator(); it.hasNext(); ) {
      Group g=it.next();
      if (head.hasCommonMappings(g)) {
        if (head.isTopPriority() == g.isTopPriority()) {
          toMerge.add(g);
        }
 else {
          myConflicts.register(Kind.CoherentPrioMix,head,g);
        }
        it.remove();
      }
    }
    if (toMerge.isEmpty()) {
      rv.add(head);
    }
 else {
      toMerge.add(head);
      queue.add(new Group(toMerge));
      toMerge.clear();
    }
  }
  return rv;
}
