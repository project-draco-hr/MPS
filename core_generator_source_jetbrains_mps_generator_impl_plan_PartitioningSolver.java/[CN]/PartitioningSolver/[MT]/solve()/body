{
  myPriorityMap.checkSelfLocking(myConflicts);
  PriorityMapUtil.joinIntersectingCoherentMappings(myCoherentMappings);
  myPriorityMap.makeLockedByAllCoherentIfLockedByOne(myCoherentMappings);
  myPriorityMap.makeLocksEqualsForCoherentMappings(myCoherentMappings,myConflicts);
  boolean need_more_passes=true;
  while (need_more_passes) {
    need_more_passes=false;
    iterate_all_mappings:     for (    TemplateMappingConfiguration lockedMapping : myPriorityMap.keys()) {
      while (true) {
        List<TemplateMappingConfiguration> weakLockMappings=myPriorityMap.getWeakLockMappingsForLockedMapping(lockedMapping);
        if (weakLockMappings.isEmpty())         break;
        for (        TemplateMappingConfiguration weakLockMapping : weakLockMappings) {
          myPriorityMap.replaceWeakLock(lockedMapping,weakLockMapping);
          myPriorityMap.checkSelfLocking(lockedMapping,myConflicts);
          List<TemplateMappingConfiguration> lockedMappings_1=myPriorityMap.getLockedMappingsForLockMapping(lockedMapping);
          for (          TemplateMappingConfiguration lockedMapping_1 : lockedMappings_1) {
            PriorityData priorityDataToApply=myPriorityMap.priorityData(lockedMapping_1,lockedMapping);
            boolean newLockAdded=myPriorityMap.updateLock(lockedMapping_1,weakLockMapping,priorityDataToApply);
            myPriorityMap.checkSelfLocking(lockedMapping_1,myConflicts);
            if (newLockAdded) {
              PriorityData priorityData=myPriorityMap.priorityData(lockedMapping_1,weakLockMapping);
              if (priorityData != null && priorityData.isWeak()) {
                need_more_passes=true;
                break iterate_all_mappings;
              }
            }
          }
        }
      }
    }
  }
  for (  PriorityData priorityData : myPriorityMap.priorityData()) {
    if (!priorityData.isStrict()) {
      throw new RuntimeException("Unexpected weak priority");
    }
  }
  myPriorityMap.checkTopPriMappingsAreNotLockedByNonTopPri(myConflicts);
  List<List<TemplateMappingConfiguration>> mappingSets=createMappingSets();
  myPriorityMap.reportLeftovers(myConflicts);
  return mappingSets;
}
