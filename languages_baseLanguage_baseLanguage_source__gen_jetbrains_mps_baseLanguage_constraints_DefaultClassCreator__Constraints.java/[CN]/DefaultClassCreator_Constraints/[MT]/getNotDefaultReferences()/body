{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),"name") + "()";
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_puti1i_a0a2a0a0a1a0b0a1a0;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new FilteringScope(ClassifierScopes.getVisibleClassifiersScope(_context.getContextNode(),operationContext.getScope())){
            @Override public boolean isExcluded(            SNode node){
              if (!(SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
                return true;
              }
              SNode clazz=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
              if (SPropertyOperations.getBoolean(clazz,"abstractClass")) {
                return true;
              }
              return !(DefaultConstructorUtils.containsDefaultConstructor(clazz));
            }
          }
;
        }
      }
;
    }
  }
);
  return references;
}
