{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),2820489544401957797l,2820489544401957798l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),2820489544401957797l,2820489544401957798l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          return SPropertyOperations.getString(_context.getParameterNode(),MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")) + "()";
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_puti1i_a0a2a0a0a1a0b0a1a1;
        }
        @Override public Scope createScope(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return ClassifierScopes.getVisibleClassifiersWithDefaultConstructors(_context.getContextNode());
        }
      }
;
    }
  }
);
  return references;
}
