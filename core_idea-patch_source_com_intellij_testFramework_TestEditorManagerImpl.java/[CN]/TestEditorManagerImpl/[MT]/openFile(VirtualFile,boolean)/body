{
  FileEditor[] editors;
  FileEditorProvider[] providers;
  final EditorWithProviderComposite newSelectedComposite;
  boolean newEditorCreated=false;
  final FileEditorProviderManager editorProviderManager=FileEditorProviderManager.getInstance();
  providers=editorProviderManager.getProviders(myProject,file);
  newEditorCreated=true;
  editors=new FileEditor[providers.length];
  for (int i=0; i < providers.length; i++) {
    try {
      final FileEditorProvider provider=providers[i];
      LOG.assertTrue(provider != null);
      LOG.assertTrue(provider.accept(myProject,file));
      final FileEditor editor=provider.createEditor(myProject,file);
      editors[i]=editor;
      LOG.assertTrue(editor != null);
      LOG.assertTrue(editor.isValid());
    }
 catch (    Exception e) {
      LOG.error(e);
    }
catch (    AssertionError e) {
      LOG.error(e);
    }
  }
  final EditorHistoryManager editorHistoryManager=EditorHistoryManager.getInstance(myProject);
  for (int i=0; i < editors.length; i++) {
    final FileEditor editor=editors[i];
    if (editor instanceof TextEditor) {
      ((EditorEx)((TextEditor)editor).getEditor()).stopOptimizedScrolling();
    }
    final FileEditorProvider provider=providers[i];
    FileEditorState state=null;
    if (state == null) {
      state=editorHistoryManager.getState(file,provider);
    }
    if (state != null) {
      editor.setState(state);
    }
  }
  ((IdeDocumentHistoryImpl)IdeDocumentHistory.getInstance(myProject)).onSelectionChanged();
  IdeDocumentHistory.getInstance(myProject).includeCurrentCommandAsNavigation();
  myVirtualFile2FileEditor.put(file,editors);
  return editors;
}
