{
  Map<String,SNode> rightNestedIndex=MapSequence.fromMap(new HashMap<String,SNode>());
  for (  SNode cl : ListSequence.fromList(SNodeOperations.getDescendants(right,"jetbrains.mps.baseLanguage.structure.Classifier",true,new String[]{}))) {
    MapSequence.fromMap(rightNestedIndex).put(SPropertyOperations.getString(cl,"name"),cl);
  }
  for (  SNode cl : ListSequence.fromList(SNodeOperations.getDescendants(left,"jetbrains.mps.baseLanguage.structure.Classifier",true,new String[]{}))) {
    SNode rightBrother=SNodeOperations.cast(MapSequence.fromMap(rightNestedIndex).get(SPropertyOperations.getString(cl,"name")),"jetbrains.mps.baseLanguage.structure.Classifier");
    System.out.println("Mapping " + SPropertyOperations.getString(cl,"name") + " to "+ SPropertyOperations.getString(rightBrother,"name"));
    Assert.assertNull(MapSequence.fromMap(nodeMap).get(cl));
    MapSequence.fromMap(nodeMap).put(cl,rightBrother);
    buildNodeMap(SLinkOperations.getTargets(left,"typeVariableDeclaration",true),SLinkOperations.getTargets(right,"typeVariableDeclaration",true),nodeMap);
    buildMethodTypeVarNodeMap(left,right,nodeMap);
  }
  if (SNodeOperations.isInstanceOf(left,"jetbrains.mps.baseLanguage.structure.Annotation") && SNodeOperations.isInstanceOf(right,"jetbrains.mps.baseLanguage.structure.Annotation")) {
    Map<String,SNode> rightMethodIndex=MapSequence.fromMap(new HashMap<String,SNode>());
    for (    SNode mthd : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(right,"jetbrains.mps.baseLanguage.structure.Annotation"),"method",true))) {
      MapSequence.fromMap(rightMethodIndex).put(SPropertyOperations.getString(mthd,"name"),mthd);
    }
    for (    SNode mthd : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(left,"jetbrains.mps.baseLanguage.structure.Annotation"),"method",true))) {
      Assert.assertNull(MapSequence.fromMap(nodeMap).get(mthd));
      MapSequence.fromMap(nodeMap).put(mthd,MapSequence.fromMap(rightMethodIndex).get(SPropertyOperations.getString(mthd,"name")));
    }
  }
}
