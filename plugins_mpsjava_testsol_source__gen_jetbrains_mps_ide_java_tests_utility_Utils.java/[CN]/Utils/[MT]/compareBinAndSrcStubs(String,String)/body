{
  JavaStubs bin=new JavaStubs();
  JavaSourceStubModelRoot src2=new JavaSourceStubModelRoot();
  IModule mod1=MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("c3786d2b-aba2-45e5-8de0-1124fd14259b"));
  IModule mod2=MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("49166c31-952a-46f6-8970-ea45964379d0"));
  List<SModel> binModels=ListSequence.fromList(new ArrayList<SModel>());
  SModelRoot binSRoot=new SModelRoot();
  binSRoot.setModule(mod1);
  binSRoot.setPath(binPath);
  Collection<SModel> binStubModels=bin.load(binSRoot);
  for (  SModel md : CollectionSequence.fromCollection(binStubModels)) {
    SModel m=md;
    ListSequence.fromList(binModels).addElement(m);
    for (    SNode binRoot : ListSequence.fromList(SModelOperations.getRoots(m,null))) {
      NodePatcher.fixNonStatic(binRoot);
      NodePatcher.removeConstructorName(binRoot);
      NodePatcher.removeExtendsObject(binRoot);
      NodePatcher.removeInitializers(binRoot);
      NodePatcher.sortNestedClass(SNodeOperations.cast(binRoot,"jetbrains.mps.baseLanguage.structure.Classifier"));
      NodePatcher.removeStatements(binRoot);
    }
  }
  Iterable<SModel> srcModels;
  List<SModel> srcModelsX=ListSequence.fromList(new ArrayList<SModel>());
  src2.setModule(mod2);
  src2.setPath(sourcePath);
  srcModels=src2.loadModels();
  for (  SModel m : Sequence.fromIterable(srcModels)) {
    SModel zzz=(m);
    srcModelsX.add(zzz);
    for (    SNode srcRoot : ListSequence.fromList(SModelOperations.getRoots(zzz,null))) {
      NodePatcher.fixNonStatic(srcRoot);
      NodePatcher.removeSourceLevelAnnotations(srcRoot);
      NodePatcher.sortNestedClass(SNodeOperations.cast(srcRoot,"jetbrains.mps.baseLanguage.structure.Classifier"));
    }
  }
  compare(binModels,srcModelsX);
}
