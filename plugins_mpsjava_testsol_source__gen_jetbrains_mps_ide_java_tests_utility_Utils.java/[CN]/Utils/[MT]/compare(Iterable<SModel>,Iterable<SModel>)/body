{
  Map<String,SModel> leftModelMap=MapSequence.fromMap(new HashMap<String,SModel>());
  for (  SModel m : Sequence.fromIterable(leftModels)) {
    MapSequence.fromMap(leftModelMap).put(m.getLongName(),m);
  }
  Map<String,SModel> rightModelMap=MapSequence.fromMap(new HashMap<String,SModel>());
  for (  SModel m : Sequence.fromIterable(rightModels)) {
    MapSequence.fromMap(rightModelMap).put(m.getLongName(),m);
  }
  Assert.assertTrue(SetSequence.fromSet(MapSequence.fromMap(leftModelMap).keySet()).containsSequence(SetSequence.fromSet(MapSequence.fromMap(rightModelMap).keySet())) && SetSequence.fromSet(MapSequence.fromMap(rightModelMap).keySet()).containsSequence(SetSequence.fromSet(MapSequence.fromMap(leftModelMap).keySet())));
  Map<SNode,SNode> classMap=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  String name : SetSequence.fromSet(MapSequence.fromMap(leftModelMap).keySet())) {
    SModel binModel=MapSequence.fromMap(leftModelMap).get(name);
    SModel srcModel=MapSequence.fromMap(rightModelMap).get(name);
    buildModelNodeMap(binModel,srcModel,classMap);
  }
  System.out.println("-------------------------");
  boolean errors=false;
  for (  String name : SetSequence.fromSet(MapSequence.fromMap(leftModelMap).keySet())) {
    SModel binModel=MapSequence.fromMap(leftModelMap).get(name);
    SModel srcModel=MapSequence.fromMap(rightModelMap).get(name);
    errors=compare2models(binModel,srcModel,classMap);
  }
  Assert.assertFalse(errors);
}
