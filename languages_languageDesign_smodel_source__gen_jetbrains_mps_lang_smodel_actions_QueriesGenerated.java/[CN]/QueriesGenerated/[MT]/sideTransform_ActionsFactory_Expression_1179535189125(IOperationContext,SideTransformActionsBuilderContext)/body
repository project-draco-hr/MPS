{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode newNode=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1140137987495l,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression")));
      SLinkOperations.setTarget(newNode,MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),1140137987495l,1140138123956l,"leftExpression"),_context.getSourceNode());
      return newNode;
    }
    public String getMatchingText(    String pattern){
      return ":";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "node type cast";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode newNode=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1140137987495l,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression")));
      SLinkOperations.setTarget(newNode,MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),1140137987495l,1140138123956l,"leftExpression"),_context.getSourceNode());
      SPropertyOperations.set(newNode,MetaAdapterFactory.getProperty(new UUID(8675788371017092295l,-9098312342032910879l),1140137987495l,1238684351431l,"asCast"),"" + (true));
      return newNode;
    }
    public String getMatchingText(    String pattern){
      return "as";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "node as cast";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"),null));
    }
  }
);
  return result;
}
