{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode newNode=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression")));
      SLinkOperations.setTarget(newNode,MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x2143399c0554e687L,0x5d71a86e0b67cd19L,"leftExpression"),_context.getSourceNode());
      return newNode;
    }
    public String getMatchingText(    String pattern){
      return ":";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "node type cast";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").getDeclarationNode(),null));
    }
  }
);
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode newNode=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression")));
      SLinkOperations.setTarget(newNode,MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x2143399c0554e687L,0x5d71a86e0b67cd19L,"leftExpression"),_context.getSourceNode());
      SPropertyOperations.set(newNode,MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,0x12067573bc7L,"asCast"),"" + (true));
      return newNode;
    }
    public String getMatchingText(    String pattern){
      return "as";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "node as cast";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10975850da7L,"jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").getDeclarationNode(),null));
    }
  }
);
  return result;
}
