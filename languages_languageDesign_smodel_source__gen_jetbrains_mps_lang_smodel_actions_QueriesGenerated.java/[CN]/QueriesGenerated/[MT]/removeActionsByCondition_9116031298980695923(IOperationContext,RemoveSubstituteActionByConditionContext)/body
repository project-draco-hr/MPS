{
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    SNode outputConcept=(SNode)current.getOutputConcept();
    SNode applicableConcept=MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x1090ea2ebacL,"jetbrains.mps.lang.smodel.structure.SNodeOperation").getDeclarationNode();
    Condition<SNode> cond=new Condition<SNode>(){
      public boolean met(      SNode concept){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        if (!(SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x4a4d7215f163131L,"jetbrains.mps.lang.smodel.structure.AsSConcept")))) {
          return false;
        }
{
          IMatchingPattern pattern_e0a0a=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType");
          SNode coercedNode_e0a0a=TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,pattern_e0a0a);
          if (coercedNode_e0a0a != null) {
            return !(AbstractConceptDeclaration_Behavior.call_isSubconceptOf_8134325418312549386(SLinkOperations.getTarget(coercedNode_e0a0a,MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,0x1090e46ca51L,"concept")),SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)","1169125787135")));
          }
 else {
            return false;
          }
        }
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(applicableConcept),SNodeOperations.asSConcept(outputConcept)) && cond.met(outputConcept)) {
      actions.remove();
    }
  }
}
