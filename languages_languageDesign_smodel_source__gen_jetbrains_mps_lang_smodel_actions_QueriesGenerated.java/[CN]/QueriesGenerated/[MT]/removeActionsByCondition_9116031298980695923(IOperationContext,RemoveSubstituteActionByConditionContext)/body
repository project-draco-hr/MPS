{
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    SNode outputConcept=(SNode)current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation");
    Condition<SNode> cond=new Condition<SNode>(){
      public boolean met(      SNode concept){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"));
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        if (!(SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(),MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),334628810661441841l,"jetbrains.mps.lang.smodel.structure.AsSConcept")))) {
          return false;
        }
{
          IMatchingPattern pattern_e0a0a=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType");
          SNode coercedNode_e0a0a=TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,pattern_e0a0a);
          if (coercedNode_e0a0a != null) {
            return !((SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.asSConcept(SLinkOperations.getTarget(coercedNode_e0a0a,MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138055754698l,1138405853777l,"concept")))),MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))));
          }
 else {
            return false;
          }
        }
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(applicableConcept),SNodeOperations.asSConcept(outputConcept)) && cond.met(outputConcept)) {
      actions.remove();
    }
  }
}
