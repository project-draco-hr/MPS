{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.addNewChild(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(8675788371017092295l,-9098312342032910879l),1138411891628l,1144104376918l,"parameter"),MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1144100743722l,"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter"));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "< .. >";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "add operation parameter(s)";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation"),null));
    }
  }
);
  return result;
}
