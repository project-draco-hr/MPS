{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNodeFactoryOperations.addNewChild(_context.getSourceNode(),"parameter","jetbrains.mps.lang.smodel.structure.AbstractOperationParameter");
        return _context.getSourceNode();
      }
      public String getMatchingText(      String pattern){
        return "< .. >";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "add operation parameter(s)";
      }
    }
);
  }
  return result;
}
