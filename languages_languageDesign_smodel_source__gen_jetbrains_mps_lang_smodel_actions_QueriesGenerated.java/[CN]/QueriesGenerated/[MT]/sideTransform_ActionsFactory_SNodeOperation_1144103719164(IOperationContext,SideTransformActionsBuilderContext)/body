{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x1090ea2ebacL,"jetbrains.mps.lang.smodel.structure.SNodeOperation").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNodeFactoryOperations.addNewChild(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x1090ea2ebacL,0x10a61ef5a56L,"parameter"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x10a61b7ea2aL,"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter")));
      return _context.getSourceNode();
    }
    public String getMatchingText(    String pattern){
      return "< .. >";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "add operation parameter(s)";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x1090ea2ebacL,"jetbrains.mps.lang.smodel.structure.SNodeOperation").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x1090ea2ebacL,"jetbrains.mps.lang.smodel.structure.SNodeOperation").getDeclarationNode(),null));
    }
  }
);
  return result;
}
