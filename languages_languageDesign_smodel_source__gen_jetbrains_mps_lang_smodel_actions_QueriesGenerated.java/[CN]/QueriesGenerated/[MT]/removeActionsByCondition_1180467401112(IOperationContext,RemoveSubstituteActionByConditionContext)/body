{
  final ApplicableTypesInfo appTypesInfo;
{
    Computable calc=new Computable(){
      public Object compute(){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        SNode operation=SLinkOperations.getTarget(SNodeOperations.as(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
        SNode linkAccess=SNodeOperations.as(operation,"jetbrains.mps.lang.smodel.structure.ILinkAccess");
        result.myLinkAccess=linkAccess;
        if ((linkAccess != null) && ILinkAccess_Behavior.call_isSingularCardinality_4024382256428848847(linkAccess)) {
          if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),true) != null) {
            result.myLinkToConcept=true;
          }
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),false) != null) {
          result.myToConcept=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),false) != null) {
          result.myToNode=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SModelType"),false) != null) {
          result.myToModel=true;
        }
        return result;
      }
    }
;
    appTypesInfo=(ApplicableTypesInfo)calc.compute();
  }
  Iterator<INodeSubstituteAction> actions=_context.getActions();
  while (actions.hasNext()) {
    INodeSubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        SNode parameterOp=(SNode)concept;
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        SNode leftOperation=null;
        if (SNodeOperations.isInstanceOf(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression")) {
          leftOperation=SLinkOperations.getTarget(SNodeOperations.cast(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
        }
        if (leftOperation != null) {
          if (SNodeOperations.isInstanceOf(leftOperation,"jetbrains.mps.lang.smodel.structure.SPropertyAccess")) {
            SNode dataType=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(leftOperation,"jetbrains.mps.lang.smodel.structure.SPropertyAccess"),"property",false),"dataType",false);
            if (SNodeOperations.isInstanceOf(dataType,"jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
              return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToEnumProperty"));
            }
 else {
              return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToSimpleProperty"));
            }
          }
          if (SNodeOperations.isInstanceOf(leftOperation,"jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess")) {
            return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToConceptProperty"));
          }
        }
        SNode linkAccess=appTypesInfo.myLinkAccess;
        if (linkAccess != null) {
          if (ILinkAccess_Behavior.call_isSingularCardinality_4024382256428848847(linkAccess)) {
            if (SConceptPropertyOperations.getBoolean(parameterOp,"applicableToConcept") && !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToNode"))) {
              return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToLink") && appTypesInfo.myLinkToConcept);
            }
            return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToLink"));
          }
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToLinkList"));
        }
        if (appTypesInfo.myToConcept) {
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToConcept"));
        }
        if (appTypesInfo.myToNode) {
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToNode"));
        }
        if (appTypesInfo.myToModel) {
          return !(SConceptPropertyOperations.getBoolean(parameterOp,"applicableToModel"));
        }
        return true;
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
