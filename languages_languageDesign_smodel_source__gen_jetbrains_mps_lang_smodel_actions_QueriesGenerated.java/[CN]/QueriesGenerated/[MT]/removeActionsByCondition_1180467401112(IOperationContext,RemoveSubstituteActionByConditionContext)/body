{
  final ApplicableTypesInfo appTypesInfo;
{
    Computable calc=new Computable(){
      public Object compute(){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        SNode operation=SLinkOperations.getTarget(SNodeOperations.as(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
        SNode linkAccess=SNodeOperations.as(operation,"jetbrains.mps.lang.smodel.structure.ILinkAccess");
        result.myLinkAccess=linkAccess;
        if ((linkAccess != null) && BehaviorReflection.invokeVirtual(Boolean.TYPE,linkAccess,"virtual_isSingularCardinality_4024382256428848847",new Object[]{})) {
          if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),true) != null) {
            result.myLinkToConcept=true;
          }
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),false) != null) {
          result.myToConcept=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),false) != null) {
          result.myToNode=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SModelType"),false) != null) {
          result.myToModel=true;
        }
        return result;
      }
    }
;
    appTypesInfo=(ApplicableTypesInfo)calc.compute();
  }
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    SNode outputConcept=(SNode)current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation");
    Condition<SNode> cond=new Condition<SNode>(){
      public boolean met(      SNode concept){
        SNode parameterOp=(SNode)concept;
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        SNode leftOperation=null;
        if (SNodeOperations.isInstanceOf(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression")) {
          leftOperation=SLinkOperations.getTarget(SNodeOperations.cast(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
        }
        if (leftOperation != null) {
          if (SNodeOperations.isInstanceOf(leftOperation,"jetbrains.mps.lang.smodel.structure.SPropertyAccess")) {
            SNode dataType=SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(leftOperation,"jetbrains.mps.lang.smodel.structure.SPropertyAccess"),"property",false),"dataType",false);
            if (SNodeOperations.isInstanceOf(dataType,"jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
              return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToEnumProperty_1262430001741498259",new Object[]{}));
            }
 else {
              return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToSimpleProperty_1262430001741498100",new Object[]{}));
            }
          }
        }
        SNode linkAccess=appTypesInfo.myLinkAccess;
        if (linkAccess != null) {
          if (BehaviorReflection.invokeVirtual(Boolean.TYPE,linkAccess,"virtual_isSingularCardinality_4024382256428848847",new Object[]{})) {
            if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToConcept_1262430001741498358",new Object[]{}) && !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToNode_1262430001741498076",new Object[]{}))) {
              return !((BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToLink_1262430001741498352",new Object[]{}) && appTypesInfo.myLinkToConcept));
            }
            return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToLink_1262430001741498352",new Object[]{}));
          }
          return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToLinkList_1262430001741498382",new Object[]{}));
        }
        if (appTypesInfo.myToConcept) {
          return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToConcept_1262430001741498358",new Object[]{}));
        }
        if (appTypesInfo.myToNode) {
          return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToNode_1262430001741498076",new Object[]{}));
        }
        if (appTypesInfo.myToModel) {
          return !(BehaviorReflection.invokeVirtualStatic(Boolean.TYPE,SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(parameterOp)),"virtual_applicableToModel_1262430001741492322",new Object[]{}));
        }
        return true;
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(outputConcept)) && cond.met(outputConcept)) {
      actions.remove();
    }
  }
}
