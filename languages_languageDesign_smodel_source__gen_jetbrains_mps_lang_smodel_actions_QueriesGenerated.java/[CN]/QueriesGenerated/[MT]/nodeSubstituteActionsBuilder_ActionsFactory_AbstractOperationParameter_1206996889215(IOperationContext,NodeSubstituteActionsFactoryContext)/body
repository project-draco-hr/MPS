{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Computable computable=new Computable(){
      public Object compute(){
        return ((List<SNode>)BehaviorReflection.invokeVirtualStatic((Class<List<SNode>>)((Class)Object.class),SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.lang.smodel.structure.SNodeOperation")))),"virtual_getApplicableParameter_3044950653914717056",new Object[]{}));
      }
    }
;
    Iterable queryResult=(Iterable)computable.compute();
    if (queryResult != null) {
      for (      Object item : queryResult) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions((SNode)item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext)));
      }
    }
  }
  return result;
}
