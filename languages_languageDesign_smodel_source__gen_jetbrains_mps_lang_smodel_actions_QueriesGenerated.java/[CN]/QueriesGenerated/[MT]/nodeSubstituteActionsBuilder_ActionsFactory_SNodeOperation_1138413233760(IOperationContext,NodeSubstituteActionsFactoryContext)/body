{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final ApplicableTypesInfo appTypesInfo=new Computable<ApplicableTypesInfo>(){
    public ApplicableTypesInfo compute(){
      ApplicableTypesInfo result=new ApplicableTypesInfo();
      SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"));
      SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
      SNode operation=SLinkOperations.getTarget(SNodeOperations.as(leftExpression,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation"));
      SNode linkAccess=SNodeOperations.as(operation,MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),4024382256428848843l,"jetbrains.mps.lang.smodel.structure.ILinkAccess"));
      result.myLinkAccess=linkAccess;
      if ((linkAccess != null) && BehaviorReflection.invokeVirtual(Boolean.TYPE,linkAccess,"virtual_isSingularCardinality_4024382256428848847",new Object[]{})) {
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),true) != null) {
          result.myLinkToConcept=true;
        }
      }
      if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),false) != null) {
        result.myToConcept=true;
      }
      if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),false) != null) {
        result.myToNode=true;
      }
      if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SModelType"),false) != null) {
        result.myToModel=true;
      }
      return result;
    }
  }
.compute();
  return result;
}
