{
  final ApplicableTypesInfo appTypesInfo;
{
    Computable calc=new Computable(){
      public Object compute(){
        ApplicableTypesInfo result=new ApplicableTypesInfo();
        SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
        SNode leftType=TypeChecker.getInstance().getTypeOf(leftExpression);
        SNode operation=SLinkOperations.getTarget(SNodeOperations.as(leftExpression,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operation",true);
        SNode linkAccess=SNodeOperations.as(operation,"jetbrains.mps.lang.smodel.structure.ILinkAccess");
        result.myLinkAccess=linkAccess;
        if ((linkAccess != null) && BehaviorReflection.invokeVirtual(Boolean.TYPE,linkAccess,"virtual_isSingularCardinality_4024382256428848847",new Object[]{})) {
          if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),true) != null) {
            result.myLinkToConcept=true;
          }
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SConceptType"),false) != null) {
          result.myToConcept=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SNodeType"),false) != null) {
          result.myToNode=true;
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(leftType,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.lang.smodel.structure.SModelType"),false) != null) {
          result.myToModel=true;
        }
        return result;
      }
    }
;
    appTypesInfo=(ApplicableTypesInfo)calc.compute();
  }
  Iterator<SubstituteAction> actions=_context.getSubstituteActions();
  while (actions.hasNext()) {
    SubstituteAction current=actions.next();
    final SNode concept=current.getOutputConcept();
    SNode applicableConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeOperation");
    Condition cond=new Condition(){
      public boolean met(      Object object){
        SNode linkAccess=appTypesInfo.myLinkAccess;
        if (linkAccess != null && !(BehaviorReflection.invokeVirtual(Boolean.TYPE,linkAccess,"virtual_isAggregation_4024382256428848854",new Object[]{}))) {
          if (SConceptOperations.isExactly(concept,"jetbrains.mps.lang.smodel.structure.Link_DeleteChildOperation")) {
            return true;
          }
          if (SConceptOperations.isExactly(concept,"jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation")) {
            return true;
          }
          if (SConceptOperations.isExactly(concept,"jetbrains.mps.lang.smodel.structure.Node_DetachOperation")) {
            return true;
          }
        }
        return false;
      }
    }
;
    if (SConceptOperations.isSuperConceptOf(applicableConcept,NameUtil.nodeFQName(concept)) && cond.met(concept)) {
      actions.remove();
    }
  }
}
