{
  final List<BaseSNodeDescriptor> result=new ArrayList<BaseSNodeDescriptor>();
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      for (      IModule m : GlobalScope.getInstance().getVisibleModules()) {
        for (        SModelDescriptor sd : m.getOwnModelDescriptors()) {
          if (SModelStereotype.isStubModelStereotype(sd.getStereotype())) {
            result.addAll(StubsNodeDescriptorsCache.getInstance().getSNodeDescriptors(m));
            break;
          }
        }
      }
    }
  }
);
  String input=Messages.showInputDialog("Enter exception class","Enter Exception Class",null,"java.lang.Throwable",new InputValidator(){
    @Override public boolean checkInput(    final String inputString){
      if (inputString.length() <= 3)       return true;
      return findPossibleNodes(inputString,result) != null;
    }
    @Override public boolean canClose(    String inputString){
      SNode first=findException(inputString,result);
      return first != null;
    }
  }
);
  final SNode exception=findException(input,result);
  if (exception == null)   return null;
  String nodeName=ModelAccess.instance().runReadAction(new Computable<String>(){
    @Override public String compute(){
      return INamedConcept_Behavior.call_getFqName_1213877404258(exception);
    }
  }
);
  return new ExceptionBreakpoint(nodeName,project);
}
