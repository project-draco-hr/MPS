{
switch (kind) {
case LINE_BREAKPOINT:
    final JavaBreakpointInfo breakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
  if (!breakpointInfo.isValid())   return null;
LineBreakpoint breakpoint=ModelAccess.instance().runReadAction(new Computable<LineBreakpoint>(){
  @Override public LineBreakpoint compute(){
    SNodePointer pointer=new SNodePointer(breakpointInfo.myModelReference,breakpointInfo.myNodeId);
    return new LineBreakpoint(pointer,project);
  }
}
);
breakpointInfo.initBreakpoint(breakpoint);
return breakpoint;
case EXCEPTION_BREAKPOINT:
ExceptionBreakpointInfo exceptionBreakpointInfo=XmlSerializer.deserialize(state,ExceptionBreakpointInfo.class);
ExceptionBreakpoint exceptionBreakpoint=new ExceptionBreakpoint(exceptionBreakpointInfo.myExceptionName,project);
exceptionBreakpointInfo.initBreakpoint(exceptionBreakpoint);
return exceptionBreakpoint;
case METHOD_BREAKPOINT:
final JavaBreakpointInfo methodBreakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
if (!methodBreakpointInfo.isValid()) return null;
MethodBreakpoint methodBreakpoint=ModelAccess.instance().runReadAction(new Computable<MethodBreakpoint>(){
@Override public MethodBreakpoint compute(){
SNodePointer pointer=new SNodePointer(methodBreakpointInfo.myModelReference,methodBreakpointInfo.myNodeId);
return new MethodBreakpoint(pointer,project);
}
}
);
methodBreakpointInfo.initBreakpoint(methodBreakpoint);
return methodBreakpoint;
case FIELD_BREAKPOINT:
final JavaBreakpointInfo fieldBreakpointInfo=XmlSerializer.deserialize(state,JavaBreakpointInfo.class);
if (!fieldBreakpointInfo.isValid()) return null;
FieldBreakpoint fieldBreakpoint=ModelAccess.instance().runReadAction(new Computable<FieldBreakpoint>(){
@Override public FieldBreakpoint compute(){
SNodePointer pointer=new SNodePointer(fieldBreakpointInfo.myModelReference,fieldBreakpointInfo.myNodeId);
return new FieldBreakpoint(pointer,project);
}
}
);
fieldBreakpointInfo.initBreakpoint(fieldBreakpoint);
return fieldBreakpoint;
}
return null;
}
