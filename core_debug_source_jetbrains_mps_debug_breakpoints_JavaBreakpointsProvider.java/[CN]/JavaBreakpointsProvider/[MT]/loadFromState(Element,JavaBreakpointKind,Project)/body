{
switch (kind) {
case LINE_BREAKPOINT:
    final BreakpointInfo breakpointInfo=XmlSerializer.deserialize(state,BreakpointInfo.class);
  MPSBreakpoint breakpoint=ModelAccess.instance().runReadAction(new Computable<MPSBreakpoint>(){
    @Override public MPSBreakpoint compute(){
      SNodePointer pointer=new SNodePointer(breakpointInfo.myModelReference,breakpointInfo.myNodeId);
      return new MPSBreakpoint(pointer.getNode(),project);
    }
  }
);
breakpoint.setCreationTime(breakpointInfo.myCreationTime);
breakpoint.setSuspendPolicy(breakpointInfo.mySuspendPolicy);
return breakpoint;
case EXCEPTION_BREAKPOINT:
ExceptionBreakpointInfo exceptionBreakpointInfo=XmlSerializer.deserialize(state,ExceptionBreakpointInfo.class);
ExceptionBreakpoint exceptionBreakpoint=new ExceptionBreakpoint(exceptionBreakpointInfo.myExceptionName,project);
exceptionBreakpoint.setCreationTime(exceptionBreakpointInfo.myCreationTime);
return exceptionBreakpoint;
}
return null;
}
