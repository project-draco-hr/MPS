{
switch (kind) {
case LINE_BREAKPOINT:
    final BreakpointInfo breakpointInfo=XmlSerializer.deserialize(state,BreakpointInfo.class);
  MPSBreakpoint breakpoint=ModelAccess.instance().runReadAction(new Computable<MPSBreakpoint>(){
    @Override public MPSBreakpoint compute(){
      SNodePointer pointer=new SNodePointer(breakpointInfo.myModelReference,breakpointInfo.myNodeId);
      return new MPSBreakpoint(pointer.getNode(),project);
    }
  }
);
breakpoint.setCreationTime(breakpointInfo.myCreationTime);
breakpoint.setEnabled(breakpointInfo.myIsEnabled);
breakpoint.setSuspendPolicy(breakpointInfo.mySuspendPolicy);
return breakpoint;
case EXCEPTION_BREAKPOINT:
ExceptionBreakpointInfo exceptionBreakpointInfo=XmlSerializer.deserialize(state,ExceptionBreakpointInfo.class);
ExceptionBreakpoint exceptionBreakpoint=new ExceptionBreakpoint(exceptionBreakpointInfo.myExceptionName,project);
exceptionBreakpoint.setCreationTime(exceptionBreakpointInfo.myCreationTime);
exceptionBreakpoint.setEnabled(exceptionBreakpointInfo.myIsEnabled);
return exceptionBreakpoint;
case METHOD_BREAKPOINT:
final MethodBreakpointInfo methodBreakpointInfo=XmlSerializer.deserialize(state,MethodBreakpointInfo.class);
MethodBreakpoint methodBreakpoint=ModelAccess.instance().runReadAction(new Computable<MethodBreakpoint>(){
@Override public MethodBreakpoint compute(){
SNodePointer pointer=new SNodePointer(methodBreakpointInfo.myModelReference,methodBreakpointInfo.myNodeId);
return new MethodBreakpoint(pointer.getNode(),methodBreakpointInfo.myMethodName,methodBreakpointInfo.myJniSignature,project);
}
}
);
methodBreakpoint.setCreationTime(methodBreakpointInfo.myCreationTime);
methodBreakpoint.setEnabled(methodBreakpointInfo.myIsEnabled);
methodBreakpoint.setSuspendPolicy(methodBreakpointInfo.mySuspendPolicy);
return methodBreakpoint;
}
return null;
}
