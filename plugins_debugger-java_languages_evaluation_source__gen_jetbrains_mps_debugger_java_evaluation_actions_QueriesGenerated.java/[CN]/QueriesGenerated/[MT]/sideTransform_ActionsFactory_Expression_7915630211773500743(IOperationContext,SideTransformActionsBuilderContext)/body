{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode downcast=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),MetaAdapterFactory.getConcept(new UUID(9053457975011001859l,-9123640110572141707l),7915630211773477333l,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel"));
      SLinkOperations.setTarget(downcast,MetaAdapterFactory.getContainmentLink(new UUID(9053457975011001859l,-9123640110572141707l),7915630211773477333l,7915630211773477790l,"expression"),_context.getSourceNode());
      return downcast;
    }
    public String getMatchingText(    String pattern){
      return "/";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "downcast to low-level type";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel"),null));
    }
  }
);
  return result;
}
