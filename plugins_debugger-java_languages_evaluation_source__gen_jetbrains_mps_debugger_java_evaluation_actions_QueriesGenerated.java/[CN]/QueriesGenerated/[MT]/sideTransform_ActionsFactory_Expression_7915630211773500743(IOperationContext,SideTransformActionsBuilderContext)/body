{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel").getDeclarationNode(),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode downcast=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel")));
      SLinkOperations.setTarget(downcast,MetaAdapterFactory.getContainmentLink(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,0x6dd9f7bd221bb39eL,"expression"),_context.getSourceNode());
      return downcast;
    }
    public String getMatchingText(    String pattern){
      return "/";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "downcast to low-level type";
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel").getDeclarationNode(),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel").getDeclarationNode(),null));
    }
  }
);
  return result;
}
