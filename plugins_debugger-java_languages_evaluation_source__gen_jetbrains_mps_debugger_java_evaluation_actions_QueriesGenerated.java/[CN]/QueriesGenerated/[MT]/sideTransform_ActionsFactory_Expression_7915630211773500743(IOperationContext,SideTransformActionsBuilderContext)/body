{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode downcast=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel");
        SLinkOperations.setTarget(downcast,"expression",_context.getSourceNode(),true);
        return downcast;
      }
      public String getMatchingText(      String pattern){
        return "/";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public String getDescriptionText(      String pattern){
        return "downcast to low-level type";
      }
    }
);
  }
  return result;
}
