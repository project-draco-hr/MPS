{
  myHierarchyTree=createHierarchyTree(false);
  myOccurenceNavigator=new OccurenceNavigatorSupport(myHierarchyTree){
    @Nullable @Override protected Navigatable createDescriptorForNode(    DefaultMutableTreeNode node){
      if (!(node instanceof HierarchyTreeNode)) {
        return null;
      }
      final HierarchyTreeNode treeNode=(HierarchyTreeNode)node;
      SNodeReference ptr=ModelAccess.instance().runReadAction(new Computable<SNodeReference>(){
        @Override public SNodeReference compute(){
          SNode node=treeNode.getNode();
          if (node == null || SNodeOperations.isDisposed(node)) {
            return null;
          }
          return new SNodePointer(node);
        }
      }
);
      if (ptr == null) {
        return null;
      }
      Navigatable n=new NodeNavigatable(ProjectHelper.toMPSProject(getProject()),ptr);
      return (n.canNavigate() ? n : null);
    }
    @Override public String getPreviousOccurenceActionName(){
      return UsageViewBundle.message("action.previous.occurrence");
    }
    @Override public String getNextOccurenceActionName(){
      return UsageViewBundle.message("action.next.occurrence");
    }
  }
;
  myHierarchyTree.setRootVisible(true);
  final JPanel panel=new JPanel(new BorderLayout());
  this.myComponent=new AbstractHierarchyView.RootPanel();
  myComponent.add(panel,BorderLayout.NORTH);
  myScrollPane=ScrollPaneFactory.createScrollPane(myHierarchyTree);
  myComponent.add(myScrollPane,BorderLayout.CENTER);
  showItemInHierarchy(null,null);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      JComponent buttonsPanel=ActionManager.getInstance().createActionToolbar(ActionPlaces.TYPE_HIERARCHY_VIEW_TOOLBAR,createButtonsGroup(),true).getComponent();
      panel.add(buttonsPanel,BorderLayout.WEST);
    }
  }
);
}
