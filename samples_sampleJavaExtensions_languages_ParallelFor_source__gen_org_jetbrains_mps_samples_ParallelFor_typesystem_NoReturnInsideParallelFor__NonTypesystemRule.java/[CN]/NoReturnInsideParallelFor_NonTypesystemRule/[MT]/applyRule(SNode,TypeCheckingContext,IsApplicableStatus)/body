{
  ListSequence.fromList(SNodeOperations.getNodeDescendants(parallelFor,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,"jetbrains.mps.baseLanguage.structure.ReturnStatement"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.getNodeAncestor(it,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11750ef8265L,"jetbrains.mps.baseLanguage.structure.IStatementListContainer"),false,false) == parallelFor;
    }
  }
).visitAll(new IVisitor<SNode>(){
    public void visit(    SNode it){
{
        MessageTarget errorTarget=new NodeMessageTarget();
        IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(it,"Cannot return from within a parallel for loop using a return statement. Use continue instead","r:4c36f4b4-7816-4067-aa6e-a49c547265ed(org.jetbrains.mps.samples.ParallelFor.typesystem)","4697196167065890748",null,errorTarget);
{
          BaseQuickFixProvider intentionProvider=new BaseQuickFixProvider("org.jetbrains.mps.samples.ParallelFor.typesystem.TurnReturnToContinue_QuickFix",false);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }
  }
);
}
