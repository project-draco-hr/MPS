{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        final boolean aggregation=SPropertyOperations.hasValue(_context.getSourceNode(),"metaClass","aggregation","reference");
        List<SNode> result=new ArrayList<SNode>();
        SNode enclosingConcept=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration",true,false);
        List<SNode> directSupers=SConceptOperations.getDirectSuperConcepts(enclosingConcept,false);
        for (        SNode concept : ListSequence.fromList(directSupers)) {
          List<SNode> links=AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(concept);
          ListSequence.fromList(result).addSequence(ListSequence.fromList(links).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              if (aggregation) {
                return SPropertyOperations.hasValue(it,"metaClass","aggregation","reference");
              }
              return SPropertyOperations.hasValue(it,"metaClass","reference","reference");
            }
          }
));
        }
        return ListSequence.fromList(result).distinct().toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SLinkOperations.setTarget(_context.getSourceNode(),"specializedLink",(item),false);
            return _context.getSourceNode();
          }
          public String getMatchingText(          String pattern){
            return "specializes " + SPropertyOperations.getString((item),"role");
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration"),null));
          }
        }
);
      }
    }
  }
  return result;
}
