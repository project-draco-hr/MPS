{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    final String pattern){
      SNode childLink=SNodeFactoryOperations.addNewChild(_context.getSourceNode(),"linkDeclaration","jetbrains.mps.lang.structure.structure.LinkDeclaration");
      SPropertyOperations.set(childLink,"metaClass","reference");
      SelectionUtil.selectCell(editorContext,childLink,"role");
      EditorCell selectedCell=editorContext.getSelectedCell();
      if (selectedCell instanceof EditorCell_Label) {
        final EditorCell_Label label=(EditorCell_Label)selectedCell;
        editorContext.getRepository().getModelAccess().runWriteInEDT(new Runnable(){
          public void run(){
            label.changeText(pattern);
            label.setCaretPosition(pattern.length());
          }
        }
);
      }
      return null;
    }
    public String getMatchingText(    String pattern){
      return pattern;
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "new reference";
    }
    public SNode getIconNode(    String pattern){
      return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration");
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration"),null));
    }
  }
);
  return result;
}
