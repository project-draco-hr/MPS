{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    final String pattern){
      SNode property=SNodeFactoryOperations.addNewChild(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,1071489727084l,"propertyDeclaration"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288299l,"jetbrains.mps.lang.structure.structure.PropertyDeclaration")));
      SelectionUtil.selectCell(editorContext,property,"name");
      EditorCell selectedCell=editorContext.getSelectedCell();
      if (selectedCell instanceof EditorCell_Label) {
        final EditorCell_Label label=(EditorCell_Label)selectedCell;
        editorContext.getRepository().getModelAccess().runWriteInEDT(new Runnable(){
          public void run(){
            label.changeText(pattern);
            label.setCaretPosition(pattern.length());
          }
        }
);
      }
      return null;
    }
    public String getMatchingText(    String pattern){
      return ((pattern == null || pattern.length() == 0) ? null : pattern);
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "new property";
    }
    public SNode getIconNode(    String pattern){
      return SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.PropertyDeclaration");
    }
    @Override protected boolean isEnabled(){
      SNode sourceNode=getSourceNode();
      SNode parent=SNodeOperations.getParent(sourceNode);
      SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
      return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),null));
    }
  }
);
{
    Iterable<SNode> parameterObjects=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return Sequence.fromIterable(new ConceptsScope(_context.getSourceNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DataTypeDeclaration")).getAvailableElements("")).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return SNodeOperations.as(it,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1082978164218l,"jetbrains.mps.lang.structure.structure.DataTypeDeclaration"));
          }
        }
).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return it != null;
          }
        }
).toListSequence();
      }
    }
.compute();
    if (parameterObjects != null) {
      for (      final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),item,_context.getSourceNode()){
          public SNode doSubstitute(          @Nullable final EditorContext editorContext,          String pattern){
            SNode property=SNodeFactoryOperations.addNewChild(_context.getSourceNode(),MetaAdapterFactory.getContainmentLink(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,1071489727084l,"propertyDeclaration"),SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288299l,"jetbrains.mps.lang.structure.structure.PropertyDeclaration")));
            SLinkOperations.setTarget(property,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288299l,1082985295845l,"dataType"),(item));
            return property;
          }
          public String getMatchingText(          String pattern){
            return NodePresentationUtil.matchingText((item),true);
          }
          public String getVisibleMatchingText(          String pattern){
            return getMatchingText(pattern);
          }
          public String getDescriptionText(          String pattern){
            return "^" + NodePresentationUtil.descriptionText((item),true);
          }
          public SNode getIconNode(          String pattern){
            return SNodeOperations.getConceptDeclaration((item));
          }
          @Override protected boolean isEnabled(){
            SNode sourceNode=getSourceNode();
            SNode parent=SNodeOperations.getParent(sourceNode);
            SNode containingLink=SNodeOperations.getContainingLinkDeclaration(sourceNode);
            return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),containingLink,null,null) && ModelConstraints.canBeAncestor(parent,null,SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),null));
          }
        }
);
      }
    }
  }
  return result;
}
