{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<Boolean> queryResult=new Computable<Iterable<Boolean>>(){
        public Iterable<Boolean> compute(){
          return ListSequence.fromListAndArray(new ArrayList<Boolean>(),Boolean.TRUE,Boolean.FALSE);
        }
      }
.compute();
      if (queryResult != null) {
        for (        final Boolean item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple",null);
              SPropertyOperations.set(result,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),6054523464626862044l,6054523464626875854l,"value"),"" + ((item).booleanValue()));
              return result;
            }
            public String getMatchingText(            String pattern){
              return (item).toString();
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
          }
);
        }
      }
    }
  }
  return result;
}
