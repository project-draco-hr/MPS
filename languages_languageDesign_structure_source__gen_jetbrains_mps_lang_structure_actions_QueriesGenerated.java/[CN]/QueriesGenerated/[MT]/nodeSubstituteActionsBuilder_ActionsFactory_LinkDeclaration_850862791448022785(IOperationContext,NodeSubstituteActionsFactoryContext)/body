{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return Sequence.fromIterable(new ConceptsScope(_context.getParentNode(),SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")).getAvailableElements("")).select(new ISelector<SNode,SNode>(){
            public SNode select(            SNode it){
              return SNodeOperations.as(it,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
            }
          }
).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return it != null;
            }
          }
).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode linkDeclaration=SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,"jetbrains.mps.lang.structure.structure.LinkDeclaration"),_context.getCurrentTargetNode());
              SLinkOperations.setTarget(linkDeclaration,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599976176l,"target"),(item));
              return linkDeclaration;
            }
            public String getMatchingText(            String pattern){
              return NodePresentationUtil.matchingText((item),true);
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return "^" + NodePresentationUtil.descriptionText((item),true);
            }
            public SNode getIconNode(            String pattern){
              return SNodeOperations.getConceptDeclaration((item));
            }
          }
);
        }
      }
    }
  }
  return result;
}
