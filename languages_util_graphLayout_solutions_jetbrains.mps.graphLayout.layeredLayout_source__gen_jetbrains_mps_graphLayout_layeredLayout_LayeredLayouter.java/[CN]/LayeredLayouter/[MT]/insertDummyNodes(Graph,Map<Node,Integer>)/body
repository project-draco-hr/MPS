{
  Map<Edge,List<Edge>> substituteMap=MapSequence.<Edge,List<Edge>>fromMap(new HashMap<Edge,List<Edge>>());
  int numOfRealNodes=graph.getNumNodes();
  for (int index=0; index < numOfRealNodes; index++) {
    Node node=graph.getNode(index);
    for (    Edge edge : ListSequence.<Edge>fromList(node.getOutEdges())) {
      int sourceLayer=MapSequence.<Node,Integer>fromMap(layers).get(edge.getSource());
      int targetLayer=MapSequence.<Node,Integer>fromMap(layers).get(edge.getTarget());
      if (targetLayer > sourceLayer + 1) {
        MapSequence.<Edge,List<Edge>>fromMap(substituteMap).put(edge,ListSequence.<Edge>fromList(new ArrayList<Edge>()));
        Node cur=edge.getSource();
        for (int i=sourceLayer + 1; i <= targetLayer; i++) {
          Node newTarget;
          if (i < targetLayer) {
            newTarget=graph.createDummyNode();
            MapSequence.<Node,Integer>fromMap(layers).put(newTarget,i);
          }
 else {
            newTarget=edge.getTarget();
          }
          ListSequence.<Edge>fromList(MapSequence.<Edge,List<Edge>>fromMap(substituteMap).get(edge)).addElement(new Edge(cur,newTarget));
          cur=newTarget;
        }
      }
    }
  }
  for (  Edge deletedEdge : SetSequence.<Edge>fromSet(MapSequence.fromMap(substituteMap).keySet())) {
    graph.removeEdge(deletedEdge);
    for (    Edge newEdge : ListSequence.<Edge>fromList(MapSequence.<Edge,List<Edge>>fromMap(substituteMap).get(deletedEdge))) {
      graph.addEdge(newEdge);
    }
  }
  return substituteMap;
}
