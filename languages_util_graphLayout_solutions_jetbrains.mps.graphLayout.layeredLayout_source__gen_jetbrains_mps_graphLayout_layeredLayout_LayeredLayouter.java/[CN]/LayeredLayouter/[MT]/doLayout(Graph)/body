{
  Set<Edge> reverted=myReverter.revertEdges(graph);
  Map<Node,Integer> layers=myLayerer.computeLayers(graph);
  Map<Edge,List<Edge>> substituteEdgeMap=insertDummyNodes(graph,layers);
  NodeLayeredOrder order=mySorter.sortNodes(graph,layers);
  Map<Node,Point> nodeCoordinates=myPlacer.placeCoordinates(graph,order);
  GraphPointLayout graphLayout=new GraphPointLayout(graph);
  for (  Edge deletedEdge : SetSequence.<Edge>fromSet(MapSequence.fromMap(substituteEdgeMap).keySet())) {
    List<Point> edgeLayout=ListSequence.<Point>fromList(new ArrayList<Point>());
    ListSequence.<Point>fromList(edgeLayout).addElement(MapSequence.<Node,Point>fromMap(nodeCoordinates).get(deletedEdge.getSource()));
    for (    Edge newEdge : ListSequence.<Edge>fromList(MapSequence.<Edge,List<Edge>>fromMap(substituteEdgeMap).get(deletedEdge))) {
      ListSequence.<Point>fromList(edgeLayout).addElement(MapSequence.<Node,Point>fromMap(nodeCoordinates).get(newEdge.getTarget()));
      graph.removeEdge(newEdge);
    }
    graphLayout.setLayoutFor(deletedEdge,edgeLayout);
    graph.addEdge(deletedEdge);
  }
  ListSequence.<Node>fromList(graph.getNodes()).removeWhere(new IWhereFilter<Node>(){
    public boolean accept(    Node it){
      return it.isDummy();
    }
  }
);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    graphLayout.setLayoutFor(node,MapSequence.<Node,Point>fromMap(nodeCoordinates).get(node));
    for (    Edge edge : ListSequence.<Edge>fromList(node.getOutEdges())) {
      if (MapSequence.fromMap(substituteEdgeMap).containsKey(edge)) {
        continue;
      }
      graphLayout.setLayoutFor(edge,ListSequence.<Point>fromListAndArray(new ArrayList<Point>(),MapSequence.<Node,Point>fromMap(nodeCoordinates).get(edge.getSource()),MapSequence.<Node,Point>fromMap(nodeCoordinates).get(edge.getTarget())));
    }
  }
  return graphLayout;
}
