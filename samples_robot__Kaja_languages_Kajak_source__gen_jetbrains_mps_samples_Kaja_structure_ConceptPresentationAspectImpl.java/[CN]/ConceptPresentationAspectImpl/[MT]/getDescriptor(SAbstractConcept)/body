{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0eb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_AbstractCommand;
      }
    break;
case 1:
  if (true) {
    return props_CommandList;
  }
break;
case 2:
if (true) {
return props_CommentLine;
}
break;
case 3:
if (true) {
return props_Direction;
}
break;
case 4:
if (true) {
return props_Drop;
}
break;
case 5:
if (true) {
return props_East;
}
break;
case 6:
if (true) {
return props_EmptyLine;
}
break;
case 7:
if (true) {
return props_Heading;
}
break;
case 8:
if (true) {
return props_IfStatement;
}
break;
case 9:
if (true) {
return props_IsFull;
}
break;
case 10:
if (true) {
return props_IsMark;
}
break;
case 11:
if (true) {
return props_IsWall;
}
break;
case 12:
if (true) {
return props_LeftTurn;
}
break;
case 13:
if (true) {
return props_Library;
}
break;
case 14:
if (true) {
return props_LogicalExpression;
}
break;
case 15:
if (true) {
return props_Looking;
}
break;
case 16:
if (true) {
return props_North;
}
break;
case 17:
if (true) {
return props_Not;
}
break;
case 18:
if (true) {
return props_Pick;
}
break;
case 19:
if (true) {
return props_Repeat;
}
break;
case 20:
if (true) {
return props_Require;
}
break;
case 21:
if (true) {
return props_RoutineCall;
}
break;
case 22:
if (true) {
return props_RoutineDefinition;
}
break;
case 23:
if (true) {
return props_Script;
}
break;
case 24:
if (true) {
return props_South;
}
break;
case 25:
if (true) {
return props_Step;
}
break;
case 26:
if (true) {
return props_TraceMessage;
}
break;
case 27:
if (true) {
return props_West;
}
break;
case 28:
if (true) {
return props_While;
}
break;
default :
}
}
throw new IllegalStateException();
}
