{
  final SModelReference modelReference=((SModel)MapSequence.fromMap(_params).get("model")).getReference();
  final List<SModuleReference> modules=ListSequence.fromList(new ArrayList<SModuleReference>());
  ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SModule module : ListSequence.fromList(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getProjectModulesWithGenerators())) {
        ListSequence.fromList(modules).addElement(module.getModuleReference());
      }
    }
  }
);
  String title=event.getPresentation().getText();
  final SModuleReference selectedModule=CommonChoosers.showModuleChooser(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")),title,modules);
  if (selectedModule == null) {
    return;
  }
  Iterable<? extends RefactoringParticipant<?,?,SModel,SModel>> participants=new ExtensionPoint<MoveModelRefactoringParticipant<?,?>>("jetbrains.mps.refactoring.participant.MoveModelParticipantEP").getObjects();
  RefactoringProcessor.performRefactoringUserInteractive(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")),title,participants,ListSequence.fromListAndArray(new ArrayList<SModel>(),((SModel)MapSequence.fromMap(_params).get("model"))),new _FunctionTypes._return_P2_E0<Map<SModel,SModel>,Iterable<RefactoringParticipant.ParticipantApplied<?,?,SModel,SModel,SModel,SModel>>,RefactoringSession>(){
    public Map<SModel,SModel> invoke(    Iterable<RefactoringParticipant.ParticipantApplied<?,?,SModel,SModel,SModel,SModel>> changes,    RefactoringSession refactoringSession){
      final Wrappers._T<NewModelDialog> dialog=new Wrappers._T<NewModelDialog>();
      ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable(){
        public void run(){
          dialog.value=new NewModelDialog(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")),(AbstractModule)selectedModule.resolve(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository()),((SModel)MapSequence.fromMap(_params).get("model")));
        }
      }
);
      dialog.value.show();
      EditableSModel newModel=dialog.value.getResult();
      if (newModel == null) {
        return null;
      }
      UpdateDependentModelsRefactoringParticipant.updateUsages(newModel,modelReference,newModel.getReference());
      DeleteModelHelper.delete(((SModel)MapSequence.fromMap(_params).get("model")).getModule(),((SModel)MapSequence.fromMap(_params).get("model")),true);
      Map<SModel,SModel> m=MapSequence.<SModel,SModel>fromMapAndKeysArray(new HashMap<SModel,SModel>(),((SModel)MapSequence.fromMap(_params).get("model"))).withValues(newModel);
      return m;
    }
  }
);
}
