{
  final SModelReference modelReference=((SModel)MapSequence.fromMap(_params).get("model")).getReference();
  final List<SModuleReference> modules=ListSequence.fromList(new ArrayList<SModuleReference>());
  ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SModule module : Sequence.fromIterable(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getModulesWithGenerators())) {
        ListSequence.fromList(modules).addElement(module.getModuleReference());
      }
    }
  }
);
  final SModuleReference selectedModule=ChooseModuleDialog.getSelectedModule(((Project)MapSequence.fromMap(_params).get("project")),modules);
  if (selectedModule == null) {
    return;
  }
  final Wrappers._T<NewModelDialog> dialog=new Wrappers._T<NewModelDialog>();
  ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      dialog.value=new NewModelDialog(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")),(AbstractModule)selectedModule.resolve(((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository()),((SModel)MapSequence.fromMap(_params).get("model")));
    }
  }
);
  dialog.value.show();
  final EditableSModel newModel=dialog.value.getResult();
  if (newModel == null) {
    return;
  }
  ((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().executeCommand(new Runnable(){
    public void run(){
      Set<SModel> usages=FindUsagesFacade.getInstance().findModelUsages(GlobalScope.getInstance(),Collections.singleton(modelReference),new EmptyProgressMonitor());
      for (      SModel usage : SetSequence.fromSet(usages)) {
        if (SModelStereotype.isUserModel(usage) && usage instanceof EditableSModel) {
          ((SModelInternal)usage).addModelImport(newModel.getReference(),true);
          MoveModel_Action.this.updateUsages((EditableSModel)usage,modelReference,newModel.getReference(),_params);
          ((SModelInternal)usage).deleteModelImport(modelReference);
        }
      }
      MoveModel_Action.this.updateUsages(newModel,modelReference,newModel.getReference(),_params);
      DeleteModelHelper.delete(((SModel)MapSequence.fromMap(_params).get("model")).getModule(),((SModel)MapSequence.fromMap(_params).get("model")),true);
    }
  }
);
}
