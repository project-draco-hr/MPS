{
  final Wrappers._T<List<ITestNodeWrapper>> _tests=new Wrappers._T<List<ITestNodeWrapper>>(tests);
  final Wrappers._T<TestRunParameters> runParams=new Wrappers._T<TestRunParameters>();
  final Wrappers._T<List<ITestNodeWrapper>> testsToRun=new Wrappers._T<List<ITestNodeWrapper>>();
  final Wrappers._T<String> skipped=new Wrappers._T<String>();
  _tests.value=ListSequence.fromList(_tests.value).where(new IWhereFilter<ITestNodeWrapper>(){
    public boolean accept(    ITestNodeWrapper it){
      return it != null;
    }
  }
).toListSequence();
  if (ListSequence.fromList(_tests.value).isEmpty()) {
    return MultiTuple.<List<ITestNodeWrapper>,TestRunParameters>from(ListSequence.fromList(new ArrayList<ITestNodeWrapper>()),new TestRunParameters());
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      runParams.value=ListSequence.fromList(_tests.value).first().getTestRunParameters();
      testsToRun.value=ListSequence.fromList(_tests.value).where(new IWhereFilter<ITestNodeWrapper>(){
        public boolean accept(        ITestNodeWrapper it){
          return eq_yo2c7x_a0a0a0a0a0a0b0a0a0a0g0c(it.getTestRunParameters(),runParams.value);
        }
      }
).toListSequence();
      skipped.value=IterableUtils.join(ListSequence.fromList(_tests.value).where(new IWhereFilter<ITestNodeWrapper>(){
        public boolean accept(        ITestNodeWrapper it){
          return neq_yo2c7x_a0a0a0a0a0a0a2a0a0a0a6a2(it.getTestRunParameters(),runParams.value);
        }
      }
).select(new ISelector<ITestNodeWrapper,String>(){
        public String select(        ITestNodeWrapper it){
          return it.getName();
        }
      }
)," ");
    }
  }
);
  if (StringUtils.isNotEmpty(skipped.value)) {
    if (log.isWarnEnabled()) {
      log.warn("All tests could not be executed together. Skipped " + skipped.value);
    }
  }
  return MultiTuple.<List<ITestNodeWrapper>,TestRunParameters>from(testsToRun.value,runParams.value);
}
