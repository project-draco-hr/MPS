{
  if (x instanceof AND_AND_Expression) {
    return convertExpression((AND_AND_Expression)x);
  }
 else   if (x instanceof EqualExpression) {
    return convertExpression((EqualExpression)x);
  }
 else   if (x instanceof OR_OR_Expression) {
    return convertExpression((OR_OR_Expression)x);
  }
 else {
    SNode op;
    int binOp=(x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT;
switch (binOp) {
case OperatorIds.LEFT_SHIFT:
      op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d6cde9fb9L,"jetbrains.mps.baseLanguage.structure.ShiftLeftExpression"));
    break;
case OperatorIds.RIGHT_SHIFT:
  op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d6ce051dfL,"jetbrains.mps.baseLanguage.structure.ShiftRightExpression"));
break;
case OperatorIds.UNSIGNED_RIGHT_SHIFT:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x470fa5a7b03ac59L,"jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression"));
break;
case OperatorIds.PLUS:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7fbL,"jetbrains.mps.baseLanguage.structure.PlusExpression"));
break;
case OperatorIds.MINUS:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7f5L,"jetbrains.mps.baseLanguage.structure.MinusExpression"));
break;
case OperatorIds.REMAINDER:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10c8d509af4L,"jetbrains.mps.baseLanguage.structure.RemExpression"));
break;
case OperatorIds.XOR:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d19ef69abL,"jetbrains.mps.baseLanguage.structure.BitwiseXorExpression"));
break;
case OperatorIds.AND:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d19eede01L,"jetbrains.mps.baseLanguage.structure.BitwiseAndExpression"));
break;
case OperatorIds.MULTIPLY:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfe476b758fL,"jetbrains.mps.baseLanguage.structure.MulExpression"));
break;
case OperatorIds.OR:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d19ef4652L,"jetbrains.mps.baseLanguage.structure.BitwiseOrExpression"));
break;
case OperatorIds.DIVIDE:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xff2bbc13daL,"jetbrains.mps.baseLanguage.structure.DivExpression"));
break;
case OperatorIds.LESS_EQUAL:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10c8d53a915L,"jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression"));
break;
case OperatorIds.GREATER_EQUAL:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10c8d0fac2cL,"jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression"));
break;
case OperatorIds.GREATER:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbced38fcfL,"jetbrains.mps.baseLanguage.structure.GreaterThanExpression"));
break;
case OperatorIds.LESS:
op=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbced3b82aL,"jetbrains.mps.baseLanguage.structure.LessThanExpression"));
break;
default :
throw new JavaParseException("Unsupported operator for BinaryExpression");
}
return convertBinaryOperation(x.left,x.right,op);
}
}
