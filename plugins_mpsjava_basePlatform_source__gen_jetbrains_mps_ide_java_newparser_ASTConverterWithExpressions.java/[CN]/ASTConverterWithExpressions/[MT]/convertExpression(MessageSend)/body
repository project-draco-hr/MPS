{
  String methodName=new String(x.selector);
  SNode result=null;
  SNode call=null;
  if (x.receiver instanceof ThisReference && ((ThisReference)x.receiver).isImplicitThis()) {
    SNode lmc=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x6c6b6a1e379f9404L,"jetbrains.mps.baseLanguage.structure.LocalMethodCall")));
    org.jetbrains.mps.openapi.model.SReference ref=new DynamicReference("baseMethodDeclaration",lmc,null,methodName);
    lmc.setReference("baseMethodDeclaration",ref);
    result=lmc;
    call=lmc;
  }
 else {
    Expression receiver=x.receiver;
    if (receiver instanceof NameReference) {
      SNode unkDotCall=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x245faa02186fc7b5L,"jetbrains.mps.baseLanguage.structure.UnknownDotCall")));
      SPropertyOperations.set(unkDotCall,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x245faa02186fc7b5L,0x439f6403036ad2f4L,"callee"),methodName);
      String[] tokens;
      if (x.receiver instanceof SingleNameReference) {
        tokens=new String[1];
        tokens[0]=new String(((SingleNameReference)x.receiver).token);
      }
 else       if (x.receiver instanceof QualifiedNameReference) {
        QualifiedNameReference nameRef=((QualifiedNameReference)x.receiver);
        tokens=new String[nameRef.tokens.length];
        for (int i=0; i < tokens.length; i++) {
          tokens[i]=new String(nameRef.tokens[i]);
        }
      }
 else {
        return null;
      }
      StringBuilder sb=new StringBuilder();
      for (      String tok : tokens) {
        sb.append(tok);
        sb.append('.');
      }
      sb.deleteCharAt(sb.length() - 1);
      SPropertyOperations.set(unkDotCall,MetaAdapterFactory.getProperty(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x5a98df4004080866L,0x1996ec29712bdd92L,"tokens"),sb.toString());
      result=unkDotCall;
      call=unkDotCall;
    }
 else     if (x.receiver instanceof SuperReference) {
      SNode smc=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf9d78b55aaL,"jetbrains.mps.baseLanguage.structure.SuperMethodCall")));
      org.jetbrains.mps.openapi.model.SReference ref=new DynamicReference("baseMethodDeclaration",smc,null,methodName);
      smc.setReference(ref.getRole(),ref);
      result=smc;
      call=smc;
    }
 else {
      SNode dotExpr=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")));
      SLinkOperations.setTarget(dotExpr,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"),convertExpressionWrap(x.receiver));
      SNode instCall=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x118154a6332L,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")));
      SLinkOperations.setTarget(dotExpr,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46b36c4L,"operation"),instCall);
      org.jetbrains.mps.openapi.model.SReference sref=new DynamicReference("baseMethodDeclaration",instCall,null,methodName);
      instCall.setReference(sref.getRole(),sref);
      result=dotExpr;
      call=instCall;
    }
  }
  if ((call != null)) {
    addCallArgs(call,x.arguments);
    addTypeArgs(x.typeArguments,SLinkOperations.getChildren(call,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0x4500f31eb02a7788L,"typeArgument")));
  }
  return result;
}
