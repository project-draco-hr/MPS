{
  int operator=((x.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT);
switch (operator) {
case OperatorIds.MINUS:
    SNode unaryMinus=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x6fea7de6103549b1L,"jetbrains.mps.baseLanguage.structure.UnaryMinus"));
  SLinkOperations.setTarget(unaryMinus,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x120a4c1f269L,0x120a4c433a6L,"expression"),convertExpressionWrap(x.expression));
return unaryMinus;
case OperatorIds.NOT:
SNode notExpression=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbcf6bd10dL,"jetbrains.mps.baseLanguage.structure.NotExpression"));
SLinkOperations.setTarget(notExpression,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbcf6bd10dL,0xfbcf6c30a4L,"expression"),convertExpressionWrap(x.expression));
return notExpression;
case OperatorIds.PLUS:
return convertExpressionWrap(x.expression);
case OperatorIds.TWIDDLE:
SNode twiddle=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d6d026f5fL,"jetbrains.mps.baseLanguage.structure.BitwiseNotExpression"));
SLinkOperations.setTarget(twiddle,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11d6d026f5fL,0x11d6d026f62L,"expression"),convertExpressionWrap(x.expression));
return twiddle;
default :
throw new JavaParseException("Unexpected operator for unary expression");
}
}
