{
  if (x instanceof PostfixExpression) {
    return convertExpression((PostfixExpression)x);
  }
 else   if (x instanceof PrefixExpression) {
    return convertExpression((PrefixExpression)x);
  }
 else {
    SNode op;
switch (x.operator) {
case OperatorIds.PLUS:
      op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d1476d2L,"jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression")));
    break;
case OperatorIds.MINUS:
  op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d14a4eaL,"jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression")));
break;
case OperatorIds.MULTIPLY:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be8616ecL,"jetbrains.mps.baseLanguage.structure.MulAssignmentExpression")));
break;
case OperatorIds.DIVIDE:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862ea4L,"jetbrains.mps.baseLanguage.structure.DivAssignmentExpression")));
break;
case OperatorIds.AND:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862eaaL,"jetbrains.mps.baseLanguage.structure.AndAssignmentExpression")));
break;
case OperatorIds.OR:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862ea8L,"jetbrains.mps.baseLanguage.structure.OrAssignmentExpression")));
break;
case OperatorIds.XOR:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862eacL,"jetbrains.mps.baseLanguage.structure.XorAssignmentExpression")));
break;
case OperatorIds.REMAINDER:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862ea6L,"jetbrains.mps.baseLanguage.structure.RemAssignmentExpression")));
break;
case OperatorIds.LEFT_SHIFT:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862eaeL,"jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression")));
break;
case OperatorIds.RIGHT_SHIFT:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x617aa860be862eb0L,"jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression")));
break;
case OperatorIds.UNSIGNED_RIGHT_SHIFT:
op=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x470fa5a7b0ad087L,"jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression")));
break;
default :
throw new JavaParseException("Unsupported operator for CompoundAssignment");
}
SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d00332cL,0xf8c77f1e97L,"lValue"),convertExpressionWrap(x.lhs));
SLinkOperations.setTarget(op,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d00332cL,0xf8c77f1e99L,"rValue"),convertExpressionWrap(x.expression));
return op;
}
}
