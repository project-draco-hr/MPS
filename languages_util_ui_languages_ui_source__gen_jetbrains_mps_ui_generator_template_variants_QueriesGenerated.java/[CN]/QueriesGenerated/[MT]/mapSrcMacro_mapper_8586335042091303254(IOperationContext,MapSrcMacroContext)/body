{
  SNode copy=SNodeOperations.copyNode(_context.getNode());
  ListSequence.fromList(SLinkOperations.getTargets(copy,"annotation",true)).removeWhere(new IWhereFilter<SNode>(){
    public boolean accept(    SNode ann){
      return VariantsUtil.isGenerateVariantsAnn(ann) || VariantsUtil.isVariantAnn(ann);
    }
  }
);
  ListSequence.fromList(SLinkOperations.getTargets(copy,"annotation",true)).addElement(new QueriesGenerated.QuotationClass_x583g4_a0a0c0eb().createNode(Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).first()));
  if (Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).count() > 1) {
    List<SNode> vals=Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).skip(1).select(new ISelector<String,SNode>(){
      public SNode select(      String it){
        return new QueriesGenerated.QuotationClass_x583g4_a0a0a0a0a0a0a0d0eb().createNode(it);
      }
    }
).toListSequence();
    ListSequence.fromList(SLinkOperations.getTargets(copy,"annotation",true)).addElement(new QueriesGenerated.QuotationClass_x583g4_a0a0b0d0eb().createNode(vals));
  }
  String sfx="_" + VariantsUtil.withinVariant(_context.getNode());
  String name=SPropertyOperations.getString(_context.getNode(),"name");
  if (name.endsWith(sfx)) {
    name=name.substring(0,name.length() - sfx.length());
  }
  SPropertyOperations.set(copy,"name",name + "_" + Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).first());
  return copy;
}
