{
  myGraph=blockGraph;
  BlockGraphProcessor.ClassesFinder finder=new BlockGraphProcessor.ClassesFinder();
  finder.doDfs(blockGraph);
  int curClass=1;
  myShift=new int[myMaxClass + 1];
  myLayers=new NodeLayers(blockGraph);
  for (  Node node : ListSequence.fromList(blockGraph.getNodes())) {
    int index=node.getIndex();
    if (myClasses[index] == curClass) {
      processClass(index);
      if (myShift[myClasses[index]] == Integer.MAX_VALUE) {
        myShift[myClasses[index]]=0;
      }
      curClass++;
    }
  }
  int minPos=Integer.MAX_VALUE;
  for (  Node node : ListSequence.fromList(blockGraph.getNodes())) {
    myLayers.set(node,myLayers.get(node) + myShift[myClasses[node.getIndex()]]);
    minPos=Math.min(minPos,myLayers.get(node));
  }
  for (  Node node : ListSequence.fromList(blockGraph.getNodes())) {
    myLayers.set(node,myLayers.get(node) - minPos);
  }
  return myLayers;
}
