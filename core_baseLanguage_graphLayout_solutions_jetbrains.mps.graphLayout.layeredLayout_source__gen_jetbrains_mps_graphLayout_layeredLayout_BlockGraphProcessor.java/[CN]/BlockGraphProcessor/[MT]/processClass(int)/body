{
  if (myNumInEdges[index] > 0) {
    throw new RuntimeException("block graph has incorrect order of block nodes");
  }
  Queue<Integer> queue=QueueSequence.fromQueue(new LinkedList<Integer>());
  QueueSequence.fromQueue(queue).addLastElement(index);
  myLayers.set(index,0);
  int classIndex=myClasses[index];
  myShift[classIndex]=Integer.MAX_VALUE;
  while (QueueSequence.fromQueue(queue).count() > 0) {
    int cur=QueueSequence.fromQueue(queue).removeFirstElement();
    for (    Edge edge : ListSequence.fromList(myGraph.getNode(cur).getOutEdges())) {
      int target=edge.getTarget().getIndex();
      if (myClasses[cur] == myClasses[target]) {
        myNumInEdges[target]--;
        if (myNumInEdges[target] == 0) {
          myLayers.set(target,myLayers.get(cur) + 1);
          QueueSequence.fromQueue(queue).addLastElement(target);
        }
      }
 else {
        myShift[classIndex]=Math.min(myShift[classIndex],myLayers.get(target) - myLayers.get(cur) - 1);
      }
    }
  }
}
