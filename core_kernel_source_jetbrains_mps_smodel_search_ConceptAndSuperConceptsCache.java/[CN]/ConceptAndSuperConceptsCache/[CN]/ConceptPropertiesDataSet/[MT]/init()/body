{
  List<SNode> allConceptProperties=new ArrayList<SNode>();
  Set<SNode> allConceptPropertyDeclarations=new HashSet<SNode>();
  myPropertyByName=new HashMap<String,SNode>();
  SNode[] concepts=((ConceptAndSuperConceptsCache)getOwnerCache()).getConcepts();
  for (  SNode concept : concepts) {
    Iterable<SNode> conceptProperties=SNodeUtil.getConcept_ConceptProperties(concept);
    for (    SNode conceptProperty : conceptProperties) {
      allConceptProperties.add(conceptProperty);
      SNode conceptPropertyDeclaration=SNodeUtil.getConceptProperty_Declaration(conceptProperty);
      if (conceptPropertyDeclaration == null)       continue;
      allConceptPropertyDeclarations.add(conceptPropertyDeclaration);
      String propertyName=conceptPropertyDeclaration.getName();
      if (propertyName == null || propertyName.length() == 0)       continue;
      if (SNodeUtil.getConceptPropertyDeclaration_IsInheritable(conceptPropertyDeclaration) || concept == concepts[0]) {
        if (!myPropertyByName.containsKey(propertyName)) {
          myPropertyByName.put(propertyName,conceptProperty);
        }
      }
    }
  }
  myDependsOnNodes=new HashSet<SNode>();
  for (  SNode concept : concepts) {
    myDependsOnNodes.add(concept);
  }
  for (  SNode prop : allConceptProperties) {
    myDependsOnNodes.add(prop);
  }
  for (  SNode propDecl : allConceptPropertyDeclarations) {
    myDependsOnNodes.add(propDecl);
  }
}
