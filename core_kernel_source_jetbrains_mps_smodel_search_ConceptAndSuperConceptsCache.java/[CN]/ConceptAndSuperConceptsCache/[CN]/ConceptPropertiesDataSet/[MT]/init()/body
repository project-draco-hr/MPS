{
  List<ConceptProperty> allConceptProperties=new ArrayList<ConceptProperty>();
  Set<ConceptPropertyDeclaration> allConceptPropertyDeclarations=new HashSet<ConceptPropertyDeclaration>();
  myPropertyByName=new HashMap<String,ConceptProperty>();
  List<AbstractConceptDeclaration> concepts=((ConceptAndSuperConceptsCache)getOwnerCache()).getConcepts();
  for (  AbstractConceptDeclaration concept : concepts) {
    List<ConceptProperty> conceptProperties=concept.getConceptProperties();
    for (    ConceptProperty conceptProperty : conceptProperties) {
      allConceptProperties.add(conceptProperty);
      ConceptPropertyDeclaration conceptPropertyDeclaration=conceptProperty.getConceptPropertyDeclaration();
      if (conceptPropertyDeclaration == null)       continue;
      allConceptPropertyDeclarations.add(conceptPropertyDeclaration);
      String propertyName=conceptPropertyDeclaration.getName();
      if (propertyName == null || propertyName.length() == 0)       continue;
      if (conceptPropertyDeclaration.getInheritable() || concept == concepts.get(0)) {
        if (!myPropertyByName.containsKey(propertyName)) {
          myPropertyByName.put(propertyName,conceptProperty);
        }
      }
    }
  }
  myDependsOnNodes=new HashSet<SNode>();
  for (  AbstractConceptDeclaration concept : concepts) {
    myDependsOnNodes.add(concept.getNode());
  }
  for (  ConceptProperty prop : allConceptProperties) {
    myDependsOnNodes.add(prop.getNode());
  }
  for (  ConceptPropertyDeclaration propDecl : allConceptPropertyDeclarations) {
    myDependsOnNodes.add(propDecl.getNode());
  }
}
