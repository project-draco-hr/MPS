{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
  final SNode contextClassifier;
  final boolean multipleClassifiers;
{
    Computable calc=new Computable(){
      public Object compute(){
        SNode contextPart=SNodeOperations.getAncestorWhereConceptInList(_context.getParentNode(),new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier","jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart"},true,false);
        if (SNodeOperations.isInstanceOf(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier")) {
          return SNodeOperations.cast(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier");
        }
 else {
          return IClassifierPart_Behavior.call_getMainClassifier_1213877255428(SNodeOperations.cast(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart"));
        }
      }
    }
;
    contextClassifier=(SNode)calc.compute();
  }
{
    Computable calc=new Computable(){
      public Object compute(){
        return ListSequence.fromList(SNodeOperations.getAncestorsWhereConceptInList(_context.getParentNode(),new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier","jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart","jetbrains.mps.baseLanguage.structure.Classifier"},true)).count() > 1;
      }
    }
;
    multipleClassifiers=(Boolean)calc.compute();
  }
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Computable computable=new Computable(){
        public Object compute(){
          return IClassifier_Behavior.call_getMembers_1213877528020(contextClassifier,_context.getParentNode());
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)computable.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
              SNodeFactoryOperations.setNewChild(result,"operand","jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression");
              if (multipleClassifiers) {
                SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(result,"operand",true),"jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression"),"classifier",contextClassifier,false);
              }
              SLinkOperations.setTarget(result,"operation",IMember_Behavior.call_createOperation_1213877353000((item)),true);
              return result;
            }
          }
);
        }
      }
    }
  }
  return result;
}
