{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final SNode contextClassifier=new Computable<SNode>(){
    public SNode compute(){
      SNode contextPart=SNodeOperations.getAncestorWhereConceptInList(_context.getParentNode(),new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier","jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart"},true,false);
      if (SNodeOperations.isInstanceOf(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier")) {
        return SNodeOperations.cast(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier");
      }
 else {
        return BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),SNodeOperations.cast(contextPart,"jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart"),"virtual_getMainClassifier_1213877255428",new Object[]{});
      }
    }
  }
.compute();
  final boolean multipleClassifiers=new Computable<Boolean>(){
    public Boolean compute(){
      return ListSequence.fromList(SNodeOperations.getAncestorsWhereConceptInList(_context.getParentNode(),new String[]{"jetbrains.mps.baseLanguage.classifiers.structure.IClassifier","jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart","jetbrains.mps.baseLanguage.structure.Classifier"},true)).count() > 1;
    }
  }
.compute();
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),contextClassifier,"virtual_getMembers_1213877528020",new Object[]{_context.getParentNode()});
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode result=SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression",null);
              SNodeFactoryOperations.setNewChild(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"),"jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression");
              if (multipleClassifiers) {
                SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand")),"jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression"),MetaAdapterFactory.getReferenceLink(new UUID(4917733117167750838l,-7710007501170303426l),1205752633985l,1218736638915l,"classifier"),contextClassifier);
              }
              SLinkOperations.setTarget(result,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation"),BehaviorReflection.invokeVirtual((Class<SNode>)((Class)Object.class),(item),"virtual_createOperation_1213877353000",new Object[]{}));
              return result;
            }
          }
);
        }
      }
    }
  }
  return result;
}
