{
  double a=Math.random();
  double b=Math.random();
  final List<Integer> list=ListSequence.fromListAndArray(new ArrayList<Integer>(),1,2,3,4);
  System.out.println(String.valueOf((new _FunctionTypes._return_P0_E0<Matrix<Double>>(){
    public Matrix<Double> invoke(){
      Matrix<Double> r_a0a0a3a1;
      r_a0a0a3a1=null;
      for (int i_a0a0a0d0b=0; i_a0a0a0d0b <= 99; i_a0a0a0d0b++) {
        int k_a0a0a0d0b=i_a0a0a0d0b;
        r_a0a0a3a1=new Matrix(r_a0a0a3a1,new Matrix<Double>(true,Matrix.soDouble,new Matrix<Double>(new Matrix<Integer>(new Integer[][]{{1,k_a0a0a0d0b,0}},Matrix.soInt),Matrix.soDouble),new Matrix<Double>(new Double[][]{{(double)0,1.0,(double)0}},Matrix.soDouble),new Matrix<Double>(new Matrix<Integer>(new Integer[][]{{0,0,1}},Matrix.soInt),Matrix.soDouble)),MatrixOperation.MatrixAdd,Matrix.soDouble);
      }
      return r_a0a0a3a1;
    }
  }
.invoke())));
  System.out.println(String.valueOf((new _FunctionTypes._return_P0_E0<Matrix<Double>>(){
    public Matrix<Double> invoke(){
      Matrix<Double> r_a0a0a4a1;
      r_a0a0a4a1=null;
      for (      Integer k_a0a0a0e0b : ListSequence.fromList(list)) {
        r_a0a0a4a1=new Matrix(r_a0a0a4a1,new Matrix<Double>(true,Matrix.soDouble,new Matrix<Double>(new Matrix<Integer>(new Integer[][]{{1,k_a0a0a0e0b,0}},Matrix.soInt),Matrix.soDouble),new Matrix<Double>(new Double[][]{{(double)0,1.0,(double)0}},Matrix.soDouble),new Matrix<Double>(new Matrix<Integer>(new Integer[][]{{0,0,1}},Matrix.soInt),Matrix.soDouble)),MatrixOperation.MatrixAdd,Matrix.soDouble);
      }
      return r_a0a0a4a1;
    }
  }
.invoke())));
  System.out.println(new Complex(a,b).exp().sub(new Complex(Math.exp(a),0).mul((new Complex(Math.cos(b),Math.sin(b))))));
  Matrix<Double> s=new Matrix<Double>(false,Matrix.soDouble,new Matrix<Double>(new Double[][]{{3.0},{Math.pow(3,2)},{(double)0},{(double)4}},Matrix.soDouble),new Matrix<Double>(new Double[][]{{Math.sin(1)},{(double)1},{Math.pow(2,7 - (1.0 / 2) + 1)},{(double)0}},Matrix.soDouble),new Matrix<Double>(new Double[][]{{(double)1},{3 + (1.0 / 2)},{Math.exp(1)},{(double)0}},Matrix.soDouble),new Matrix<Double>(new Matrix<Integer>(new Integer[][]{{1},{2},{3},{0}},Matrix.soInt),Matrix.soDouble));
  System.out.println(s);
  try {
    int i=1;
    while (i != 0) {
      i=System.in.read();
    }
  }
 catch (  IOException e) {
    System.out.println("Error!");
  }
}
