{
{
    SAbstractConcept cncpt=((SAbstractConcept)concept);
    Integer preIndex=indices_xbvbvu_a0a.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return Collections.<ConceptEditor>singletonList(new DataDependency_Editor());
      }
    break;
case 1:
  if (true) {
    return Collections.<ConceptEditor>singletonList(new DataDependencyReference_Editor());
  }
break;
case 2:
if (true) {
return Collections.<ConceptEditor>singletonList(new DirectNodeReference_Editor());
}
break;
case 3:
if (true) {
return Collections.<ConceptEditor>singletonList(new ExecuteAfterDeclaration_Editor());
}
break;
case 4:
if (true) {
return Collections.<ConceptEditor>singletonList(new LinkPatternVariableReference_Editor());
}
break;
case 5:
if (true) {
return Collections.<ConceptEditor>singletonList(new ListPatternVariableReference_Editor());
}
break;
case 6:
if (true) {
return Collections.<ConceptEditor>singletonList(new MigrationScript_Editor());
}
break;
case 7:
if (true) {
return Collections.<ConceptEditor>singletonList(new MoveNode_Editor());
}
break;
case 8:
if (true) {
return Collections.<ConceptEditor>singletonList(new NodePatternVariableReference_Editor());
}
break;
case 9:
if (true) {
return Collections.<ConceptEditor>singletonList(new OrderDependency_Editor());
}
break;
case 10:
if (true) {
return Collections.<ConceptEditor>singletonList(new ProducedDataDeclaration_Editor());
}
break;
case 11:
if (true) {
return Collections.<ConceptEditor>singletonList(new PropertyPatternVariableReference_Editor());
}
break;
case 12:
if (true) {
return Collections.<ConceptEditor>singletonList(new PureMigrationScript_Editor());
}
break;
case 13:
if (true) {
return Collections.<ConceptEditor>singletonList(new QuotationConsequence_Editor());
}
break;
case 14:
if (true) {
return Collections.<ConceptEditor>singletonList(new RefactoringLog_Editor());
}
break;
case 15:
if (true) {
return Collections.<ConceptEditor>singletonList(new RefactoringOrderDependency_Editor());
}
break;
case 16:
if (true) {
return Collections.<ConceptEditor>singletonList(new ReflectionNodeReference_Editor());
}
break;
case 17:
if (true) {
return Collections.<ConceptEditor>singletonList(new RequiredDataDeclaration_Editor());
}
break;
case 18:
if (true) {
return Collections.<ConceptEditor>singletonList(new TransformStatement_Editor());
}
break;
default :
}
}
return Collections.<ConceptEditor>emptyList();
}
