{
  List<SNode> resultList=new ArrayList<SNode>();
  if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(method),"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
    return resultList;
  }
  SNode parent=SNodeOperations.cast(SNodeOperations.getParent(method),"jetbrains.mps.baseLanguage.structure.ClassConcept");
  ClassifierAndSuperClassifiersScope scope=new ClassifierAndSuperClassifiersScope(((ClassConcept)SNodeOperations.getAdapter(parent)),IClassifiersSearchScope.INSTANCE_METHOD);
  List<SNode> overridenMethods=BaseAdapter.toNodes(scope.getOverriddenMethods(((InstanceMethodDeclaration)SNodeOperations.getAdapter(method))));
  for (  SNode node : ListSequence.fromList(overridenMethods)) {
    SNode baseMethod=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
    if (SNodeOperations.isInstanceOf(baseMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      SNode instanceMethod=SNodeOperations.cast(baseMethod,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(instanceMethod),"jetbrains.mps.baseLanguage.structure.Interface")) {
        ListSequence.fromList(resultList).addElement(instanceMethod);
      }
    }
  }
  return resultList;
}
