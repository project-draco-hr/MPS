{
  SNode leftType=(SNode)args[0];
  SNode rightType=(SNode)args[1];
  SModel runtimeTypesModel=leftType.getModel();
  Set<? extends SNode> types=CollectionUtil.asSet(leftType,rightType);
  Set<SNode> lowestCommonSupertypes=SubtypingManager.lowestCommonSupertypes(types);
  if (lowestCommonSupertypes.isEmpty()) {
    RuntimeErrorType runtimeErrorType=new RuntimeErrorType(runtimeTypesModel);
    runtimeErrorType.setErrorText("incompatible types");
    return runtimeErrorType;
  }
  SNode type=lowestCommonSupertypes.iterator().next();
  if (type instanceof PrimitiveTypeDescriptor) {
    PrimitiveTypeDescriptor primitiveTypeDescriptor=(PrimitiveTypeDescriptor)type;
    if ("Integral".equals(primitiveTypeDescriptor.getName())) {
      return new IntegerType(runtimeTypesModel);
    }
    if ("FloatingPoint".equals(primitiveTypeDescriptor.getName())) {
      return new FloatType(runtimeTypesModel);
    }
    if ("Numeric".equals(primitiveTypeDescriptor.getName())) {
      return new DoubleType(runtimeTypesModel);
    }
  }
  return type;
}
