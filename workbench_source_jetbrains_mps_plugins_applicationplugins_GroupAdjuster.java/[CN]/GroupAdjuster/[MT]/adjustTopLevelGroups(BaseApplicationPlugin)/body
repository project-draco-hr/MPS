{
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_NODE_ACTIONS,ActionPlace.PROJECT_PANE_SNODE);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_MODEL_ACTIONS,ActionPlace.PROJECT_PANE_SMODEL);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_MODULE_ACTIONS,ActionPlace.PROJECT_PANE_MODULE);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_LANGUAGE_ACTIONS,ActionPlace.PROJECT_PANE_LANGUAGE);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_DEVKIT_ACTIONS,ActionPlace.PROJECT_PANE_DEVKIT);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_PROJECT_ACTIONS,ActionPlace.PROJECT_PANE_PROJECT);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_SOLUTION_ACTIONS,ActionPlace.PROJECT_PANE_SOLUTION);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_LIB_ACTIONS,ActionPlace.PROJECT_PANE_LIBRARY);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_GENERATOR_ACTIONS,ActionPlace.PROJECT_PANE_GENERATOR);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_TRANSIENT_MODULES_ACTIONS,ActionPlace.PROJECT_PANE_TRANSIENT_MODULES);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_PACKAGE_ACTIONS,ActionPlace.PROJECT_PANE_PACKAGE);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_NAMESPACE_ACTIONS,ActionPlace.PROJECT_PANE_NAMESPACE);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_RUNTIME_FOLDER_ACTIONS,ActionPlace.PROJECT_PANE_RUNTIME_FOLDER);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_ACCESSORIES_ACTIONS,ActionPlace.PROJECT_PANE_ACCESSORIES);
  addPlace(ProjectPaneActionGroups.PROJECT_NEW_ACTIONS,ActionPlace.PROJECT_PANE_PROJECT);
  addPlace(ProjectPaneActionGroups.SOLUTION_NEW_ACTIONS,ActionPlace.PROJECT_PANE_SOLUTION);
  addPlace(ProjectPaneActionGroups.LANGUAGE_NEW_ACTIONS,ActionPlace.PROJECT_PANE_LANGUAGE);
  addPlace(ProjectPaneActionGroups.GENERATOR_NEW_ACTIONS,ActionPlace.PROJECT_PANE_GENERATOR);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_FILE_ACTIONS,ActionPlace.PROJECT_PANE_FILE);
  addPlace(ProjectPaneActionGroups.PROJECT_PANE_FOLDER_ACTIONS,ActionPlace.PROJECT_PANE_FOLDER);
  List<BaseGroup> editorGroups=new ArrayList<BaseGroup>();
  editorGroups.add(ActionUtils.getGroup(EditorComponent.EDITOR_POPUP_MENU_ACTIONS));
  for (  BaseGroup group : editorGroups) {
    group.addPlace(ActionPlace.EDITOR,null);
  }
  List<BaseGroup> mainMenuGroups=new ArrayList<BaseGroup>();
  DefaultActionGroup mainMenuGroup=ActionUtils.getDefaultGroup(IdeActions.GROUP_MAIN_MENU);
  ActionManagerEx manager=ActionManagerEx.getInstanceEx();
  for (  String id : manager.getPluginActions(idePlugin.getId())) {
    AnAction action=manager.getAction(id);
    if (!(action instanceof BaseGroup))     continue;
    BaseGroup group=((BaseGroup)action);
    if (ActionUtils.contains(mainMenuGroup,group)) {
      mainMenuGroups.add(group);
    }
  }
  for (  BaseGroup group : mainMenuGroups) {
    group.addPlace(null,new Condition<BaseAction>(){
      public boolean met(      BaseAction action){
        return action.getPlaces().isEmpty();
      }
    }
);
  }
}
