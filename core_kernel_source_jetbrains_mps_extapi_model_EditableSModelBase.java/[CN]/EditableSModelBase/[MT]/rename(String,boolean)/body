{
  ModelAccess.assertLegalWrite();
  SModelReference oldName=getReference();
  fireBeforeModelRenamed(new SModelRenamedEvent(this,oldName.getModelName(),newModelName));
  SModelReference newModelReference=PersistenceFacade.getInstance().createModelReference(getReference().getModuleReference(),getReference().getModelId(),newModelName);
  fireBeforeModelRenamed(newModelReference);
  changeModelReference(newModelReference);
  if (!changeFile) {
    save();
  }
 else {
    if (changeFile && !(getSource() instanceof FileDataSource)) {
      throw new UnsupportedOperationException("cannot change model file on non-file data source");
    }
    IFile oldFile=((FileDataSource)getSource()).getFile();
    ModelRoot root=ModelRootUtil.getModelRoot(this);
    if (root instanceof DefaultModelRoot) {
      DefaultModelRoot defaultModelRoot=(DefaultModelRoot)root;
      String sourceRoot=null;
      for (      String sr : defaultModelRoot.getFiles(FileBasedModelRoot.SOURCE_ROOTS)) {
        if (oldFile.getPath().startsWith(sr)) {
          sourceRoot=sr;
          break;
        }
      }
      try {
        IFile newFile=defaultModelRoot.createSource(newModelName,FileUtil.getExtension(oldFile.getName()),sourceRoot,new HashMap<String,String>()).getFile();
        newFile.getParent().mkdirs();
        newFile.createNewFile();
        changeModelFile(newFile);
        save();
        oldFile.delete();
      }
 catch (      IOException e) {
        LOG.error("cannot rename " + getModelName() + ": "+ e.getMessage());
        save();
      }
    }
  }
  fireModelRenamed(new SModelRenamedEvent(this,oldName.getModelName(),newModelName));
  fireModelRenamed(oldName);
}
