{
  final List<SReference> refs=ListSequence.fromList(new ArrayList<SReference>());
  if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
    ListSequence.fromList(refs).addSequence(Sequence.fromIterable(SNodeOperations.getReferences(SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"superclass",true))));
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"implementedInterface",true)).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(SNodeOperations.getReferences(it)));
      }
    }
);
  }
 else   if (SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Interface")) {
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Interface"),"extendedInterface",true)).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(SNodeOperations.getReferences(it)));
      }
    }
);
  }
  for (  SNode inner : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.Classifier",false,new String[]{}))) {
    if (SNodeOperations.isInstanceOf(inner,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      continue;
    }
    ListSequence.fromList(refs).addSequence(Sequence.fromIterable(getTopLevelRefs(inner)));
  }
  return refs;
}
