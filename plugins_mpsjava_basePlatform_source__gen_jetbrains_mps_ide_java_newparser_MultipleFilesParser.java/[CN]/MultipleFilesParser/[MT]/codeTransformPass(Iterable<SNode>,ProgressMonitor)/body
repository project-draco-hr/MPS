{
  progress.start("Code transforms",Sequence.fromIterable(nodes).count() + 1);
  final TypeChecker typeChecker=TypeChecker.getInstance();
  final List<SNode> toReplaceWithArrayLength=ListSequence.fromList(new ArrayList<SNode>());
  final Map<SNode,SNode> enumConstRefs=MapSequence.fromMap(new HashMap<SNode,SNode>());
  final Map<SNode,SNode> staticMethodQualifiers=MapSequence.fromMap(new HashMap<SNode,SNode>());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : Sequence.fromIterable(nodes)) {
        for (        SNode fieldRefOp : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",false,new String[]{}))) {
          SReference fieldRef=SNodeOperations.getReference(fieldRefOp,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation","fieldDeclaration"));
          if (!(fieldRef instanceof DynamicReference && "length".equals((((DynamicReference)fieldRef).getResolveInfo())))) {
            continue;
          }
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldRefOp),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          Iterable<SReference> operandRefs=SNodeOperations.getReferences(operand);
          if (Sequence.fromIterable(operandRefs).any(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return it instanceof DynamicReference;
            }
          }
)) {
            continue;
          }
          SNode operandType=typeChecker.getTypeOf(operand);
          if (SNodeOperations.isInstanceOf(operandType,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
            ListSequence.fromList(toReplaceWithArrayLength).addElement(fieldRefOp);
          }
        }
        progress.advance(1);
        for (        SNode caseExp : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.SwitchCase",false,new String[]{})).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return (SLinkOperations.getTarget(it,"expression",true) != null);
          }
        }
).select(new ISelector<SNode,SNode>(){
          public SNode select(          SNode it){
            return SLinkOperations.getTarget(it,"expression",true);
          }
        }
)) {
          if (!(SNodeOperations.isInstanceOf(caseExp,"jetbrains.mps.baseLanguage.structure.VariableReference"))) {
            continue;
          }
          SReference ref=SNodeOperations.getReference(SNodeOperations.cast(caseExp,"jetbrains.mps.baseLanguage.structure.VariableReference"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference","variableDeclaration"));
          if (!(ref instanceof DynamicReference)) {
            continue;
          }
          final String enumConstName=((DynamicReference)ref).getResolveInfo();
          SNode scrutenee=SLinkOperations.getTarget(SNodeOperations.getAncestor(caseExp,"jetbrains.mps.baseLanguage.structure.SwitchStatement",false,false),"expression",true);
          if ((scrutenee == null)) {
            continue;
          }
          SNode scruteneeType=typeChecker.getTypeOf(scrutenee);
          if (!(SNodeOperations.isInstanceOf(scruteneeType,"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
            continue;
          }
          SNode claz=SLinkOperations.getTarget(SNodeOperations.cast(scruteneeType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false);
          if (!(SNodeOperations.isInstanceOf(claz,"jetbrains.mps.baseLanguage.structure.EnumClass"))) {
          }
          SNode enumConst=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.EnumClass"),"enumConstant",true)).findFirst(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SPropertyOperations.getString(it,"name").equals(enumConstName);
            }
          }
);
          SNode x=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumConstantReference",null);
          SLinkOperations.setTarget(x,"enumClass",SNodeOperations.cast(claz,"jetbrains.mps.baseLanguage.structure.EnumClass"),false);
          SLinkOperations.setTarget(x,"enumConstantDeclaration",enumConst,false);
          MapSequence.fromMap(enumConstRefs).put(SNodeOperations.cast(caseExp,"jetbrains.mps.baseLanguage.structure.VariableReference"),x);
        }
        for (        SNode localCall : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{}))) {
          SReference ref=SNodeOperations.getReference(localCall,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.LocalMethodCall","method"));
          if (!(ref instanceof StaticReference)) {
            continue;
          }
          SNode target=ref.getTargetNode();
          if (!(SNodeOperations.isInstanceOf(target,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
            continue;
          }
          SNode thisClass=SNodeOperations.getAncestor(localCall,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
          SNode thatClass=SNodeOperations.getAncestor(target,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false);
          if (thisClass == thatClass) {
            continue;
          }
          SNode smc=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
          SLinkOperations.setTarget(smc,"classConcept",thatClass,false);
          SLinkOperations.setTarget(smc,"baseMethodDeclaration",SNodeOperations.cast(target,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"),false);
          for (          SNode arg : ListSequence.fromList(SLinkOperations.getTargets(localCall,"actualArgument",true))) {
            ListSequence.fromList(SLinkOperations.getTargets(smc,"actualArgument",true)).addElement(SNodeOperations.copyNode(arg));
          }
          MapSequence.fromMap(staticMethodQualifiers).put(localCall,smc);
        }
      }
    }
  }
);
  runCommand("Code transforms",new Runnable(){
    public void run(){
      for (      SNode fieldRefOp : ListSequence.fromList(toReplaceWithArrayLength)) {
        SNodeOperations.replaceWithNewChild(fieldRefOp,"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation");
      }
      for (      IMapping<SNode,SNode> pair : MapSequence.fromMap(enumConstRefs)) {
        SNodeOperations.replaceWithAnother(pair.key(),pair.value());
      }
      for (      IMapping<SNode,SNode> pair : MapSequence.fromMap(staticMethodQualifiers)) {
        SNodeOperations.replaceWithAnother(pair.key(),pair.value());
      }
    }
  }
);
  progress.advance(1);
  progress.done();
}
