{
  progress.start("Code transforms",Sequence.fromIterable(nodes).count() + 1);
  final TypeChecker typeChecker=TypeChecker.getInstance();
  final List<SNode> toReplaceWithArrayLength=ListSequence.fromList(new ArrayList<SNode>());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : Sequence.fromIterable(nodes)) {
        for (        SNode fieldRefOp : ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",false,new String[]{}))) {
          SReference fieldRef=SNodeOperations.getReference(fieldRefOp,SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation","fieldDeclaration"));
          if (!(fieldRef instanceof DynamicReference && "length".equals((((DynamicReference)fieldRef).getResolveInfo())))) {
            continue;
          }
          SNode operand=SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldRefOp),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          Iterable<SReference> operandRefs=SNodeOperations.getReferences(operand);
          if (Sequence.fromIterable(operandRefs).any(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return it instanceof DynamicReference;
            }
          }
)) {
            continue;
          }
          SNode operandType=typeChecker.getTypeOf(operand);
          if (SNodeOperations.isInstanceOf(operandType,"jetbrains.mps.baseLanguage.structure.ArrayType")) {
            ListSequence.fromList(toReplaceWithArrayLength).addElement(fieldRefOp);
          }
        }
        progress.advance(1);
      }
    }
  }
);
  runCommand("Code transforms",new Runnable(){
    public void run(){
      for (      SNode fieldRefOp : ListSequence.fromList(toReplaceWithArrayLength)) {
        SNodeOperations.replaceWithNewChild(fieldRefOp,"jetbrains.mps.baseLanguage.structure.ArrayLengthOperation");
      }
    }
  }
);
  progress.advance(1);
  progress.done();
}
