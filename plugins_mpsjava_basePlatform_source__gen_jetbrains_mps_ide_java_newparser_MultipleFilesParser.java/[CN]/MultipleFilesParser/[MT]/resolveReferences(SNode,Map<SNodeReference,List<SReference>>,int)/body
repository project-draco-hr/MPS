{
  final Queue<SNode> stack=QueueSequence.fromQueue(new LinkedList<SNode>());
  QueueSequence.fromQueue(stack).addLastElement(startNode);
  while (QueueSequence.fromQueue(stack).isNotEmpty()) {
    SNode node=QueueSequence.fromQueue(stack).removeFirstElement();
    SModel ourModel=node.getModel();
    ListSequence.fromList(SNodeOperations.getChildren(node)).visitAll(new IVisitor<SNode>(){
      public void visit(      SNode it){
        QueueSequence.fromQueue(stack).addLastElement(it);
      }
    }
);
    Iterable<? extends SReference> refs=node.getReferences();
    List<SReference> newRefs=ListSequence.fromList(new ArrayList<SReference>());
    for (    final SReference ref : Sequence.fromIterable(refs)) {
      if (!(ref instanceof DynamicReference)) {
        continue;
      }
      if (pass == 0) {
        if (ref.getRole().equals("baseMethodDeclaration")) {
          continue;
        }
        if (ref.getRole().equals("fieldDeclaration") || ref.getRole().equals("variableDeclaration")) {
          continue;
        }
      }
 else       if (SNodeOperations.getConceptDeclaration(node) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression")) {
        if (Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true))).any(new IWhereFilter<SReference>(){
          public boolean accept(          SReference it){
            SReference ref=it;
            return ref instanceof DynamicReference;
          }
        }
)) {
          continue;
        }
      }
      SNode target=null;
      ExecutorService executor=Executors.newSingleThreadExecutor();
      Future<SNode> future=executor.submit(new Callable<SNode>(){
        public SNode call() throws Exception {
          final Wrappers._T<SNode> result=new Wrappers._T<SNode>();
          myModelAccess.runReadAction(new Runnable(){
            public void run(){
              result.value=ref.getTargetNode();
            }
          }
);
          return result.value;
        }
      }
);
      try {
        target=future.get(1000,TimeUnit.MILLISECONDS);
      }
 catch (      TimeoutException e) {
        LOG.error("Reference resolve timeout");
        future.cancel(true);
      }
catch (      Exception e) {
        future.cancel(true);
      }
      if (target == null) {
        continue;
      }
      SModelReference targetModel=target.getModel().getReference();
      SReference staticRef=StaticReference.create(ref.getRole(),node,target.getModel().getReference(),target.getNodeId());
      ListSequence.fromList(newRefs).addElement(staticRef);
    }
    if (ListSequence.fromList(newRefs).isNotEmpty()) {
      MapSequence.fromMap(result).put(node.getReference(),newRefs);
    }
  }
}
