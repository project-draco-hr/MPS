{
  List<SReference> refs=ListSequence.fromList(new ArrayList<SReference>());
  Iterable<SNode> members=(SNodeOperations.isInstanceOf(node,"jetbrains.mps.baseLanguage.structure.Classifier") ? SLinkOperations.getTargets(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Classifier"),"member",true) : Sequence.<SNode>singleton(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassifierMember")));
  for (  SNode member : Sequence.fromIterable(members)) {
    if (SNodeOperations.isInstanceOf(member,"jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"),"type",true))));
    }
 else     if (SNodeOperations.isInstanceOf(member,"jetbrains.mps.baseLanguage.structure.MethodDeclaration")) {
      ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"returnType",true))));
      for (      SNode param : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"parameter",true))) {
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(param,"type",true))));
      }
      for (      SNode thrws : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(member,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"),"throwsItem",true))) {
        ListSequence.fromList(refs).addSequence(Sequence.fromIterable(deepReferences(thrws)));
      }
    }
 else     if (SNodeOperations.isInstanceOf(member,"jetbrains.mps.baseLanguage.structure.Classifier")) {
      ListSequence.fromList(refs).addSequence(Sequence.fromIterable(getFieldAndMethodTypeRefs(member)));
    }
  }
  return refs;
}
