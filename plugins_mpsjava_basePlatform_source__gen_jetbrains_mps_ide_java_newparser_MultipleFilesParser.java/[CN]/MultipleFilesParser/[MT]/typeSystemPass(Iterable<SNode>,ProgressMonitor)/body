{
  progress.start("Applying checking rules",Sequence.fromIterable(nodes).count() + 1);
  final TypeChecker typeChecker=TypeChecker.getInstance();
  final RulesManager rulesManager=typeChecker.getRulesManager();
  final Map<SNode,List<Pair<NonTypesystemRule_Runtime,IsApplicableStatus>>> map=MapSequence.fromMap(new HashMap<SNode,List<Pair<NonTypesystemRule_Runtime,IsApplicableStatus>>>());
  myRepository.getModelAccess().runReadAction(new Runnable(){
    public void run(){
      for (      SNode node : Sequence.fromIterable(nodes)) {
        MapSequence.fromMap(map).put(node,rulesManager.getNonTypesystemRules(node));
        progress.advance(1);
      }
    }
  }
);
  runCommand("applying rules",new Runnable(){
    public void run(){
      for (      SNode node : SetSequence.fromSet(MapSequence.fromMap(map).keySet())) {
        for (        Pair<NonTypesystemRule_Runtime,IsApplicableStatus> pair : ListSequence.fromList(MapSequence.fromMap(map).get(node))) {
          if (!(pair.o2.isApplicable())) {
            continue;
          }
          pair.o1.applyRule(node,new TargetTypecheckingContext(node,typeChecker),pair.o2);
        }
      }
    }
  }
);
  progress.done();
}
