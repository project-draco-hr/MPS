{
  resolveProgress.start("Resolving...",10);
  if (FeatureKind.CLASS.equals(level)) {
    nodesResolveUpdatePass("top level refs",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
      public Iterable<SReference> invoke(      SNode node){
        return getTopLevelRefs(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Classifier"));
      }
    }
,resolveProgress.subTask(1));
  }
  if (FeatureKind.CLASS_CONTENT.equals(level)) {
    nodesResolveUpdatePass("field/method type refs",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
      public Iterable<SReference> invoke(      SNode node){
        return getFieldAndMethodTypeRefs(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Classifier"));
      }
    }
,resolveProgress.subTask(1));
  }
  nodesResolveUpdatePass("all type refs",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
    public Iterable<SReference> invoke(    SNode node){
      return getVarTypeRefs(SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.Classifier"));
    }
  }
,resolveProgress.subTask(2));
  nodesResolveUpdatePass("all variable refs",nodes,new _FunctionTypes._return_P1_E0<Iterable<SReference>,SNode>(){
    public Iterable<SReference> invoke(    SNode node){
      return getVariableRefs(node);
    }
  }
,resolveProgress.subTask(2));
  nodesResolveUpdatePass("all operands",nodes,new _FunctionTypes._return_P1_E0<ISequence<SReference>,SNode>(){
    public ISequence<SReference> invoke(    SNode node){
      return ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.DotExpression",false,new String[]{})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          return deepReferences(SLinkOperations.getTarget(it,"operand",true));
        }
      }
);
    }
  }
,resolveProgress.subTask(2));
  nodesResolveUpdatePass("all operations",nodes,new _FunctionTypes._return_P1_E0<ISequence<SReference>,SNode>(){
    public ISequence<SReference> invoke(    SNode node){
      return ListSequence.fromList(SNodeOperations.getDescendants(node,"jetbrains.mps.baseLanguage.structure.DotExpression",false,new String[]{})).translate(new ITranslator2<SNode,SReference>(){
        public Iterable<SReference> translate(        SNode it){
          if (Sequence.fromIterable(deepReferences(SLinkOperations.getTarget(it,"operand",true))).any(new IWhereFilter<SReference>(){
            public boolean accept(            SReference it){
              return (SReference)it instanceof DynamicReference;
            }
          }
)) {
            return ListSequence.fromList(new ArrayList<SReference>());
          }
 else {
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"operation",true),"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
              return Sequence.<SReference>singleton(SNodeOperations.getReference(SNodeOperations.cast(SLinkOperations.getTarget(it,"operation",true),"jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation","fieldDeclaration")));
            }
 else             if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
              return Sequence.<SReference>singleton(SNodeOperations.getReference(SNodeOperations.cast(SLinkOperations.getTarget(it,"operation",true),"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation","instanceMethodDeclaration")));
            }
 else {
              return ListSequence.fromList(new ArrayList<SReference>());
            }
          }
        }
      }
);
    }
  }
,resolveProgress.subTask(2));
  resolveProgress.done();
}
