{
  progress.start("Converting...",31);
  final ProgressMonitor parseProgress=progress.subTask(1);
  parseProgress.start("Parsing...",ListSequence.fromList(files).count());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      IFile file : ListSequence.fromList(files)) {
        try {
          parseFile(file);
          parseProgress.advance(1);
          ListSequence.fromList(mySuccessfulFiles).addElement(file);
        }
 catch (        JavaParseException e) {
        }
catch (        IOException e) {
        }
      }
    }
  }
);
  parseProgress.done();
  final Wrappers._int rootCount=new Wrappers._int(0);
  runCommand("model creation pass",new Runnable(){
    public void run(){
      ((AbstractModule)myModule).addDependency(PersistenceFacade.getInstance().createModuleReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065(JDK)"),false);
      for (      String pakage : SetSequence.fromSet(MapSequence.fromMap(classesPerPackage).keySet())) {
        final SModel model=registerModelForPackage(pakage);
        if (model == null) {
          continue;
        }
        ((SModelInternal)model).addLanguage(PersistenceFacade.getInstance().createModuleReference("f3061a53-9226-4cc5-a443-f952ceaf5816(jetbrains.mps.baseLanguage)"));
        Set<SNode> roots=MapSequence.fromMap(classesPerPackage).get(pakage);
        SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            model.addRootNode(it);
          }
        }
);
        rootCount.value=rootCount.value + SetSequence.fromSet(roots).count();
        ListSequence.fromList(myRoots).addSequence(SetSequence.fromSet(roots));
        ListSequence.fromList(myModels).addElement(model);
      }
      for (      SModel model : ListSequence.fromList(myModels)) {
        JavaParser.tryResolveUnknowns(SModelOperations.getRoots(model,null));
      }
    }
  }
);
  myRootCount=rootCount.value;
  ProgressMonitor resolveProgress=progress.subTask(30);
  tryResolveRefs(myRoots,FeatureKind.CLASS,resolveProgress);
  progress.done();
}
