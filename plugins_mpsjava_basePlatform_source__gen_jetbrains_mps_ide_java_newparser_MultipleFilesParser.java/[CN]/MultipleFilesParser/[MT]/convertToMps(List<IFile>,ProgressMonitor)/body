{
  progress.start("Converting...",10);
  final ProgressMonitor parseProgress=progress.subTask(1);
  parseProgress.start("Parsing...",ListSequence.fromList(files).count());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      IFile file : ListSequence.fromList(files)) {
        try {
          parseFile(file);
          parseProgress.advance(1);
          ListSequence.fromList(mySuccessfulFiles).addElement(file);
        }
 catch (        JavaParseException e) {
        }
catch (        IOException e) {
        }
      }
    }
  }
);
  parseProgress.done();
  final Wrappers._int rootCount=new Wrappers._int(0);
  final _FunctionTypes._void_P0_E0 createModelsWork=new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      for (      String pakage : SetSequence.fromSet(MapSequence.fromMap(classesPerPackage).keySet())) {
        final SModel model=registerModelForPackage(pakage);
        Set<SNode> roots=MapSequence.fromMap(classesPerPackage).get(pakage);
        SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            model.addRootNode(it);
          }
        }
);
        rootCount.value=rootCount.value + SetSequence.fromSet(roots).count();
      }
      for (      String pakage : SetSequence.fromSet(MapSequence.fromMap(classesPerPackage).keySet())) {
        final SModel model=registerModelForPackage(pakage);
        Set<SNode> roots=MapSequence.fromMap(classesPerPackage).get(pakage);
        SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            model.addRootNode(it);
          }
        }
);
        rootCount.value=rootCount.value + SetSequence.fromSet(roots).count();
        ListSequence.fromList(myModels).addElement(model);
      }
      for (      SModel model : ListSequence.fromList(myModels)) {
        JavaParser.tryResolveUnknowns(SModelOperations.getRoots(model,null));
      }
    }
  }
;
  if (myModelAccess.isCommandAction()) {
    createModelsWork.invoke();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        public void run(){
          myModelAccess.executeCommand(new Runnable(){
            public void run(){
              createModelsWork.invoke();
            }
          }
);
        }
      }
);
    }
 catch (    InterruptedException e) {
      LOG.error("Models creation pass was interrupted",e);
    }
catch (    InvocationTargetException e) {
      LOG.error("Exception in model creation pass",e.getCause());
    }
  }
  final ProgressMonitor resolveProgress=progress.subTask(9);
  resolveProgress.start("Resolving...",rootCount.value);
  final Map<SNodeReference,List<SReference>> referenceMap=MapSequence.fromMap(new HashMap<SNodeReference,List<SReference>>());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SModel model : ListSequence.fromList(myModels)) {
        for (        SNode root : ListSequence.fromList(SModelOperations.getRoots(model,null))) {
          resolveProgress.step(root.getName());
          try {
            resolveReferences(root,referenceMap,0);
          }
 catch (          Exception e) {
          }
          resolveProgress.advance(1);
        }
      }
      resolveProgress.done();
    }
  }
);
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        myModelAccess.executeCommand(new Runnable(){
          public void run(){
            updateReference(referenceMap);
          }
        }
);
      }
    }
);
  }
 catch (  InterruptedException e) {
    LOG.error("Reference update pass was interrupted",e);
  }
catch (  InvocationTargetException e) {
    LOG.error("Exception in reference update pass",e.getCause());
  }
  MapSequence.fromMap(referenceMap).clear();
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      SModel model : ListSequence.fromList(myModels)) {
        for (        SNode root : ListSequence.fromList(SModelOperations.getRoots(model,null))) {
          try {
            resolveReferences(root,referenceMap,1);
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
);
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        myModelAccess.executeCommand(new Runnable(){
          public void run(){
            updateReference(referenceMap);
          }
        }
);
      }
    }
);
  }
 catch (  InterruptedException e) {
    LOG.error("Reference update pass was interrupted",e);
  }
catch (  InvocationTargetException e) {
    LOG.error("Exception in reference update pass",e.getCause());
  }
  progress.done();
}
