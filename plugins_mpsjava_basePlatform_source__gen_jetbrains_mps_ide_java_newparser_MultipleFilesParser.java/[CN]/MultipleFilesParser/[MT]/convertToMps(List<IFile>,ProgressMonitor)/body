{
  final ProgressMonitor parseProgress=progress.subTask(ListSequence.fromList(files).count());
  parseProgress.start("Parsing...",ListSequence.fromList(files).count());
  myModelAccess.runReadAction(new Runnable(){
    public void run(){
      for (      IFile file : ListSequence.fromList(files)) {
        try {
          parseFile(file);
          parseProgress.advance(1);
          ListSequence.fromList(mySuccessfulFiles).addElement(file);
        }
 catch (        JavaParseException e) {
        }
catch (        IOException e) {
        }
      }
    }
  }
);
  parseProgress.done();
  final _FunctionTypes._void_P0_E0 resolveWork=new _FunctionTypes._void_P0_E0(){
    public void invoke(){
      int rootCount=0;
      for (      String pakage : SetSequence.fromSet(MapSequence.fromMap(classesPerPackage).keySet())) {
        final SModel model=registerModelForPackage(pakage);
        Set<SNode> roots=MapSequence.fromMap(classesPerPackage).get(pakage);
        SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            model.addRootNode(it);
          }
        }
);
        rootCount=rootCount + SetSequence.fromSet(roots).count();
      }
      ProgressMonitor resolveProgress=progress.subTask(rootCount);
      resolveProgress.start("Resolving...",rootCount);
      for (      String pakage : SetSequence.fromSet(MapSequence.fromMap(classesPerPackage).keySet())) {
        final SModel model=registerModelForPackage(pakage);
        Set<SNode> roots=MapSequence.fromMap(classesPerPackage).get(pakage);
        SetSequence.fromSet(roots).visitAll(new IVisitor<SNode>(){
          public void visit(          SNode it){
            model.addRootNode(it);
          }
        }
);
        rootCount=rootCount + SetSequence.fromSet(roots).count();
        ListSequence.fromList(myModels).addElement(model);
      }
      for (      SModel model : ListSequence.fromList(myModels)) {
        for (        SNode root : ListSequence.fromList(SModelOperations.getRoots(model,null))) {
          JavaParser.tryResolveUnknowns(Sequence.<SNode>singleton(root));
          JavaParser.tryResolveDynamicRefs(Sequence.<SNode>singleton(root));
          resolveProgress.advance(1);
        }
      }
      resolveProgress.done();
    }
  }
;
  if (myModelAccess.isCommandAction()) {
    resolveWork.invoke();
  }
 else {
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        public void run(){
          myModelAccess.executeCommandInEDT(new Runnable(){
            public void run(){
              resolveWork.invoke();
            }
          }
);
        }
      }
);
    }
 catch (    InterruptedException e) {
      LOG.error("Reference resolving pass was interrupted",e);
    }
catch (    InvocationTargetException e) {
      LOG.error("Exception in reference resolving pass",e.getCause());
    }
  }
}
