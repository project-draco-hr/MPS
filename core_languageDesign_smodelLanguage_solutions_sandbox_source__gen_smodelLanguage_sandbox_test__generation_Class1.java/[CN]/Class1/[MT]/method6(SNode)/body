{
  List<SNode> nodes=SLinkOperations.getTargets(node,"statement",true);
  SLinkOperations.addNewChild(node,"statement","jetbrains.mps.baseLanguage.structure.Statement");
  SLinkOperations.addNewChild(node,"statement","jetbrains.mps.baseLanguage.structure.Statement");
  SLinkOperations.addChild(node,"statement",null);
  SLinkOperations.addAll(node,"statement",null);
  SLinkOperations.insertChildFirst(node,"statement",null);
  int c1=SLinkOperations.getCount(node,"statement");
  List<SNode> macros=SLinkOperations.getTargets(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),true);
  SLinkOperations.addNewChild(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),"jetbrains.mps.transformation.TLBase.structure.NodeMacro");
  SLinkOperations.addNewChild(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),"jetbrains.mps.transformation.TLBase.structure.NodeMacro");
  SLinkOperations.addChild(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),null);
  SLinkOperations.addAll(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),null);
  SLinkOperations.insertChildFirst(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),null);
  int c2=SLinkOperations.getCount(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"));
  int c3=SequenceOperations.count(SLinkOperations.getTargets(node,AttributesRolesUtil.childRoleFromAttributeRole("nodeMacro"),true));
  int all=SequenceOperations.count(SNodeOperations.getAllAttributes(node));
  SNodeOperations.copyNode(SLinkOperations.getTarget(node,AttributesRolesUtil.childRoleFromPropertyAttributeRole("propertyMacro","alias"),true));
}
