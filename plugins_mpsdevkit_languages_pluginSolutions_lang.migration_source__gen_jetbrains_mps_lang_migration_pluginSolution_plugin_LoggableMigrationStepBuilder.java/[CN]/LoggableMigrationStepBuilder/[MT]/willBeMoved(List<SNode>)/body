{
  myMoveNodeItems=ListSequence.fromList(new ArrayList<SNode>(ListSequence.fromList(nodes).count()));
  if (ListSequence.fromList(nodes).isNotEmpty()) {
    Iterable<SModule> seq=ListSequence.fromList(nodes).select(new ISelector<SNode,SModule>(){
      public SModule select(      SNode it){
        return SNodeOperations.getModel(it).getModule();
      }
    }
);
    mySourceModule=Sequence.fromIterable(seq).first();
    if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SModule>(){
      public boolean accept(      SModule it){
        return eq_t528rj_a0a0a0a0a0a2a2a7(it,mySourceModule);
      }
    }
))) {
      throw new IllegalArgumentException("All nodes should be from the same module.");
    }
  }
  for (  final SNode from : ListSequence.fromList(nodes)) {
    final SNode moveNodeItem=createMoveNode_t528rj_a0a0d0h(SNodeOperations.cast(HUtil.copyIfNecessary(NodeReferenceUtil.makeReflection(from)),MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x2b3f57492c1648ccL,"jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")),SNodeOperations.cast(HUtil.copyIfNecessary(null),MetaAdapterFactory.getConcept(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x2b3f57492c1648ccL,"jetbrains.mps.lang.migration.util.structure.AbstractNodeReference")));
    ListSequence.fromList(myMoveNodeItems).addElement(moveNodeItem);
    Sequence.fromIterable(new ExtensionPoint<MoveNodesContributor>("jetbrains.mps.lang.migration.pluginSolution.MoveNodesContributor").getObjects()).visitAll(new IVisitor<MoveNodesContributor>(){
      public void visit(      MoveNodesContributor it){
        it.adjustMoveNodesItem(moveNodeItem,SNodeOperations.getModel(from).getModule().getRepository());
      }
    }
);
  }
}
