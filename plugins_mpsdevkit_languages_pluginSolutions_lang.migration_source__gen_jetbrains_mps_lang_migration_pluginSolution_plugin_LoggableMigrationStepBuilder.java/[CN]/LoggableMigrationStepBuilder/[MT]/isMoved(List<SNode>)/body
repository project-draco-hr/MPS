{
  if (myMoveNodeItems == null) {
    throw new IllegalArgumentException("isMoved() should be called after willBeMoved()");
  }
  if (ListSequence.fromList(nodes).isNotEmpty()) {
    Iterable<SModule> seq=ListSequence.fromList(nodes).select(new ISelector<SNode,SModule>(){
      public SModule select(      SNode it){
        return SNodeOperations.getModel(it).getModule();
      }
    }
);
    myTargetModule=Sequence.fromIterable(seq).first();
    if (!(Sequence.fromIterable(seq).all(new IWhereFilter<SModule>(){
      public boolean accept(      SModule it){
        return eq_t528rj_a0a0a0a0a0a2a1a11(it,myTargetModule);
      }
    }
))) {
      throw new IllegalArgumentException("All nodes should be from the same module.");
    }
  }
  if (ListSequence.fromList(myMoveNodeItems).count() != ListSequence.fromList(nodes).count()) {
    throw new IllegalArgumentException("List size mismatch");
  }
{
    Iterator<SNode> to_it=ListSequence.fromList(nodes).iterator();
    Iterator<SNode> moveNodeItem_it=ListSequence.fromList(myMoveNodeItems).iterator();
    SNode to_var;
    SNode moveNodeItem_var;
    while (to_it.hasNext() && moveNodeItem_it.hasNext()) {
      to_var=to_it.next();
      moveNodeItem_var=moveNodeItem_it.next();
      SLinkOperations.setTarget(moveNodeItem_var,MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x67236d4a5830221eL,0x67236d4a58343d17L,"toNode"),NodeReferenceUtil.makeReflection(to_var));
      ListSequence.fromList(SLinkOperations.getChildren(moveNodeItem_var,MetaAdapterFactory.getContainmentLink(0x9882f4ad195546feL,0x826994189e5dbbf2L,0x67236d4a5830221eL,0x2b3f57492c165c59L,"specialization"))).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode it){
          MoveNodeSpecialization_BehaviorDescriptor.doDeprecateOldNode_id1NHZk5hiKRu.invoke(it,mySourceModule.getRepository());
        }
      }
);
    }
  }
}
