{
  List<SNode> layouts=SModelOperations.getRoots(_context.getModel(),"jetbrains.mps.build.packaging.structure.Layout");
  for (  SNode layout : ListSequence.fromList(layouts)) {
    if (!(SPropertyOperations.getBoolean(layout,"compile"))) {
      continue;
    }
    List<SNode> modules=SNodeOperations.getDescendants(layout,"jetbrains.mps.build.packaging.structure.Module",false,new String[]{});
    Map<SModule,List<SNode>> map=MapSequence.fromMap(new LinkedHashMap<SModule,List<SNode>>(16,(float)0.75,false));
    for (    SNode module : ListSequence.fromList(modules)) {
      SModule imodule=Module_Behavior.call_getModule_1213877515148(module);
      if (imodule == null) {
        _context.showErrorMessage(module,"Missing module " + SPropertyOperations.getString(module,"name") + ".");
        continue;
      }
      if ((imodule instanceof DevKit) || !(SModuleOperations.isCompileInMps(imodule))) {
        continue;
      }
      List<SNode> modulesForIModule=MapSequence.fromMap(map).get(imodule);
      if (modulesForIModule == null) {
        modulesForIModule=new ArrayList<SNode>();
        MapSequence.fromMap(map).put(imodule,modulesForIModule);
      }
      ListSequence.fromList(modulesForIModule).addElement(module);
    }
    Set<SModule> modulesToProcess=MapSequence.fromMap(map).keySet();
    Set<SModule> modulesCopy=SetSequence.fromSet(new LinkedHashSet<SModule>());
    SetSequence.fromSet(modulesCopy).addSequence(SetSequence.fromSet(modulesToProcess).sort(new ISelector<SModule,String>(){
      public String select(      SModule it){
        return it.getModuleName();
      }
    }
,true));
    List<Set<SModule>> sm=(List<Set<SModule>>)StronglyConnectedModules.getInstance().getStronglyConnectedComponents(modulesCopy);
    SNode lastCycle=null;
    List<SNode> result=ListSequence.fromList(new ArrayList<SNode>(ListSequence.fromList(sm).count()));
    for (    Set<SModule> moduleSet : ListSequence.fromList(sm)) {
      SNode cycle=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.ModuleCycle",null);
      ListSequence.fromList(result).addElement(cycle);
      if (lastCycle != null) {
        SNode ref=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.ModuleCycleReference",null);
        SLinkOperations.setTarget(ref,"cycle",lastCycle,false);
        ListSequence.fromList(SLinkOperations.getTargets(cycle,"dependency",true)).addElement(ref);
      }
      lastCycle=cycle;
      Iterable<SModule> sortedModuleSet=SetSequence.fromSet(moduleSet).sort(new ISelector<SModule,String>(){
        public String select(        SModule it){
          return it.getModuleName();
        }
      }
,true);
      SPropertyOperations.set(cycle,"name",_context.createUniqueName("cycle." + Sequence.fromIterable(sortedModuleSet).first().getModuleName(),layout));
      for (      SModule imodule : Sequence.fromIterable(sortedModuleSet)) {
        List<SNode> modulesForIModule=MapSequence.fromMap(map).get(imodule);
        for (        SNode module : ListSequence.fromList(modulesForIModule)) {
          SNode ref=SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.NewModuleReference",null);
          SLinkOperations.setTarget(ref,"module",module,false);
          ListSequence.fromList(SLinkOperations.getTargets(cycle,"moduleReference",true)).addElement(ref);
        }
      }
    }
    ListSequence.fromList(SLinkOperations.getTargets(layout,"cycle",true)).addSequence(ListSequence.fromList(result).sort(new ISelector<SNode,String>(){
      public String select(      SNode it){
        return SPropertyOperations.getString(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(it,"moduleReference",true)).first(),"module",false),"name");
      }
    }
,true));
  }
}
