{
  List<SNode> layouts=SModelOperations.getRoots(_context.getModel(),"jetbrains.mps.build.packaging.structure.Layout");
  for (  SNode layout : ListSequence.fromList(layouts)) {
    Map<SModule,SNode> modules=MapSequence.fromMap(new HashMap<SModule,SNode>());
    for (    SNode m : ListSequence.fromList(Layout_Behavior.call_getModules_1213877228340(layout)).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.build.packaging.structure.PluginModule"));
      }
    }
)) {
      SModule module=Module_Behavior.call_getModule_1213877515148(m);
      if (module == null) {
        _context.showErrorMessage(m,"module is not found: " + SPropertyOperations.getString(m,"name") + "("+ SPropertyOperations.getString(m,"id")+ ")");
        continue;
      }
      MapSequence.fromMap(modules).put(module,m);
    }
    Map<SModule,Iterable<SModule>> missing=CheckFullDependencyUtil.checkFullDependency(modules);
    for (    SModule module : SetSequence.fromSet(MapSequence.fromMap(missing).keySet())) {
      String moduleFqName=module.getModuleName();
      for (      SModule dependent : Sequence.fromIterable(MapSequence.fromMap(missing).get(module))) {
        String errorText="Required module " + dependent.getModuleName() + " is absent in packaging script model "+ _context.getOriginalInputModel()+ ". Used by module "+ moduleFqName+ ".";
        System.err.println(errorText);
        if (moduleFqName.startsWith("jetbrains.mps")) {
          _context.showErrorMessage(null,errorText);
        }
 else {
          _context.showWarningMessage(null,errorText);
        }
      }
    }
  }
}
