{
  this.addNodeById("1230052406554");
  this.addNodeById("1230052406581");
{
    SNode c_ref=SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,"jetbrains.mps.baseLanguage.structure.VariableReference")));
    SLinkOperations.setTarget(c_ref,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e98L,0xf8cc6bf960L,"variableDeclaration"),SNodeOperations.cast(this.getNodeById("1230052406612"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7efL,"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")));
    ExtractMethodRefactoringParameters params=ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406572"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,"jetbrains.mps.baseLanguage.structure.ReturnStatement"))));
    ListSequence.fromList(params.getParameters()).getElement(0).setSelected(false);
    MethodParameter p2=ListSequence.fromList(params.getParameters()).getElement(1);
    MethodParameter p1=ListSequence.fromList(params.getParameters()).getElement(2);
    ListSequence.fromList(params.getParameters()).setElement(1,p1);
    ListSequence.fromList(params.getParameters()).setElement(2,p2);
    p1.setName("p1");
    p2.setName("p2");
    params.setName("foo");
    ExtractMethodRefactoring ref=ExtractMethodFactory.createRefactoring(params);
    ref.doRefactor();
{
      List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406555"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
      List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(this.getNodeById("1230052406582"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c108ca66L,"jetbrains.mps.baseLanguage.structure.ClassConcept")));
      Assert.assertNull("nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",NodesMatcher.matchNodes(nodesBefore,nodesAfter));
    }
  }
}
