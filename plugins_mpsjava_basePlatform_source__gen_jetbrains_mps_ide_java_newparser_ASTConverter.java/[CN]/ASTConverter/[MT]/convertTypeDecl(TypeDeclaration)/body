{
  SNode cls;
  final Map<SNode,Integer> memberStartPositions=MapSequence.fromMap(new HashMap<SNode,Integer>());
  boolean isAnonymous=x.allocation != null;
  if (isAnonymous) {
    cls=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnonymousClass",null);
  }
 else {
switch (TypeDeclaration.kind(x.modifiers)) {
case TypeDeclaration.CLASS_DECL:
      cls=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept",null);
    break;
case TypeDeclaration.INTERFACE_DECL:
  cls=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Interface",null);
break;
case TypeDeclaration.ENUM_DECL:
cls=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumClass",null);
break;
case TypeDeclaration.ANNOTATION_TYPE_DECL:
cls=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Annotation",null);
break;
default :
throw new JavaParseException("Unknown type declaration type");
}
}
ASTConverter prefixedConverter=this;
if (!(isAnonymous)) {
SPropertyOperations.set(cls,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"),new String(x.name));
SLinkOperations.setTarget(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1178549954367l,1178549979242l,"visibility"),convertVisibility(x.modifiers));
if (SNodeOperations.isInstanceOf(cls,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
SPropertyOperations.set(SNodeOperations.cast(cls,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept")),MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,4980874121082273661l,"isStatic"),"" + (flagSet(x.modifiers,ClassFileConstants.AccStatic)));
}
 else if (SNodeOperations.isInstanceOf(cls,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface"))) {
SPropertyOperations.set(cls,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,521412098689998745l,"nonStatic"),"" + (true));
}
if (myOnlyStubs) {
String nodeId=getState().getIdPrefix() + SPropertyOperations.getString(cls,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
((jetbrains.mps.smodel.SNode)cls).setId(new SNodeId.Foreign(nodeId));
prefixedConverter=this.withIdPrefix(SPropertyOperations.getString(cls,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name")) + ".");
}
}
ASTConverter childConverter=prefixedConverter;
childConverter=childConverter.convertTypeVars(x.typeParameters,cls);
if (x.memberTypes != null) {
for (TypeDeclaration innerTyp : x.memberTypes) {
try {
SNode nested=childConverter.convertTypeDecl(innerTyp);
SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member")).add(nested);
MapSequence.fromMap(memberStartPositions).put(nested,innerTyp.sourceStart);
}
  finally {
}
}
}
childConverter.convertAnnotations(x.annotations,cls);
{
SNode claz=cls;
if (SNodeOperations.isInstanceOf(claz,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,"jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
SLinkOperations.setTarget(claz,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1165602531693l,"superclass"),SNodeOperations.cast(childConverter.convertTypeReference(x.superclass),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
if (x.superInterfaces != null) {
for (TypeReference i : x.superInterfaces) {
ListSequence.fromList(SLinkOperations.getChildren(claz,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1095933932569l,"implementedInterface"))).addElement(SNodeOperations.cast(childConverter.convertTypeReference(i),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
}
}
SPropertyOperations.set(claz,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1075300953594l,"abstractClass"),"" + (flagSet(x.modifiers,ClassFileConstants.AccAbstract)));
SPropertyOperations.set(claz,MetaAdapterFactory.getProperty(new UUID(-935030926396207931l,-6610165693999523818l),1068390468198l,1221565133444l,"isFinal"),"" + (flagSet(x.modifiers,ClassFileConstants.AccFinal)));
}
}
{
SNode iface=cls;
if (SNodeOperations.isInstanceOf(iface,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,"jetbrains.mps.baseLanguage.structure.Interface"))) {
if (x.superInterfaces != null) {
for (TypeReference i : x.superInterfaces) {
ListSequence.fromList(SLinkOperations.getChildren(iface,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107796713796l,1107797138135l,"extendedInterface"))).addElement(SNodeOperations.cast(childConverter.convertTypeReference(i),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,"jetbrains.mps.baseLanguage.structure.ClassifierType")));
}
}
}
}
{
SNode enm=cls;
if (SNodeOperations.isInstanceOf(enm,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1083245097125l,"jetbrains.mps.baseLanguage.structure.EnumClass"))) {
if (x.fields != null) {
for (FieldDeclaration f : x.fields) {
if (!(isEnumConstant(f))) {
continue;
}
SNode enumConst=convertEnumConst(f);
SLinkOperations.getChildren(enm,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1083245097125l,1083245396908l,"enumConstant")).add(enumConst);
MapSequence.fromMap(memberStartPositions).put(SNodeOperations.cast(enumConst,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1178285077437l,"jetbrains.mps.baseLanguage.structure.ClassifierMember")),f.sourceStart);
}
}
}
}
if (x.fields != null) {
for (FieldDeclaration f : x.fields) {
if (isEnumConstant(f)) {
continue;
}
SNode mem=childConverter.convertField(cls,f,true);
MapSequence.fromMap(memberStartPositions).put(mem,f.sourceStart);
}
}
if (x.methods != null) {
for (AbstractMethodDeclaration method : x.methods) {
if (method.isDefaultConstructor()) {
continue;
}
SNode mem=childConverter.convertMethod(cls,method,true);
MapSequence.fromMap(memberStartPositions).put(SNodeOperations.cast(mem,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1178285077437l,"jetbrains.mps.baseLanguage.structure.ClassifierMember")),method.sourceStart);
}
}
if (x.javadoc != null) {
AttributeOperations.createAndSetAttrbiute(cls,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment"),"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment");
MapSequence.fromMap(myJavadocs).put(x.javadoc.sourceStart,AttributeOperations.getAttribute(cls,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")));
}
if (SNodeOperations.isInstanceOf(cls,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206331916l,"jetbrains.mps.baseLanguage.structure.Annotation"))) {
Iterable<SNode> annoMethods=ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).where(new IWhereFilter<SNode>(){
public boolean accept(SNode it){
return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206574119l,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"));
}
}
).select(new ISelector<SNode,SNode>(){
public SNode select(SNode it){
return SNodeOperations.cast(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206574119l,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"));
}
}
);
ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(cls,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206331916l,"jetbrains.mps.baseLanguage.structure.Annotation")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,1107880067339l,"method"))).addSequence(Sequence.fromIterable(annoMethods));
ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).removeWhere(new IWhereFilter<SNode>(){
public boolean accept(SNode it){
return SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1188206574119l,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"));
}
}
);
}
List<SNode> sortedMembers=ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).sort(new ISelector<SNode,Integer>(){
public Integer select(SNode it){
return MapSequence.fromMap(memberStartPositions).get(it);
}
}
,true).toListSequence();
ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).clear();
ListSequence.fromList(SLinkOperations.getChildren(cls,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1107461130800l,5375687026011219971l,"member"))).addSequence(ListSequence.fromList(sortedMembers));
return cls;
}
