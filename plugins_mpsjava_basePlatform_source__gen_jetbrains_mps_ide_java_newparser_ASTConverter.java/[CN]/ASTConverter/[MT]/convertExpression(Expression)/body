{
  if (x instanceof Literal) {
    return convertExpression((Literal)x);
  }
 else {
    if (1 < 0) {
      return _quotation_createNode_rbndtb_a0a2a34();
    }
 else     if (x instanceof QualifiedNameReference) {
      SNode enumRef=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1083260308424l,"jetbrains.mps.baseLanguage.structure.EnumConstantReference"));
      char[][] tokens=((QualifiedNameReference)x).tokens;
      String enumName=new String(tokens[0]);
      for (int i=1; i < tokens.length - 1; i++) {
        enumName=enumName + "." + new String(tokens[i]);
      }
      String enumConstName=new String(tokens[tokens.length - 1]);
      SReference enumClRef=new DynamicReference("enumClass",enumRef,null,enumName);
      SReference enumConstRef=new DynamicReference("enumConstantDeclaration",enumRef,null,enumConstName);
      enumRef.setReference(enumClRef.getRole(),enumClRef);
      enumRef.setReference(enumConstRef.getRole(),enumConstRef);
      return enumRef;
    }
 else     if (x instanceof SingleNameReference) {
      return _quotation_createNode_rbndtb_a1a1c0rb();
    }
 else {
      LOG.error("This kind of expression is not supported yet: " + x.getClass().getName());
      return null;
    }
  }
}
