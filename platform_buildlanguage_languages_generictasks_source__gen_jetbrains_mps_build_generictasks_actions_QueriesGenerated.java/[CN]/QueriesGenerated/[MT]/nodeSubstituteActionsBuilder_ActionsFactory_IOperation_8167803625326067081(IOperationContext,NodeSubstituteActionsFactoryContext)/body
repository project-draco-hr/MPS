{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.build.generictasks.structure.CustomNestedMethodCall");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Calculable calc=new Calculable(){
        public Object calculate(){
          return Sequence.fromIterable(AbstractMethodCall_Behavior.call_getMethods_8167803625326067118(SConceptOperations.createNewNode("jetbrains.mps.build.generictasks.structure.CustomNestedMethodCall",null),SLinkOperations.getTarget(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),_context.getModel(),operationContext.getScope())).toListSequence();
        }
      }
;
      Iterable<SNode> queryResult=(Iterable)calc.calculate();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter(),operationContext.getScope()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode call=SConceptOperations.createNewNode("jetbrains.mps.build.generictasks.structure.CustomNestedMethodCall",null);
              SLinkOperations.setTarget(call,"methodDeclaration",(item),false);
              return call;
            }
          }
);
        }
      }
    }
  }
  return result;
}
