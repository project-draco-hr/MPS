{
  List<SearchResult<ModelCheckerIssue>> results=ListSequence.<SearchResult<ModelCheckerIssue>>fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  for (  SNode node : ListSequence.<SNode>fromList(SModelOperations.getNodes(model,null))) {
    if (!(progressContext.checkAndUpdateIndicator("Checking " + SModelOperations.getModelName(model) + " for valid search scopes in references..."))) {
      break;
    }
    SNode concept=SNodeOperations.getConceptDeclaration(node);
    for (    SReference ref : Sequence.<SReference>fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>(){
      public boolean accept(      SReference it){
        return ModelCheckerUtils.isDeclaredLink(SLinkOperations.findLinkDeclaration(it),false) && (SLinkOperations.getTargetNode(it) != null);
      }
    }
)) {
      SNode targetNode=SLinkOperations.getTargetNode(ref);
      try {
        SNode genuineLinkDeclaration=((SNode)BehaviorManager.getInstance().invoke(Object.class,SNodeOperations.cast(SLinkOperations.findLinkDeclaration(ref),"jetbrains.mps.lang.structure.structure.LinkDeclaration"),"call_getGenuineLink_1213877254523",new Class[]{SNode.class}));
        IModule thisModelModule=model.getModelDescriptor().getModule();
        if (checkScope(concept,node,targetNode,genuineLinkDeclaration,operationContext)) {
        }
 else         if (checkScope(concept,node,targetNode,genuineLinkDeclaration,new ModuleContext(thisModelModule,operationContext.getProject()))) {
        }
 else {
          addIssue(results,node,"Reference in role \"" + SPropertyOperations.getString(genuineLinkDeclaration,"role") + "\" is out of search scope",ModelChecker.SEVERITY_WARNING,"wrong scope",null);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        addIssue(results,node,"Exception \"" + e.getMessage() + "\" during search scope checking","scope exception",ModelChecker.SEVERITY_WARNING,null);
      }
    }
  }
  return results;
}
