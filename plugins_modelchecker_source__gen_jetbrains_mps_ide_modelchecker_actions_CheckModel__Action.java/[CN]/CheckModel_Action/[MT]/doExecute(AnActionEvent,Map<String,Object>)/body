{
  try {
    List<SModel> modelsToCheck=new ArrayList<SModel>();
    if (((List<SModel>)MapSequence.fromMap(_params).get("models")) != null) {
      modelsToCheck.addAll(((List<SModel>)MapSequence.fromMap(_params).get("models")));
    }
    if (((SModel)MapSequence.fromMap(_params).get("model")) != null && !(modelsToCheck.contains(((SModel)MapSequence.fromMap(_params).get("model"))))) {
      modelsToCheck.add(((SModel)MapSequence.fromMap(_params).get("model")));
    }
    if (modelsToCheck.isEmpty()) {
      return;
    }
    for (    SModel model : modelsToCheck.toArray(new SModel[modelsToCheck.size()])) {
      String name=SNodeOperations.getModelLongName(model);
      boolean isStub=SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(model));
      for (      SModel innerModel : Sequence.fromIterable(model.getModule().getModels())) {
        if (SNodeOperations.getModelLongName(innerModel).startsWith(name + ".")) {
          if (isStub == SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(innerModel))) {
            modelsToCheck.add(innerModel);
          }
        }
      }
    }
    if (modelsToCheck.size() > 1) {
      ModelCheckerTool.getInstance(((Project)MapSequence.fromMap(_params).get("project"))).checkModels(modelsToCheck,((IOperationContext)MapSequence.fromMap(_params).get("operationContext")),true);
    }
 else {
      ModelCheckerTool.getInstance(((Project)MapSequence.fromMap(_params).get("project"))).checkModel(modelsToCheck.get(0),((IOperationContext)MapSequence.fromMap(_params).get("operationContext")),true);
    }
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "CheckModel",t);
    }
  }
}
