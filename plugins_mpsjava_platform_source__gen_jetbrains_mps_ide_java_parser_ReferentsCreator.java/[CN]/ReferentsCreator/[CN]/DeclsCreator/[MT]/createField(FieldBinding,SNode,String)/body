{
  SNode type=null;
  if (binding != null) {
    type=createType(binding.type);
  }
  SNode field;
  if (binding == null || !(binding.isStatic())) {
    SNode fieldDeclaration=SModelOperations.createNewNode(myReferentsCreator.myCurrentModel,null,"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    if (binding != null) {
      SPropertyOperations.set(fieldDeclaration,"isVolatile","" + (binding.isVolatile()));
    }
    assert(SNodeOperations.isInstanceOf(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"));
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept"),"field",true)).addElement(fieldDeclaration);
    field=fieldDeclaration;
  }
 else {
    SNode staticFieldDeclaration=SModelOperations.createNewNode(myReferentsCreator.myCurrentModel,null,"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
    field=staticFieldDeclaration;
    ListSequence.fromList(SLinkOperations.getTargets(enclosingClassifier,"staticField",true)).addElement(staticFieldDeclaration);
  }
  if (binding != null) {
    SPropertyOperations.set(field,"isFinal","" + (binding.isFinal()));
    SLinkOperations.setTarget(field,"type",type,true);
    SLinkOperations.setTarget(SNodeOperations.cast(field,"jetbrains.mps.baseLanguage.structure.ClassifierMember"),"visibility",getFieldVisibility(binding),true);
    myReferentsCreator.myBindingMap.put(binding,field);
  }
  SPropertyOperations.set(field,"name",name);
  return field;
}
