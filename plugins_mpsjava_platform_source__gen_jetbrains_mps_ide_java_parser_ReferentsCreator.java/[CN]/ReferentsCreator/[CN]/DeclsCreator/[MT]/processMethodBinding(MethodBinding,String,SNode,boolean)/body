{
  SModel model=myReferentsCreator.myCurrentModel;
  SNode result;
  if (b != null && b.isStatic()) {
    SNode staticMethodDeclaration=SModelOperations.createNewNode(model,null,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    SLinkOperations.setTarget(staticMethodDeclaration,"visibility",getMethodVisibility(b),true);
    if (SNodeOperations.isInstanceOf(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      SNode classConcept=SNodeOperations.cast(enclosingClassifier,"jetbrains.mps.baseLanguage.structure.ClassConcept");
      ListSequence.fromList(SLinkOperations.getTargets(classConcept,"staticMethod",true)).addElement(staticMethodDeclaration);
    }
    result=staticMethodDeclaration;
  }
 else {
    SNode instanceMethodDeclaration=(isAnnotation ? SModelOperations.createNewNode(model,null,"jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration") : SModelOperations.createNewNode(model,null,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    if (b != null) {
      SPropertyOperations.set(instanceMethodDeclaration,"isAbstract","" + (b.isAbstract()));
      SLinkOperations.setTarget(instanceMethodDeclaration,"visibility",getMethodVisibility(b),true);
    }
    ListSequence.fromList(SLinkOperations.getTargets(enclosingClassifier,"method",true)).addElement(instanceMethodDeclaration);
    result=instanceMethodDeclaration;
  }
  if (b != null) {
    myReferentsCreator.myBindingMap.put(b,result);
    SPropertyOperations.set(result,"isFinal","" + (b.isFinal()));
  }
  SPropertyOperations.set(result,"name",name);
  return result;
}
