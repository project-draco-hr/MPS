{
  final Map<GlobalSNodeId,List<GlobalSNodeId>> result=MapSequence.fromMap(new HashMap<GlobalSNodeId,List<GlobalSNodeId>>());
  ModelAccess.instance().runIndexing(new Runnable(){
    public void run(){
      SModel model=BaseSNodeDescriptorIndex.doModelParsing(inputData);
      for (      final SNode nextNode : SModelOperations.getNodes(model,null)) {
        ModelAccess.instance().runReadAction(new Runnable(){
          public void run(){
            if (SNodeOperations.isInstanceOf(nextNode,"jetbrains.mps.baseLanguage.structure.ClassConcept")) {
              SNode classNode=(SNode)nextNode;
              if (SLinkOperations.getTarget(classNode,"superclass",true) != null) {
                safeMap(SLinkOperations.getTarget(classNode,"superclass",true),classNode);
              }
              for (              SNode implementedInterface : ListSequence.fromList(SLinkOperations.getTargets(classNode,"implementedInterface",true))) {
                safeMap(implementedInterface,classNode);
              }
              if (SNodeOperations.isInstanceOf(classNode,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
                safeMap(classNode.getReference(SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.AnonymousClass","classifier"),"role")),classNode);
              }
            }
 else             if (SNodeOperations.isInstanceOf(nextNode,"jetbrains.mps.baseLanguage.structure.Interface")) {
              SNode interfaceNode=SNodeOperations.cast(nextNode,"jetbrains.mps.baseLanguage.structure.Interface");
              for (              SNode extendedInterface : ListSequence.fromList(SLinkOperations.getTargets(interfaceNode,"extendedInterface",true))) {
                safeMap(extendedInterface,interfaceNode);
              }
            }
          }
        }
);
      }
    }
    private void safeMap(    SNode classifierType,    SNode node){
      safeMap(classifierType.getReference(SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType","classifier"),"role")),node);
    }
    private void safeMap(    SReference reference,    SNode node){
      GlobalSNodeId key=GlobalSNodeId.createSNodeId(reference);
      if (key == null) {
        return;
      }
      List<GlobalSNodeId> successors=MapSequence.fromMap(result).get(key);
      if (successors == null) {
        successors=ListSequence.fromList(new ArrayList<GlobalSNodeId>());
        MapSequence.fromMap(result).put(key,successors);
      }
      ListSequence.fromList(successors).addElement(new GlobalSNodeId(node));
    }
  }
);
  return result;
}
