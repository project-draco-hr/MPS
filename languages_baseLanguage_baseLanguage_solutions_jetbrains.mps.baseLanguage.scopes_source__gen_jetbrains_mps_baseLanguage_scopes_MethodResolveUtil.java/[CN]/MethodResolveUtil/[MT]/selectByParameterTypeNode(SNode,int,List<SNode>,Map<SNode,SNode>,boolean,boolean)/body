{
  List<SNode> result=new ArrayList<SNode>();
  StructuralNodeMap<Set<SNode>> typesOfParamToMethods=new StructuralNodeMap<Set<SNode>>();
  SubtypingManager subtypingManager=TypeChecker.getInstance().getSubtypingManager();
  for (  SNode candidate : candidates) {
    boolean varArg=false;
    List<SNode> params=SLinkOperations.getChildren(candidate,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"));
    SNode type=SLinkOperations.getTarget(ListSequence.fromList(params).last(),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type"));
    if (SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11c08f42e7bL,"jetbrains.mps.baseLanguage.structure.VariableArityType"))) {
      if (ListSequence.fromList(params).count() - 1 <= indexOfArg) {
        varArg=true;
      }
    }
 else {
      if (ListSequence.fromList(params).count() <= indexOfArg) {
        continue;
      }
    }
    Set<SNode> methodTypeVariableDecls=SetSequence.fromSetWithValues(new HashSet<SNode>(),SLinkOperations.getChildren(candidate,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration")));
    SNode typeOfParam=(varArg ? SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11c08f42e7bL,"jetbrains.mps.baseLanguage.structure.VariableArityType")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11c08f42e7bL,0x11c08f5f38cL,"componentType")) : SLinkOperations.getTarget(ListSequence.fromList(params).getElement(indexOfArg),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type")));
    if ((typeOfParam == null)) {
      continue;
    }
    typeOfParam=GenericTypesUtil.getTypeWithResolvedTypeVars(typeOfParam,typeByTypeVar);
    typeOfParam=GenericTypesUtil.methodParamTypeWoutTypeVars(typeOfParam,methodTypeVariableDecls);
    if (subtypingManager.isSubtype(typeOfArg,typeOfParam,isWeak)) {
      Set<SNode> methods=typesOfParamToMethods.get(typeOfParam);
      if (methods == null) {
        methods=new HashSet<SNode>();
        typesOfParamToMethods.put(typeOfParam,methods);
      }
      methods.add(candidate);
      result.add(candidate);
    }
  }
  if (mostSpecific) {
    Set<SNode> goodParamTypes=typesOfParamToMethods.keySet();
    Set<SNode> mostSpecificTypes=SubtypingUtil.mostSpecificTypes(goodParamTypes);
    if (!(mostSpecificTypes.isEmpty())) {
      result=new ArrayList<SNode>();
      for (      SNode mostSpecificType : mostSpecificTypes) {
        result.addAll(typesOfParamToMethods.get(mostSpecificType));
      }
    }
  }
  return result;
}
