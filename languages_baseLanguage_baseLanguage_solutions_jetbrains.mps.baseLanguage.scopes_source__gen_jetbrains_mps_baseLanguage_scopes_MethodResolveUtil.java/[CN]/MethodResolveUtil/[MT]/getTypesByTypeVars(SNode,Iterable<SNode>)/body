{
  Map<SNode,SNode> typeByTypeVar=MapSequence.fromMap(new HashMap<SNode,SNode>());
  for (  IMapping<SNode,SNode> elem : MapSequence.fromMap(ClassifierScopeUtils.resolveClassifierTypeVars(classifier))) {
    typeByTypeVar.put(elem.key(),elem.value());
  }
  Iterator<SNode> typeParms=Sequence.fromIterable(typeParameters).iterator();
  for (  SNode typeVar : ListSequence.fromList(SLinkOperations.getChildren(classifier,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102463b447aL,0x102463bb98eL,"typeVariableDeclaration")))) {
    if (!(typeParms.hasNext())) {
      break;
    }
    SNode typeParm=SNodeOperations.as(typeParms.next(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506dL,"jetbrains.mps.baseLanguage.structure.Type"));
    if ((typeParm == null) || SLinkOperations.getTarget(SNodeOperations.as(typeParm,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,"jetbrains.mps.baseLanguage.structure.TypeVariableReference")),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x102467229d8L,0x1024673a581L,"typeVariableDeclaration")) == typeVar) {
      continue;
    }
    MapSequence.fromMap(typeByTypeVar).put(typeVar,SNodeOperations.cast(typeParm,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37f506dL,"jetbrains.mps.baseLanguage.structure.Type")));
  }
  return typeByTypeVar;
}
