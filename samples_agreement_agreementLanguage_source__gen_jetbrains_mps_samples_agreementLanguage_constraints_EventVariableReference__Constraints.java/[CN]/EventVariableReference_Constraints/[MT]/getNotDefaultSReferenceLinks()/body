{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102ea8a3c37L,0x102ea8aa283L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102ea8a3c37L,0x102ea8aa283L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode eventType=SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102dbe8f094L,"jetbrains.mps.samples.agreementLanguage.structure.Event"),true,false),MetaAdapterFactory.getReferenceLink(0x144f7012c2d543beL,0xbe2b4bfb7dff6503L,0x102dbe8f094L,0x102dc111024L,"type"));
          return new SubnodesSearchScope(eventType);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_lcwlw6_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
