{
  if (myState.getAvailableText() != null) {
    return;
  }
  String lostTest=myState.getLostClass();
  String lostMethod=myState.getLostMethod();
  String test=myState.getCurrentClass();
  String method=myState.getCurrentMethod();
  final Wrappers._T<TestMethodTreeNode> methodNode=new Wrappers._T<TestMethodTreeNode>();
  if (lostTest != null && lostMethod != null) {
    methodNode.value=get(lostTest,lostMethod);
    TestCaseTreeNode testCaseNode=get(lostTest);
    if (methodNode.value != null && testCaseNode != null) {
      updateState(methodNode.value,testCaseNode,TestState.ERROR);
    }
  }
 else {
    TestCaseTreeNode testCaseNode=get(test);
    methodNode.value=get(test,method);
    if (testCaseNode != null) {
      if (myState.isTerminated()) {
        updateState(methodNode.value,testCaseNode,TestState.TERMINATED);
        myAnimator.stopMovie();
      }
 else       if (TestEvent.START_TEST_PREFIX.equals(myState.getToken())) {
        updateState(methodNode.value,testCaseNode,TestState.IN_PROGRESS);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            myAnimator.scheduleRepaint();
          }
        }
);
        if (UnitTestOptions.isTrackRunning()) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              setCurrentNode(methodNode.value);
            }
          }
);
        }
      }
 else       if (TestEvent.END_TEST_PREFIX.equals(myState.getToken())) {
        if (methodNode.value != null && TestState.IN_PROGRESS.equals(methodNode.value.getState())) {
          updateState(methodNode.value,testCaseNode,TestState.PASSED);
        }
      }
 else       if (TestEvent.FAILURE_TEST_PREFIX.equals(myState.getToken())) {
        updateState(methodNode.value,testCaseNode,TestState.FAILED);
      }
 else       if (TestEvent.ERROR_TEST_PREFIX.equals(myState.getToken())) {
        if (methodNode.value != null) {
          methodNode.value.setState(TestState.ERROR);
        }
        updateState(methodNode.value,testCaseNode,TestState.ERROR);
      }
    }
  }
  if (isFailed(methodNode.value) && UnitTestOptions.isSelectFirstFailded()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        selectFirstDefectNode();
      }
    }
);
  }
  if (UnitTestOptions.isHidePassed()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        hidePassed(true);
      }
    }
);
  }
}
