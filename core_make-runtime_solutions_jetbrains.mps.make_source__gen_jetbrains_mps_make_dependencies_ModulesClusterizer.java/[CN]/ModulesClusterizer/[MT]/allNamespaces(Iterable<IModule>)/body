{
  final Set<String> namespaces=SetSequence.fromSet(new HashSet<String>());
  Set<TemplateModule> seen=SetSequence.fromSet(new HashSet<TemplateModule>());
  Queue<String> nsq=QueueSequence.fromQueue(new LinkedList<String>());
  for (  IModule mod : modules) {
    if (mod instanceof Generator) {
      Iterable<SModelDescriptor> genModels=mod.getOwnModelDescriptors();
      QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(genModels).translate(new ITranslator2<SModelDescriptor,String>(){
        public Iterable<String> translate(        SModelDescriptor smd){
          return ModelContentUtil.getUsedLanguageNamespaces(smd.getSModel(),false);
        }
      }
).where(new IWhereFilter<String>(){
        public boolean accept(        String ns){
          return !(SetSequence.fromSet(namespaces).contains(ns));
        }
      }
));
    }
 else {
      Iterable<Language> langs=mod.getDependenciesManager().getAllUsedLanguages();
      QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(langs).select(new ISelector<Language,String>(){
        public String select(        Language lang){
          return lang.getModuleDescriptor().getNamespace();
        }
      }
).where(new IWhereFilter<String>(){
        public boolean accept(        String ns){
          return !(SetSequence.fromSet(namespaces).contains(ns));
        }
      }
));
    }
    while (QueueSequence.fromQueue(nsq).isNotEmpty()) {
      String ns=QueueSequence.fromQueue(nsq).removeFirstElement();
      LanguageRuntime lr=LanguageRegistry.getInstance().getLanguage(ns);
      if (lr == null) {
        LOG.debug("language not found for namespace " + ns);
        continue;
      }
      if (!(SetSequence.fromSet(namespaces).contains(ns))) {
        SetSequence.fromSet(namespaces).addElement(ns);
        Collection<TemplateModule> gens=lr.getGenerators();
        if (gens != null) {
          for (          TemplateModule tm : gens) {
            if (tm == null) {
              continue;
            }
            if (!(SetSequence.fromSet(seen).contains(tm))) {
              QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(tm.getUsedLanguages()));
              SetSequence.fromSet(seen).addElement(tm);
            }
          }
        }
      }
    }
  }
  return SetSequence.fromSet(namespaces).toListSequence();
}
