{
  Set<String> namespaces=SetSequence.<String>fromSet(new HashSet<String>());
  Set<TemplateModule> seen=SetSequence.<TemplateModule>fromSet(new HashSet<TemplateModule>());
  Queue<String> nsq=QueueSequence.<String>fromQueue(new LinkedList<String>());
  for (  IModule mod : modules) {
    Iterable<Language> langs=mod.getDependenciesManager().getAllUsedLanguages();
    QueueSequence.fromQueue(nsq).addSequence(Sequence.<Language>fromIterable(langs).<String>select(new ISelector<Language,String>(){
      public String select(      Language it){
        return it.getModuleDescriptor().getNamespace();
      }
    }
));
    while (QueueSequence.<String>fromQueue(nsq).isNotEmpty()) {
      String ns=QueueSequence.fromQueue(nsq).removeFirstElement();
      LanguageRuntime lr=LanguageRegistry.getInstance().getLanguage(ns);
      if (lr == null) {
        LOG.debug("language not found for namespace " + ns);
        continue;
      }
      if (!(SetSequence.<String>fromSet(namespaces).contains(ns))) {
        SetSequence.fromSet(namespaces).addElement(ns);
        Collection<TemplateModule> gens=lr.getGenerators();
        if (gens != null) {
          for (          TemplateModule tm : gens) {
            if (!(SetSequence.<TemplateModule>fromSet(seen).contains(tm))) {
              QueueSequence.fromQueue(nsq).addSequence(Sequence.<String>fromIterable(tm.getUsedLanguages()));
              SetSequence.fromSet(seen).addElement(tm);
            }
          }
        }
      }
    }
  }
  return SetSequence.<String>fromSet(namespaces).toListSequence();
}
