{
  final List<SLanguage> namespaces=ListSequence.fromList(new ArrayList<SLanguage>());
  Set<GeneratorRuntime> seen=SetSequence.fromSet(new HashSet<GeneratorRuntime>());
  Queue<SLanguage> nsq=QueueSequence.fromQueue(new LinkedList<SLanguage>());
  for (  SModule mod : modules) {
    Iterable<SLanguage> usedLanguages;
    if (mod instanceof Generator) {
      Iterable<SModel> genModels=mod.getModels();
      usedLanguages=Sequence.fromIterable(genModels).translate(new ITranslator2<SModel,SLanguage>(){
        public Iterable<SLanguage> translate(        SModel smd){
          return ModelContentUtil.getUsedLanguages(smd);
        }
      }
);
    }
 else {
      usedLanguages=new SLanguageHierarchy(myLanguageRegistry,mod.getUsedLanguages()).getExtended();
    }
    QueueSequence.fromQueue(nsq).addSequence(Sequence.fromIterable(usedLanguages).where(new IWhereFilter<SLanguage>(){
      public boolean accept(      SLanguage ns){
        return !(ListSequence.fromList(namespaces).contains(ns));
      }
    }
));
    while (QueueSequence.fromQueue(nsq).isNotEmpty()) {
      SLanguage ns=QueueSequence.fromQueue(nsq).removeFirstElement();
      LanguageRuntime lr=myLanguageRegistry.getLanguage(ns);
      if (lr == null) {
        LOG.debug("language not found for namespace " + ns);
        continue;
      }
      if (!(ListSequence.fromList(namespaces).contains(ns))) {
        ListSequence.fromList(namespaces).addElement(ns);
        Collection<? extends GeneratorRuntime> gens=lr.getGenerators();
        if (gens != null) {
          for (          GeneratorRuntime gr : gens) {
            if (gr instanceof TemplateModule == false) {
              continue;
            }
            if (!(SetSequence.fromSet(seen).contains(gr))) {
              QueueSequence.fromQueue(nsq).addSequence(CollectionSequence.fromCollection(((TemplateModule)gr).getTargetLanguages()));
              SetSequence.fromSet(seen).addElement(gr);
            }
          }
        }
      }
    }
  }
  return namespaces;
}
