{
  final Iterable<MResource> mres=Sequence.fromIterable(res).where(new IWhereFilter<IResource>(){
    public boolean accept(    IResource r){
      return r instanceof MResource;
    }
  }
).select(new ISelector<IResource,MResource>(){
    public MResource select(    IResource r){
      return ((MResource)r);
    }
  }
).toListSequence();
  Iterable<SModule> mods=Sequence.fromIterable(mres).select(new ISelector<MResource,SModule>(){
    public SModule select(    MResource r){
      return r.module();
    }
  }
);
  Iterable<IResource> rest=Sequence.fromIterable(((Iterable<IResource>)res)).subtract(Sequence.fromIterable(mres));
  ModulesCluster clst=new ModulesCluster(mods);
  clst.collectRequired(mods);
  Iterable<? extends Iterable<SModule>> moduleBuildOrder=clst.buildOrder();
  Iterable<? extends Iterable<MResource>> mresBuildOrder=Sequence.fromIterable(moduleBuildOrder).select(new ISelector<Iterable<SModule>,ISequence<MResource>>(){
    public ISequence<MResource> select(    final Iterable<SModule> cl){
      return Sequence.fromIterable(mres).where(new IWhereFilter<MResource>(){
        public boolean accept(        MResource r){
          return Sequence.fromIterable(cl).contains(r.module());
        }
      }
);
    }
  }
);
  List<Cluster> result=ListSequence.fromList(new ArrayList<Cluster>());
  for (  Iterable<MResource> s : mresBuildOrder) {
    ListSequence.fromList(result).addElement(new Cluster(s,allUsedLangNamespaces(s)));
  }
  if (Sequence.fromIterable(rest).isNotEmpty()) {
    ListSequence.fromList(result).addElement(new Cluster(rest,allUsedLangNamespaces(rest)));
  }
  return result;
}
