{
  final Iterable<IResource> mres=Sequence.<IResource>fromIterable(res).where(new IWhereFilter<IResource>(){
    public boolean accept(    IResource r){
      return r instanceof IMResource;
    }
  }
).toListSequence();
  Iterable<IModule> mods=Sequence.<IResource>fromIterable(mres).<IModule>select(new ISelector<IResource,IModule>(){
    public IModule select(    IResource r){
      return ((IMResource)r).module();
    }
  }
);
  List<IResource> rest=Sequence.<IResource>fromIterable(res).subtract(Sequence.<IResource>fromIterable(mres)).toListSequence();
  ModulesCluster clst=new ModulesCluster(mods);
  clst.collectRequired(mods);
  return Sequence.fromIterable(clst.buildOrder()).<List<IResource>>select(new ISelector<Iterable<IModule>,IListSequence<IResource>>(){
    public IListSequence<IResource> select(    final Iterable<IModule> cl){
      return Sequence.<IResource>fromIterable(mres).where(new IWhereFilter<IResource>(){
        public boolean accept(        IResource r){
          return Sequence.<IModule>fromIterable(cl).contains(((IMResource)r).module());
        }
      }
).toListSequence();
    }
  }
).concat(Sequence.<List<IResource>>fromIterable((ListSequence.<IResource>fromList(rest).isNotEmpty() ? Sequence.<List<IResource>>singleton(rest) : null))).toListSequence();
}
