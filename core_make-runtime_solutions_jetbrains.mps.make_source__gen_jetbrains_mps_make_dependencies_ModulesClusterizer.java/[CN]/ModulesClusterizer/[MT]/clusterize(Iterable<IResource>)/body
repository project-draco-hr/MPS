{
  final Iterable<MResource> mres=Sequence.fromIterable(res).where(new IWhereFilter<IResource>(){
    public boolean accept(    IResource r){
      return r instanceof MResource;
    }
  }
).select(new ISelector<IResource,MResource>(){
    public MResource select(    IResource r){
      return ((MResource)r);
    }
  }
).toListSequence();
  Iterable<SModule> mods=Sequence.fromIterable(mres).select(new ISelector<MResource,SModule>(){
    public SModule select(    MResource r){
      return r.module();
    }
  }
);
  List<IResource> rest=Sequence.fromIterable(res).subtract(Sequence.fromIterable(mres)).toListSequence();
  ModulesCluster clst=new ModulesCluster(mods);
  clst.collectRequired(mods);
  Iterable<? extends Iterable<? extends IResource>> toBuild=Sequence.fromIterable(clst.buildOrder()).select(new ISelector<Iterable<SModule>,IListSequence<MResource>>(){
    public IListSequence<MResource> select(    final Iterable<SModule> cl){
      return Sequence.fromIterable(mres).where(new IWhereFilter<MResource>(){
        public boolean accept(        MResource r){
          return Sequence.fromIterable(cl).contains(r.module());
        }
      }
).toListSequence();
    }
  }
);
  Iterable<? extends Iterable<IResource>> seq=(ListSequence.fromList(rest).isNotEmpty() ? Sequence.<List<IResource>>singleton(rest) : null);
  List<Iterable<? extends IResource>> result=ListSequence.fromList(new ArrayList<Iterable<? extends IResource>>());
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(toBuild));
  ListSequence.fromList(result).addSequence(Sequence.fromIterable(seq));
  return result;
}
