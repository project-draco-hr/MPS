{
  for (  Edge edge : ListSequence.<Edge>fromList(embeddedGraph.getGraph().getEdges())) {
    List<Dart> darts=embeddedGraph.getDarts(edge);
    final Wrappers._T<Dart> dartToSplit=new Wrappers._T<Dart>(null);
    Dart opposite=null;
    if (MapSequence.<Dart,Integer>fromMap(bends).get(ListSequence.<Dart>fromList(darts).getElement(0)) > 0) {
      dartToSplit.value=ListSequence.<Dart>fromList(darts).getElement(0);
      opposite=ListSequence.<Dart>fromList(darts).getElement(1);
    }
    if (MapSequence.<Dart,Integer>fromMap(bends).get(ListSequence.<Dart>fromList(darts).getElement(1)) > 0) {
      dartToSplit.value=ListSequence.<Dart>fromList(darts).getElement(1);
      opposite=ListSequence.<Dart>fromList(darts).getElement(0);
    }
    if (dartToSplit.value != null) {
      while (MapSequence.<Dart,Integer>fromMap(bends).get(dartToSplit.value) > 0) {
        List<Edge> newEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
        final Node addedNode=embeddedGraph.splitEdge(dartToSplit.value.getEdge(),newEdges);
        Edge first=ListSequence.<Edge>fromList(newEdges).findFirst(new IWhereFilter<Edge>(){
          public boolean accept(          Edge it){
            return it.getOpposite(addedNode) == dartToSplit.value.getSource();
          }
        }
);
        Edge second=ListSequence.<Edge>fromList(newEdges).findFirst(new IWhereFilter<Edge>(){
          public boolean accept(          Edge it){
            return it.getOpposite(addedNode) == dartToSplit.value.getTarget();
          }
        }
);
        for (        Dart firstDart : ListSequence.<Dart>fromList(embeddedGraph.getDarts(first))) {
          MapSequence.<Dart,Integer>fromMap(bends).put(firstDart,0);
          if (firstDart.getSource() == addedNode) {
            MapSequence.<Dart,Integer>fromMap(angles).put(firstDart,3);
          }
 else {
            MapSequence.<Dart,Integer>fromMap(angles).put(firstDart,MapSequence.<Dart,Integer>fromMap(angles).get(dartToSplit.value));
          }
        }
        Dart nextToSplit=null;
        Dart nextOpposite=null;
        for (        Dart secondDart : ListSequence.<Dart>fromList(embeddedGraph.getDarts(second))) {
          if (secondDart.getSource() == addedNode) {
            nextToSplit=secondDart;
            MapSequence.<Dart,Integer>fromMap(bends).put(secondDart,MapSequence.<Dart,Integer>fromMap(bends).get(dartToSplit.value) - 1);
            MapSequence.<Dart,Integer>fromMap(angles).put(secondDart,1);
          }
 else {
            nextOpposite=secondDart;
            MapSequence.<Dart,Integer>fromMap(bends).put(secondDart,0);
            MapSequence.<Dart,Integer>fromMap(angles).put(secondDart,MapSequence.<Dart,Integer>fromMap(angles).get(opposite));
          }
        }
        MapSequence.fromMap(bends).removeKey(dartToSplit.value);
        MapSequence.fromMap(angles).removeKey(dartToSplit.value);
        MapSequence.fromMap(bends).removeKey(opposite);
        MapSequence.fromMap(angles).removeKey(opposite);
        dartToSplit.value=nextToSplit;
        opposite=nextOpposite;
      }
    }
  }
}
