{
  boolean can=false;
  SNode expressionType=TypeChecker.getInstance().getTypeOf(expression);
  can=TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_26vghy_a1a0a2a3().createNode());
  can=can || TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_26vghy_a1a0a0d0d().createNode());
  can=can || TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_26vghy_a1a0a0e0d().createNode());
  can=can || TypeChecker.getInstance().getSubtypingManager().isSubtype(expressionType,new MathDateTimeOperation_Behavior.QuotationClass_26vghy_a1a0a0f0d().createNode());
  can=can || DateTypeUtil.isInstanceOfPeriod(expression);
  return can;
}
