{
  GenerationRootDependencies commonDeps=oldDependencies.getDependenciesFor(ModelDigestHelper.HEADER);
  if (commonDeps == null) {
    return;
  }
{
    String oldHash=commonDeps.getHash();
    String newHash=myGenerationHashes.get(ModelDigestHelper.HEADER);
    if (oldHash == null || newHash == null || !newHash.equals(oldHash)) {
      return;
    }
  }
  Set<String> changedModels=new HashSet<String>();
  Map<String,String> externalHashes=oldDependencies.getExternalHashes();
  for (  Entry<String,String> entry : externalHashes.entrySet()) {
    String modelReference=entry.getKey();
    SModelDescriptor sm=SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(modelReference));
    if (sm == null) {
      changedModels.add(modelReference);
      continue;
    }
    String oldHash=entry.getValue();
    if (oldHash == null) {
      if ((sm instanceof EditableSModelDescriptor) && !((EditableSModelDescriptor)sm).isPackaged()) {
        changedModels.add(modelReference);
      }
      continue;
    }
    Map<String,String> map=ModelDigestHelper.getInstance().getGenerationHashes(sm,myOperationContext);
    String newHash=map != null ? map.get(ModelDigestHelper.FILE) : null;
    if (newHash == null || !oldHash.equals(newHash)) {
      changedModels.add(modelReference);
    }
  }
  List<SNode> rootsList=myModel.getSModel().getRoots();
  myRootsCount=rootsList.size();
  myUnchangedRoots=new HashSet<SNode>();
  for (  SNode root : rootsList) {
    String id=root.getId();
    GenerationRootDependencies rd=oldDependencies.getDependenciesFor(id);
    String oldHash;
    if (rd == null || (oldHash=rd.getHash()) == null) {
      continue;
    }
    String newHash=myGenerationHashes.get(id);
    if (newHash == null || !newHash.equals(oldHash)) {
      continue;
    }
    boolean isDirty=false;
    for (    String m : rd.getExternal()) {
      if (changedModels.contains(m)) {
        isDirty=true;
        break;
      }
    }
    if (!isDirty) {
      myUnchangedRoots.add(root);
    }
  }
  if (myUnchangedRoots.isEmpty()) {
    return;
  }
  myConditionalsUnchanged=true;
  Map<String,Set<String>> savedDep=getDependencies(oldDependencies,myUnchangedRoots);
  ConnectedComponentPartitioner partitioner=null;
  boolean changed;
  if (myCache != null) {
    closureUsingSavedDependencies(savedDep);
    if (myUnchangedRoots.isEmpty() && myConditionalsUnchanged == false) {
      return;
    }
    partitioner=new ConnectedComponentPartitioner(rootsList);
    Component[] strongComponents=partitioner.partitionStrong();
    changed=closureUsingStrongComponents(strongComponents,savedDep);
    while (changed) {
      if (myUnchangedRoots.isEmpty() && myConditionalsUnchanged == false) {
        return;
      }
      changed=closureUsingSavedDependencies(savedDep);
      if (changed) {
        changed=closureUsingStrongComponents(strongComponents,savedDep);
      }
    }
    myRequiredRoots=new HashSet<SNode>(myUnchangedRoots);
    myConditionalsRequired=myConditionalsUnchanged;
  }
  addIncomingDependencies(oldDependencies,savedDep);
  closureUsingSavedDependencies(savedDep);
  if (myUnchangedRoots.isEmpty() && myConditionalsUnchanged == false) {
    return;
  }
  if (partitioner == null) {
    partitioner=new ConnectedComponentPartitioner(rootsList);
  }
  List<SNode[]> components=partitioner.partition();
  changed=closureUsingReferences(components,savedDep);
  while (changed) {
    if (myUnchangedRoots.isEmpty() && myConditionalsUnchanged == false) {
      return;
    }
    changed=closureUsingSavedDependencies(savedDep);
    if (changed) {
      changed=closureUsingReferences(components,savedDep);
    }
  }
  if (!myRequiredRoots.isEmpty()) {
    myRequiredRoots.removeAll(myUnchangedRoots);
    if (myConditionalsUnchanged) {
      myConditionalsRequired=false;
    }
  }
}
