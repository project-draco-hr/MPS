{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variable",new BaseReferenceConstraintsDescriptor("variable",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner",true);
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode node : nodes) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(VariableOwner_Behavior.call_getVariables_8981808925914841576(node)));
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_3k454j_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
