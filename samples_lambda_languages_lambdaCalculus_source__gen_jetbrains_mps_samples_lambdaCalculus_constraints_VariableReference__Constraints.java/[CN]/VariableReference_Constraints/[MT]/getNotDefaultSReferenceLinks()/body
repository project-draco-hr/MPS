{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(8979658720047614716l,-5913038370385483627l),5249919352014727944l,5249919352014732020l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(8979658720047614716l,-5913038370385483627l),5249919352014727944l,5249919352014732020l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner",true);
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode node : nodes) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),node,"virtual_getVariables_8981808925914841576",new Object[]{})));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_3k454j_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
