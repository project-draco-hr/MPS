{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0x7c9e280794ad4afcL,0xadf0aaee45eb2895L,0x48db75d5dc496b08L,0x48db75d5dc497af4L),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x7c9e280794ad4afcL,0xadf0aaee45eb2895L,0x48db75d5dc496b08L,0x48db75d5dc497af4L),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> nodes=SNodeOperations.getNodeAncestors(_context.getEnclosingNode(),MetaAdapterFactory.getInterfaceConcept(0x7c9e280794ad4afcL,0xadf0aaee45eb2895L,0x48db75d5dc496a4fL,"jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner"),true);
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode node : nodes) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(VariableOwner_BehaviorDescriptor.getVariables_id7M_MU5__$7C.invoke(node)));
          }
          return result;
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_3k454j_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
