{
  String filename=expandPath.invoke(SNodeAccessUtil.getProperty(sourceNode,propertyName));
  final File baseFile=(filename == null ? null : new File(filename));
  final JButton button=new JButton();
  button.setAction(new AbstractAction("..."){
    @Override public void actionPerformed(    ActionEvent e){
      Component root=SwingUtilities.getRoot(button);
      JFrame frame=(root instanceof JFrame ? (JFrame)root : null);
      TreeFileChooser chooser=new TreeFileChooser();
      chooser.setMode((files ? TreeFileChooser.MODE_FILES : TreeFileChooser.MODE_DIRECTORIES));
      if (baseFile != null && baseFile.exists()) {
        chooser.setInitialFile(FileSystem.getInstance().getFileByPath(baseFile.getAbsolutePath()));
      }
      final Wrappers._T<IFile> result=new Wrappers._T<IFile>(chooser.showDialog(frame));
      if (result.value == null) {
        return;
      }
      if (copy) {
        ModelAccess.instance().requireWrite(new Runnable(){
          public void run(){
            SModel model=sourceNode.getModel();
            String outputRoot=((AbstractModule)model.getModule()).getModuleSourceDir().getPath() + File.separator + "icons";
            IFile outputRootFile=FileSystem.getInstance().getFileByPath(outputRoot);
            String source=MacrosFactory.forModule((AbstractModule)model.getModule()).expandPath(result.value.getPath());
            IFile sourceFile=FileSystem.getInstance().getFileByPath(source);
            IFileUtils.copyFileContent(sourceFile,outputRootFile.getDescendant(sourceFile.getName()));
            result.value=outputRootFile.getDescendant(sourceFile.getName());
          }
        }
);
      }
      final String pathToShow=shrinkPath.invoke(result.value.getPath());
      ModelAccess.instance().runWriteActionInCommand(new Runnable(){
        @Override public void run(){
          SNodeAccessUtil.setProperty(sourceNode,propertyName,pathToShow);
        }
      }
);
    }
  }
);
  button.setPreferredSize(new Dimension(20,20));
  return button;
}
