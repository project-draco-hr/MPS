{
  ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
  TreeFileChooser chooser=new TreeFileChooser();
  chooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
  final Wrappers._T<IFile> projectFolder=new Wrappers._T<IFile>(null);
  final Wrappers._T<String> basePath=new Wrappers._T<String>(null);
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      basePath.value=BuildProject__BehaviorDescriptor.getBasePath_id4jjtc7WZOyG.invoke(((SNode)MapSequence.fromMap(_params).get("node")),Context.defaultContext());
      if (basePath.value != null && isNotEmptyString(basePath.value)) {
        projectFolder.value=FileSystem.getInstance().getFileByPath(basePath.value);
      }
    }
  }
);
  if (basePath.value == null) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("working directory is not available");
    }
    return;
  }
  if (projectFolder.value != null) {
    chooser.setInitialFile(projectFolder.value);
  }
  final IFile dir=chooser.showDialog(((Frame)MapSequence.fromMap(_params).get("frame")));
  if (dir == null || !(dir.isDirectory())) {
    return;
  }
  modelAccess.executeCommandInEDT(new Runnable(){
    public void run(){
      Collection<ModulesMiner.ModuleHandle> modules=new ModulesMiner().collectModules(dir).getCollectedModules();
      VisibleModules visible=new VisibleModules(((SNode)MapSequence.fromMap(_params).get("node")));
      visible.collect();
      List<ImportModuleHelper> helpers=new ArrayList<ImportModuleHelper>();
      for (      ModulesMiner.ModuleHandle handle : modules) {
        SModuleReference modRef=handle.getDescriptor().getModuleReference();
        if (visible.resolve(modRef) != null) {
          continue;
        }
        ImportModuleHelper helper=new ImportModuleHelper(((SNode)MapSequence.fromMap(_params).get("node")),handle.getFile(),handle.getDescriptor());
        helper.create();
        helpers.add(helper);
      }
      visible=new VisibleModules(((SNode)MapSequence.fromMap(_params).get("node")));
      visible.collect();
      for (      ImportModuleHelper helper : helpers) {
        helper.update(visible);
      }
    }
  }
);
}
