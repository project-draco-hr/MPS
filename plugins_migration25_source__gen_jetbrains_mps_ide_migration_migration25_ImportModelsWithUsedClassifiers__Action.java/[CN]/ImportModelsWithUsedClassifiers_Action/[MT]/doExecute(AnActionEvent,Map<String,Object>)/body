{
  try {
    MPSProject mpsProject=((Project)MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
    List<IModule> allModules=ListSequence.fromListWithValues(new ArrayList<IModule>(),mpsProject.getModulesWithGenerators());
    for (    IModule module : ListSequence.fromList(allModules)) {
      ModuleDescriptor descriptor=module.getModuleDescriptor();
      if (descriptor == null) {
        continue;
      }
      for (      SModel modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
        if (SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(modelDescriptor))) {
          continue;
        }
        SModel model=modelDescriptor.getSModel();
        Set<SModelReference> dependencies=SetSequence.fromSet(new HashSet<SModelReference>());
        for (        SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
          SNode nodeToImport=ImportModelsWithUsedClassifiers_Action.this.getNodeToImport(node,_params);
          SModelReference mref=check_rft9c_a0b0e0d0e0a(SNodeOperations.getModel(nodeToImport));
          if (mref == null) {
            continue;
          }
          SetSequence.fromSet(dependencies).addElement(mref);
        }
        SetSequence.fromSet(dependencies).removeElement(modelDescriptor.getReference());
        for (        SModel importedModel : ListSequence.fromList(jetbrains.mps.smodel.SModelOperations.allImportedModels(model,GlobalScope.getInstance()))) {
          SetSequence.fromSet(dependencies).removeElement(importedModel.getReference());
        }
        for (        SModelReference modelToImport : SetSequence.fromSet(dependencies)) {
          ((SModelInternal)model).addModelImport(modelToImport,false);
        }
      }
    }
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "ImportModelsWithUsedClassifiers",t);
  }
}
