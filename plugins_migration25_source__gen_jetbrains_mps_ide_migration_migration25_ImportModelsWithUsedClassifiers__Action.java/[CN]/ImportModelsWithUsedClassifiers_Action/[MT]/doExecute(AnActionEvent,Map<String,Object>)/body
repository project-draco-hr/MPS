{
  try {
    MPSProject mpsProject=((Project)MapSequence.fromMap(_params).get("project")).getComponent(MPSProject.class);
    List<IModule> allModules=ListSequence.fromListWithValues(new ArrayList<IModule>(),mpsProject.getModules());
    for (    IModule module : ListSequence.fromList(allModules)) {
      ModuleDescriptor descriptor=module.getModuleDescriptor();
      if (descriptor == null) {
        continue;
      }
      for (      SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
        if (SModelStereotype.isStubModelStereotype(modelDescriptor.getStereotype())) {
          continue;
        }
        SModel model=modelDescriptor.getSModel();
        Set<SModelReference> dependencies=SetSequence.fromSet(new HashSet<SModelReference>());
        for (        SNode classifierType : ListSequence.fromList(SModelOperations.getNodes(model,"jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
          SNode classifier=SLinkOperations.getTarget(classifierType,"classifier",false);
          if ((classifier != null)) {
            SetSequence.fromSet(dependencies).addElement(SNodeOperations.getModel(classifier).getSModelReference());
          }
        }
        SetSequence.fromSet(dependencies).removeElement(modelDescriptor.getSModelReference());
        for (        SModel.ImportElement importedElement : ListSequence.fromList(model.importedModels())) {
          SetSequence.fromSet(dependencies).removeElement(importedElement.getModelReference());
        }
        for (        SModelReference modelToImport : SetSequence.fromSet(dependencies)) {
          model.addModelImport(modelToImport,false);
        }
      }
    }
  }
 catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error("User's action execute method failed. Action:" + "ImportModelsWithUsedClassifiers",t);
    }
  }
}
