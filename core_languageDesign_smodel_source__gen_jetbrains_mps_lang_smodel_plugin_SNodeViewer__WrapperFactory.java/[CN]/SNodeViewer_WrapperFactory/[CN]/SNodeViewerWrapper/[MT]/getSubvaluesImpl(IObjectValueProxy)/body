{
  List<CustomJavaWatchable> result=new ArrayList<CustomJavaWatchable>();
  result.add(new SNodeWatchables.MyWatchable_text(ValueUtil.getInstance().fromJDIValue(((IObjectValueProxy)value.invokeMethod("toString","()Ljava/lang/String;")).getJDIValue(),getThreadReference()),"text"));
  result.add(new SNodeWatchables.MyWatchable_id(ValueUtil.getInstance().fromJDIValue(((IObjectValueProxy)value.getFieldValue("myId")).getJDIValue(),getThreadReference()),"id"));
  result.add(new SNodeWatchables.MyWatchable_model(ValueUtil.getInstance().fromJDIValue(((IObjectValueProxy)value.getFieldValue("myModel")).getJDIValue(),getThreadReference()),"model"));
  result.add(new SNodeWatchables.MyWatchable_concept(ValueUtil.getInstance().fromJDIValue(((IObjectValueProxy)EvaluationUtils.invokeStatic("jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations","getConceptDeclaration","(Ljetbrains/mps/smodel/SNode;)Ljetbrains/mps/smodel/SNode;",getThreadReference(),value)).getJDIValue(),getThreadReference()),"concept"));
  IArrayValueProxy properties=((IArrayValueProxy)value.getFieldValue("myProperties"));
  if (!(ProxyEqualsUtil.javaEquals(properties,null))) {
    for (    IObjectValueProxy property : EvaluationUtils.<IObjectValueProxy>toIterable(((IObjectValueProxy)((IObjectValueProxy)value.invokeMethod("getProperties","()Ljava/util/Map;")).invokeMethod("entrySet","()Ljava/util/Set;")))) {
      result.add(new SNodeWatchables.MyWatchable_property(ValueUtil.getInstance().fromJDIValue(property.getJDIValue(),getThreadReference()),"property"));
    }
  }
  IObjectValueProxy currentChild=((IObjectValueProxy)value.getFieldValue("myFirstChild"));
  while (!(ProxyEqualsUtil.javaEquals(currentChild,null))) {
    result.add(new SNodeWatchables.MyWatchable_child(ValueUtil.getInstance().fromJDIValue(currentChild.getJDIValue(),getThreadReference()),"child"));
    currentChild=((IObjectValueProxy)currentChild.getFieldValue("myNextSibling"));
  }
  IArrayValueProxy references=((IArrayValueProxy)value.getFieldValue("myReferences"));
  if (!(ProxyEqualsUtil.javaEquals(references,null))) {
    for (int i=0; i < ((IArrayValueProxy)references).getLength(); i++) {
      result.add(new SNodeWatchables.MyWatchable_reference(ValueUtil.getInstance().fromJDIValue(((IObjectValueProxy)references.getElementAt(i)).getJDIValue(),getThreadReference()),"reference"));
    }
  }
  return result;
}
