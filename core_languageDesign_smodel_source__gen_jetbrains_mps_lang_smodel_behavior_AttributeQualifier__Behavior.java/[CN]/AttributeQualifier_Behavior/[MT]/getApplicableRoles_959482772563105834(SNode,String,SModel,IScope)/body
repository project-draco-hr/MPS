{
  final SNode container=SLinkOperations.getTarget(AttributeAccess_Behavior.call_getAttributeContainerType_6960953357954139822(SNodeOperations.as(enclosingNode,"jetbrains.mps.lang.smodel.structure.AttributeAccess")),"concept",false);
  Set<String> subconceptNames=LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(attributeType);
  final ModelAndImportedModelsScope modelScope=new ModelAndImportedModelsScope(model,true,scope);
  return SetSequence.fromSet(subconceptNames).select(new ISelector<String,SNode>(){
    public SNode select(    String fqName){
      return (SNode)SModelUtil.findConceptDeclaration(fqName,scope);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    final SNode attr){
      return modelScope.isInScope(attr) && ListSequence.fromList(SLinkOperations.getTargets(attr,"conceptProperty",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return (SLinkOperations.getTarget(it,"conceptPropertyDeclaration",false) != null);
        }
      }
).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SLinkOperations.getTarget(it,"conceptPropertyDeclaration",false);
        }
      }
).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode decl){
          return SPropertyOperations.hasValue(decl,"name","role") && ListSequence.fromList(SLinkOperations.getConceptLinkTargets(attr,"attributed")).any(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SConceptOperations.isSubConceptOf(container,NameUtil.nodeFQName(it));
            }
          }
);
        }
      }
);
    }
  }
);
}
