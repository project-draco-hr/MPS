{
  TransientModelsModule transientModelsModule=null;
  int i;
  for (i=0; i < 3 && null == (transientModelsModule=ModelAccess.instance().tryWrite(new Computable<TransientModelsModule>(){
    @Override public TransientModelsModule compute(){
      TransientModelsModule transientModelsModule=myModuleMap.get(module);
      if (transientModelsModule != null) {
        return transientModelsModule;
      }
      transientModelsModule=new TransientModelsModule(module,TransientModelsComponent.this);
      transientModelsModule.initModule();
      myModuleMap.put(module,transientModelsModule);
      return transientModelsModule;
    }
  }
)); ++i) {
    try {
      Thread.sleep((1 << i) * 100);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (i >= 3) {
    throw new RuntimeException("Failed to acquire write lock");
  }
  return transientModelsModule;
}
