{
  final Wrappers._boolean any=new Wrappers._boolean(false);
  final Wrappers._T<List<SNode>> nodes=new Wrappers._T<List<SNode>>();
  ModelAccess.instance().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<List<SNode>>(){
    public List<SNode> invoke(){
      return nodes.value=new AllSubclassifiersScope(SLinkOperations.getTarget(new TestCollector.JUnit3TestCollector.QuotationClass_rpw6il_a0a0a0a0a0a0c0a2().createNode(),"classifier",false),model,IClassifiersSearchScope.CLASS,scope).getNodes(new Condition<SNode>(){
        public boolean met(        SNode cls){
          return !(SPropertyOperations.getBoolean(cls,"abstractClass"));
        }
      }
);
    }
  }
));
  ListSequence.fromList(nodes.value).visitAll(new IVisitor<SNode>(){
    public void visit(    final SNode tc){
      into.invoke(new _FunctionTypes._return_P0_E0<SNode>(){
        public SNode invoke(){
          SNode tref=SConceptOperations.createNewNode("jetbrains.mps.testbench.suite.structure.JUnit3TestCaseRef",null);
          SLinkOperations.setTarget(tref,"klass",SNodeOperations.cast(tc,"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
          return tref;
        }
      }
);
      any.value=true;
    }
  }
);
  return any.value;
}
