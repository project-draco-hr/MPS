{
  final IdeMain ide=context.get(IdeMain.class);
  SNode node=context.get(SNode.class);
  if (!(node instanceof ConceptDeclaration))   return;
  final String editorName=node.getName() + "_Editor";
  MPSProject project=context.get(MPSProject.class);
  SModel languageStructure=node.getModel();
  Language language=project.getLanguageByStructureModel(languageStructure);
  if (language == null) {
    JOptionPane.showMessageDialog(null,"Couldn't find Language for structure model " + languageStructure.getUID());
    return;
  }
  final SModel languageEditor=language.getEditorModel();
  if (languageEditor != null) {
    Iterator<SNode> iterator=languageEditor.roots();
    while (iterator.hasNext()) {
      SNode root=iterator.next();
      if (editorName.equals(root.getName())) {
        AbstractEditorComponent editor=context.get(IdeMain.class).getEditorsPane().openEditor(root,context.get(OperationContext.class));
        editor.selectNode(root);
        return;
      }
    }
    int option=JOptionPane.showConfirmDialog(null,"The " + editorName + " wasn't found in "+ languageEditor.getUID()+ "\nDo you want to create such an editor?","Editor not found",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (option == JOptionPane.YES_OPTION) {
      final ConceptEditorDeclaration[] editorDeclaration=new ConceptEditorDeclaration[1];
      final ConceptDeclaration conceptDeclaration=(ConceptDeclaration)node;
      CommandProcessor.instance().executeCommand(new Runnable(){
        public void run(){
          editorDeclaration[0]=new ConceptEditorDeclaration(languageEditor);
          editorDeclaration[0].setConceptDeclaration(conceptDeclaration);
          editorDeclaration[0].getModel().addRoot(editorDeclaration[0]);
        }
      }
);
      ide.getProjectPane().selectNode(editorDeclaration[0]);
      ide.getProjectPane().openEditor(context.get(OperationContext.class));
      JOptionPane.showMessageDialog(null,"Editor " + editorName + " created");
    }
  }
 else {
    JOptionPane.showMessageDialog(null,"Editor model for \"" + node.getModel().getUID() + "\" is not in the project");
  }
}
