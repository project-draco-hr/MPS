{
  final SNode node=context.get(SNode.class);
  if (!(node instanceof ConceptDeclaration))   return;
  final IDEProjectFrame ide=context.get(IDEProjectFrame.class);
  IOperationContext invocationContext=context.get(IOperationContext.class);
  final IScope scope=invocationContext.getScope();
  final AbstractEditorComponent currentEditor=ide.getEditorsPane().getCurrentEditor();
  Language language=null;
  if (invocationContext.getModule() instanceof Language) {
    Language contextLanguage=(Language)invocationContext.getModule();
    SModelDescriptor testStructureModel=contextLanguage.getStructureModelDescriptor();
    if (testStructureModel != null && node.getModel().getUID().equals(testStructureModel.getModelUID())) {
      language=contextLanguage;
    }
  }
  if (language == null) {
    language=SModelUtil.getDeclaringLanguage((ConceptDeclaration)node,scope);
    if (language == null) {
      JOptionPane.showMessageDialog(null,"Couldn't find declaring language for concept " + NameUtil.nodeFQName(node));
      return;
    }
  }
  final ModuleContext languageContext=new ModuleContext(language,invocationContext.getProject());
  SModelDescriptor languageEditor=language.getEditorModelDescriptor();
  ConceptEditorDeclaration editorDeclaration;
  if (languageEditor != null) {
    editorDeclaration=findEditorDeclaration(languageEditor.getSModel(),(ConceptDeclaration)node);
    if (editorDeclaration != null) {
      navigateToEditorDeclaration(editorDeclaration,languageContext,currentEditor,ide);
      return;
    }
  }
  String message;
  if (languageEditor == null) {
    message="Language \"" + language.getModuleUID() + "\" has no editor model.\n"+ "Create new editor model?";
  }
 else {
    message="Concept \"" + NameUtil.nodeFQName(node) + "\" has no editor.\n"+ "Create new editor?";
  }
  int option=JOptionPane.showConfirmDialog(null,message,"Editor not found",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
  if (option != JOptionPane.YES_OPTION) {
    return;
  }
  final Language languageFinal=language;
  final SModelDescriptor languageEditorFinal=languageEditor;
  CommandProcessor.instance().executeCommand(new Runnable(){
    public void run(){
      if (languageEditorFinal == null) {
        createLanguageEditorModel(languageFinal);
        createEditorDeclaration((ConceptDeclaration)node,languageFinal.getEditorModelDescriptor(),scope);
      }
 else {
        createEditorDeclaration((ConceptDeclaration)node,languageEditorFinal,scope);
      }
    }
  }
);
  editorDeclaration=findEditorDeclaration(language.getEditorModelDescriptor().getSModel(),(ConceptDeclaration)node);
  navigateToEditorDeclaration(editorDeclaration,languageContext,currentEditor,ide);
}
