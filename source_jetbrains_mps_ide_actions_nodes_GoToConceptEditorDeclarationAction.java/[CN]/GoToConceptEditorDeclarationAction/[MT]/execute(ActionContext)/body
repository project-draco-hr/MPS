{
  SNode node=context.get(SNode.class);
  if (!(node instanceof ConceptDeclaration))   return;
  final IdeMain ide=context.get(IdeMain.class);
  final OperationContext operationContext=context.get(OperationContext.class);
  final String editorName=node.getName() + "_Editor";
  SModel languageStructure=node.getModel();
  final Language language=SModelUtil.getDeclaringLanguage((ConceptDeclaration)node,operationContext);
  if (language == null) {
    JOptionPane.showMessageDialog(null,"Couldn't find Language for structure model " + languageStructure.getUID());
    return;
  }
  final SModel languageEditor=language.getEditorModel();
  if (languageEditor != null) {
    Iterator<SNode> iterator=languageEditor.roots();
    while (iterator.hasNext()) {
      SNode root=iterator.next();
      if (editorName.equals(root.getName())) {
        AbstractEditorComponent editor=ide.getEditorsPane().openEditor(root,operationContext);
        editor.selectNode(root);
        return;
      }
    }
    int option=JOptionPane.showConfirmDialog(null,"The " + editorName + " wasn't found in "+ languageEditor.getUID()+ "\nDo you want to create such an editor?","Editor not found",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (option == JOptionPane.YES_OPTION) {
      final ConceptEditorDeclaration[] editorDeclaration=new ConceptEditorDeclaration[1];
      final ConceptDeclaration conceptDeclaration=(ConceptDeclaration)node;
      CommandProcessor.instance().executeCommand(new Runnable(){
        public void run(){
          editorDeclaration[0]=new ConceptEditorDeclaration(languageEditor);
          editorDeclaration[0].setConceptDeclaration(conceptDeclaration);
          editorDeclaration[0].getModel().addRoot(editorDeclaration[0]);
        }
      }
);
      ide.getProjectPane().selectNode(editorDeclaration[0]);
      ide.getProjectPane().openEditor(operationContext);
      JOptionPane.showMessageDialog(null,"Editor " + editorName + " created");
    }
  }
 else {
    String path;
    try {
      MPSFileModelDescriptor fileModelDescriptor=(MPSFileModelDescriptor)language.getStructureModelDescriptor();
      final File languageDir=(new File(fileModelDescriptor.getFileName())).getParentFile();
      path=languageDir.getAbsolutePath();
    }
 catch (    Exception e) {
      JOptionPane.showMessageDialog(null,"Editor model for \"" + node.getModel().getUID() + "\" is not in the project");
      return;
    }
    int option=JOptionPane.showConfirmDialog(null,"Editor model for \"" + node.getModel().getUID() + "\" is not in the project"+ "\nDo you want to create it? \n(file "+ path+ "\\editor.mps )","Editor model not found",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (option == JOptionPane.YES_OPTION) {
      final BootstrapLanguages bootstrapLanguages=ApplicationComponents.getInstance().getComponent(BootstrapLanguages.class);
      SModelDescriptor editor=operationContext.createModel(new SModelUID(language.getNamespace(),"editor",""),path,language.getNamespace());
      editor.getSModel().addImportedModel(language.getStructureModelDescriptor().getModelUID());
      editor.getSModel().addImportedModel(bootstrapLanguages.getCoreLanguage().getStructureModelDescriptor().getModelUID());
      editor.getSModel().addLanguage(bootstrapLanguages.getEditorLanguage());
      editor.save();
      final SModel smodel=new SModel(new SModelUID("z","z",""));
      AbstractSModelDescriptor abstractModelDescriptor=new DummySModelDescriptor(smodel);
      operationContext.registerModelDescriptor(abstractModelDescriptor);
      CommandProcessor.instance().executeCommand(new Runnable(){
        public void run(){
          LanguageDescriptor descriptor=language.getCopyOfLanguageDescriptor(smodel,operationContext);
          smodel.addLanguage(bootstrapLanguages.getProjectLanguage());
          Model editorModel=Model.newInstance(smodel);
          editorModel.setName(language.getNamespace() + ".editor");
          Editor editorNode=Editor.newInstance(smodel);
          editorNode.setStereotype("");
          editorNode.setEditorModel(editorModel);
          descriptor.addEditor(editorNode);
          language.setLanguageDescriptor(descriptor,operationContext);
          language.save();
        }
      }
);
      operationContext.unRegisterModelDescriptor(abstractModelDescriptor);
      ProjectPane projectPane=operationContext.getComponent(ProjectPane.class);
      projectPane.rebuildTree();
      JOptionPane.showMessageDialog(null,"Editor model created");
      execute(context);
    }
  }
}
