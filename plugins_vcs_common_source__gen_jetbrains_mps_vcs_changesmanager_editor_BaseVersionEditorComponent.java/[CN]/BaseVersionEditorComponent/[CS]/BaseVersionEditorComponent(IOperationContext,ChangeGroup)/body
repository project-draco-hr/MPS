{
  super(operationContext);
  final SModel baseModel=ListSequence.fromList(changeGroup.getChanges()).first().getChangeSet().getOldModel();
  SNode baseRoot=baseModel.getNodeById(ListSequence.fromList(changeGroup.getChanges()).first().getRootId());
  editNode(baseRoot);
  setBackground(CARET_ROW_COLOR);
  Iterable<ChangeEditorMessage> messages=ListSequence.fromList(changeGroup.getChanges()).translate(new ITranslator2<ModelChange,ChangeEditorMessage>(){
    public Iterable<ChangeEditorMessage> translate(    ModelChange ch){
      return ChangeEditorMessageFactory.createMessages(baseModel,ch,BaseVersionEditorComponent.this,null);
    }
  }
);
  Bounds verticalBounds=Sequence.fromIterable(messages).select(new ISelector<ChangeEditorMessage,Bounds>(){
    public Bounds select(    ChangeEditorMessage m){
      return m.getBounds(BaseVersionEditorComponent.this);
    }
  }
).reduceLeft(new ILeftCombinator<Bounds,Bounds>(){
    public Bounds combine(    Bounds a,    Bounds b){
      return a.merge(b);
    }
  }
);
  int rightMost=0;
  for (EditorCell leafCell=APICellAdapter.getFirstLeaf(getRootCell()); leafCell != null; leafCell=APICellAdapter.getNextLeaf(leafCell)) {
    if (verticalBounds.contains(leafCell.getY()) || verticalBounds.contains(leafCell.getBottom()) || verticalBounds.contains(leafCell.getY() + leafCell.getHeight() / 2)) {
      if (leafCell.getRight() > rightMost) {
        rightMost=leafCell.getRight();
      }
    }
  }
  Rectangle viewRect=new Rectangle(0,(int)verticalBounds.start(),rightMost,verticalBounds.length());
  viewRect.y-=1;
  viewRect.width+=5;
  viewRect.height+=4;
  myScrollPane=new JScrollPane(this,JScrollPane.VERTICAL_SCROLLBAR_NEVER,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  myScrollPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  myScrollPane.setPreferredSize(viewRect.getSize());
  myScrollPane.getViewport().setViewPosition(viewRect.getLocation());
}
