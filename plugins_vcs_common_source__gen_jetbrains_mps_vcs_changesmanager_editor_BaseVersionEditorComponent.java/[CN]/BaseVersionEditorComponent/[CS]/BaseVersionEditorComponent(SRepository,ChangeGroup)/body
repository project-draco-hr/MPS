{
  super(repository);
  final ModelAccess modelAccess=repository.getModelAccess();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      final jetbrains.mps.smodel.SModel baseModel=as_i3w5ys_a0a0a0a0a0a0c0c(ListSequence.fromList(changeGroup.getChanges()).first().getChangeSet().getOldModel(),SModelBase.class).getSModelInternal();
      myBaseModel=new MergeTemporaryModel(CopyUtil.copyModel(baseModel),true);
    }
  }
);
  modelAccess.runWriteAction(new Runnable(){
    public void run(){
      DiffModelUtil.renameModelAndRegister(myBaseModel,null);
    }
  }
);
  final Wrappers._T<Bounds> verticalBounds=new Wrappers._T<Bounds>();
  modelAccess.runReadAction(new Runnable(){
    public void run(){
      SNode baseRooot=myBaseModel.getNode(ListSequence.fromList(changeGroup.getChanges()).first().getRootId());
      editNode(baseRooot);
      setBackground(EditorSettings.getInstance().getCaretRowColor());
      Iterable<ChangeEditorMessage> messages=ListSequence.fromList(changeGroup.getChanges()).translate(new ITranslator2<ModelChange,ChangeEditorMessage>(){
        public Iterable<ChangeEditorMessage> translate(        ModelChange ch){
          return ChangeEditorMessageFactory.createMessages(myBaseModel,true,ch,BaseVersionEditorComponent.this,null);
        }
      }
);
      verticalBounds.value=Sequence.fromIterable(messages).select(new ISelector<ChangeEditorMessage,Bounds>(){
        public Bounds select(        ChangeEditorMessage m){
          return m.getBounds(BaseVersionEditorComponent.this);
        }
      }
).reduceLeft(new ILeftCombinator<Bounds,Bounds>(){
        public Bounds combine(        Bounds a,        Bounds b){
          return a.merge(b);
        }
      }
);
    }
  }
);
  int rightMost=0;
  for (EditorCell leafCell=CellTraversalUtil.getFirstLeaf(getRootCell()); leafCell != null; leafCell=CellTraversalUtil.getNextLeaf(leafCell)) {
    if (verticalBounds.value.contains(leafCell.getY()) || verticalBounds.value.contains(leafCell.getBottom()) || verticalBounds.value.contains(leafCell.getY() + leafCell.getHeight() / 2)) {
      if (leafCell.getRight() > rightMost) {
        rightMost=leafCell.getRight();
      }
    }
  }
  Rectangle viewRect=new Rectangle(0,(int)verticalBounds.value.start(),rightMost,verticalBounds.value.length());
  viewRect.y-=1;
  viewRect.width+=5;
  viewRect.height+=4;
  myScrollPane=new JScrollPane(this,JScrollPane.VERTICAL_SCROLLBAR_NEVER,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  myScrollPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  myScrollPane.setPreferredSize(viewRect.getSize());
  myScrollPane.getViewport().setViewPosition(viewRect.getLocation());
}
