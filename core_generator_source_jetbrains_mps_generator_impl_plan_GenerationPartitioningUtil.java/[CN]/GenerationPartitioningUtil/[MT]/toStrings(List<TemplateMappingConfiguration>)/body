{
  List<Pair<String,TemplateMappingConfiguration>> strings=new ArrayList<Pair<String,TemplateMappingConfiguration>>();
  Map<TemplateModel,Integer> numOfMappingsByModel=new HashMap<TemplateModel,Integer>();
  for (  TemplateMappingConfiguration mappingConfig : mappings) {
    TemplateModel model=mappingConfig.getModel();
    if (!numOfMappingsByModel.containsKey(model)) {
      numOfMappingsByModel.put(model,0);
    }
    numOfMappingsByModel.put(model,numOfMappingsByModel.get(model) + 1);
  }
  Iterator<TemplateModel> models=numOfMappingsByModel.keySet().iterator();
  while (models.hasNext()) {
    TemplateModel model=models.next();
    int totalMappings=model.getConfigurations().size();
    if (totalMappings <= 1 || numOfMappingsByModel.get(model) < totalMappings) {
      models.remove();
    }
 else {
      numOfMappingsByModel.put(model,0);
    }
  }
  for (  TemplateMappingConfiguration mappingConfig : mappings) {
    TemplateModel model=mappingConfig.getModel();
    if (numOfMappingsByModel.containsKey(model)) {
      if (numOfMappingsByModel.get(model) == 0) {
        strings.add(new Pair<String,TemplateMappingConfiguration>(model.getLongName() + ".*",mappingConfig));
        numOfMappingsByModel.put(model,1);
      }
    }
 else {
      strings.add(new Pair<String,TemplateMappingConfiguration>(model.getLongName() + "." + mappingConfig.getName(),mappingConfig));
    }
  }
  Collections.sort(strings,new Comparator<Pair<String,TemplateMappingConfiguration>>(){
    @Override public int compare(    Pair<String,TemplateMappingConfiguration> o1,    Pair<String,TemplateMappingConfiguration> o2){
      return o1.o1.compareTo(o2.o1);
    }
  }
);
  return strings;
}
