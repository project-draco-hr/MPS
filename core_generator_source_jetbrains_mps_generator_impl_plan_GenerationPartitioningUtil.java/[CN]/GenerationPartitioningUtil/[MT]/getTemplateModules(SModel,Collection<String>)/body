{
  Queue<String> queue=new LinkedList<String>(ModelContentUtil.getUsedLanguageNamespaces(inputModel,false));
  if (additionalLanguages != null) {
    queue.addAll(additionalLanguages);
  }
  Set<String> processed=new HashSet<String>(queue);
  List<TemplateModule> result=new ArrayList<TemplateModule>();
  while (!queue.isEmpty()) {
    String next=queue.remove();
    LanguageRuntime language=LanguageRegistry.getInstance().getLanguage(next);
    if (language == null) {
      LOG.error(String.format("Model %s uses language %s which is missing (likely is not yet generated or is a bootstrap dependency)",inputModel.getModelName(),next));
      continue;
    }
    Collection<TemplateModule> generators=language.getGenerators();
    if (generators == null) {
      continue;
    }
    for (    TemplateModule generator : generators) {
      if (generator == null) {
        continue;
      }
      result.add(generator);
      for (      String used : generator.getUsedLanguages()) {
        if (!processed.contains(used)) {
          processed.add(used);
          queue.add(used);
        }
      }
      Collection<String> referencedModules=generator.getReferencedModules();
      if (referencedModules != null) {
        for (        String referenced : referencedModules) {
          int slash=referenced.indexOf('/');
          String sourceLanguage=referenced.substring(0,slash);
          if (!processed.contains(sourceLanguage)) {
            processed.add(sourceLanguage);
            queue.add(sourceLanguage);
          }
        }
      }
    }
  }
  return result;
}
