{
  List<Pair<String,TemplateMappingConfiguration>> strings=new ArrayList<Pair<String,TemplateMappingConfiguration>>();
  MultiMap<TemplateModel,TemplateMappingConfiguration> mcByModel=new MultiMap<TemplateModel,TemplateMappingConfiguration>();
  for (  TemplateMappingConfiguration mappingConfig : mappings) {
    mcByModel.putValue(mappingConfig.getModel(),mappingConfig);
  }
  for (  TemplateModel model : mcByModel.keySet()) {
    HashSet<TemplateMappingConfiguration> all=new HashSet<TemplateMappingConfiguration>(model.getConfigurations());
    HashSet<TemplateMappingConfiguration> seen=new HashSet<TemplateMappingConfiguration>(mcByModel.get(model));
    if (all.equals(seen)) {
      strings.add(new Pair<String,TemplateMappingConfiguration>(model.getLongName() + ".*",seen.iterator().next()));
    }
 else {
      for (      TemplateMappingConfiguration mappingConfig : seen) {
        strings.add(new Pair<String,TemplateMappingConfiguration>(model.getLongName() + "." + mappingConfig.getName(),mappingConfig));
      }
    }
  }
  Collections.sort(strings,new Comparator<Pair<String,TemplateMappingConfiguration>>(){
    @Override public int compare(    Pair<String,TemplateMappingConfiguration> o1,    Pair<String,TemplateMappingConfiguration> o2){
      return o1.o1.compareTo(o2.o1);
    }
  }
);
  return strings;
}
