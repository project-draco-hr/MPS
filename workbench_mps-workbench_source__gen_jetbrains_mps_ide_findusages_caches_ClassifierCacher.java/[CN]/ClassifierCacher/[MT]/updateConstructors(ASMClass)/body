{
  for (  ASMMethod c : ac.getDeclaredConstructors()) {
    if (c.isSynthetic()) {
      continue;
    }
    instance("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
    createVisibility(c);
    instance("jetbrains.mps.baseLanguage.structure.StubStatementList");
    for (    ASMTypeVariable tv : c.getTypeParameters()) {
      instance("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration");
    }
{
      ASMType pt;
      String pn;
      List<ASMAnnotation> pa;
      Iterator<ASMType> pt_iterator=ListSequence.fromList(c.getGenericParameterTypes()).iterator();
      Iterator<String> pn_iterator=ListSequence.fromList(c.getParameterNames()).iterator();
      Iterator<List<ASMAnnotation>> pa_iterator=ListSequence.fromList(c.getParameterAnnotations()).iterator();
      while (true) {
        if (!(pt_iterator.hasNext())) {
          break;
        }
        if (!(pn_iterator.hasNext())) {
          break;
        }
        if (!(pa_iterator.hasNext())) {
          break;
        }
        pt=pt_iterator.next();
        pn=pn_iterator.next();
        pa=pa_iterator.next();
        if (!(ac.isStatic()) && c.getGenericParameterTypes().get(0) == pt) {
          continue;
        }
        instance("jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
        getTypeByASMType(pt);
        addAnnotationsToParameter(pa);
      }
    }
    for (    ASMAnnotation annotation : c.getAnnotations()) {
      createAnnotation(annotation);
    }
    for (    ASMType exception : c.getExceptionTypes()) {
      getTypeByASMType(exception);
    }
  }
}
