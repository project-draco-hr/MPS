{
  final SNode container=SLinkOperations.getTarget(AttributeAccess_Behavior.call_getAttributeContainerType_6960953357954139822(SNodeOperations.as(enclosingNode,"jetbrains.mps.lang.smodel.structure.AttributeAccess")),"concept",false);
  Set<String> subconceptNames=LanguageHierarchyCache.getInstance().getAllDescendantsOfConcept(attributeType);
  final ModelAndImportedModelsScope modelScope=new ModelAndImportedModelsScope(model,true,scope);
  return SetSequence.fromSet(subconceptNames).select(new ISelector<String,SNode>(){
    public SNode select(    String fqName){
      return (SNode)SModelUtil.findConceptDeclaration(fqName,scope);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode attr){
      return modelScope.isInScope(attr) && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(((SNode)attr),LanguageAspect.BEHAVIOR),"jetbrains.mps.lang.behavior.structure.ConceptBehavior"),"method",true)).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return eq_h001dt_a0a0a0a0a0a0a0a0a0a0a6a3(SPropertyOperations.getString(it,"name"),"getRole");
        }
      }
) && BehaviorReflection.invokeVirtualStatic(String.class,new SConceptNodeAdapter(NameUtil.nodeFQName(attr)),"virtual_getRole_1262430001741497900",new Object[]{}) != null && ListSequence.fromList(SLinkOperations.getConceptLinkTargets(attr,"attributed")).any(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SConceptOperations.isSubConceptOf(container,NameUtil.nodeFQName(it));
        }
      }
);
    }
  }
);
}
