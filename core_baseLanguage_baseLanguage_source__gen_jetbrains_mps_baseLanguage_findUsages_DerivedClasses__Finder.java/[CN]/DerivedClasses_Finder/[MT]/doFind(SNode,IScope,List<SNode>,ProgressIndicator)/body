{
  List<SNode> derived=ListOperations.<SNode>createList();
  ListSequence.fromList(derived).addElement((SNode)node);
  int passed=0;
  while (ListSequence.fromList(derived).count() != passed) {
    SNode passingNode=ListSequence.fromList(derived).getElement(passed);
    for (    SNode classNode : FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.StraightDerivedClasses_Finder",passingNode,scope,indicator)) {
      ListSequence.fromList(derived).addElement(classNode);
    }
    if (passingNode != node) {
      ListOperations.addElement(_results,passingNode);
    }
    passed=passed + 1;
  }
}
