{
  ModelMergeRequest mrequest=(ModelMergeRequest)request;
  try {
    DiffContent[] contents=mrequest.getContents();
    final SModel baseModel=ModelDiffTool.readModel(contents[ModelMergeRequest.ORIGINAL],mrequest.getFile().getPath());
    final SModel mineModel=ModelDiffTool.readModel(contents[ModelMergeRequest.CURRENT],mrequest.getFile().getPath());
    final SModel newModel=ModelDiffTool.readModel(contents[ModelMergeRequest.LAST_REVISION],mrequest.getFile().getPath());
    final MergeModelsDialog dialog=ModelAccess.instance().runReadAction(new Computable<MergeModelsDialog>(){
      public MergeModelsDialog compute(){
        MPSProject project=request.getProject().getComponent(MPSProjectHolder.class).getMPSProject();
        IOperationContext context=new ModuleContext(baseModel.getModelDescriptor().getModule(),project);
        return new MergeModelsDialog(context,baseModel,mineModel,newModel);
      }
    }
);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.toFront();
      }
    }
);
    dialog.showDialog();
    if (dialog.getResultModel() != null) {
      byte[] bytes=ModelUtils.modelToBytes(dialog.getResultModel());
      mrequest.resolved(bytes);
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
catch (  ReadException e) {
    LOG.warning("Can't read models. Using text based diff...",e);
    DiffTool ideaDiffTool=DiffManager.getInstance().getIdeaDiffTool();
    if (ideaDiffTool.canShow(request)) {
      ideaDiffTool.show(request);
    }
  }
}
