{
  ModelMergeRequest mrequest=(ModelMergeRequest)request;
  try {
    DiffContent[] contents=mrequest.getContents();
    final SModel baseModel=ModelDiffTool.readModel(contents[ModelMergeRequest.ORIGINAL],mrequest.getFile().getPath());
    final SModel mineModel=ModelDiffTool.readModel(contents[ModelMergeRequest.CURRENT],mrequest.getFile().getPath());
    final SModel newModel=ModelDiffTool.readModel(contents[ModelMergeRequest.LAST_REVISION],mrequest.getFile().getPath());
    final MergeModelsDialog dialog=ModelAccess.instance().runReadAction(new Computable<MergeModelsDialog>(){
      public MergeModelsDialog compute(){
        return new MergeModelsDialog(null,baseModel,mineModel,newModel);
      }
    }
);
    zipModels(contents,mrequest.getFile());
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        dialog.toFront();
      }
    }
);
    dialog.showDialog();
    if (dialog.getResultModel() != null) {
      final SModel result=dialog.getResultModel();
      Document document=ModelAccess.instance().runReadAction(new Computable<Document>(){
        public Document compute(){
          return ModelPersistence.saveModel(result,false);
        }
      }
);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      JDOMUtil.writeDocument(document,baos);
      mrequest.resolved(baos.toByteArray());
    }
  }
 catch (  JDOMException e) {
    LOG.error(e);
  }
catch (  IOException e) {
    LOG.error(e);
  }
}
