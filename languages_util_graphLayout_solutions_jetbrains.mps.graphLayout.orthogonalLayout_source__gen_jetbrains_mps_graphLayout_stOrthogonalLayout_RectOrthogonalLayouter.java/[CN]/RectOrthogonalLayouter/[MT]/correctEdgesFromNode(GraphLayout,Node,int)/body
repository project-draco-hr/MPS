{
  Map<IEdge,List<Point>> edgeLayout=layout.getEdgeLayout();
  Rectangle rect=layout.getNodeLayout(node);
  List<Edge> sourceEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  List<Edge> targetEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  final Map<Edge,Point> adjPoint=MapSequence.<Edge,Point>fromMap(new HashMap<Edge,Point>());
  for (  Edge edge : ListSequence.<Edge>fromList(node.getOutEdges())) {
    List<Point> path=MapSequence.<IEdge,List<Point>>fromMap(edgeLayout).get(edge);
    if (ListSequence.<Point>fromList(path).getElement(0).y == ListSequence.<Point>fromList(path).getElement(1).y) {
      Point connectingPoint=ListSequence.<Point>fromList(path).first();
      if (connectingPoint.x == xCoord) {
        ListSequence.<Edge>fromList(sourceEdges).addElement(edge);
        MapSequence.<Edge,Point>fromMap(adjPoint).put(edge,ListSequence.<Point>fromList(path).getElement(1));
      }
    }
  }
  for (  Edge edge : ListSequence.<Edge>fromList(node.getInEdges())) {
    List<Point> path=MapSequence.<IEdge,List<Point>>fromMap(edgeLayout).get(edge);
    int size=ListSequence.<Point>fromList(path).count();
    if (ListSequence.<Point>fromList(path).getElement(size - 1).y == ListSequence.<Point>fromList(path).getElement(size - 2).y) {
      Point connectingPoint=ListSequence.<Point>fromList(path).last();
      if (connectingPoint.x == xCoord) {
        ListSequence.<Edge>fromList(targetEdges).addElement(edge);
        MapSequence.<Edge,Point>fromMap(adjPoint).put(edge,ListSequence.<Point>fromList(path).getElement(size - 2));
      }
    }
  }
  int num=ListSequence.<Edge>fromList(sourceEdges).count() + ListSequence.<Edge>fromList(targetEdges).count() + 1;
  sourceEdges=ListSequence.<Edge>fromList(sourceEdges).sort(new ISelector<Edge,Comparable<?>>(){
    public Comparable<?> select(    Edge it){
      return Math.abs(MapSequence.<Edge,Point>fromMap(adjPoint).get(it).x - xCoord);
    }
  }
,false).toListSequence();
  targetEdges=ListSequence.<Edge>fromList(targetEdges).sort(new ISelector<Edge,Comparable<?>>(){
    public Comparable<?> select(    Edge it){
      return Math.abs(MapSequence.<Edge,Point>fromMap(adjPoint).get(it).x - xCoord);
    }
  }
,true).toListSequence();
  int step=rect.height / num;
  int curY=rect.y + step;
  for (  Edge edge : ListSequence.<Edge>fromList(targetEdges)) {
    List<Point> path=MapSequence.<IEdge,List<Point>>fromMap(edgeLayout).get(edge);
    int size=ListSequence.<Point>fromList(path).count();
    ListSequence.<Point>fromList(path).setElement(size - 1,new Point(ListSequence.<Point>fromList(path).getElement(size - 1).x,curY));
    ListSequence.<Point>fromList(path).setElement(size - 2,new Point(ListSequence.<Point>fromList(path).getElement(size - 2).x,curY));
    curY+=step;
  }
  for (  Edge edge : ListSequence.<Edge>fromList(sourceEdges)) {
    List<Point> path=MapSequence.<IEdge,List<Point>>fromMap(edgeLayout).get(edge);
    ListSequence.<Point>fromList(path).setElement(0,new Point(ListSequence.<Point>fromList(path).getElement(0).x,curY));
    ListSequence.<Point>fromList(path).setElement(1,new Point(ListSequence.<Point>fromList(path).getElement(1).x,curY));
    curY+=step;
  }
}
