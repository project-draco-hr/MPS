{
  if (graph.getNumNodes() == 1) {
    GraphLayout layout=GraphLayoutFactory.createGraphLayout(graph);
    Node node=graph.getNode(0);
    layout.setLayoutFor(node,new Rectangle(20,20,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).width - myEdgeDistance,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).height));
    return layout;
  }
  List<Edge> oldEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  ListSequence.<Edge>fromList(oldEdges).addSequence(ListSequence.<Edge>fromList(graph.getEdges()));
  BiconnectAugmentation.makeBiconnected(graph);
  Node addedNode=ListSequence.<Node>fromList(graph.getNodes()).last();
  EdgesHistoryManager historyManager=new EdgesHistoryManager(graph);
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    if (!(MapSequence.fromMap(nodeSizes).containsKey(node))) {
      MapSequence.<Node,Dimension>fromMap(nodeSizes).put(node,new Dimension(myNodeSize,myNodeSize));
    }
  }
  Map<Edge,Dimension> newEdgeSizes=MapSequence.<Edge,Dimension>fromMap(new HashMap<Edge,Dimension>());
  Set<Edge> hasLabel=SetSequence.<Edge>fromSet(new HashSet<Edge>());
  for (  Edge oldEdge : ListSequence.<Edge>fromList(oldEdges)) {
    List<Edge> history=historyManager.getHistory(oldEdge);
    Node cur=oldEdge.getSource();
    if (!(ListSequence.<Node>fromList(ListSequence.<Edge>fromList(history).first().getAdjacentNodes()).contains(cur))) {
      history=ListSequence.<Edge>fromList(history).reversedList();
    }
    Edge midEdge=ListSequence.<Edge>fromList(history).getElement(ListSequence.<Edge>fromList(history).count() / 2);
    for (    Edge edge : ListSequence.<Edge>fromList(history)) {
      if (edge == midEdge && MapSequence.<Edge,Dimension>fromMap(edgeSizes).get(oldEdge) != null) {
        MapSequence.<Edge,Dimension>fromMap(newEdgeSizes).put(edge,MapSequence.<Edge,Dimension>fromMap(edgeSizes).get(oldEdge));
        MapSequence.<Edge,Edge>fromMap(myMovedLabels).put(oldEdge,edge);
        SetSequence.fromSet(hasLabel).addElement(edge);
      }
 else {
        MapSequence.<Edge,Dimension>fromMap(newEdgeSizes).put(edge,new Dimension(myEdgeDistance,myEdgeDistance));
      }
    }
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    if (MapSequence.<Edge,Dimension>fromMap(newEdgeSizes).get(edge) == null) {
      MapSequence.<Edge,Dimension>fromMap(newEdgeSizes).put(edge,new Dimension(myEdgeDistance,myEdgeDistance));
    }
  }
  List<Node> outerNodes=ListSequence.<Node>fromList(new ArrayList<Node>());
  for (  Dart dart : ListSequence.<Dart>fromList(embeddedGraph.getOuterFace().getDarts())) {
    ListSequence.<Node>fromList(outerNodes).addElement(dart.getTarget());
  }
  Node s=ListSequence.<Node>fromList(outerNodes).getElement(0);
  Node t=ListSequence.<Node>fromList(outerNodes).getElement((ListSequence.<Node>fromList(outerNodes).count()) / 2);
  GraphOrientation.orientST(graph,s,t);
  STPlanarGraph stPlanarGraph=new STPlanarGraph(embeddedGraph,s,t);
  ConstraintsSupporter supporter=new ConstraintsSupporter();
  supporter.setMinEdgeDistance(myEdgeDistance,15);
  Map<Object,Rectangle> representation=supporter.getRepresentation(stPlanarGraph,nodeSizes,newEdgeSizes);
  GraphLayout graphLayout=this.createLayout(graph,representation,nodeSizes,newEdgeSizes,hasLabel);
  if (myLayoutLevel > 0) {
    this.removeTempObjects(oldEdges,graphLayout,graph,addedNode,historyManager);
  }
  if (myLayoutLevel > 1) {
    LayoutOptimizer.optimizeEdges(graphLayout);
  }
  return graphLayout;
}
