{
  Map<Node,Integer> components=ConnectivityComponents.getComponents(graph);
  int maxComponent=0;
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    maxComponent=Math.max(maxComponent,MapSequence.<Node,Integer>fromMap(components).get(node));
  }
  Map<Node,Node> newNodes=new NodeMap<Node>(graph);
  Map<Node,Graph> nodeSubgraphs=new NodeMap<Graph>(graph);
  Map<Edge,Edge> newEdges=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  List<Graph> subgraphs=ListSequence.<Graph>fromList(new ArrayList<Graph>());
  Map<Graph,Map<Node,Dimension>> subNodeSizes=MapSequence.<Graph,Map<Node,Dimension>>fromMap(new HashMap<Graph,Map<Node,Dimension>>());
  Map<Graph,Map<Edge,Dimension>> subEdgeSizes=MapSequence.<Graph,Map<Edge,Dimension>>fromMap(new HashMap<Graph,Map<Edge,Dimension>>());
  for (int i=0; i <= maxComponent; i++) {
    Graph subgraph=ListSequence.<Graph>fromList(subgraphs).addElement(new Graph());
    MapSequence.<Graph,Map<Node,Dimension>>fromMap(subNodeSizes).put(subgraph,MapSequence.<Node,Dimension>fromMap(new HashMap<Node,Dimension>()));
    MapSequence.<Graph,Map<Edge,Dimension>>fromMap(subEdgeSizes).put(subgraph,MapSequence.<Edge,Dimension>fromMap(new HashMap<Edge,Dimension>()));
  }
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Graph subgraph=ListSequence.<Graph>fromList(subgraphs).getElement(MapSequence.<Node,Integer>fromMap(components).get(node));
    Node newNode=subgraph.createNode();
    MapSequence.<Node,Node>fromMap(newNodes).put(node,newNode);
    MapSequence.<Node,Graph>fromMap(nodeSubgraphs).put(node,subgraph);
    MapSequence.<Node,Dimension>fromMap(MapSequence.<Graph,Map<Node,Dimension>>fromMap(subNodeSizes).get(subgraph)).put(newNode,new Dimension(MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).width + myEdgeDistance,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).height));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Graph subgraph=MapSequence.<Node,Graph>fromMap(nodeSubgraphs).get(edge.getSource());
    Edge newEdge=subgraph.connect(MapSequence.<Node,Node>fromMap(newNodes).get(edge.getSource()),MapSequence.<Node,Node>fromMap(newNodes).get(edge.getTarget()));
    MapSequence.<Edge,Edge>fromMap(newEdges).put(edge,newEdge);
    if (MapSequence.<Edge,Dimension>fromMap(edgeSizes).get(edge) == null) {
      MapSequence.<Edge,Dimension>fromMap(MapSequence.<Graph,Map<Edge,Dimension>>fromMap(subEdgeSizes).get(subgraph)).put(newEdge,new Dimension(myEdgeDistance,myEdgeDistance));
    }
 else {
      MapSequence.<Edge,Dimension>fromMap(MapSequence.<Graph,Map<Edge,Dimension>>fromMap(subEdgeSizes).get(subgraph)).put(newEdge,new Dimension(MapSequence.<Edge,Dimension>fromMap(edgeSizes).get(edge).width + myEdgeDistance,MapSequence.<Edge,Dimension>fromMap(edgeSizes).get(edge).height + myEdgeDistance));
    }
  }
  Map<Graph,GraphLayout> subgraphLayouts=MapSequence.<Graph,GraphLayout>fromMap(new HashMap<Graph,GraphLayout>());
  int shiftX=0;
  for (  Graph subgraph : ListSequence.<Graph>fromList(subgraphs)) {
    GraphLayout curLayout=findSTLayout(subgraph,MapSequence.<Graph,Map<Node,Dimension>>fromMap(subNodeSizes).get(subgraph),MapSequence.<Graph,Map<Edge,Dimension>>fromMap(subEdgeSizes).get(subgraph));
    curLayout=curLayout.shift(shiftX,0);
    MapSequence.<Graph,GraphLayout>fromMap(subgraphLayouts).put(subgraph,curLayout);
    shiftX=curLayout.getContainingRectangle().x + curLayout.getContainingRectangle().width + 30;
  }
  GraphLayout layout=GraphLayoutFactory.createGraphLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Graph subgraph=MapSequence.<Node,Graph>fromMap(nodeSubgraphs).get(node);
    layout.setLayoutFor(node,MapSequence.<Graph,GraphLayout>fromMap(subgraphLayouts).get(subgraph).getNodeLayout(MapSequence.<Node,Node>fromMap(newNodes).get(node)));
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    GraphLayout subgraphLayout=MapSequence.<Graph,GraphLayout>fromMap(subgraphLayouts).get(MapSequence.<Node,Graph>fromMap(nodeSubgraphs).get(edge.getSource()));
    layout.setLayoutFor(edge,subgraphLayout.getEdgeLayout(MapSequence.<Edge,Edge>fromMap(newEdges).get(edge)));
    if (MapSequence.fromMap(edgeSizes).containsKey(edge)) {
      layout.setLabelLayout(edge,subgraphLayout.getLabelLayout(MapSequence.<Edge,Edge>fromMap(myMovedLabels).get(MapSequence.<Edge,Edge>fromMap(newEdges).get(edge))));
    }
  }
  if (myLayoutLevel == 0) {
    return MapSequence.<Graph,GraphLayout>fromMap(subgraphLayouts).get(ListSequence.<Graph>fromList(subgraphs).getElement(0));
  }
 else {
    return layout;
  }
}
