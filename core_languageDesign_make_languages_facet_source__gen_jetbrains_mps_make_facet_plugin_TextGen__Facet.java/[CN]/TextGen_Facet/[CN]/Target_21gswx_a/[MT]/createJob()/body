{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      Iterable<IResource> _output_21gswx_a0a=null;
switch (0) {
case 0:
        final FileProcessor fileProc=new FileProcessor();
      for (      IResource resource : Sequence.fromIterable(input)) {
        GResource gres=new GResource().assignFrom((GResource)resource);
        if (!(gres.status().isOk())) {
          Logger.getLogger("jetbrains.mps.make.TextGen").error("Generation was not OK");
          return new IResult.FAILURE(_output_21gswx_a0a);
        }
        monitor.currentProgress().beginWork("Generating text...",100,monitor.currentProgress().workLeft());
        IFile targetDir=FileSystem.getInstance().getFileByPath(gres.module().getOutputFor(gres.model()));
        JavaStreamHandler javaStreamHandler=new JavaStreamHandler(gres.model(),targetDir,fileProc);
        try {
          ModelGenerationStatusManager mgsm=ModelGenerationStatusManager.getInstance();
          BLDependenciesCache bldc=BLDependenciesCache.getInstance();
          TraceInfoCache tic=TraceInfoCache.getInstance();
          GenerationDependenciesCache gdc=GenerationDependenciesCache.getInstance();
          boolean res;
          res=new TextGenerator(javaStreamHandler,mgsm.getCacheGenerator(),bldc.getGenerator(),tic.getGenerator(),gdc.getGenerator()).handleOutput(pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).operationContext(),gres.status());
          if (!(res)) {
            Logger.getLogger("jetbrains.mps.make.TextGen").error("TextGenerator returned false");
            return new IResult.FAILURE(_output_21gswx_a0a);
          }
        }
  finally {
          javaStreamHandler.dispose();
        }
        monitor.currentProgress().finishWork("Generating text...");
        _output_21gswx_a0a=Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new TResource(gres.module()))));
      }
    ModelAccess.instance().writeFilesInEDT(new Runnable(){
      public void run(){
        fileProc.saveGeneratedFiles();
      }
    }
);
default :
  return new IResult.SUCCESS(_output_21gswx_a0a);
}
}
}
;
}
