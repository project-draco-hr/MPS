{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      Iterable<IResource> _output_21gswx_a0a=null;
switch (0) {
case 0:
        monitor.currentProgress().beginWork("Writing",Sequence.fromIterable(input).count() * 100,monitor.currentProgress().workLeft());
      for (      IResource resource : Sequence.fromIterable(input)) {
        final FileProcessor fileProc=new FileProcessor();
        GResource gres=(GResource)resource;
        monitor.currentProgress().advanceWork("Writing",50,gres.status().getInputModel().getSModelReference().getSModelFqName().getLongName());
        if (!(gres.status().isOk())) {
          Logger.getLogger("jetbrains.mps.make.TextGen").error("Generation was not OK");
          return new IResult.FAILURE(_output_21gswx_a0a);
        }
        IFile targetDir=FileSystem.getInstance().getFileByPath(gres.module().getOutputFor(gres.model()));
        JavaStreamHandler javaStreamHandler=new JavaStreamHandler(gres.model(),targetDir,fileProc);
        boolean ok;
        try {
          ok=new TextGenerator(javaStreamHandler,ModelGenerationStatusManager.getInstance().getCacheGenerator(),BLDependenciesCache.getInstance().getGenerator(),TraceInfoCache.getInstance().getGenerator(),GenerationDependenciesCache.getInstance().getGenerator()).handleOutput(pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).operationContext(),gres.status());
        }
  finally {
          javaStreamHandler.dispose();
        }
        final SModelDescriptor outputMD=gres.status().getOutputModelDescriptor();
        if (outputMD instanceof TransientModelsModule.TransientSModelDescriptor) {
          ModelAccess.instance().runWriteInEDT(new Runnable(){
            public void run(){
              TransientModelsModule.TransientSModelDescriptor tmd=(TransientModelsModule.TransientSModelDescriptor)outputMD;
              ((TransientModelsModule)tmd.getModule()).removeModel(tmd);
            }
          }
);
        }
        CleanupManager.getInstance().cleanup();
        if (!(ok)) {
          Logger.getLogger("jetbrains.mps.make.TextGen").error("TextGenerator returned false");
          return new IResult.FAILURE(_output_21gswx_a0a);
        }
        ModelAccess.instance().writeFilesInEDT(new Runnable(){
          public void run(){
            fileProc.flushChanges();
          }
        }
);
        monitor.currentProgress().advanceWork("Writing",50);
        _output_21gswx_a0a=Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new TResource(gres.module()))));
      }
    monitor.currentProgress().finishWork("Writing");
default :
  return new IResult.SUCCESS(_output_21gswx_a0a);
}
}
}
;
}
