{
  return new IJob(){
    public IResult execute(    final Iterable<IResource> input,    final IJobMonitor monitor,    final IParametersPool pool){
      Iterable<IResource> _output_21gswx_a0b=null;
switch (0) {
case 0:
        for (        IResource resource : Sequence.fromIterable(input)) {
          GResource gres=new GResource().assignFrom((GResource)resource);
          Map<String,String> texts=MapSequence.fromMap(new HashMap<String,String>());
          String prefix=JavaNameUtil.packageNameForModelUID(gres.status().getOutputModel().getSModelReference());
          for (          SNode root : Sequence.fromIterable(gres.status().getOutputModel().roots()).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode rt){
              return rt.getName() != null;
            }
          }
)) {
            TextGenerationResult tgr=TextGenerationUtil.generateText(pool.parameters(new ITarget.Name("checkParameters"),Generate_Facet.Target_fi61u2_a.Variables.class).operationContext(),root);
            if (tgr.hasErrors()) {
              return new IResult.FAILURE(_output_21gswx_a0b);
            }
            MapSequence.fromMap(texts).put(prefix + "." + root.getName(),tgr.getText());
          }
          _output_21gswx_a0b=Sequence.fromIterable(_output_21gswx_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new FResource(texts,gres.module(),gres.model()))));
        }
default :
      return new IResult.SUCCESS(_output_21gswx_a0b);
  }
}
}
;
}
