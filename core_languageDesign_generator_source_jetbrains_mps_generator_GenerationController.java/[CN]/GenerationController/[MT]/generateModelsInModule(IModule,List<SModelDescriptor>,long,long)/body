{
  boolean currentGenerationOK=true;
  IOperationContext invocationContext=myModulesToContexts.get(module);
  setText2("module " + module,totalJob,startJobTime);
  String outputFolder=module != null ? module.getGeneratorOutputPath() : null;
  if (outputFolder != null && !new File(outputFolder).exists()) {
    new File(outputFolder).mkdirs();
    try {
      IProjectHandler projectHandler=getProjectHandler();
      if (projectHandler != null) {
        projectHandler.addSourceRoot(outputFolder);
      }
    }
 catch (    Exception e) {
      myMesssages.handle(new Message(MessageKind.WARNING,GenerationController.class,"Can't add output folder to IDEA as sources"));
    }
  }
  myMesssages.handle(new Message(MessageKind.INFORMATION,GenerationController.class,"    target root folder: \"" + outputFolder + "\""));
  String wasLoggingThreshold=null;
  IGenerationSession generationSession=new GenerationSession(invocationContext,mySaveTransientModels,myProgress,myMesssages);
  try {
    if (mySettings.isShowErrorsOnly()) {
      wasLoggingThreshold=Logger.setThreshold("ERROR");
    }
    Logger.addLoggingHandler(generationSession.getLoggingHandler());
    for (    SModelDescriptor inputModel : inputModels) {
      TypeChecker.getInstance().setIsGeneration(true);
      if (!myGenerationType.isApplicable(inputModel)) {
        LOG.error("Can't apply generation type " + myGenerationType + " to "+ inputModel.getSModelFqName());
        continue;
      }
      info("");
      String taskName=ModelsProgressUtil.generationModelTaskName(inputModel);
      setText2("model " + inputModel.getSModelFqName(),totalJob,startJobTime);
      TaskProgressHelper progress=new TaskProgressHelper(this);
      progress.startLeafTask(taskName,myProgress,totalJob,startJobTime);
      GenerationStatus status=generationSession.generateModel(inputModel);
      currentGenerationOK=currentGenerationOK && status.isOk();
      info("handling output...");
      checkMonitorCanceled();
      if (status.getOutputModel() != null) {
        boolean result=myGenerationType.handleOutput(status,outputFolder,invocationContext,myProgress,myMesssages);
        if (!result) {
          info("there were errors.");
          currentGenerationOK=false;
        }
      }
 else       if (!(status.isCanceled() || status.isError())) {
        myGenerationType.handleEmptyOutput(status,outputFolder,invocationContext,myProgress,myMesssages);
      }
      generationSession.discardTransients();
      CleanupManager.getInstance().cleanup();
      progress.finishTask();
      setText2("",totalJob,startJobTime);
    }
  }
  finally {
    if (wasLoggingThreshold != null) {
      Logger.setThreshold(wasLoggingThreshold);
    }
    Logger.removeLoggingHandler(generationSession.getLoggingHandler());
    TypeChecker.getInstance().setIsGeneration(false);
  }
  checkMonitorCanceled();
  info("");
  setText2("",totalJob,startJobTime);
  return currentGenerationOK;
}
