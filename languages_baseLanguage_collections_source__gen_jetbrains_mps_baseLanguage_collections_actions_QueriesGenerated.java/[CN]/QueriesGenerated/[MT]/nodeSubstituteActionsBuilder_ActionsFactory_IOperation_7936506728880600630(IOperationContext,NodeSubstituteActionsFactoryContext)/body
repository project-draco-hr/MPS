{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  final SNode opndType=new Computable<SNode>(){
    public SNode compute(){
      return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getParentNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand")));
    }
  }
.compute();
  final Iterable<SConcept> subconceptOfSortedSetOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c4baf9d4L,"jetbrains.mps.baseLanguage.collections.structure.SortedSetOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  final Iterable<SConcept> subconceptOfSetOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x11d95148c3eL,"jetbrains.mps.baseLanguage.collections.structure.AbstractSetOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  final Iterable<SConcept> subconceptOfMapOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x117aea47a16L,"jetbrains.mps.baseLanguage.collections.structure.MapOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  final Iterable<SConcept> subconceptOfSortedMapOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c4060180L,"jetbrains.mps.baseLanguage.collections.structure.SortedMapOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  final Iterable<SAbstractConcept> subconceptOfIATN=new Computable<Iterable<SAbstractConcept>>(){
    public Iterable<SAbstractConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x53310200e8d9eaf6L,"jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing"),_context.getModel())).where(new IWhereFilter<SAbstractConcept>(){
        public boolean accept(        SAbstractConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
  final Iterable<SConcept> subconceptOfSeqOp=new Computable<Iterable<SConcept>>(){
    public Iterable<SConcept> compute(){
      return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x10c26c9a2d9L,"jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"),_context.getModel())).where(new IWhereFilter<SConcept>(){
        public boolean accept(        SConcept it){
          return !(it.isAbstract());
        }
      }
);
    }
  }
.compute();
{
    Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        List<SAbstractConcept> allApplicable=ListSequence.fromList(new ArrayList<SAbstractConcept>());
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(opndType,HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c482dd1aL,"jetbrains.mps.baseLanguage.collections.structure.SortedSetType")),false) != null) {
          ListSequence.fromList(allApplicable).addSequence(Sequence.fromIterable(subconceptOfSortedSetOp));
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(opndType,HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x11d91cbbcd0L,"jetbrains.mps.baseLanguage.collections.structure.SetType")),false) != null) {
          ListSequence.fromList(allApplicable).addSequence(Sequence.fromIterable(subconceptOfSetOp));
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(opndType,HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x120c4067207L,"jetbrains.mps.baseLanguage.collections.structure.SortedMapType")),false) != null) {
          ListSequence.fromList(allApplicable).addSequence(Sequence.fromIterable(subconceptOfSortedMapOp));
        }
        if (TypeChecker.getInstance().getRuntimeSupport().coerce_(opndType,HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x116db7e6bcbL,"jetbrains.mps.baseLanguage.collections.structure.MapType")),false) != null) {
          ListSequence.fromList(allApplicable).addSequence(Sequence.fromIterable(subconceptOfMapOp));
        }
        ListSequence.fromList(allApplicable).addSequence(Sequence.fromIterable(subconceptOfIATN).where(new IWhereFilter<SAbstractConcept>(){
          public boolean accept(          SAbstractConcept it){
            return SetSequence.fromSet(IApplicableToNothing__BehaviorDescriptor.getAllApplicableTypes_id5cL0w3DYWgB.invoke(SNodeOperations.asSConcept(it))).any(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return TypeChecker.getInstance().getSubtypingManager().isSubtype(opndType,it,false);
              }
            }
);
          }
        }
));
        ListSequence.fromList(allApplicable).addSequence(Sequence.fromIterable(subconceptOfSeqOp).ofType(SAbstractConcept.class).subtract(Sequence.fromIterable(subconceptOfSortedSetOp)).subtract(Sequence.fromIterable(subconceptOfSetOp)).subtract(Sequence.fromIterable(subconceptOfSortedMapOp)).subtract(Sequence.fromIterable(subconceptOfMapOp)).subtract(Sequence.fromIterable(subconceptOfIATN)));
        return ListSequence.fromList(allApplicable).distinct().select(new ISelector<SAbstractConcept,SNode>(){
          public SNode select(          SAbstractConcept it){
            return (SNode)SNodeOperations.asNode(it);
          }
        }
);
      }
    }
.compute();
    if (queryResult != null) {
      for (      SNode item : queryResult) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
      }
    }
  }
  return result;
}
