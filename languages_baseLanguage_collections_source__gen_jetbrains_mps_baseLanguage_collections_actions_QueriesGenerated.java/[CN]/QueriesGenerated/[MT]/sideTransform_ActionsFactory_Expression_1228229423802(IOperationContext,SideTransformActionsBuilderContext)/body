{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode de=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.collections.structure.DowncastExpression");
      SLinkOperations.setTarget(de,"expression",_context.getSourceNode(),true);
      return de;
    }
    public String getMatchingText(    String pattern){
      return "/";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
    public String getDescriptionText(    String pattern){
      return "downcast to lower level";
    }
  }
);
  return result;
}
