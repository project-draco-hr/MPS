{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
  final SNode mapType;
{
    Computable computable=new Computable(){
      public Object compute(){
        return TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.MapType"),false);
      }
    }
;
    mapType=(SNode)computable.compute();
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MapElement");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      @Nullable final EditorContext editorContext,      String pattern){
        SNode mapElement=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.collections.structure.MapElement");
        SLinkOperations.setTarget(mapElement,"map",_context.getSourceNode(),true);
        return mapElement;
      }
      public String getMatchingText(      String pattern){
        return "[";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
      public SNode getActionType(      String pattern){
        return SLinkOperations.getTarget(mapType,"valueType",true);
      }
    }
);
  }
  return result;
}
