{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
      public Iterable<SNode> compute(){
        return ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL,0x9c53c54016f6ad4fL,0x1201f00ef75L,"jetbrains.mps.baseLanguage.collections.structure.AbstractIteratorOperation"),_context.getModel())).where(new IWhereFilter<SAbstractConcept>(){
          public boolean accept(          SAbstractConcept it){
            return !(it.isAbstract());
          }
        }
).select(new ISelector<SAbstractConcept,SNode>(){
          public SNode select(          SAbstractConcept it){
            return (SNode)(SNode)SNodeOperations.asNode(it);
          }
        }
);
      }
    }
.compute();
    if (queryResult != null) {
      for (      SNode item : queryResult) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ChildSubstituteActionsHelper.createDefaultSubstituteActions(item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter())));
      }
    }
  }
  return result;
}
