{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("instruction",new BaseReferenceConstraintsDescriptor("instruction",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode analyzer : SModelOperations.getRootsIncludingImported(_context.getModel(),operationContext.getScope(),"jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer")) {
            ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(analyzer,"instruction",true)));
          }
          return result;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_yymroq_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
