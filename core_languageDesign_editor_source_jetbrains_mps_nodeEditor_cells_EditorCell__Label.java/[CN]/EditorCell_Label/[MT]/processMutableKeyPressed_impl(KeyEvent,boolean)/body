{
  String myText=myTextLine.getText();
  int caretPosition=myTextLine.getCaretPosition();
  EditorComponent editor=getEditorContext().getNodeEditorComponent();
  if (keyEvent.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
    if (myTextLine.hasNonTrivialSelection()) {
      deleteSelection();
      deleteIfPossible();
      return true;
    }
    if (caretPosition > 0) {
      String newText=myText.substring(0,caretPosition - 1) + myText.substring(caretPosition);
      if (!allowErrors && !isValidText(newText)) {
        return false;
      }
      changeText(newText);
      if (!isCaretPositionAllowed(caretPosition - 1))       return false;
      setCaretPosition(caretPosition - 1);
      ensureCaretVisible();
      deleteIfPossible();
      return true;
    }
 else {
      if (allowErrors && canDeleteFrom(getPrevLeaf())) {
        EditorCell_Label label=(EditorCell_Label)getPrevLeaf();
        getEditorContext().getNodeEditorComponent().changeSelection(label);
        label.end();
        label.doProcessKeyPressed(keyEvent,true);
        return true;
      }
      return false;
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_DELETE) {
    if (myTextLine.hasNonTrivialSelection()) {
      deleteSelection();
      deleteIfPossible();
      return true;
    }
 else     if (caretPosition < myText.length()) {
      String newText=myText.substring(0,caretPosition) + myText.substring(caretPosition + 1);
      if (!allowErrors && !isValidText(newText)) {
        return false;
      }
      changeText(newText);
      ensureCaretVisible();
      deleteIfPossible();
      return true;
    }
 else {
      if (allowErrors && canDeleteFrom(getNextLeaf())) {
        EditorCell_Label label=(EditorCell_Label)getNextLeaf();
        getEditorContext().getNodeEditorComponent().changeSelection(label);
        label.home();
        label.doProcessKeyPressed(keyEvent,true);
        return true;
      }
      return false;
    }
  }
  int startSelection=myTextLine.getStartTextSelectionPosition();
  int endSelection=myTextLine.getEndTextSelectionPosition();
  char keyChar=keyEvent.getKeyChar();
  if (KeyboardUtil.isDefaultAction(keyEvent)) {
    String newText=myText.substring(0,startSelection) + keyChar + myText.substring(endSelection);
    if (!allowErrors && !isValidText(newText)) {
      return false;
    }
    changeText(newText);
    setCaretPositionIfPossible(startSelection + 1);
    myTextLine.resetSelection();
    editor.resetLastCaretX();
    ensureCaretVisible();
    return true;
  }
  return false;
}
