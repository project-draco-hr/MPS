{
  Set<String> classpathItems=SetSequence.fromSet(new LinkedHashSet<String>());
  final Iterable<String> OTHER_CLASSES=Arrays.asList("jetbrains.mps.internal.collections.runtime.ListSequence","jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes","jetbrains.mps.typesystem.inference.TypeChecker","jetbrains.mps.editor.runtime.impl.LanguagesKeymapManager","jetbrains.mps.intentions.IntentionsManager","jetbrains.mps.ide.findusages.FindersManager","jetbrains.mps.analyzers.runtime.framework.CustomAnalyzerRunner","jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple");
  Iterable<Class> classes=Arrays.<Class>asList(MergeDriverMain.class,FileUtil.class,MergeSession.class,SModel.class,IdeMain.class);
  classes=Sequence.fromIterable(OTHER_CLASSES).select(new ISelector<String,Class>(){
    public Class select(    String cn){
      try {
        return (Class)Class.forName(cn);
      }
 catch (      ClassNotFoundException e) {
        if (log.isErrorEnabled()) {
          log.error("",e);
        }
        return null;
      }
    }
  }
).concat(Sequence.fromIterable(classes));
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(classes).select(new ISelector<Class,String>(){
    public String select(    Class c){
      return PathUtil.getJarPathForClass(c);
    }
  }
));
  SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(mpsAddJars).select(new ISelector<String,String>(){
    public String select(    String it){
      return PathManager.getLibPath() + File.separator + it;
    }
  }
));
  return classpathItems;
}
