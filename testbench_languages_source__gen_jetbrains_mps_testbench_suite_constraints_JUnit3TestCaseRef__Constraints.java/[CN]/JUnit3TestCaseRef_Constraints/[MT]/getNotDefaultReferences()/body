{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("klass",new BaseReferenceConstraintsDescriptor("klass",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          IScope ms=ModuleSuite_Behavior.call_scope_1280144168199518341(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false));
          return new VisibleClassifiersScope(_context.getEnclosingNode(),IClassifiersSearchScope.CLASS,(ms != null ? ms : operationContext.getScope())){
            @NotNull @Override public List<SNode> getClassifiers(){
              SNode testCase=SLinkOperations.getTarget(new JUnit3TestCaseRef_Constraints.QuotationClass_qx1fe9_a0a0a0a0a0b0a0a0a0b0a1a0b0a().createNode(),"classifier",false);
              List<SNode> res=super.getClassifiers();
              for (Iterator<SNode> it=ListSequence.<SNode>fromList(res).iterator(); it.hasNext(); ) {
                if (!(Classifier_Behavior.call_isDescendant_7165541881557222913(it.next(),testCase))) {
                  it.remove();
                }
              }
              return res;
            }
          }
;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_qx1fe9_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
