{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("klass",new BaseReferenceConstraintsDescriptor("klass",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode module=SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.testbench.suite.structure.ModuleSuite",true,false);
          return Sequence.fromIterable(ModuleSuite_Behavior.call_models_1280144168199531863(module)).translate(new ITranslator2<SModel,SNode>(){
            public Iterable<SNode> translate(            SModel it){
              return ListSequence.fromList(SModelOperations.getRoots(((SModel)it),"jetbrains.mps.baseLanguage.structure.ClassConcept")).where(new IWhereFilter<SNode>(){
                public boolean accept(                SNode it){
                  return BehaviorReflection.invokeVirtual(Boolean.TYPE,it,"virtual_isDescendant_7165541881557222913",new Object[]{SLinkOperations.getTarget(_quotation_createNode_qx1fe9_a0a0a0a0a0a0a0b0a0(),"classifier",false)});
                }
              }
);
            }
          }
);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_qx1fe9_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
