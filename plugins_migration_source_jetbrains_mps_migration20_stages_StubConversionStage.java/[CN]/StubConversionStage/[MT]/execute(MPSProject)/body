{
  myProject=p;
  for (  Language l : p.getProjectModules(Language.class)) {
    Set<SModelReference> toRemove=new HashSet<SModelReference>();
    Set<SModelReference> toAdd=new HashSet<SModelReference>();
    List<SModelReference> acc=l.getModuleDescriptor().getAccessoryModels();
    for (    SModelReference ref : acc) {
      if (!(ref.getSModelId() instanceof SModelId.ForeignSModelId))       continue;
      toRemove.add(ref);
      for (      SModelDescriptor md : l.getScope().getModelDescriptors()) {
        if (md.getLongName().equals(ref.getLongName())) {
          toAdd.add(md.getSModelReference());
          break;
        }
      }
    }
    acc.removeAll(toRemove);
    acc.addAll(toAdd);
    l.save();
  }
  myRes=reResolveStubRefs(p);
  SModelRepository.getInstance().saveAll();
  new OptimizeImportsHelper(ProjectOperationContext.get(p.getProject())).optimizeProjectImports(p);
  for (  IModule module : p.getModules()) {
    module.save();
  }
  SModelRepository.getInstance().saveAll();
  ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
}
