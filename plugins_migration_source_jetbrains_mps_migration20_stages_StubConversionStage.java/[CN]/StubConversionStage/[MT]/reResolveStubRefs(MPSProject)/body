{
  Res res=new Res();
  boolean reloadNeeded=false;
  ModelResolveCache cache=new ModelResolveCache();
  for (  IModule module : collectModulesWithGenerators(p)) {
    cache.clearModuleCache();
    for (    SModelDescriptor d : module.getOwnModelDescriptors()) {
      if (!(d instanceof EditableSModelDescriptor))       continue;
      if (!(SModelStereotype.isUserModel(d)))       continue;
      Set<SModelReference> toRemove=new HashSet<SModelReference>();
      for (      SNode node : d.getSModel().nodes()) {
        for (        SReference ref : node.getReferences()) {
          SModelReference targetModel=ref.getTargetSModelReference();
          if (targetModel == null)           continue;
          SModelId modelId=targetModel.getSModelId();
          SNodeId nodeId=ref.getTargetNodeId();
          if (modelId instanceof SModelId.RegularSModelId)           continue;
          if (ref.getTargetNode() != null)           continue;
          String oldId=((SModelId.ForeignSModelId)modelId).getId();
          ModelResolveRes replacement=cache.resolveModel(module,oldId,nodeId);
          if (replacement.needReload) {
            SModelDescriptor model=SModelRepository.getInstance().getModelDescriptor(replacement.replacement);
            ModuleReference moduleRef=model.getModule().getModuleReference();
            module.addDependency(moduleRef,false);
            reloadNeeded=true;
          }
          if (replacement.replacement != null) {
            toRemove.add(targetModel);
            d.getSModel().addModelImport(replacement.replacement,false);
            ref.setTargetSModelReference(replacement.replacement);
            res.fixed++;
          }
 else {
            res.failed++;
          }
        }
      }
    }
  }
  if (reloadNeeded) {
    ClassLoaderManager.getInstance().reloadAll(new EmptyProgressMonitor());
  }
  return res;
}
