{
  Res res=new Res();
  boolean reloadNeeded=false;
  Map<String,SModelReference> globalCache=new HashMap<String,SModelReference>();
  for (  IModule module : p.getModules()) {
    Map<String,SModelReference> moduleCache=new HashMap<String,SModelReference>();
    for (    SModelDescriptor d : module.getOwnModelDescriptors()) {
      if (!(d instanceof EditableSModelDescriptor))       continue;
      if (!(SModelStereotype.isUserModel(d)))       continue;
      Set<SModelReference> toRemove=new HashSet<SModelReference>();
      for (      SNode node : d.getSModel().nodes()) {
        for (        SReference ref : node.getReferences()) {
          SModelReference targetModel=ref.getTargetSModelReference();
          if (targetModel == null)           continue;
          SModelId modelId=targetModel.getSModelId();
          SNodeId nodeId=ref.getTargetNodeId();
          if (modelId instanceof SModelId.RegularSModelId)           continue;
          if (ref.getTargetNode() != null)           continue;
          String oldId=((SModelId.ForeignSModelId)modelId).getId();
          SModelReference mRep=moduleCache.get(oldId);
          SModelReference gRep=globalCache.get(oldId);
          SModelReference replacement=null;
          if (mRep != null) {
            replacement=mRep;
          }
 else           if (gRep != null && module.getScope().getModelDescriptor(gRep) != null) {
            moduleCache.put(oldId,gRep);
            replacement=gRep;
          }
 else {
            replacement=resolveModelInModule(module,oldId,nodeId);
            moduleCache.put(oldId,replacement);
            if (replacement == null) {
              replacement=resolveModelAnywhere(oldId,nodeId);
              if (replacement != null) {
                ModuleReference moduleRef=SModelRepository.getInstance().getModelDescriptor(replacement).getModule().getModuleReference();
                module.addDependency(moduleRef,false);
                reloadNeeded=true;
              }
            }
            globalCache.put(oldId,replacement);
          }
          if (replacement != null) {
            toRemove.add(targetModel);
            d.getSModel().addModelImport(replacement,false);
            ref.setTargetSModelReference(replacement);
            res.fixed++;
          }
 else {
            res.failed++;
          }
        }
      }
      for (      SModelReference ref : toRemove) {
        d.getSModel().deleteModelImport(ref);
      }
    }
  }
  if (reloadNeeded) {
    ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
  }
  return res;
}
