{
  SNode classifier=SLinkOperations.getTarget(classifierType,"classifier",false);
  if (!(ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).count() == 0 || ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).count() == ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).count())) {
    MessageTarget errorTarget=new NodeMessageTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(classifierType,"wrong number of type parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1195494591081",null,errorTarget);
  }
  Map<SNode,SNode> typeParamsToArgs=MapSequence.<SNode,SNode>fromMap(new HashMap<SNode,SNode>());
{
    SNode typeParameter;
    SNode typeVar;
    Iterator<SNode> typeParameter_iterator=ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).iterator();
    Iterator<SNode> typeVar_iterator=ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).iterator();
    while (true) {
      if (!(typeParameter_iterator.hasNext())) {
        break;
      }
      if (!(typeVar_iterator.hasNext())) {
        break;
      }
      typeParameter=typeParameter_iterator.next();
      typeVar=typeVar_iterator.next();
      MapSequence.<SNode,SNode>fromMap(typeParamsToArgs).put(typeVar,typeParameter);
    }
  }
  for (  SNode typeParameter : SLinkOperations.getTargets(classifierType,"parameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeParameter,SLinkOperations.getTarget(new check_ClassifierType_NonTypesystemRule.QuotationClass_i2c76q_a0b0a0a0e0a().createNode(typeCheckingContext),"descriptor",false),false)))) {
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeParameter,"primitive types not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1195494591112",null,errorTarget);
    }
  }
  if (ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).count() == ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).count()) {
{
      SNode typeArgument;
      SNode typeVar;
      Iterator<SNode> typeArgument_iterator=ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).iterator();
      Iterator<SNode> typeVar_iterator=ListSequence.<SNode>fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).iterator();
      while (true) {
        if (!(typeArgument_iterator.hasNext())) {
          break;
        }
        if (!(typeVar_iterator.hasNext())) {
          break;
        }
        typeArgument=typeArgument_iterator.next();
        typeVar=typeVar_iterator.next();
        if (SNodeOperations.isInstanceOf(typeArgument,"jetbrains.mps.baseLanguage.structure.WildCardType") || SNodeOperations.isInstanceOf(typeArgument,"jetbrains.mps.baseLanguage.structure.LowerBoundType") || SNodeOperations.isInstanceOf(typeArgument,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
          continue;
        }
        if ((SLinkOperations.getTarget(typeVar,"bound",true) != null)) {
          SNode concreteBound=RulesFunctions_BaseLanguage.concretifyType(SLinkOperations.getTarget(typeVar,"bound",true),typeParamsToArgs);
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeArgument,concreteBound))) {
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArgument,"type parameter is not within its bounds","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","904196553350157450",null,errorTarget);
          }
        }
        for (        SNode auxBound : SLinkOperations.getTargets(typeVar,"auxBounds",true)) {
          SNode concreteBound=RulesFunctions_BaseLanguage.concretifyType(auxBound,typeParamsToArgs);
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeArgument,concreteBound))) {
            MessageTarget errorTarget=new NodeMessageTarget();
            IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeArgument,"type parameter is not within its bounds","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","904196553350157495",null,errorTarget);
          }
        }
      }
    }
  }
}
