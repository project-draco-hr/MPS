{
  SNode classifier=SLinkOperations.getTarget(classifierType,"classifier",false);
  if (!(SLinkOperations.getCount(classifierType,"parameter") == 0 || SLinkOperations.getCount(classifierType,"parameter") == SLinkOperations.getCount(classifier,"typeVariableDeclaration"))) {
    BaseIntentionProvider intentionProvider=null;
    IErrorTarget errorTarget=new NodeErrorTarget();
    typeCheckingContext.reportTypeError(classifierType,"wrong number of type parameters","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1195494591081",intentionProvider,errorTarget);
  }
  for (  SNode typeParameter : SLinkOperations.getTargets(classifierType,"parameter",true)) {
    if (!(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeParameter,SLinkOperations.getTarget(new _Quotations.QuotationClass_59().createNode(typeCheckingContext),"descriptor",false),false)))) {
      BaseIntentionProvider intentionProvider=null;
      IErrorTarget errorTarget=new NodeErrorTarget();
      typeCheckingContext.reportTypeError(typeParameter,"primitive types not allowed","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","1195494591112",intentionProvider,errorTarget);
    }
  }
  if (SLinkOperations.getCount(classifierType,"parameter") == SLinkOperations.getCount(classifier,"typeVariableDeclaration")) {
{
      SNode typeArgument;
      SNode typeVar;
      Iterator<SNode> typeArgument_iterator=ListSequence.fromList(SLinkOperations.getTargets(classifierType,"parameter",true)).iterator();
      Iterator<SNode> typeVar_iterator=ListSequence.fromList(SLinkOperations.getTargets(classifier,"typeVariableDeclaration",true)).iterator();
      while (true) {
        if (!(typeArgument_iterator.hasNext())) {
          break;
        }
        if (!(typeVar_iterator.hasNext())) {
          break;
        }
        typeArgument=typeArgument_iterator.next();
        typeVar=typeVar_iterator.next();
        if (SNodeOperations.isInstanceOf(typeArgument,"jetbrains.mps.baseLanguage.structure.WildCardType") || SNodeOperations.isInstanceOf(typeArgument,"jetbrains.mps.baseLanguage.structure.LowerBoundType") || SNodeOperations.isInstanceOf(typeArgument,"jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
          continue;
        }
        if ((SLinkOperations.getTarget(typeVar,"bound",true) != null)) {
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeArgument,SLinkOperations.getTarget(typeVar,"bound",true)))) {
            BaseIntentionProvider intentionProvider=null;
            IErrorTarget errorTarget=new NodeErrorTarget();
            typeCheckingContext.reportTypeError(typeArgument,"type parameter is not within its bounds","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","904196553350157450",intentionProvider,errorTarget);
          }
        }
        for (        SNode auxBound : SLinkOperations.getTargets(typeVar,"auxBounds",true)) {
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(typeArgument,auxBound))) {
            BaseIntentionProvider intentionProvider=null;
            IErrorTarget errorTarget=new NodeErrorTarget();
            typeCheckingContext.reportTypeError(typeArgument,"type parameter is not within its bounds","r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","904196553350157495",intentionProvider,errorTarget);
          }
        }
      }
    }
  }
}
