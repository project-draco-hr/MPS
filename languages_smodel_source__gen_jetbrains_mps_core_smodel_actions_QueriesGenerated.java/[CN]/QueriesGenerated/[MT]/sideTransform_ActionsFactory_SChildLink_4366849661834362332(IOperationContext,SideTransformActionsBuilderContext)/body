{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode query=SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.core.smodel.structure.SConceptQuery");
        SLinkOperations.setTarget(query,"type",SConceptOperations.createNewNode("jetbrains.mps.core.smodel.structure.MqlNodeType",null),true);
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(query,"type",true),"jetbrains.mps.core.smodel.structure.MqlNodeType"),"concept",SLinkOperations.getTarget(_context.getSourceNode(),"target",false),false);
        SPropertyOperations.set(query,"name",SPropertyOperations.getString(_context.getSourceNode(),"name"));
        return query;
      }
      public String getMatchingText(      String pattern){
        return "(";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
