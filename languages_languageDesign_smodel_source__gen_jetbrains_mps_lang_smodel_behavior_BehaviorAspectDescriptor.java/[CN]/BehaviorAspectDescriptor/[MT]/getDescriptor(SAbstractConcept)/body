{
  SAbstractConcept cncpt=concept;
switch (index_846f5o_a0ie.index(cncpt)) {
case 0:
    return myAbstractNodeRefExpression__BehaviorDescriptor;
case 1:
  return myAbstractTypeCastExpression__BehaviorDescriptor;
case 2:
return myAggregationIdentity__BehaviorDescriptor;
case 3:
return myAsNodeOperation__BehaviorDescriptor;
case 4:
return myAsSConcept__BehaviorDescriptor;
case 5:
return myAssociationIdentity__BehaviorDescriptor;
case 6:
return myAttributeAccess__BehaviorDescriptor;
case 7:
return myAttributeQualifier__BehaviorDescriptor;
case 8:
return myChildAttributeQualifier__BehaviorDescriptor;
case 9:
return myChildNodeRefExpression__BehaviorDescriptor;
case 10:
return myConceptId__BehaviorDescriptor;
case 11:
return myConceptIdentity__BehaviorDescriptor;
case 12:
return myConceptNodeType__BehaviorDescriptor;
case 13:
return myConceptSwitchStatement__BehaviorDescriptor;
case 14:
return myConcept_GetAllSubConcepts__BehaviorDescriptor;
case 15:
return myConcept_GetAllSuperConcepts__BehaviorDescriptor;
case 16:
return myConcept_GetDirectSuperConcepts__BehaviorDescriptor;
case 17:
return myConcept_GetHierarchy__BehaviorDescriptor;
case 18:
return myConcept_IsExactlyOperation__BehaviorDescriptor;
case 19:
return myConcept_IsSubConceptOfOperation__BehaviorDescriptor;
case 20:
return myConcept_IsSuperConceptOfOperation__BehaviorDescriptor;
case 21:
return myConcept_NewInstance__BehaviorDescriptor;
case 22:
return myContainmentLinkId__BehaviorDescriptor;
case 23:
return myEnumMemberReference__BehaviorDescriptor;
case 24:
return myEqualsStructurallyExpression__BehaviorDescriptor;
case 25:
return myILinkAccess__BehaviorDescriptor;
case 26:
return myILinkAccessQualifierContainer__BehaviorDescriptor;
case 27:
return myIfInstanceOfVariable__BehaviorDescriptor;
case 28:
return myLanguageId__BehaviorDescriptor;
case 29:
return myLanguageIdentity__BehaviorDescriptor;
case 30:
return myLanguageRefExpression__BehaviorDescriptor;
case 31:
return myLanguageReferenceExpression__BehaviorDescriptor;
case 32:
return myLinkAttributeQualifier__BehaviorDescriptor;
case 33:
return myLinkList_AddNewChildOperation__BehaviorDescriptor;
case 34:
return myLinkRefQualifier__BehaviorDescriptor;
case 35:
return myLink_SetNewChildOperation__BehaviorDescriptor;
case 36:
return myLink_SetTargetOperation__BehaviorDescriptor;
case 37:
return myModelReferenceExpression__BehaviorDescriptor;
case 38:
return myModel_AddRootOperation__BehaviorDescriptor;
case 39:
return myModel_CreateNewNodeOperation__BehaviorDescriptor;
case 40:
return myModel_CreateNewRootNodeOperation__BehaviorDescriptor;
case 41:
return myModel_GetLongNameOperation__BehaviorDescriptor;
case 42:
return myModel_GetModule__BehaviorDescriptor;
case 43:
return myModel_NodesIncludingImportedOperation__BehaviorDescriptor;
case 44:
return myModel_NodesOperation__BehaviorDescriptor;
case 45:
return myModel_RootsIncludingImportedOperation__BehaviorDescriptor;
case 46:
return myModel_RootsOperation__BehaviorDescriptor;
case 47:
return myModuleIdentity__BehaviorDescriptor;
case 48:
return myModulePointer__BehaviorDescriptor;
case 49:
return myModuleReferenceExpression__BehaviorDescriptor;
case 50:
return myNodeAttributeQualifier__BehaviorDescriptor;
case 51:
return myNodeRefExpression__BehaviorDescriptor;
case 52:
return myNode_ConceptMethodCall__BehaviorDescriptor;
case 53:
return myNode_CopyOperation__BehaviorDescriptor;
case 54:
return myNode_DeleteOperation__BehaviorDescriptor;
case 55:
return myNode_DetachOperation__BehaviorDescriptor;
case 56:
return myNode_GetAllSiblingsOperation__BehaviorDescriptor;
case 57:
return myNode_GetAncestorOperation__BehaviorDescriptor;
case 58:
return myNode_GetAncestorsOperation__BehaviorDescriptor;
case 59:
return myNode_GetChildrenOperation__BehaviorDescriptor;
case 60:
return myNode_GetConceptOperation__BehaviorDescriptor;
case 61:
return myNode_GetContainingLinkOperation__BehaviorDescriptor;
case 62:
return myNode_GetContainingRoleOperation__BehaviorDescriptor;
case 63:
return myNode_GetContainingRootOperation__BehaviorDescriptor;
case 64:
return myNode_GetDescendantsOperation__BehaviorDescriptor;
case 65:
return myNode_GetIndexInParentOperation__BehaviorDescriptor;
case 66:
return myNode_GetModelOperation__BehaviorDescriptor;
case 67:
return myNode_GetNextSiblingOperation__BehaviorDescriptor;
case 68:
return myNode_GetNextSiblingsOperation__BehaviorDescriptor;
case 69:
return myNode_GetParentOperation__BehaviorDescriptor;
case 70:
return myNode_GetPrevSiblingOperation__BehaviorDescriptor;
case 71:
return myNode_GetPrevSiblingsOperation__BehaviorDescriptor;
case 72:
return myNode_GetReferenceOperation__BehaviorDescriptor;
case 73:
return myNode_GetReferencesOperation__BehaviorDescriptor;
case 74:
return myNode_GetReferentSearchScopeOperation__BehaviorDescriptor;
case 75:
return myNode_GetSConceptOperation__BehaviorDescriptor;
case 76:
return myNode_InsertNewNextSiblingOperation__BehaviorDescriptor;
case 77:
return myNode_InsertNewPrevSiblingOperation__BehaviorDescriptor;
case 78:
return myNode_InsertNextSiblingOperation__BehaviorDescriptor;
case 79:
return myNode_InsertPrevSiblingOperation__BehaviorDescriptor;
case 80:
return myNode_IsAttributeOperation__BehaviorDescriptor;
case 81:
return myNode_IsInstanceOfOperation__BehaviorDescriptor;
case 82:
return myNode_IsNotNullOperation__BehaviorDescriptor;
case 83:
return myNode_IsNullOperation__BehaviorDescriptor;
case 84:
return myNode_IsRoleOperation__BehaviorDescriptor;
case 85:
return myNode_PointerOperation__BehaviorDescriptor;
case 86:
return myNode_ReplaceWithAnotherOperation__BehaviorDescriptor;
case 87:
return myNode_ReplaceWithNewOperation__BehaviorDescriptor;
case 88:
return myOperationParm_LinkQualifier__BehaviorDescriptor;
case 89:
return myPropertyAttributeQualifier__BehaviorDescriptor;
case 90:
return myPropertyId__BehaviorDescriptor;
case 91:
return myPropertyIdentity__BehaviorDescriptor;
case 92:
return myProperty_HasValue_Enum__BehaviorDescriptor;
case 93:
return myProperty_HasValue_Simple__BehaviorDescriptor;
case 94:
return myProperty_RemoveOperation__BehaviorDescriptor;
case 95:
return myProperty_SetOperation__BehaviorDescriptor;
case 96:
return myReferenceLinkId__BehaviorDescriptor;
case 97:
return mySConceptType__BehaviorDescriptor;
case 98:
return mySEnumMemberType__BehaviorDescriptor;
case 99:
return mySEnumOperation__BehaviorDescriptor;
case 100:
return mySLinkAccess__BehaviorDescriptor;
case 101:
return mySLinkListAccess__BehaviorDescriptor;
case 102:
return mySModelType__BehaviorDescriptor;
case 103:
return mySNodeListType__BehaviorDescriptor;
case 104:
return mySNodeOperation__BehaviorDescriptor;
case 105:
return mySNodeType__BehaviorDescriptor;
case 106:
return mySNodeTypeCastExpression__BehaviorDescriptor;
case 107:
return mySPropertyAccess__BehaviorDescriptor;
case 108:
return mySemanticDowncastExpression__BehaviorDescriptor;
default :
}
return null;
}
