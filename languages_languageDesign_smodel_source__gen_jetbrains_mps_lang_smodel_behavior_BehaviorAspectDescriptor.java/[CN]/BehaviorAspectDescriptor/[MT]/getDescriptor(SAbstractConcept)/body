{
{
    SAbstractConcept cncpt=concept;
    Integer preIndex=indices_846f5o_a0he.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return myAbstractNodeRefExpression__BehaviorDescriptor;
      }
    break;
case 1:
  if (true) {
    return myAbstractTypeCastExpression__BehaviorDescriptor;
  }
break;
case 2:
if (true) {
return myAsNodeOperation__BehaviorDescriptor;
}
break;
case 3:
if (true) {
return myAsSConcept__BehaviorDescriptor;
}
break;
case 4:
if (true) {
return myAttributeAccess__BehaviorDescriptor;
}
break;
case 5:
if (true) {
return myAttributeQualifier__BehaviorDescriptor;
}
break;
case 6:
if (true) {
return myChildAttributeQualifier__BehaviorDescriptor;
}
break;
case 7:
if (true) {
return myChildNodeRefExpression__BehaviorDescriptor;
}
break;
case 8:
if (true) {
return myConceptId__BehaviorDescriptor;
}
break;
case 9:
if (true) {
return myConceptIdentity__BehaviorDescriptor;
}
break;
case 10:
if (true) {
return myConceptNodeType__BehaviorDescriptor;
}
break;
case 11:
if (true) {
return myConcept_GetAllSubConcepts__BehaviorDescriptor;
}
break;
case 12:
if (true) {
return myConcept_GetAllSuperConcepts__BehaviorDescriptor;
}
break;
case 13:
if (true) {
return myConcept_GetDirectSuperConcepts__BehaviorDescriptor;
}
break;
case 14:
if (true) {
return myConcept_GetHierarchy__BehaviorDescriptor;
}
break;
case 15:
if (true) {
return myConcept_IsExactlyOperation__BehaviorDescriptor;
}
break;
case 16:
if (true) {
return myConcept_IsSubConceptOfOperation__BehaviorDescriptor;
}
break;
case 17:
if (true) {
return myConcept_IsSuperConceptOfOperation__BehaviorDescriptor;
}
break;
case 18:
if (true) {
return myConcept_NewInstance__BehaviorDescriptor;
}
break;
case 19:
if (true) {
return myEnumMemberReference__BehaviorDescriptor;
}
break;
case 20:
if (true) {
return myEqualsStructurallyExpression__BehaviorDescriptor;
}
break;
case 21:
if (true) {
return myILinkAccess__BehaviorDescriptor;
}
break;
case 22:
if (true) {
return myILinkAccessQualifierContainer__BehaviorDescriptor;
}
break;
case 23:
if (true) {
return myIfInstanceOfVariable__BehaviorDescriptor;
}
break;
case 24:
if (true) {
return myLanguageId__BehaviorDescriptor;
}
break;
case 25:
if (true) {
return myLanguageIdentity__BehaviorDescriptor;
}
break;
case 26:
if (true) {
return myLanguageRefExpression__BehaviorDescriptor;
}
break;
case 27:
if (true) {
return myLanguageReferenceExpression__BehaviorDescriptor;
}
break;
case 28:
if (true) {
return myLinkAttributeQualifier__BehaviorDescriptor;
}
break;
case 29:
if (true) {
return myLinkId__BehaviorDescriptor;
}
break;
case 30:
if (true) {
return myLinkIdentity__BehaviorDescriptor;
}
break;
case 31:
if (true) {
return myLinkList_AddNewChildOperation__BehaviorDescriptor;
}
break;
case 32:
if (true) {
return myLinkRefQualifier__BehaviorDescriptor;
}
break;
case 33:
if (true) {
return myLink_SetNewChildOperation__BehaviorDescriptor;
}
break;
case 34:
if (true) {
return myLink_SetTargetOperation__BehaviorDescriptor;
}
break;
case 35:
if (true) {
return myModelReferenceExpression__BehaviorDescriptor;
}
break;
case 36:
if (true) {
return myModel_AddRootOperation__BehaviorDescriptor;
}
break;
case 37:
if (true) {
return myModel_CreateNewNodeOperation__BehaviorDescriptor;
}
break;
case 38:
if (true) {
return myModel_CreateNewRootNodeOperation__BehaviorDescriptor;
}
break;
case 39:
if (true) {
return myModel_GetLongNameOperation__BehaviorDescriptor;
}
break;
case 40:
if (true) {
return myModel_GetModule__BehaviorDescriptor;
}
break;
case 41:
if (true) {
return myModel_NodesIncludingImportedOperation__BehaviorDescriptor;
}
break;
case 42:
if (true) {
return myModel_NodesOperation__BehaviorDescriptor;
}
break;
case 43:
if (true) {
return myModel_RootsIncludingImportedOperation__BehaviorDescriptor;
}
break;
case 44:
if (true) {
return myModel_RootsOperation__BehaviorDescriptor;
}
break;
case 45:
if (true) {
return myModuleIdentity__BehaviorDescriptor;
}
break;
case 46:
if (true) {
return myModulePointer__BehaviorDescriptor;
}
break;
case 47:
if (true) {
return myModuleReferenceExpression__BehaviorDescriptor;
}
break;
case 48:
if (true) {
return myNodeAttributeQualifier__BehaviorDescriptor;
}
break;
case 49:
if (true) {
return myNodeRefExpression__BehaviorDescriptor;
}
break;
case 50:
if (true) {
return myNode_ConceptMethodCall__BehaviorDescriptor;
}
break;
case 51:
if (true) {
return myNode_CopyOperation__BehaviorDescriptor;
}
break;
case 52:
if (true) {
return myNode_DeleteOperation__BehaviorDescriptor;
}
break;
case 53:
if (true) {
return myNode_DetachOperation__BehaviorDescriptor;
}
break;
case 54:
if (true) {
return myNode_GetAllSiblingsOperation__BehaviorDescriptor;
}
break;
case 55:
if (true) {
return myNode_GetAncestorOperation__BehaviorDescriptor;
}
break;
case 56:
if (true) {
return myNode_GetAncestorsOperation__BehaviorDescriptor;
}
break;
case 57:
if (true) {
return myNode_GetChildrenOperation__BehaviorDescriptor;
}
break;
case 58:
if (true) {
return myNode_GetConceptOperation__BehaviorDescriptor;
}
break;
case 59:
if (true) {
return myNode_GetContainingLinkOperation__BehaviorDescriptor;
}
break;
case 60:
if (true) {
return myNode_GetContainingRoleOperation__BehaviorDescriptor;
}
break;
case 61:
if (true) {
return myNode_GetContainingRootOperation__BehaviorDescriptor;
}
break;
case 62:
if (true) {
return myNode_GetDescendantsOperation__BehaviorDescriptor;
}
break;
case 63:
if (true) {
return myNode_GetIndexInParentOperation__BehaviorDescriptor;
}
break;
case 64:
if (true) {
return myNode_GetModelOperation__BehaviorDescriptor;
}
break;
case 65:
if (true) {
return myNode_GetNextSiblingOperation__BehaviorDescriptor;
}
break;
case 66:
if (true) {
return myNode_GetNextSiblingsOperation__BehaviorDescriptor;
}
break;
case 67:
if (true) {
return myNode_GetParentOperation__BehaviorDescriptor;
}
break;
case 68:
if (true) {
return myNode_GetPrevSiblingOperation__BehaviorDescriptor;
}
break;
case 69:
if (true) {
return myNode_GetPrevSiblingsOperation__BehaviorDescriptor;
}
break;
case 70:
if (true) {
return myNode_GetReferenceOperation__BehaviorDescriptor;
}
break;
case 71:
if (true) {
return myNode_GetReferencesOperation__BehaviorDescriptor;
}
break;
case 72:
if (true) {
return myNode_GetReferentSearchScopeOperation__BehaviorDescriptor;
}
break;
case 73:
if (true) {
return myNode_GetSConceptOperation__BehaviorDescriptor;
}
break;
case 74:
if (true) {
return myNode_InsertNewNextSiblingOperation__BehaviorDescriptor;
}
break;
case 75:
if (true) {
return myNode_InsertNewPrevSiblingOperation__BehaviorDescriptor;
}
break;
case 76:
if (true) {
return myNode_InsertNextSiblingOperation__BehaviorDescriptor;
}
break;
case 77:
if (true) {
return myNode_InsertPrevSiblingOperation__BehaviorDescriptor;
}
break;
case 78:
if (true) {
return myNode_IsAttributeOperation__BehaviorDescriptor;
}
break;
case 79:
if (true) {
return myNode_IsInstanceOfOperation__BehaviorDescriptor;
}
break;
case 80:
if (true) {
return myNode_IsNotNullOperation__BehaviorDescriptor;
}
break;
case 81:
if (true) {
return myNode_IsNullOperation__BehaviorDescriptor;
}
break;
case 82:
if (true) {
return myNode_IsRoleOperation__BehaviorDescriptor;
}
break;
case 83:
if (true) {
return myNode_PointerOperation__BehaviorDescriptor;
}
break;
case 84:
if (true) {
return myNode_ReplaceWithAnotherOperation__BehaviorDescriptor;
}
break;
case 85:
if (true) {
return myNode_ReplaceWithNewOperation__BehaviorDescriptor;
}
break;
case 86:
if (true) {
return myOperationParm_LinkQualifier__BehaviorDescriptor;
}
break;
case 87:
if (true) {
return myPropertyAttributeQualifier__BehaviorDescriptor;
}
break;
case 88:
if (true) {
return myPropertyId__BehaviorDescriptor;
}
break;
case 89:
if (true) {
return myPropertyIdentity__BehaviorDescriptor;
}
break;
case 90:
if (true) {
return myProperty_HasValue_Enum__BehaviorDescriptor;
}
break;
case 91:
if (true) {
return myProperty_HasValue_Simple__BehaviorDescriptor;
}
break;
case 92:
if (true) {
return myProperty_RemoveOperation__BehaviorDescriptor;
}
break;
case 93:
if (true) {
return myProperty_SetOperation__BehaviorDescriptor;
}
break;
case 94:
if (true) {
return myReferenceId__BehaviorDescriptor;
}
break;
case 95:
if (true) {
return myReferenceIdentity__BehaviorDescriptor;
}
break;
case 96:
if (true) {
return mySConceptType__BehaviorDescriptor;
}
break;
case 97:
if (true) {
return mySEnumMemberType__BehaviorDescriptor;
}
break;
case 98:
if (true) {
return mySEnumOperation__BehaviorDescriptor;
}
break;
case 99:
if (true) {
return mySLinkAccess__BehaviorDescriptor;
}
break;
case 100:
if (true) {
return mySLinkListAccess__BehaviorDescriptor;
}
break;
case 101:
if (true) {
return mySModelType__BehaviorDescriptor;
}
break;
case 102:
if (true) {
return mySNodeListType__BehaviorDescriptor;
}
break;
case 103:
if (true) {
return mySNodeOperation__BehaviorDescriptor;
}
break;
case 104:
if (true) {
return mySNodeType__BehaviorDescriptor;
}
break;
case 105:
if (true) {
return mySNodeTypeCastExpression__BehaviorDescriptor;
}
break;
case 106:
if (true) {
return mySPropertyAccess__BehaviorDescriptor;
}
break;
case 107:
if (true) {
return mySemanticDowncastExpression__BehaviorDescriptor;
}
break;
default :
}
}
return null;
}
