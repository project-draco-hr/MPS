{
  int behaviorIndex=Arrays.binarySearch(myConceptBehaviorIds,conceptId.getIdValue());
switch (behaviorIndex) {
case 0:
    return mySNodeType_BehaviorDescriptor;
case 1:
  return mySPropertyAccess_BehaviorDescriptor;
case 2:
return mySLinkAccess_BehaviorDescriptor;
case 3:
return mySLinkListAccess_BehaviorDescriptor;
case 4:
return mySNodeOperation_BehaviorDescriptor;
case 5:
return myProperty_SetOperation_BehaviorDescriptor;
case 6:
return myEnumMemberReference_BehaviorDescriptor;
case 7:
return myLink_SetNewChildOperation_BehaviorDescriptor;
case 8:
return myLinkList_AddNewChildOperation_BehaviorDescriptor;
case 9:
return myNode_GetParentOperation_BehaviorDescriptor;
case 10:
return myNode_IsInstanceOfOperation_BehaviorDescriptor;
case 11:
return myNode_InsertNewNextSiblingOperation_BehaviorDescriptor;
case 12:
return myNode_ReplaceWithNewOperation_BehaviorDescriptor;
case 13:
return myNode_ReplaceWithAnotherOperation_BehaviorDescriptor;
case 14:
return myNode_DeleteOperation_BehaviorDescriptor;
case 15:
return mySNodeTypeCastExpression_BehaviorDescriptor;
case 16:
return myLink_SetTargetOperation_BehaviorDescriptor;
case 17:
return myNode_InsertNewPrevSiblingOperation_BehaviorDescriptor;
case 18:
return myNode_InsertNextSiblingOperation_BehaviorDescriptor;
case 19:
return myNode_InsertPrevSiblingOperation_BehaviorDescriptor;
case 20:
return mySModelType_BehaviorDescriptor;
case 21:
return myNode_GetModelOperation_BehaviorDescriptor;
case 22:
return myModel_CreateNewNodeOperation_BehaviorDescriptor;
case 23:
return myNode_GetPrevSiblingOperation_BehaviorDescriptor;
case 24:
return myNode_GetNextSiblingOperation_BehaviorDescriptor;
case 25:
return myNode_CopyOperation_BehaviorDescriptor;
case 26:
return myNode_IsRoleOperation_BehaviorDescriptor;
case 27:
return mySNodeListType_BehaviorDescriptor;
case 28:
return mySemanticDowncastExpression_BehaviorDescriptor;
case 29:
return myNode_GetNextSiblingsOperation_BehaviorDescriptor;
case 30:
return myNode_GetPrevSiblingsOperation_BehaviorDescriptor;
case 31:
return myNode_GetAllSiblingsOperation_BehaviorDescriptor;
case 32:
return myProperty_HasValue_Enum_BehaviorDescriptor;
case 33:
return myProperty_HasValue_Simple_BehaviorDescriptor;
case 34:
return myModel_CreateNewRootNodeOperation_BehaviorDescriptor;
case 35:
return myNode_GetDescendantsOperation_BehaviorDescriptor;
case 36:
return myNode_GetContainingRootOperation_BehaviorDescriptor;
case 37:
return myModel_RootsOperation_BehaviorDescriptor;
case 38:
return myModel_NodesOperation_BehaviorDescriptor;
case 39:
return myNode_GetAncestorOperation_BehaviorDescriptor;
case 40:
return myNode_GetChildrenOperation_BehaviorDescriptor;
case 41:
return myNode_IsNullOperation_BehaviorDescriptor;
case 42:
return myNode_IsNotNullOperation_BehaviorDescriptor;
case 43:
return myNode_GetConceptOperation_BehaviorDescriptor;
case 44:
return myConcept_IsExactlyOperation_BehaviorDescriptor;
case 45:
return myConceptNodeType_BehaviorDescriptor;
case 46:
return myNode_GetAncestorsOperation_BehaviorDescriptor;
case 47:
return myModel_RootsIncludingImportedOperation_BehaviorDescriptor;
case 48:
return myNode_GetIndexInParentOperation_BehaviorDescriptor;
case 49:
return myConcept_GetDirectSuperConcepts_BehaviorDescriptor;
case 50:
return myNode_ConceptMethodCall_BehaviorDescriptor;
case 51:
return myConcept_IsSuperConceptOfOperation_BehaviorDescriptor;
case 52:
return myConcept_IsSubConceptOfOperation_BehaviorDescriptor;
case 53:
return myConcept_GetAllSuperConcepts_BehaviorDescriptor;
case 54:
return myConcept_GetHierarchy_BehaviorDescriptor;
case 55:
return myConcept_NewInstance_BehaviorDescriptor;
case 56:
return myConcept_GetAllSubConcepts_BehaviorDescriptor;
case 57:
return myModel_NodesIncludingImportedOperation_BehaviorDescriptor;
case 58:
return myLinkRefQualifier_BehaviorDescriptor;
case 59:
return myNode_IsAttributeOperation_BehaviorDescriptor;
case 60:
return myModel_AddRootOperation_BehaviorDescriptor;
case 61:
return myModel_GetLongNameOperation_BehaviorDescriptor;
case 62:
return myProperty_RemoveOperation_BehaviorDescriptor;
case 63:
return myNodeRefExpression_BehaviorDescriptor;
case 64:
return myNode_GetReferentSearchScopeOperation_BehaviorDescriptor;
case 65:
return myEqualsStructurallyExpression_BehaviorDescriptor;
case 66:
return myNode_DetachOperation_BehaviorDescriptor;
case 67:
return mySEnumMemberType_BehaviorDescriptor;
case 68:
return mySEnumOperation_BehaviorDescriptor;
case 69:
return myAsSConcept_BehaviorDescriptor;
case 70:
return myModelReferenceExpression_BehaviorDescriptor;
case 71:
return myChildNodeRefExpression_BehaviorDescriptor;
case 72:
return myChildAttributeQualifier_BehaviorDescriptor;
case 73:
return myIfInstanceOfVariable_BehaviorDescriptor;
case 74:
return myNode_GetContainingRoleOperation_BehaviorDescriptor;
case 75:
return myILinkAccessQualifierContainer_BehaviorDescriptor;
case 76:
return myLanguageIdentity_BehaviorDescriptor;
case 77:
return myLanguageId_BehaviorDescriptor;
case 78:
return myAbstractNodeRefExpression_BehaviorDescriptor;
case 79:
return myNode_GetReferenceOperation_BehaviorDescriptor;
case 80:
return myILinkAccess_BehaviorDescriptor;
case 81:
return myModuleReferenceExpression_BehaviorDescriptor;
case 82:
return myLanguageReferenceExpression_BehaviorDescriptor;
case 83:
return myLanguageRefExpression_BehaviorDescriptor;
case 84:
return myNode_PointerOperation_BehaviorDescriptor;
case 85:
return myOperationParm_LinkQualifier_BehaviorDescriptor;
case 86:
return myNode_GetContainingLinkOperation_BehaviorDescriptor;
case 87:
return myAttributeAccess_BehaviorDescriptor;
case 88:
return myAttributeQualifier_BehaviorDescriptor;
case 89:
return myNodeAttributeQualifier_BehaviorDescriptor;
case 90:
return myLinkAttributeQualifier_BehaviorDescriptor;
case 91:
return myPropertyAttributeQualifier_BehaviorDescriptor;
case 92:
return mySConceptType_BehaviorDescriptor;
case 93:
return myModel_GetModule_BehaviorDescriptor;
case 94:
return myNode_GetSConceptOperation_BehaviorDescriptor;
case 95:
return myNode_GetReferencesOperation_BehaviorDescriptor;
case 96:
return myAsNodeOperation_BehaviorDescriptor;
default :
return null;
}
}
