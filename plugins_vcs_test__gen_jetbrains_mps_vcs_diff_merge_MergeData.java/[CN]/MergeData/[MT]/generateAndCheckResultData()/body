{
  PersistenceRegistry.getInstance().setModelEnvironmentInfo(new LightModelEnvironmentInfoImpl());
  DefaultSModel baseModel=ModelPersistence.readModel(myBaseModelString,false);
  DefaultSModel mineModel=ModelPersistence.readModel(myMineModelString,false);
  DefaultSModel repositoryModel=ModelPersistence.readModel(myRepositoryModelString,false);
  final MergeSession session=MergeSession.createMergeSession(baseModel.getModelDescriptor(),mineModel.getModelDescriptor(),repositoryModel.getModelDescriptor());
  String resultModelString=null;
  if (Sequence.fromIterable(session.getAllChanges()).all(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange c){
      return Sequence.fromIterable(session.getConflictedWith(c)).isEmpty();
    }
  }
)) {
    session.applyChanges(Sequence.fromIterable(session.getAllChanges()).toListSequence());
    resultModelString=ModelPersistence.modelToString(as_u0rai9_a0a0a2a8a71(session.getResultModel(),SModelBase.class).getSModelInternal());
  }
  PersistenceRegistry.getInstance().setModelEnvironmentInfo(null);
  String changesMineString=dumpChangeSet(session.getMyChangeSet(),session);
  String changesRepositoryString=dumpChangeSet(session.getRepositoryChangeSet(),session);
  if (check("result model",myResultModelString,resultModelString) & check("my change list",myChangesMineString,changesMineString) & check("my repository list",myChangesRepositoryString,changesRepositoryString)) {
    return true;
  }
 else {
    myResultModelString=resultModelString;
    myChangesMineString=changesMineString;
    myChangesRepositoryString=changesRepositoryString;
    return false;
  }
}
