{
  SModel baseModel=ModelPersistence.readModel(myBaseModelString,false);
  SModel mineModel=ModelPersistence.readModel(myMineModelString,false);
  SModel repositoryModel=ModelPersistence.readModel(myRepositoryModelString,false);
  final MergeSession session=new MergeSession(baseModel,mineModel,repositoryModel);
  String resultModelString=null;
  if (Sequence.fromIterable(session.getAllChanges()).all(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange c){
      return Sequence.fromIterable(session.getConflictedWith(c)).isEmpty();
    }
  }
)) {
    session.applyChanges(Sequence.fromIterable(session.getAllChanges()).toListSequence());
    resultModelString=ModelPersistence.modelToString(session.getResultModel());
  }
  String changesMineString=dumpChangeSet(session.getMyChangeSet(),session);
  String changesRepositoryString=dumpChangeSet(session.getRepositoryChangeSet(),session);
  myResultModelString=resultModelString;
  myChangesMineString=changesMineString;
  myChangesRepositoryString=changesRepositoryString;
}
