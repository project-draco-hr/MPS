{
  List<SideTransformHintSubstituteActionsBuilder> actionsBuilders=new LinkedList<SideTransformHintSubstituteActionsBuilder>();
  IScope scope=myContext.getScope();
  final AbstractConceptDeclaration sourceConcept=mySourceNode.getConceptDeclarationAdapter();
  List<Language> languages=SModelOperations.getLanguages(mySourceNode.getModel(),scope);
  for (  Language language : languages) {
    SModelDescriptor actionsModel=language.getActionsModelDescriptor();
    if (actionsModel == null || actionsModel.getSModel() == null)     continue;
    List<SNode> nodes=actionsModel.getSModel().getFastNodeFinder().getNodes(SideTransformHintSubstituteActionsBuilder.concept,true);
    for (    SideTransformHintSubstituteActionsBuilder builder : BaseAdapter.<SideTransformHintSubstituteActionsBuilder>toAdapters(nodes)) {
      for (      SideTransformTag tag : myTransformTags) {
        if (isApplicable(builder,tag,sourceConcept)) {
          actionsBuilders.add(builder);
        }
      }
    }
  }
  return actionsBuilders;
}
