{
  TypeChecker.getInstance().enableTypesComputingForCompletion();
  try {
    IScope scope=myContext.getScope();
    final AbstractConceptDeclaration sourceConcept=mySourceNode.getConceptDeclarationAdapter();
    List<Language> languages=mySourceNode.getModel().getLanguages(scope);
    for (    Language language : languages) {
      SModelDescriptor actionsModel=language.getActionsModelDescriptor();
      if (actionsModel == null || actionsModel.getSModel() == null)       continue;
      for (      SNode builder : actionsModel.getSModel().roots()) {
        if (!(builder.getAdapter() instanceof SideTransformHintSubstituteActionsBuilder))         continue;
        SideTransformHintSubstituteActionsBuilder adapter=(SideTransformHintSubstituteActionsBuilder)builder.getAdapter();
        for (        SideTransformTag tag : myTransformTags) {
          if (isApplicable(adapter,tag,sourceConcept))           return true;
        }
      }
    }
    return false;
  }
  finally {
    TypeChecker.getInstance().clearTypesComputedForCompletion();
  }
}
