{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
  ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.bash.structure.CommentedCommandList"),_context.getSourceNode()){
    public SNode doSubstitute(    @Nullable final EditorContext editorContext,    String pattern){
      SNode comment=SNodeFactoryOperations.createNewNode("jetbrains.mps.bash.structure.CommentedCommandList",null);
      SNode sourceCommandList=SNodeOperations.getAncestor(_context.getSourceNode(),"jetbrains.mps.bash.structure.CommandList",false,false);
      SNodeOperations.replaceWithAnother(sourceCommandList,comment);
      SLinkOperations.setTarget(comment,"commandList",sourceCommandList,true);
      return comment;
    }
    public String getMatchingText(    String pattern){
      return "#";
    }
    public String getVisibleMatchingText(    String pattern){
      return getMatchingText(pattern);
    }
  }
);
  return result;
}
