{
  K cached;
  cached=firstLevelCache.putIfAbsent(canonic,canonic);
  if (cached != null) {
    return cached;
  }
  firstLevelQueue.add(canonic);
  if (roomLeftFirstLevel.get() <= 0) {
    K toRemove=firstLevelQueue.poll();
    if (!transitionalCache.contains(toRemove)) {
      boolean removed=firstLevelCache.remove(toRemove,toRemove);
      assert removed;
    }
  }
 else {
    roomLeftFirstLevel.decrementAndGet();
  }
  return canonic;
}
