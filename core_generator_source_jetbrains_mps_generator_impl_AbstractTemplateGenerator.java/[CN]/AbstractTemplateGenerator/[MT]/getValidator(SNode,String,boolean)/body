{
  if (child && GeneratorUtilEx.link_BaseConcept_attrs.equals(role)) {
    return successValidator;
  }
  String conceptFQName=sourceNode.getConcept().getQualifiedName();
  Map<String,RoleValidator> vmap=validators.get(conceptFQName);
  if (vmap == null) {
    SNode concept=((jetbrains.mps.smodel.SNode)sourceNode).getConceptDeclarationNode();
    if (concept == null) {
      return new RoleValidator(new RoleValidationStatus(myLogger,String.format("cannot find concept '%s'",conceptFQName)));
    }
    vmap=new HashMap<String,RoleValidator>();
  }
  RoleValidator validator=vmap.get(role);
  if (validator != null) {
    return validator;
  }
  SNode concept=((jetbrains.mps.smodel.SNode)sourceNode).getConceptDeclarationNode();
  SNode link=SModelSearchUtil.findMostSpecificLinkDeclaration(concept,role);
  if (link == null) {
    String relationKind=child ? "child" : "referent";
    String msg=String.format("concept '%s' cannot have %s with role '%s'",concept.getName(),relationKind,role);
    RoleValidationStatus s=new RoleValidationStatus(myLogger,msg);
    validator=new RoleValidator(s);
  }
 else {
    if (!myShowBadChildWarning) {
      validator=successValidator;
    }
 else {
      validator=new AcceptableTargetValidator(myLogger,role,link,child);
    }
  }
  vmap.put(role,validator);
  return validator;
}
