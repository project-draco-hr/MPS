{
  myRightTree.resetDependencies();
  TreePath[] paths=myLeftTree.getSelectionPaths();
  if (paths != null) {
    Map<List<SModule>,List<SModule>> dependencies=MapSequence.fromMap(new HashMap<List<SModule>,List<SModule>>());
    Map<List<SModule>,List<SModule>> usedlanguages=MapSequence.fromMap(new HashMap<List<SModule>,List<SModule>>());
    for (    TreePath path : paths) {
      Object o=path.getLastPathComponent();
      if (o instanceof ModuleDependencyNode) {
        ModuleDependencyNode node=(ModuleDependencyNode)o;
        List<SModule> from=check_jxc64t_a0b0b0c0d0e(node.getFromNode());
        if (from != null) {
          Map<List<SModule>,List<SModule>> collection=(node.isUsedLanguage() ? usedlanguages : dependencies);
          if (!(MapSequence.fromMap(collection).containsKey(from))) {
            MapSequence.fromMap(collection).put(from,ListSequence.fromList(new ArrayList<SModule>()));
          }
          ListSequence.fromList(MapSequence.fromMap(collection).get(from)).addSequence(ListSequence.fromList(node.getModules()));
        }
      }
    }
    for (    List<SModule> key : SetSequence.fromSet(MapSequence.fromMap(dependencies).keySet()).union(SetSequence.fromSet(MapSequence.fromMap(usedlanguages).keySet()))) {
      myRightTree.addDependency(key,MapSequence.fromMap(dependencies).get(key),MapSequence.fromMap(usedlanguages).get(key),myLeftTree.isShowRuntime());
    }
    if (paths.length == 1 && paths[0].getLastPathComponent() instanceof ModuleDependencyNode.ULangDependencyNode) {
      ModuleDependencyNode.ULangDependencyNode node=(ModuleDependencyNode.ULangDependencyNode)paths[0].getLastPathComponent();
      if (node.isCyclic()) {
        List<SModule> from=check_jxc64t_a0a0b0g0d0e(node.getFromNode());
        if (from != null) {
          myRightTree.addDependency(node.getModules(),from,null,true);
        }
      }
    }
  }
  myRightTree.rebuildNow();
  myRightTree.expandAll();
}
