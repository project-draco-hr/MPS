{
  MethodCallAdapter methodCallAdapter=new MethodCallAdapter(methodCall);
  this.myMethodDeclaration=methodCallAdapter.getMethodDeclaration();
  this.myArguments=new MethodCallAdapter(methodCall).getMethodArguments();
  if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(methodCall),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression"))) {
    this.myMethodCall=SNodeOperations.getParent(methodCall);
    this.myOperand=SLinkOperations.getTarget(SNodeOperations.cast(this.myMethodCall,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"));
  }
 else {
    this.myMethodCall=methodCall;
  }
  this.myMethodProgram=DataFlowManager.getInstance().buildProgramFor(this.myMethodDeclaration);
  List<SNode> returns=SNodeOperations.getNodeDescendants(this.myMethodDeclaration,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068581242878l,"jetbrains.mps.baseLanguage.structure.ReturnStatement"),false,new SConcept[]{});
  this.myHasManyReturns=ListSequence.fromList(returns).count() > 1;
  this.myReturnType=SLinkOperations.getTarget(this.myMethodDeclaration,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123133l,"returnType"));
}
