{
  StringBuffer buff=new StringBuffer();
  Set<SNode> nodesToCheck=ClassRefactoringUtils.getClassMemberRefernce(SLinkOperations.getTarget(this.myMethodDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1ffL,"body")));
  String end=SNodeOperations.getParent(this.myMethodDeclaration) + "." + this.myMethodDeclaration;
  for (  SNode node : SetSequence.fromSet(nodesToCheck)) {
    SNode iMemberContainer=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11638b31955L,"jetbrains.mps.baseLanguage.structure.IMemberContainer"),false,false);
    if (!(VisibilityUtil.isVisible(this.myMethodCall,node))) {
      String start="";
      if (SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
        start="Method ";
      }
      if (SNodeOperations.isInstanceOf(node,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c37a7f6eL,"jetbrains.mps.baseLanguage.structure.VariableDeclaration"))) {
        start="Field ";
      }
      buff.append(start).append(iMemberContainer).append(".").append(node);
      buff.append(" that is used in inlined method is not accessible from ");
      buff.append("call site(s) in method " + end + "\n");
    }
  }
  return buff.toString();
}
