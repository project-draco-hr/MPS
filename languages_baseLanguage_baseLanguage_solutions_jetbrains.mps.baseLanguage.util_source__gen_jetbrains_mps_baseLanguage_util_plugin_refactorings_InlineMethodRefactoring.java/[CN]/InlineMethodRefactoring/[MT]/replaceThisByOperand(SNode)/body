{
  if (!(SNodeOperations.isInstanceOf(this.myOperand,"jetbrains.mps.baseLanguage.structure.IThisExpression") || SNodeOperations.isInstanceOf(this.myOperand,"jetbrains.mps.baseLanguage.structure.VariableReference") || SNodeOperations.isInstanceOf(this.myOperand,"jetbrains.mps.baseLanguage.structure.StringLiteral"))) {
    SNode statement=SNodeOperations.getAncestor(this.myMethodCall,"jetbrains.mps.baseLanguage.structure.Statement",false,false);
    SNode typeForMethodCall=getTypeForMethodCall(myMethodCall);
    SNode type=(typeForMethodCall != null ? typeForMethodCall : getTypeForOperand(myOperand));
    this.myOperand=this.createVariable(statement,"instance",type,this.myOperand);
  }
  for (  SNode thisExpr : ListSequence.fromList(SNodeOperations.getDescendants(body,"jetbrains.mps.baseLanguage.structure.IThisExpression",false,new String[]{}))) {
    SNodeOperations.replaceWithAnother(thisExpr,SNodeOperations.copyNode(this.myOperand));
  }
}
