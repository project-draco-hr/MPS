{
  Set<SNode> usedParameters=this.findUsedParameters();
  SNode statement=SNodeOperations.getNodeAncestor(this.myMethodCall,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b215L,"jetbrains.mps.baseLanguage.structure.Statement"),false,false);
  Map<SNode,SNode> map=MapSequence.fromMap(new HashMap<SNode,SNode>());
  List<SNode> parameters=SLinkOperations.getChildren(this.myMethodDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1feL,"parameter"));
  for (int i=0; i < ListSequence.fromList(this.myArguments).count(); i++) {
    SNode parameterDeclaration=ListSequence.fromList(parameters).getElement(i);
    SNode argument=ListSequence.fromList(this.myArguments).getElement(i);
    if (SetSequence.fromSet(usedParameters).contains(parameterDeclaration)) {
      if (this.canSubstituteParameter(argument,parameterDeclaration)) {
        MapSequence.fromMap(map).put(parameterDeclaration,argument);
      }
 else {
        String name=SPropertyOperations.getString(parameterDeclaration,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        SNode type=SLinkOperations.getTarget(parameterDeclaration,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x450368d90ce15bc3L,0x4ed4d318133c80ceL,"type"));
        SNode ref=this.createVariable(statement,name,type,argument);
        MapSequence.fromMap(map).put(parameterDeclaration,ref);
      }
    }
  }
  return map;
}
