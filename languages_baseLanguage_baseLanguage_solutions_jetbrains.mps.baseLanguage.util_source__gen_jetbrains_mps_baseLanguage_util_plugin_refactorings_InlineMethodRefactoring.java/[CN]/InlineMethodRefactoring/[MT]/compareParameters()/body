{
  Set<SNode> usedParameters=this.findUsedParameters();
  SNode statement=SNodeOperations.getNodeAncestor(this.myMethodCall,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123157l,"jetbrains.mps.baseLanguage.structure.Statement"),false,false);
  Map<SNode,SNode> map=MapSequence.fromMap(new HashMap<SNode,SNode>());
  List<SNode> parameters=SLinkOperations.getChildren(this.myMethodDeclaration,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1068580123132l,1068580123134l,"parameter"));
  for (int i=0; i < ListSequence.fromList(this.myArguments).count(); i++) {
    SNode parameterDeclaration=ListSequence.fromList(parameters).getElement(i);
    SNode argument=ListSequence.fromList(this.myArguments).getElement(i);
    if (SetSequence.fromSet(usedParameters).contains(parameterDeclaration)) {
      if (this.canSubstituteParameter(argument,parameterDeclaration)) {
        MapSequence.fromMap(map).put(parameterDeclaration,argument);
      }
 else {
        String name=SPropertyOperations.getString(parameterDeclaration,MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l,-7236703803128771572l),1169194658468l,1169194664001l,"name"));
        SNode type=SLinkOperations.getTarget(parameterDeclaration,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),4972933694980447171l,5680397130376446158l,"type"));
        SNode ref=this.createVariable(statement,name,type,argument);
        MapSequence.fromMap(map).put(parameterDeclaration,ref);
      }
    }
  }
  return map;
}
