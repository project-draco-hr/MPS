{
  ClassifierAndSuperClassifiersScope scope=new ClassifierAndSuperClassifiersScope((Classifier)((INodeAdapter)SNodeOperations.getAdapter(((SNode)this.getField("classifier")[0]))));
  List list=scope.getMethodsByName(SPropertyOperations.getString(SLinkOperations.getTarget(((SNode)this.getField("methodCall")[0]),"baseMethodDeclaration",false),"name"));
  for (  Object object : list) {
    INodeAdapter adapter=(INodeAdapter)object;
    SNode baseMethodDeclaration=((SNode)adapter.getNode());
    if (SLinkOperations.getCount(baseMethodDeclaration,"parameter") == SLinkOperations.getCount(((SNode)this.getField("methodCall")[0]),"actualArgument")) {
      boolean good=true;
{
        SNode parameter;
        SNode argument;
        Iterator<SNode> parameter_iterator=SLinkOperations.getTargets(baseMethodDeclaration,"parameter",true).iterator();
        Iterator<SNode> argument_iterator=SLinkOperations.getTargets(((SNode)this.getField("methodCall")[0]),"actualArgument",true).iterator();
        while (true) {
          if (!(parameter_iterator.hasNext())) {
            break;
          }
          if (!(argument_iterator.hasNext())) {
            break;
          }
          parameter=parameter_iterator.next();
          argument=argument_iterator.next();
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(argument),SLinkOperations.getTarget(parameter,"type",true)))) {
            good=false;
            break;
          }
        }
      }
      if (good) {
        SLinkOperations.setTarget(((SNode)this.getField("methodCall")[0]),"baseMethodDeclaration",baseMethodDeclaration,false);
        return;
      }
    }
  }
}
