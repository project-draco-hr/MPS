{
  List<ModelChange> changes=ListSequence.fromList(myMergeContext.getChangesForRoot(rootTreeNode.getRootId())).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return !(myMergeContext.isChangeResolved(ch));
    }
  }
).toListSequence();
  int conflictedCount=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return Sequence.fromIterable(myMergeContext.getConflictedWith(ch)).isNotEmpty();
    }
  }
).count();
  int nonConflictedCount=ListSequence.fromList(changes).count() - conflictedCount;
  ChangeType compositeChangeType=null;
  if (conflictedCount != 0) {
    compositeChangeType=ChangeType.CONFLICTED;
    rootTreeNode.setAdditionalText("with conflicts");
    String text=NameUtil.formatNumericalString(conflictedCount,"conficting change");
    if (nonConflictedCount == 0) {
      rootTreeNode.setTooltipText(text);
    }
 else {
      rootTreeNode.setTooltipText(text + " of " + ListSequence.fromList(changes).count()+ " total");
    }
  }
 else {
    if (nonConflictedCount == 0) {
      if (myMergeContext.getResultModel().getNodeById(rootTreeNode.getRootId()) == null) {
        rootTreeNode.setText(String.format("<html><s>%s</s></html>",rootTreeNode.getText()));
      }
    }
 else {
      compositeChangeType=ChangeType.CHANGE;
      if (ListSequence.fromList(changes).all(new IWhereFilter<ModelChange>(){
        public boolean accept(        ModelChange ch){
          return ch instanceof AddRootChange || ch instanceof DeleteRootChange;
        }
      }
)) {
        compositeChangeType=ListSequence.fromList(changes).first().getType();
      }
      int myChangesCount=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
        public boolean accept(        ModelChange ch){
          return myMergeContext.isMyChange(ch);
        }
      }
).count();
      if (myChangesCount == nonConflictedCount) {
        rootTreeNode.setAdditionalText("local");
      }
 else       if (myChangesCount == 0) {
        rootTreeNode.setAdditionalText("remote");
      }
 else {
        rootTreeNode.setAdditionalText("both modified");
      }
      rootTreeNode.setTooltipText(NameUtil.formatNumericalString(nonConflictedCount," change"));
    }
  }
  if (compositeChangeType != null) {
    rootTreeNode.setColor(compositeChangeType.getTreeColor());
  }
}
