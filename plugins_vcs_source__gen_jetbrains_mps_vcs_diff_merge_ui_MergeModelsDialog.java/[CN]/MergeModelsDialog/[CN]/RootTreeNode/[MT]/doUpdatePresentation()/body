{
  List<ModelChange> changes=ListSequence.fromList(myMergeContext.getChangesForRoot(myRootId)).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return !(myMergeContext.isChangeResolved(ch));
    }
  }
).toListSequence();
  Iterable<ModelChange> conflictedChanges=ListSequence.fromList(changes).where(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return Sequence.fromIterable(myMergeContext.getConflictedWith(ch)).isNotEmpty();
    }
  }
);
  boolean deleted=false;
  if (Sequence.fromIterable(conflictedChanges).isNotEmpty()) {
    setColor(Color.RED);
  }
 else   if (ListSequence.fromList(changes).isEmpty()) {
    deleted=myMergeContext.getResultModel().getNodeById(myRootId) == null;
  }
 else   if (ListSequence.fromList(changes).all(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return ch instanceof AddRootChange;
    }
  }
)) {
    setColor(FileStatus.ADDED.getColor());
  }
 else   if (ListSequence.fromList(changes).all(new IWhereFilter<ModelChange>(){
    public boolean accept(    ModelChange ch){
      return ch instanceof DeleteRootChange;
    }
  }
)) {
    setColor(FileStatus.DELETED.getColor());
  }
 else   if (ListSequence.fromList(changes).isNotEmpty()) {
    setColor(FileStatus.MODIFIED.getColor());
  }
  int conflictedCount=Sequence.fromIterable(conflictedChanges).count();
  int nonConflctedCount=ListSequence.fromList(changes).count() - conflictedCount;
  if (Sequence.fromIterable(conflictedChanges).isNotEmpty()) {
    setAdditionalText(nonConflctedCount + "+" + conflictedCount);
    setTooltipText(NameUtil.formatNumericalString(nonConflctedCount,"non-conficting change") + ", " + NameUtil.formatNumericalString(conflictedCount,"conficting change"));
  }
 else   if (ListSequence.fromList(changes).isNotEmpty()) {
    setAdditionalText("" + nonConflctedCount);
    setTooltipText(NameUtil.formatNumericalString(nonConflctedCount,"non-conficting change"));
  }
  List<String> presentations=ListSequence.fromList(new ArrayList<String>());
  Icon icon=null;
  for (  SModel model : Sequence.fromIterable(Sequence.fromArray(new SModel[]{myMergeContext.getBaseModel(),myMergeContext.getMyModel(),myMergeContext.getRepositoryModel()}))) {
    SNode root=model.getNodeById(myRootId);
    if (root != null) {
      String presentation=root.getPresentation();
      if (!(ListSequence.fromList(presentations).contains(presentation))) {
        ListSequence.fromList(presentations).addElement(presentation);
      }
      if (icon == null) {
        icon=IconManager.getIconFor(root);
      }
    }
  }
  setText((deleted ? String.format("<html><s>%s</s></html>",myPresentations) : myPresentations));
}
