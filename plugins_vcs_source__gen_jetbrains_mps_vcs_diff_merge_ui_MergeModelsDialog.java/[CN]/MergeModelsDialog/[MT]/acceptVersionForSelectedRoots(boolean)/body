{
  final List<ModelChange> changesToApply=ListSequence.<ModelChange>fromList(new ArrayList<ModelChange>());
  final List<ModelChange> changesToExclude=ListSequence.<ModelChange>fromList(new ArrayList<ModelChange>());
  for (  DiffModelTree.RootTreeNode rtn : Sequence.<DiffModelTree.RootTreeNode>fromIterable(Sequence.fromArray(myMergeTree.getSelectedNodes(DiffModelTree.RootTreeNode.class,null)))) {
    SNodeId root=rtn.getRootId();
    List<ModelChange> changes=(root == null ? myMergeContext.getMetadataChanges() : myMergeContext.getChangesForRoot(root));
    for (    ModelChange change : ListSequence.<ModelChange>fromList(changes)) {
      if (!(myMergeContext.isChangeResolved(change))) {
        if (mine == myMergeContext.isMyChange(change)) {
          ListSequence.<ModelChange>fromList(changesToApply).addElement(change);
          if (root == null) {
            SetSequence.fromSet(myAppliedMetadataChanges).addElement(change);
          }
        }
 else {
          ListSequence.<ModelChange>fromList(changesToExclude).addElement(change);
        }
      }
    }
  }
  ModelAccess.instance().runWriteActionInCommand(new Runnable(){
    public void run(){
      myMergeContext.applyChanges(changesToApply);
      myMergeContext.excludeChanges(changesToExclude);
      myMergeTree.rebuildNow();
    }
  }
);
}
