{
  super("Upgrade process builder expressions");
  this.addRefactoring(new AbstractMigrationRefactoring(operationContext){
    public String getName(){
      return "Upgrade process builder expressions";
    }
    public String getAdditionalInfo(){
      return "Upgrade process builder expressions";
    }
    public String getFqNameOfConceptToSearchInstances(){
      return "jetbrains.mps.execution.commands.structure.ProcessBuilderExpression";
    }
    public boolean isApplicableInstanceNode(    SNode node){
      return true;
    }
    public void doUpdateInstanceNode(    SNode node){
      SNode replacement=SConceptOperations.createNewNode("jetbrains.mps.execution.commands.structure.NewProcessBuilderExpression",null);
      for (      SNode part : ListSequence.fromList(SLinkOperations.getTargets(node,"part",true))) {
        if (SNodeOperations.isInstanceOf(part,"jetbrains.mps.execution.commands.structure.ProcessBuilderPart")) {
          ListSequence.fromList(SLinkOperations.getTargets(replacement,"commandPart",true)).addElement(SLinkOperations.getTarget(SNodeOperations.cast(part,"jetbrains.mps.execution.commands.structure.ProcessBuilderPart"),"expression",true));
        }
 else         if (SNodeOperations.isInstanceOf(part,"jetbrains.mps.execution.commands.structure.ProcessBuilderKeyPart")) {
          SNode keyValuePart=new NewProcessHandlerBuilder_MigrationScript.QuotationClass_n2pakd_a0a0a0a0b0e0a0a0b0a().createNode(SLinkOperations.getTarget(SNodeOperations.cast(part,"jetbrains.mps.execution.commands.structure.ProcessBuilderKeyPart"),"value",true),SLinkOperations.getTarget(SNodeOperations.cast(part,"jetbrains.mps.execution.commands.structure.ProcessBuilderKeyPart"),"key",true));
          ListSequence.fromList(SLinkOperations.getTargets(replacement,"commandPart",true)).addElement(keyValuePart);
        }
      }
      SLinkOperations.setTarget(replacement,"workingDirectory",SLinkOperations.getTarget(node,"workingDirectory",true),true);
      SNodeOperations.replaceWithAnother(node,replacement);
    }
    public boolean isShowAsIntention(){
      return false;
    }
  }
);
}
