{
  ModelAccess.assertLegalRead();
  if (MapSequence.fromMap(myFeatureToValue).containsKey(feature)) {
    throw new IllegalArgumentException("Trying to put already present feature");
  }
  Feature[] ancestors=feature.getAncestors();
  if (Sequence.fromIterable(Sequence.fromArray(ancestors)).any(new IWhereFilter<Feature>(){
    public boolean accept(    Feature a){
      return MapSequence.fromMap(myFeatureToValue).containsKey(a);
    }
  }
)) {
    throw new IllegalAccessError("Trying to put feature which is ancestor of already added one");
  }
  fireEvent("featureAdded",new _FunctionTypes._void_P1_E0<FeatureForestMapListener>(){
    public void invoke(    FeatureForestMapListener listener){
      listener.featureAdded(feature);
    }
  }
);
  MapSequence.fromMap(myFeatureToValue).put(feature,value);
  MapSequence.fromMap(myFeatureToAncestors).put(feature,ancestors);
  Sequence.fromIterable(Sequence.fromArray(ancestors)).visitAll(new IVisitor<Feature>(){
    public void visit(    Feature a){
      myFeaturesIsAncestorCounterMap.increment(a);
    }
  }
);
}
