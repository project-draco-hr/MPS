{
  if (ThreadUtils.isEventDispatchThread()) {
    throw new RuntimeException("Can't run make from the event dispatch thread");
  }
  final List<SModelDescriptor> models=ListSequence.fromList(new ArrayList<SModelDescriptor>());
  for (  final SNode node : nodes) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        SModelDescriptor md=SNodeOperations.getModel(node).getModelDescriptor();
        if (md instanceof EditableSModelDescriptor) {
          if (!(ListSequence.fromList(models).contains((EditableSModelDescriptor)md)) && ModelGenerationStatusManager.getInstance().generationRequired(md,ProjectOperationContext.get(project))) {
            ListSequence.fromList(models).addElement((EditableSModelDescriptor)md);
          }
        }
      }
    }
);
  }
  if (ListSequence.fromList(models).isNotEmpty()) {
    final ProjectOperationContext context=ProjectOperationContext.get(project);
    IResult result=null;
    Future<IResult> future=new WorkbenchMakeService(context,true).make(new ModelsToResources(context,models).resources(false));
    try {
      result=future.get();
    }
 catch (    CancellationException ignore) {
    }
catch (    InterruptedException ignore) {
    }
catch (    ExecutionException ignore) {
    }
    return result != null && result.isSucessful();
  }
  return true;
}
