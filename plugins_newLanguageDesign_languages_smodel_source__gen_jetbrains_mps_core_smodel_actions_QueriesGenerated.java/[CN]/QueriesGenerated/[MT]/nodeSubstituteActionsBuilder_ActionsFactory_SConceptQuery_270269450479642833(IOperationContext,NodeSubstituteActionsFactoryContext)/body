{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.core.smodel.structure.SConceptQuery");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          return Sequence.fromIterable(ConceptQueryUtil.getQueriesToOverride(SNodeOperations.cast(_context.getParentNode(),"jetbrains.mps.core.structure.structure.SAbstractConcept"))).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode res=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.core.smodel.structure.SConceptQuery",null);
              SPropertyOperations.set(res,"name",SPropertyOperations.getString((item),"name"));
              SLinkOperations.setTarget(res,"type",SNodeOperations.copyNode(SLinkOperations.getTarget((item),"type",true)),true);
              SPropertyOperations.set(res,"isOverride","" + (true));
              ListSequence.fromList(SLinkOperations.getTargets(res,"parameters",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets((item),"parameters",true)).select(new ISelector<SNode,SNode>(){
                public SNode select(                SNode it){
                  return SNodeOperations.copyNode(it);
                }
              }
));
              return res;
            }
            public String getMatchingText(            String pattern){
              return "override " + SConceptQuery_Behavior.call_getText_270269450479821683((item));
            }
            public String getVisibleMatchingText(            String pattern){
              return getMatchingText(pattern);
            }
            public String getDescriptionText(            String pattern){
              return SPropertyOperations.getString(SConceptMember_Behavior.call_getContainingConcept_4125821269968947769((item)),"name");
            }
          }
);
        }
      }
    }
  }
  return result;
}
