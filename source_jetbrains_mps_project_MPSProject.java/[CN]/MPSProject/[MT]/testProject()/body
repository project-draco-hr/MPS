{
  final IMessageHandler handler=new IMessageHandler(){
    public void handle(    Message msg){
      System.err.println(msg.getKind() + " : " + msg.getText());
    }
  }
;
  CommandProcessor.instance().executeCommand(new Runnable(){
    public void run(){
      for (      TestConfiguration t : myProjectDescriptor.getTests()) {
        SModelDescriptor modelDescriptor=getScope().getModelDescriptor(SModelUID.fromString(t.getModelFqName()));
        GenerationPlans.Plan p=getComponentSafe(GenerationPlans.class).findPlan(t.getGenerationPlan());
        Language target=getScope().getLanguage(t.getTargetLanguage());
        if (modelDescriptor == null || p == null || target == null) {
          System.err.println("can't execute test configuration " + t.getName());
          continue;
        }
        System.err.println("executing configuration " + t.getName());
        IModule module=null;
        for (        IModule m : getModules()) {
          if (m.getOwnModelDescriptors().contains(modelDescriptor)) {
            module=m;
            break;
          }
        }
        if (module == null) {
          System.err.println("there is no module that can be used to generate model " + modelDescriptor.getModelUID());
          continue;
        }
        getComponentSafe(GeneratorManager.class).generateModels(CollectionUtil.asList(modelDescriptor.getSModel()),target,new ModuleContext(module,MPSProject.this),new GenerateClassesGenerationType(false){
          public boolean requiresCompilationInIDEABeforeGeneration(){
            return false;
          }
          public boolean requiresCompilationInIDEAfterGeneration(){
            return false;
          }
        }
,p.getGenerationScript(),IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR,handler);
      }
    }
  }
);
}
