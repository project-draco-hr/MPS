{
  CommandProcessor.instance().executeLightweightCommand(new Runnable(){
    public void run(){
      getPluginManager().reloadPlugins();
    }
  }
);
  final List<String> errors=new ArrayList<String>();
  final List<String> warnings=new ArrayList<String>();
  final IMessageHandler handler=new IMessageHandler(){
    public void handle(    Message msg){
      final String message=msg.getText();
switch (msg.getKind()) {
case ERROR:
        errors.add(msg.getText());
      LOG.error(message);
    break;
case WARNING:
  warnings.add(msg.getText());
LOG.warning(message);
break;
case INFORMATION:
LOG.info(message);
break;
}
}
}
;
final GenerateFilesAndClassesGenerationType generationType=new GenerateFilesAndClassesGenerationType(false){
public boolean requiresCompilationInIDEABeforeGeneration(){
return false;
}
public boolean requiresCompilationInIDEAfterGeneration(){
return false;
}
protected boolean isPutClassesOnTheDisk(){
return false;
}
}
;
CommandProcessor.instance().executeCommand(new Runnable(){
public void run(){
List<BaseGeneratorConfiguration> configurations=new ArrayList<BaseGeneratorConfiguration>(myProjectDescriptor.getRunConfigurations());
if (myProjectDescriptor.getTestAllLanguages()) {
for (Language l : getProjectLanguages()) {
LanguageGeneratorConfiguration conf=LanguageGeneratorConfiguration.newInstance(myProjectDescriptor.getModel());
conf.setLanguageNamespace(l.getNamespace());
configurations.add(conf);
}
}
for (BaseGeneratorConfiguration t : configurations) {
GenParameters parms;
try {
parms=GeneratorConfigUtil.calculate(MPSProject.this,t);
}
 catch (GeneratorConfigUtil.GeneratorConfigurationException e) {
errors.add("Can't create a generator configuration : " + e.getMessage());
return;
}
GeneratorManager gm=getComponentSafe(GeneratorManager.class);
gm.generateModels(parms.getModels(),parms.getTarget(),new ModuleContext(parms.getModule(),MPSProject.this),generationType,parms.getScript(),IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR,handler,gm.isSaveTransientModels());
generationType.compile(IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR);
System.out.println("");
System.out.println("");
System.out.println("");
}
}
}
);
return new TestResult(errors,warnings,createCompilationProblemsList(generationType.getCompilationResults()));
}
