{
  mySemanticModels.saveAll();
  Element rootElement=new Element(PROJECT);
  Document document=new Document();
  document.setRootElement(rootElement);
  Element semanticModelsElement=new Element(SEMANTIC_MODELS);
  rootElement.addContent(semanticModelsElement);
  SemanticModel[] semanticModels=mySemanticModels.semanticModels();
  for (int i=0; i < semanticModels.length; i++) {
    SemanticModel semanticModel=semanticModels[i];
    Element modelElement=new Element(SEMANTIC_MODEL);
    semanticModelsElement.addContent(modelElement);
    Element fileElement=new Element(FILE);
    modelElement.addContent(fileElement);
    String modelAbsolutePath=mySemanticModels.getFileName(semanticModel);
    String modelFileName=null;
    if (modelAbsolutePath.startsWith(myProjectFile.getParent())) {
      String modelRelationalPath=PathManager.getRelationalPathByAbsolute(myProjectFile,modelAbsolutePath);
      modelFileName=PATH_MACRO_PROJECT + modelRelationalPath;
    }
 else {
      String modelRelationalPath=PathManager.getRelationalPathByAbsolute(new File(PathManager.getModelPath()),modelAbsolutePath);
      modelFileName=PATH_MACRO_MODELS_ROOT + modelRelationalPath;
    }
    fileElement.setAttribute(NAME,modelFileName);
  }
  if (!myProjectFile.exists()) {
    try {
      myProjectFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  try {
    JDOMUtil.writeDocument(document,myProjectFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
