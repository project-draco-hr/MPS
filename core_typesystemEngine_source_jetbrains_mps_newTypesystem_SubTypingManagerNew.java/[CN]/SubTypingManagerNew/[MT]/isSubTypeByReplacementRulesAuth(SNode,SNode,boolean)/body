{
  return LanguageScopeExecutor.execWithMultiLanguageScope(collectLanguagesRecursively(subType,superType),new Computable<Pair<Boolean,Boolean>>(){
    @Override public Pair<Boolean,Boolean> compute(){
      for (      Pair<InequationReplacementRule_Runtime,IsApplicable2Status> pair : myTypeChecker.getRulesManager().getReplacementRules(subType,superType)) {
        InequationReplacementRule_Runtime rule=pair.o1;
        IsApplicable2Status status=pair.o2;
        boolean affirmative=rule.checkInequation(subType,superType,new EquationInfo(null,null),status,isWeak);
        return new Pair<Boolean,Boolean>(affirmative,true);
      }
      return new Pair<Boolean,Boolean>(false,false);
    }
  }
);
}
