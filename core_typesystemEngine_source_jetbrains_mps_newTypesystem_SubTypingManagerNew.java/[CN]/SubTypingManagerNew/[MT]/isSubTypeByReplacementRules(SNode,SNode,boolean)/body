{
  return LanguageScopeExecutor.execWithMultiLanguageScope(collectLanguagesRecursively(subType,superType),new Computable<Boolean>(){
    @Override public Boolean compute(){
      for (      Pair<InequationReplacementRule_Runtime,IsApplicable2Status> rule : myTypeChecker.getRulesManager().getReplacementRules(subType,superType)) {
        if (rule.o1.checkInequation(subType,superType,new EquationInfo(null,null),rule.o2,isWeak)) {
          return true;
        }
      }
      return false;
    }
  }
);
}
