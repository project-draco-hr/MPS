{
  LanguageScope languageScope=LanguageScopeFactory.getInstance().getLanguageScope(subType.getLanguage().getDependenciesManager().getAllExtendedLanguages(),superType.getLanguage().getDependenciesManager().getAllExtendedLanguages());
  try {
    LanguageScope.pushCurrent(languageScope,this);
    for (    Pair<InequationReplacementRule_Runtime,IsApplicable2Status> rule : myTypeChecker.getRulesManager().getReplacementRules(subType,superType)) {
      if (rule.o1.checkInequation(subType,superType,new EquationInfo(null,null),rule.o2,isWeak)) {
        return true;
      }
    }
    return false;
  }
  finally {
    LanguageScope.popCurrent(languageScope,this);
  }
}
