{
  if (types.size() == 0) {
    return null;
  }
  int newNodesSize=1;
  while (types.size() > newNodesSize) {
    if (types.size() == 1) {
      return types.remove(0);
    }
    if (types.size() == 0) {
      return null;
    }
    SNode left=types.remove(0);
    SNode right=types.remove(0);
    List<SNode> newNodes=eliminateSuperTypes(leastCommonSuperTypes(left,right,context));
    newNodesSize=newNodes.size();
    types.addAll(newNodes);
  }
  types=eliminateSuperTypes(types);
  return LatticeUtil.meetNodes(new THashSet<SNode>(types));
}
