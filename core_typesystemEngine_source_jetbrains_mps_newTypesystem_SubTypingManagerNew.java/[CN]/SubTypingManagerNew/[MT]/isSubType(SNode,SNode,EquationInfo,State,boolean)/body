{
  myState=state;
  if (subType == superType) {
    return true;
  }
  if (null == subType || null == superType) {
    return false;
  }
  if (!TypesUtil.hasVariablesInside(superType) && !TypesUtil.hasVariablesInside(subType)) {
    Boolean answer=getCacheAnswer(subType,superType,isWeak);
    if (answer != null) {
      return answer;
    }
  }
  if (meetsAndJoins(subType,superType,info,isWeak)) {
    return true;
  }
  Equations equations=myState == null ? null : state.getEquations();
  if (TypesUtil.match(subType,superType,equations,info)) {
    return true;
  }
  return searchInSuperTypes(subType,new NodeMatcher(superType,equations,info),info,isWeak);
}
