{
  myState=state;
  if (meetsAndJoins(subType,superType,info,isWeak)) {
    return true;
  }
  if (isSubTypeByReplacementRules(subType,superType)) {
    return true;
  }
  Equations equations=myState == null ? null : state.getEquations();
  if (TypesUtil.match(subType,superType,equations,info)) {
    return true;
  }
  return searchInSuperTypes(subType,new NodeMatcher(superType,equations,info),info,isWeak);
}
