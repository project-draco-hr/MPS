{
  long start=System.nanoTime();
  Boolean aBoolean=NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<Boolean>(){
    public Boolean compute(){
      if (null == subType || null == superType)       return false;
      if (subType == superType)       return true;
      if (!TypesUtil.hasVariablesInside(superType) && !TypesUtil.hasVariablesInside(subType)) {
        Boolean answer=getIsSubTypeCacheAnswer(subType,superType,isWeak);
        if (answer != null) {
          return answer;
        }
      }
      Equations equations=null;
      if (state != null) {
        equations=state.getEquations();
      }
      if (TypesUtil.match(subType,superType,equations,info)) {
        return true;
      }
      if (isSubTypeByReplacementRules(subType,superType,isWeak)) {
        return true;
      }
      if (meetsAndJoins(subType,superType,info,isWeak,state)) {
        return true;
      }
      return searchInSuperTypes(subType,new NodeMatcher(superType,equations,info),isWeak,state);
    }
  }
);
  TypeSystemReporter.getInstance().reportIsSubType(subType,superType,(System.nanoTime() - start));
  return aBoolean;
}
