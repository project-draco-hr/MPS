{
  SModelReference mr=getTargetSModelReference();
  if (mr != null) {
    NodeReadAccessCasterInEditor.fireReferenceTargetReadAccessed(getSourceNode(),mr,getTargetNodeId());
  }
  if (myImmatureTargetNode != null) {
synchronized (this) {
      if (!makeIndirect()) {
        return myImmatureTargetNode;
      }
    }
  }
  SNodeId targetNodeId=getTargetNodeId();
  if (targetNodeId == null) {
    return null;
  }
  SModel targetModel=getTargetSModel();
  if (targetModel == null)   return null;
  if (targetModel instanceof ModelWithDisposeInfo && ((ModelWithDisposeInfo)targetModel).isDisposed()) {
    Logger log=Logger.wrap(LogManager.getLogger(this.getClass()));
    StringBuilder sb=new StringBuilder();
    sb.append("target model ");
    sb.append(targetModel.toString());
    sb.append(" is disposed\n");
    SNode sourceNode=getSourceNode();
    sb.append("source node is: name = ");
    sb.append(sourceNode.getName());
    sb.append(", model = ");
    sb.append(sourceNode.getModel());
    sb.append(", id = ");
    sb.append(sourceNode.getNodeId().toString());
    sb.append("\ntarget node id = ");
    sb.append(targetNodeId);
    sb.append("\nstack trace of model disposing is: ");
    for (    StackTraceElement ste : ((ModelWithDisposeInfo)targetModel).getDisposedStacktrace()) {
      sb.append(ste);
      sb.append("\n");
    }
    log.error(sb.toString());
    log.errorWithTrace("=============current trace:=============");
    return null;
  }
  SNode targetNode=targetModel.getNode(targetNodeId);
  if (targetNode != null)   return targetNode;
  targetNode=UnregisteredNodes.instance().get(targetModel.getReference(),targetNodeId);
  if (targetNode == null) {
    error("target model '" + targetModel.getReference() + "' doesn't contain node with id="+ getTargetNodeId(),true);
  }
  return targetNode;
}
