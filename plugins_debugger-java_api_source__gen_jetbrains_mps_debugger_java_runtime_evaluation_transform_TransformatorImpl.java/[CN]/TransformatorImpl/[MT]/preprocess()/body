{
  addLanguageImport(myModel,MetaAdapterFactory.getLanguage(0xdf345b11b8c74213L,0xac6648d2a9b75d88L,"jetbrains.mps.baseLanguageInternal"));
  for (  SNode downcast : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,"jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel"),false,new SAbstractConcept[]{}))) {
    SNodeOperations.replaceWithAnother(downcast,SLinkOperations.getTarget(downcast,MetaAdapterFactory.getContainmentLink(0x7da4580f9d754603L,0x816251a896d78375L,0x6dd9f7bd221bb1d5L,0x6dd9f7bd221bb39eL,"expression")));
  }
  normalizeAllDotExpressions(myWhatToEvaluate);
  for (  SNode node : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,null,false,new SAbstractConcept[]{}))) {
    AttributeOperations.createAndSetAttrbiute(node,new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x50b810dd5c871ea2L,"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation")),MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x50b810dd5c871ea2L,"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation"));
  }
  for (  SNode binaryOperation : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,"jetbrains.mps.baseLanguage.structure.BinaryOperation"),false,new SAbstractConcept[]{}))) {
    SNode ltype=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11cL,"leftExpression")));
    SNode rtype=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binaryOperation,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbdeb6fecfL,0xfbdeb7a11bL,"rightExpression")));
    binaryOperation.putUserObject(TransformatorImpl.LTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(ltype)));
    binaryOperation.putUserObject(TransformatorImpl.RTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(rtype)));
  }
  for (  SNode arrayAccess : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11126b40c25L,"jetbrains.mps.baseLanguage.structure.ArrayAccessExpression"),false,new SAbstractConcept[]{}))) {
    SNode ltype=TypeChecker.getInstance().getTypeOf(arrayAccess);
    arrayAccess.putUserObject(TransformatorImpl.LTYPE,SNodeOperations.copyNode(ltype));
  }
  for (  SNode baseAssignment : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d00332cL,"jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return !(SNodeOperations.isInstanceOf(it,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8c77f1e96L,"jetbrains.mps.baseLanguage.structure.AssignmentExpression")));
    }
  }
)) {
    baseAssignment.putUserObject(TransformatorImpl.LTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(baseAssignment,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d00332cL,0xf8c77f1e97L,"lValue"))))));
    baseAssignment.putUserObject(TransformatorImpl.RTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(baseAssignment,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11b0d00332cL,0xf8c77f1e99L,"rValue"))))));
  }
  for (  SNode ternaryOperator : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,"jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"),false,new SAbstractConcept[]{}))) {
    ternaryOperator.putUserObject(TransformatorImpl.LTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ternaryOperator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012a1c0L,"ifTrue"))))));
    ternaryOperator.putUserObject(TransformatorImpl.RTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ternaryOperator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012cedcL,"ifFalse"))))));
    ternaryOperator.putUserObject(TransformatorImpl.CTYPE,TransformationUtil.getBoxedTypeIfNeeded(SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ternaryOperator,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x10ef01239c9L,0x10ef012826fL,"condition"))))));
  }
}
