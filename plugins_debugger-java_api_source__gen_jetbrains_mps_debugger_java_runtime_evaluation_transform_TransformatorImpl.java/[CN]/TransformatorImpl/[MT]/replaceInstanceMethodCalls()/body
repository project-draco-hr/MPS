{
  boolean finished=true;
  for (  SNode methodCall : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(methodCall,"jetbrains.mps.baseLanguage.structure.DotExpression",false,false),"operand",true)),_quotation_createNode_s72qk1_b0a1a1a52())) {
      SNode originalMethodDeclaration=SLinkOperations.getTarget(methodCall,"baseMethodDeclaration",false);
      TransformationUtil.replaceMethodCall(SNodeOperations.cast(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.Expression"),SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(methodCall),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true),methodCall,SPropertyOperations.getString(originalMethodDeclaration,"name"),TransformationUtil.getJniSignature(originalMethodDeclaration),SLinkOperations.getTarget(originalMethodDeclaration,"returnType",true),SLinkOperations.getTargets(methodCall,"actualArgument",true));
      finished=false;
    }
  }
  return finished;
}
