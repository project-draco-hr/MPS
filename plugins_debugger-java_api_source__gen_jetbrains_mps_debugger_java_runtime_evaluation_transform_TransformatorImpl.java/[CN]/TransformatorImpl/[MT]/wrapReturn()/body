{
  SNode evaluateMethod=SNodeOperations.getNodeAncestor(myWhatToEvaluate,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x1208f458d37L,"jetbrains.mps.baseLanguage.structure.IMethodLike"),true,false);
  for (  SNode returnStatement : ListSequence.fromList(SNodeOperations.getNodeDescendants(evaluateMethod,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,"jetbrains.mps.baseLanguage.structure.ReturnStatement"),false,new SAbstractConcept[]{}))) {
    SNode expression=SLinkOperations.getTarget(returnStatement,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc67c7feL,0xf8cc6bf96cL,"expression"));
    TransformationUtil.replaceReturnedExpressionIfNeeded(expression);
  }
  SNode statement=((SNode)BHReflection.invoke(evaluateMethod,SMethodTrimmedId.create("getLastStatement",null,"i2fhS7A")));
  if (TransformationUtil.canMakeReturnStatement(statement)) {
    TransformationUtil.replaceReturnedExpressionIfNeeded(SLinkOperations.getTarget(SNodeOperations.cast(statement,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,"jetbrains.mps.baseLanguage.structure.ExpressionStatement")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b213L,0xf8cc56b214L,"expression")));
  }
}
