{
  for (  SNode localStaticMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
    }
  }
).toListSequence().where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode staticMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null);
    if (ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getContainingRoot(myWhatToEvaluate),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration",false,new String[]{})).contains(SNodeOperations.cast(SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
      continue;
    }
    SLinkOperations.setTarget(staticMethodCall,"classConcept",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    SLinkOperations.setTarget(staticMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localStaticMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(staticMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localStaticMethodCall,"actualArgument",true)));
    AttributeOperations.createAndSetAttrbiute(staticMethodCall,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation"),"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localStaticMethodCall,staticMethodCall);
  }
  for (  SNode localInstanceMethodCall : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.LocalMethodCall",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"baseMethodDeclaration",false),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
    }
  }
).toListSequence().where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode instanceMethodCall=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null);
    SLinkOperations.setTarget(instanceMethodCall,"baseMethodDeclaration",SLinkOperations.getTarget(localInstanceMethodCall,"baseMethodDeclaration",false),false);
    ListSequence.fromList(SLinkOperations.getTargets(instanceMethodCall,"actualArgument",true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(localInstanceMethodCall,"actualArgument",true)));
    AttributeOperations.createAndSetAttrbiute(instanceMethodCall,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation"),"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localInstanceMethodCall,_quotation_createNode_s72qk1_a0a4a3a71(instanceMethodCall,TransformationUtil.createThisNodeReplacement()));
  }
  for (  SNode localStaticFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode staticFieldReference=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldReference",null);
    SLinkOperations.setTarget(staticFieldReference,"variableDeclaration",SLinkOperations.getTarget(localStaticFieldReference,"variableDeclaration",false),false);
    SLinkOperations.setTarget(staticFieldReference,"classifier",SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(localStaticFieldReference,"variableDeclaration",false)),"jetbrains.mps.baseLanguage.structure.ClassConcept"),false);
    AttributeOperations.createAndSetAttrbiute(staticFieldReference,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation"),"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localStaticFieldReference,staticFieldReference);
  }
  for (  SNode localInstanceFieldReference : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.VariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.VariableReference"),"variableDeclaration",false),"jetbrains.mps.baseLanguage.structure.FieldDeclaration");
    }
  }
).toListSequence().where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode fieldReferenceOperation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
    SLinkOperations.setTarget(fieldReferenceOperation,"fieldDeclaration",SLinkOperations.getTarget(localInstanceFieldReference,"variableDeclaration",false),false);
    AttributeOperations.createAndSetAttrbiute(fieldReferenceOperation,new IAttributeDescriptor.NodeAttribute("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation"),"jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation");
    SNodeOperations.replaceWithAnother(localInstanceFieldReference,_quotation_createNode_s72qk1_a0a3a7a71(fieldReferenceOperation,TransformationUtil.createThisNodeReplacement()));
  }
}
