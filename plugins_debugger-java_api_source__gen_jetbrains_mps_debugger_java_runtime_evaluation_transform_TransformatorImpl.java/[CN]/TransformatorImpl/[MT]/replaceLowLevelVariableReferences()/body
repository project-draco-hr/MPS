{
  for (  SNode variableRef : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.BaseVariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    if ((TransformationUtil.isLowLevelVariableReference(variableRef))) {
      String variableName;
      if (SNodeOperations.isInstanceOf(variableRef,"jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference") && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(variableRef,"jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference"),"baseVariableDeclaration",false),"type",true),"isHigh")) {
        variableName=SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(variableRef,"jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference"),"baseVariableDeclaration",false),"lowLevelName");
      }
 else {
        variableName=SPropertyOperations.getString(SLinkOperations.getTarget(variableRef,"baseVariableDeclaration",false),"name");
      }
      SNode variableType=TypeChecker.getInstance().getTypeOf(variableRef);
      TransformationUtil.replaceLowLevelVariableReference(variableName,variableType,variableRef);
    }
  }
  for (  SNode variableRef : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    TransformationUtil.replaceLowLevelVariableReference(SPropertyOperations.getString(variableRef,"name"),SLinkOperations.getTarget(variableRef,"type",true),variableRef);
  }
}
