{
  for (  SNode superMethodCall : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0x7da4580f9d754603L,0x816251a896d78375L,0x53c5060c6b1ae1feL,"jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsSuperMethodCall"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode returnType=SLinkOperations.getTarget(SLinkOperations.getTarget(superMethodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b1fcL,0xf8cc56b1fdL,"returnType"));
    String methodName=SPropertyOperations.getString(SLinkOperations.getTarget(superMethodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
    String jniSignature=TransformationUtil.getJniSignature(SLinkOperations.getTarget(superMethodCall,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL,"baseMethodDeclaration")));
    TransformationUtil.replaceSuper(superMethodCall,methodName,jniSignature,returnType,SLinkOperations.getChildren(superMethodCall,MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301aeL,"actualArgument")));
  }
}
