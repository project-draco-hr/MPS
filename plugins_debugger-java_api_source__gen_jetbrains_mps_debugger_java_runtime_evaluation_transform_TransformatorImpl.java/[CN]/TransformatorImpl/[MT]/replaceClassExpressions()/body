{
  for (  SNode classifierClassExpression : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode classFqNameNode=TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(classifierClassExpression,MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1116615150612l,1116615189566l,"classifier")));
    TransformationUtil.replaceClassExpression(classifierClassExpression,classFqNameNode);
  }
  for (  SNode classExpression : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    TransformationUtil.replaceClassExpression(classExpression,TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(classExpression,MetaAdapterFactory.getContainmentLink(new UUID(-2363163772790029805l,-6024047381933761144l),1174478619261l,1174478663778l,"type")),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1107535904670l,1107535924139l,"classifier"))));
  }
}
