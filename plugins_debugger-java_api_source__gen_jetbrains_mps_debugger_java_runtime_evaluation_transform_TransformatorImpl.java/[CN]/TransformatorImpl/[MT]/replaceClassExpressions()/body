{
  for (  SNode classifierClassExpression : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x103fb730c14L,"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    SNode classFqNameNode=TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(classifierClassExpression,MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x103fb730c14L,0x103fb73a43eL,"classifier")));
    TransformationUtil.replaceClassExpression(classifierClassExpression,classFqNameNode);
  }
  for (  SNode classExpression : ListSequence.fromList(SNodeOperations.getNodeDescendants(myWhatToEvaluate,MetaAdapterFactory.getConcept(0xdf345b11b8c74213L,0xac6648d2a9b75d88L,0x1117461827dL,"jetbrains.mps.baseLanguageInternal.structure.InternalClassExpression"),false,new SAbstractConcept[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    TransformationUtil.replaceClassExpression(classExpression,TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(classExpression,MetaAdapterFactory.getContainmentLink(0xdf345b11b8c74213L,0xac6648d2a9b75d88L,0x1117461827dL,0x11174623062L,"type")),HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),true),MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101de48bf9eL,0x101de490babL,"classifier"))));
  }
}
