{
  boolean finished=true;
{
    SNode notExpression;
    Iterator<SNode> notExpression_iterator=ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.NotExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode it){
        return TransformationUtil.isUnprocessed(it);
      }
    }
).iterator();
    while (true) {
      if (!(notExpression_iterator.hasNext())) {
        break;
      }
      notExpression=notExpression_iterator.next();
      if (TransformationUtil.isNotNullProxy(SLinkOperations.getTarget(notExpression,"expression",true))) {
        SLinkOperations.setTarget(notExpression,"expression",new TransformatorImpl.QuotationClass_s72qk1_a0a0a0a0c0c0b0p().createNode(SLinkOperations.getTarget(notExpression,"expression",true)),true);
        finished=false;
      }
    }
  }
  return finished;
}
