{
  for (  SNode newExpression : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguage.structure.GenericNewExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it) && TransformationUtil.isUnprocessed(SLinkOperations.getTarget(it,"creator",true));
    }
  }
)) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(newExpression),"jetbrains.mps.baseLanguage.structure.ThrowStatement"))) {
      SNode constructor=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"baseMethodDeclaration",false);
      SNode fqNameNode=TransformationUtil.createClassFqNameNode(myModel,SNodeOperations.getAncestor(constructor,"jetbrains.mps.baseLanguage.structure.ClassConcept",false,false));
      SNode jnSignature=TransformationUtil.createStringLiteral(TransformationUtil.getJniSignature(constructor));
      List<SNode> actualArguments=SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ClassCreator"),"actualArgument",true);
      TransformationUtil.replaceConstructor(newExpression,fqNameNode,jnSignature,actualArguments);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ArrayCreator")) {
      SNode componentType=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ArrayCreator"),"componentType",true);
      SNode fqNameNode;
      if (SNodeOperations.isInstanceOf(componentType,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        fqNameNode=TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(SNodeOperations.cast(componentType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false));
      }
 else {
        fqNameNode=TransformationUtil.createStringLiteral(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(componentType),"conceptAlias"));
      }
      SNode size=SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ArrayCreator"),"dimensionExpression",true)).first(),"expression",true);
      TransformationUtil.replaceArrayConstructor(newExpression,fqNameNode,size);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer")) {
      SNode componentType=SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer"),"componentType",true);
      SNode fqNameNode;
      if (SNodeOperations.isInstanceOf(componentType,"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        fqNameNode=TransformationUtil.createClassFqNameNode(myModel,SLinkOperations.getTarget(SNodeOperations.cast(componentType,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false));
      }
 else {
        fqNameNode=TransformationUtil.createStringLiteral(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(componentType),"conceptAlias"));
      }
      List<SNode> initValues=SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(newExpression,"creator",true),"jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer"),"initValue",true);
      TransformationUtil.replaceArrayWithInitializerConstructor(newExpression,fqNameNode,initValues);
    }
  }
  for (  SNode newExpression : ListSequence.fromList(SNodeOperations.getDescendants(myWhatToEvaluate,"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression",false,new String[]{})).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return TransformationUtil.isUnprocessed(it);
    }
  }
)) {
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(newExpression),"jetbrains.mps.baseLanguage.structure.ThrowStatement"))) {
      TransformationUtil.replaceConstructor(newExpression,TransformationUtil.createStringLiteral(SPropertyOperations.getString(newExpression,"fqClassName")),TransformationUtil.createStringLiteral(TransformationUtil.getJniSignature(ListSequence.fromList(SLinkOperations.getTargets(newExpression,"actualArgument",true)).select(new ISelector<SNode,SNode>(){
        public SNode select(        SNode it){
          return SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(it),"jetbrains.mps.baseLanguage.structure.Type");
        }
      }
),_quotation_createNode_s72qk1_b0c0a0a0c0f())),SLinkOperations.getTargets(newExpression,"actualArgument",true));
    }
  }
}
