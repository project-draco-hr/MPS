{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept),SNodeOperations.asSConcept(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          SNode instance=ExtensionMethodDeclaration_Behavior.call_getThisType_8022092943109893938(SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(new UUID(6757083949642499970l,-9110065865172803712l),1550313277222152185l,"jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration"),false,false));
          SNode classifierType=TypeChecker.getInstance().getRuntimeSupport().coerce_(instance,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
          return Sequence.fromIterable(Members.visibleInstanceMethods(classifierType,_context.getCurrentTargetNode())).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode operationExpression=SNodeFactoryOperations.createNewNode(model,MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression"),null);
              SLinkOperations.setTarget(SNodeFactoryOperations.setNewChild(operationExpression,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027833540l,"operation"),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1202948039474l,"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")),MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l,"baseMethodDeclaration"),SNodeOperations.cast((item),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1068580123165l,"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")));
              SNode thisExpression=SNodeFactoryOperations.setNewChild(operationExpression,MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"),MetaAdapterFactory.getConcept(new UUID(6757083949642499970l,-9110065865172803712l),3316739663067157299l,"jetbrains.mps.baseLanguage.extensionMethods.structure.ThisExtensionExpression"));
              return operationExpression;
            }
          }
);
        }
      }
    }
  }
  return result;
}
