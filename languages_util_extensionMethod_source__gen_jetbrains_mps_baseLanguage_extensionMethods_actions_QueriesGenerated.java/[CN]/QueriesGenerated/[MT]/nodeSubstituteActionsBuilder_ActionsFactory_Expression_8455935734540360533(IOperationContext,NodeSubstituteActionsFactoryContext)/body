{
  List<SubstituteAction> result=ListSequence.fromList(new ArrayList<SubstituteAction>());
{
    SNode outputConcept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode childConcept=(SNode)_context.getChildConcept();
    if (SConceptOperations.isSuperConceptOf(childConcept,NameUtil.nodeFQName(outputConcept))) {
      Iterable<SNode> queryResult=new Computable<Iterable<SNode>>(){
        public Iterable<SNode> compute(){
          SNode instance=ExtensionMethodDeclaration_Behavior.call_getThisType_8022092943109893938(SNodeOperations.getAncestor(_context.getParentNode(),"jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration",false,false));
          SNode classifierType=TypeChecker.getInstance().getRuntimeSupport().coerce_(instance,HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"),false);
          return Sequence.fromIterable(Members.visibleInstanceMethods(classifierType,_context.getCurrentTargetNode())).toListSequence();
        }
      }
.compute();
      if (queryResult != null) {
        for (        final SNode item : queryResult) {
          ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept,item,_context.getParentNode(),_context.getCurrentTargetNode(),_context.getChildSetter()){
            public SNode createChildNode(            Object parameterObject,            SModel model,            String pattern){
              SNode operationExpression=SNodeFactoryOperations.createNewNode(model,"jetbrains.mps.baseLanguage.structure.DotExpression",null);
              SLinkOperations.setTarget(SNodeFactoryOperations.setNewChild(operationExpression,"operation","jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"),"baseMethodDeclaration",SNodeOperations.cast((item),"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"),false);
              SNode thisExpression=SNodeFactoryOperations.setNewChild(operationExpression,"operand","jetbrains.mps.baseLanguage.extensionMethods.structure.ThisExtensionExpression");
              return operationExpression;
            }
          }
);
        }
      }
    }
  }
  return result;
}
