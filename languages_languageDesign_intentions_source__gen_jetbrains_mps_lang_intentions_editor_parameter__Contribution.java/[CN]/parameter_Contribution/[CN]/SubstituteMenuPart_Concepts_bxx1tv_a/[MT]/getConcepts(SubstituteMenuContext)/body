{
  List<SNode> parameters=ListSequence.fromList(new ArrayList<SNode>());
  boolean inParInt=SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L,0x8431763b0c3c9f20L,0x120cd519c2dL,"jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration"),false,false) != null;
  boolean notInApplicable=SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L,0x8431763b0c3c9f20L,0x115b82b10f5L,"jetbrains.mps.lang.intentions.structure.IsApplicableBlock"),false,false) == null;
  boolean notInChildFilterBlock=SNodeOperations.getNodeAncestor(_context.getParentNode(),MetaAdapterFactory.getInterfaceConcept(0xd7a92d38f7db40d0L,0x8431763b0c3c9f20L,0x323731f511d1c198L,"jetbrains.mps.lang.intentions.structure.ChildFilterBlock"),false,false) == null;
  if (inParInt && notInApplicable && notInChildFilterBlock) {
    ListSequence.fromList(parameters).addElement(MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L,0x8431763b0c3c9f20L,0x120c8fd57fbL,"jetbrains.mps.lang.intentions.structure.IntentionParameter").getDeclarationNode());
  }
  return ListSequence.fromList(parameters).select(new ISelector<SNode,SAbstractConcept>(){
    public SAbstractConcept select(    SNode it){
      return SNodeOperations.asSConcept(it);
    }
  }
).toListSequence();
}
