{
  if (getProject() == null || getProject().isDisposed()) {
    return new TextTreeNode("Empty");
  }
  ProjectTreeNode root=new ProjectTreeNode(getMPSProject());
  List<MPSTreeNode> moduleNodes=new ArrayList<MPSTreeNode>();
  List<Solution> solutions=getMPSProject().getProjectSolutions();
  for (  Solution solution : solutions) {
    ProjectSolutionTreeNode solutionTreeNode=new ProjectSolutionTreeNode(solution,getMPSProject());
    moduleNodes.add(solutionTreeNode);
  }
  List<Language> languages=getMPSProject().getProjectLanguages();
  for (  Language language : languages) {
    ProjectLanguageTreeNode node=new ProjectLanguageTreeNode(language,getMPSProject());
    moduleNodes.add(node);
  }
  List<DevKit> devkits=getMPSProject().getProjectDevKits();
  for (  DevKit devKit : devkits) {
    ProjectDevKitTreeNode node=new ProjectDevKitTreeNode(devKit,getMPSProject());
    moduleNodes.add(node);
  }
  ModulesNamespaceTreeBuilder builder=new ModulesNamespaceTreeBuilder(getMPSProject());
  for (  MPSTreeNode mtn : moduleNodes) {
    builder.addNode(mtn);
  }
  builder.fillNode(root);
  myModulesPool=new ProjectModulesPoolTreeNode(getMPSProject());
  root.add(myModulesPool);
  TransientModelsTreeNode transientModelsNode=new TransientModelsTreeNode(getMPSProject());
  root.add(transientModelsNode);
  return root;
}
