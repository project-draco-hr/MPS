{
  if (getProject() == null) {
    return new TextTreeNode("Empty");
  }
  ProjectTreeNode root=new ProjectTreeNode(getProject());
  List<MPSTreeNode> moduleNodes=new ArrayList<MPSTreeNode>();
  List<Solution> solutions=getProject().getProjectSolutions();
  for (  Solution solution : solutions) {
    ProjectSolutionTreeNode solutionTreeNode=new ProjectSolutionTreeNode(solution,getProject());
    moduleNodes.add(solutionTreeNode);
  }
  List<Language> languages=getProject().getProjectLanguages();
  for (  Language language : languages) {
    ProjectLanguageTreeNode node=new ProjectLanguageTreeNode(language,getProject());
    moduleNodes.add(node);
  }
  List<DevKit> devkits=getProject().getProjectDevKits();
  for (  DevKit devKit : devkits) {
    ProjectDevKitTreeNode node=new ProjectDevKitTreeNode(devKit,getProject());
    moduleNodes.add(node);
  }
  ModulesNamespaceTreeBuilder builder=new ModulesNamespaceTreeBuilder(getProject());
  for (  MPSTreeNode mtn : moduleNodes) {
    builder.addNode(mtn);
  }
  builder.fillNode(root);
  myModulesPool=new ProjectModulesPoolTreeNode(getProject());
  root.add(myModulesPool);
  if (ApplicationComponents.getInstance().getComponentSafe(GlobalIdeSettings.class).isLoadModelsOnProjectLoad()) {
    myModulesPool.init();
  }
  return root;
}
