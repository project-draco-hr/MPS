{
  if (getProject() == null || getProject().isDisposed()) {
    return new TextTreeNode("Empty");
  }
  MPSProject project=getProject().getComponent(MPSProject.class);
  ProjectTreeNode root=new ProjectTreeNode(project);
  List<MPSTreeNode> moduleNodes=new ArrayList<MPSTreeNode>();
  List<Solution> solutions=project.getProjectSolutions();
  for (  Solution solution : solutions) {
    ProjectSolutionTreeNode solutionTreeNode=new ProjectSolutionTreeNode(solution,project);
    moduleNodes.add(solutionTreeNode);
  }
  List<Language> languages=project.getProjectLanguages();
  for (  Language language : languages) {
    ProjectLanguageTreeNode node=new ProjectLanguageTreeNode(language,project);
    moduleNodes.add(node);
  }
  List<DevKit> devkits=project.getProjectDevKits();
  for (  DevKit devKit : devkits) {
    ProjectDevKitTreeNode node=new ProjectDevKitTreeNode(devKit,project);
    moduleNodes.add(node);
  }
  ModulesNamespaceTreeBuilder builder=new ModulesNamespaceTreeBuilder(project);
  for (  MPSTreeNode mtn : moduleNodes) {
    builder.addNode(mtn);
  }
  builder.fillNode(root);
  myModulesPool=new ProjectModulesPoolTreeNode(project);
  root.add(myModulesPool);
  if (getProject().getComponent(TransientModelsModule.class).getOwnModelDescriptors().size() != 0) {
    TransientModelsTreeNode transientModelsNode=new TransientModelsTreeNode(getProject());
    root.add(transientModelsNode);
  }
  return root;
}
