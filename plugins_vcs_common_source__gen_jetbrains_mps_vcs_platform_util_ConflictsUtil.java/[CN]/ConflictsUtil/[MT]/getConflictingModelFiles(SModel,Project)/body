{
  if (!(model instanceof EditableSModel)) {
    return ListSequence.fromList(new ArrayList<VirtualFile>());
  }
  DataSource ds=model.getSource();
  Iterable<IFile> filesToCheck=Sequence.fromIterable(Collections.<IFile>emptyList());
  if (ds instanceof FileDataSource) {
    filesToCheck=Sequence.<IFile>singleton(((FileDataSource)ds).getFile());
  }
 else   if (ds instanceof FilePerRootDataSource) {
    final FilePerRootDataSource ds1=(FilePerRootDataSource)ds;
    filesToCheck=Sequence.fromIterable(((Iterable<String>)ds1.getAvailableStreams())).select(new ISelector<String,IFile>(){
      public IFile select(      String it){
        return ds1.getFile(it);
      }
    }
);
  }
  return getConflictingFiles(filesToCheck,project);
}
