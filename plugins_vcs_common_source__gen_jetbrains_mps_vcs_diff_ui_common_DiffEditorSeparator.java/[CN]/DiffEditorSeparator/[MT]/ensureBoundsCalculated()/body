{
  if (myGroupsWithBounds != null) {
    return;
  }
  myGroupsWithBounds=MapSequence.fromMap(new LinkedHashMap<ChangeGroup,Tuples._2<Bounds,Bounds>>(16,(float)0.75,false));
  int leftOffset=getOffset(getLeftViewport());
  int rightOffset=getOffset(getRightViewport());
  for (  ChangeGroup group : ListSequence.fromList(myChangeGroupLayout.getChangeGroups())) {
    int leftStart=(int)(group.getLeftBounds().start()) + leftOffset;
    int leftEnd=(int)(group.getLeftBounds().end()) + leftOffset;
    int rightStart=(int)(group.getRightBounds().start()) + rightOffset;
    int rightEnd=(int)(group.getRightBounds().end()) + rightOffset;
    MapSequence.fromMap(myGroupsWithBounds).put(group,MultiTuple.<Bounds,Bounds>from(new Bounds(leftStart,leftEnd),new Bounds(rightStart,rightEnd)));
  }
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      myChangeGroupDescriptions=MapSequence.fromMap(new HashMap<ChangeGroup,String>());
      for (      ChangeGroup group : ListSequence.fromList(myChangeGroupLayout.getChangeGroups())) {
        MapSequence.fromMap(myChangeGroupDescriptions).put(group,IterableUtils.join(ListSequence.fromList(group.getChanges()).select(new ISelector<ModelChange,String>(){
          public String select(          ModelChange ch){
            return ch.getDescription();
          }
        }
),"\n\n"));
      }
    }
  }
);
}
