{
  List<INodeSubstituteAction> result=ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode replace=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),replace);
        SLinkOperations.setTarget(replace,"expr",_context.getSourceNode(),true);
        return replace;
      }
      public String getMatchingText(      String pattern){
        return ".replace with";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode split=SModelOperations.createNewNode(_context.getModel(),"jetbrains.mps.baseLanguage.regexp.structure.SplitExpression",null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(),split);
        SLinkOperations.setTarget(split,"expr",_context.getSourceNode(),true);
        return split;
      }
      public String getMatchingText(      String pattern){
        return ".split";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
{
    SNode concept=SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression");
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept,_context.getSourceNode()){
      public SNode doSubstitute(      String pattern){
        SNode matchRegexpExpression=SNodeOperations.replaceWithNewChild(_context.getSourceNode(),"jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression");
        SLinkOperations.setTarget(matchRegexpExpression,"inputExpression",_context.getSourceNode(),true);
        return matchRegexpExpression;
      }
      public String getMatchingText(      String pattern){
        return "matches";
      }
      public String getVisibleMatchingText(      String pattern){
        return this.getMatchingText(pattern);
      }
    }
);
  }
  return result;
}
