{
  super(project);
  myProject=project;
  myProjectView=projectView;
  myTree=new MPSTree(){
    protected MPSTreeNode rebuild(){
      long startTime=System.currentTimeMillis();
      MPSTreeNode node;
      if (myProject != null && !myProject.isDisposed()) {
        node=new CompositeTreeNode(project,true);
      }
 else {
        node=new TextTreeNode("No Project");
      }
      long stopTime=System.currentTimeMillis();
      System.out.println("tree rebuild took " + (stopTime - startTime) / 1000 + " sec.");
      return node;
    }
  }
;
  myTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiers() == 0) {
        openEditor();
        e.consume();
      }
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        openEditor();
        e.consume();
      }
    }
  }
);
  myTimer=new Timer(SECOND,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ModelAccess.instance().runReadInEDT(new Runnable(){
        public void run(){
          getTree().rebuildNow();
        }
      }
);
    }
  }
);
  myTimer.setRepeats(false);
  myTimer.setInitialDelay(2 * SECOND);
  myFileStatusListener=new FileStatusListener(){
    public void fileStatusesChanged(){
      rebuildTreeLater();
    }
    public void fileStatusChanged(    @NotNull VirtualFile virtualFile){
      rebuildTreeLater();
    }
  }
;
  myFileListener=new VirtualFileAdapter(){
    @Override public void fileCreated(    VirtualFileEvent event){
      rebuildTreeLater();
    }
    @Override public void fileDeleted(    VirtualFileEvent event){
      rebuildTreeLater();
    }
    @Override public void fileMoved(    VirtualFileMoveEvent event){
      rebuildTreeLater();
    }
    @Override public void fileCopied(    VirtualFileCopyEvent event){
      rebuildTreeLater();
    }
  }
;
  myVirtualFileManagerListener=new VirtualFileManagerListener(){
    public void beforeRefreshStart(    boolean asynchonous){
    }
    public void afterRefreshFinish(    boolean asynchonous){
      rebuildTreeLater();
    }
  }
;
}
