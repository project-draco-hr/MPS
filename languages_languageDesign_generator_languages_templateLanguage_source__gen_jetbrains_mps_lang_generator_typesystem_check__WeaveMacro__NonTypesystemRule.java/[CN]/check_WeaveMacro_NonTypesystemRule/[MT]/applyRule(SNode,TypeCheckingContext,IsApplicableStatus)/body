{
  SNode template=TemplateDeclarationReference_BehaviorDescriptor.getTemplate_idQzR6ThtRo7.invoke(SLinkOperations.getTarget(macro,MetaAdapterFactory.getContainmentLink(0xb401a68083254110L,0x8fd384331ff25befL,0x300c02df884235d3L,0x300c02df884261edL,"ruleConsequence")));
  if ((template == null)) {
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(macro,"No template","r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)","3850501259760058788",null,errorTarget);
    }
  }
 else {
    SNode inputNodeConcept=NodeMacro_BehaviorDescriptor.getInputNodeTypeInsideOfMacro_idhEwIosJ.invoke(macro);
    if ((SLinkOperations.getTarget(template,MetaAdapterFactory.getReferenceLink(0xb401a68083254110L,0x8fd384331ff25befL,0xfe43cb41d0L,0x1100343ad9eL,"applicableConcept")) != null) && (inputNodeConcept != null)) {
      if (!(MetaAdapterByDeclaration.getConcept(inputNodeConcept).isSubConceptOf(MetaAdapterByDeclaration.getConcept(SLinkOperations.getTarget(template,MetaAdapterFactory.getReferenceLink(0xb401a68083254110L,0x8fd384331ff25befL,0xfe43cb41d0L,0x1100343ad9eL,"applicableConcept")))))) {
        String msg=String.format("Input node (%s) is not an instance of template's expected concept (%s)",SPropertyOperations.getString(inputNodeConcept,MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")),SPropertyOperations.getString(SLinkOperations.getTarget(template,MetaAdapterFactory.getReferenceLink(0xb401a68083254110L,0x8fd384331ff25befL,0xfe43cb41d0L,0x1100343ad9eL,"applicableConcept")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name")));
{
          MessageTarget errorTarget=new NodeMessageTarget();
          IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(macro,msg,"r:00000000-0000-4000-0000-011c895902e4(jetbrains.mps.lang.generator.typesystem)","3850501259760058987",null,errorTarget);
        }
      }
    }
  }
}
