{
  Iterable<SNode> fwdRefs=ListSequence.fromList(SNodeOperations.getDescendants(typeVariableDeclaration,"jetbrains.mps.baseLanguage.structure.TypeVariableReference",false,new String[]{})).select(new ISelector<SNode,SNode>(){
    public SNode select(    SNode it){
      return SLinkOperations.getTarget(SNodeOperations.cast(it,"jetbrains.mps.baseLanguage.structure.TypeVariableReference"),"typeVariableDeclaration",false);
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return eq_pivjqh_a0a0a0a0a0a0a0b(SNodeOperations.getParent(it),SNodeOperations.getParent(typeVariableDeclaration));
    }
  }
).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.getIndexInParent(it) >= SNodeOperations.getIndexInParent(typeVariableDeclaration);
    }
  }
);
  if (Sequence.fromIterable(fwdRefs).isNotEmpty()) {
    String msg="Illegal forward reference to type parameter " + SPropertyOperations.getString(Sequence.fromIterable(fwdRefs).first(),"name");
{
      MessageTarget errorTarget=new NodeMessageTarget();
      IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(typeVariableDeclaration,msg,"r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)","8302934035192815238",null,errorTarget);
    }
  }
}
