{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("inequation",new BaseReferenceConstraintsDescriptor("inequation",this){
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseScopeProvider(){
        @Override public boolean hasPresentation(){
          return true;
        }
        @Override public String getPresentation(        final IOperationContext operationContext,        final ReferencePresentationContext _context){
          if (isNotEmpty_q84ruw_a0a0b0a0a0a0a1a0b0a(SPropertyOperations.getString(_context.getParameterNode(),"label"))) {
            return SPropertyOperations.getString(_context.getParameterNode(),"label") + " " + SConceptPropertyOperations.getString(_context.getParameterNode(),"alias");
          }
 else {
            return SConceptPropertyOperations.getString(_context.getParameterNode(),"alias");
          }
        }
      }
;
    }
  }
);
  return references;
}
