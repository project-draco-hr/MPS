{
  Map<String,PropertyConstraintsDescriptor> properties=new HashMap();
  properties.put("propertyName",new BasePropertyConstraintsDescriptor("propertyName",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="propertyName";
{
        String gn=BeanPropertyView_Behavior.call_getterName_8381258131358759705(node);
        if (gn == null) {
          return null;
        }
        if (gn.startsWith("is")) {
          return Introspector.decapitalize(gn.substring(2));
        }
        if (gn.startsWith("get")) {
          return Introspector.decapitalize(gn.substring(3));
        }
        return null;
      }
    }
  }
);
  properties.put("canRead",new BasePropertyConstraintsDescriptor("canRead",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="canRead";
      return (SLinkOperations.getTarget(node,"getter",false) != null);
    }
  }
);
  properties.put("canWrite",new BasePropertyConstraintsDescriptor("canWrite",this){
    @Override public boolean hasOwnGetter(){
      return true;
    }
    @Override public Object getValue(    SNode node,    IScope scope){
      String propertyName="canWrite";
{
        String gn=BeanPropertyView_Behavior.call_setterName_8381258131358762400(node);
        for (        SNode imd : SLinkOperations.getTargets(SNodeOperations.as(SNodeOperations.getParent(SLinkOperations.getTarget(node,"getter",false)),"jetbrains.mps.baseLanguage.structure.Classifier"),"method",true)) {
          if (SPropertyOperations.getString(imd,"name").equals(gn) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(imd,"visibility",true),"jetbrains.mps.baseLanguage.structure.PublicVisibility") && ListSequence.<SNode>fromList(SLinkOperations.getTargets(imd,"parameter",true)).count() == 1) {
            return MatchingUtil.matchNodes(SLinkOperations.getTarget(ListSequence.<SNode>fromList(SLinkOperations.getTargets(imd,"parameter",true)).first(),"type",true),SLinkOperations.getTarget(SLinkOperations.getTarget(node,"getter",false),"returnType",true));
          }
        }
        return false;
      }
    }
  }
);
  return properties;
}
