{
  HashMap<String,INodePropertyGetter> result=new HashMap<String,INodePropertyGetter>();
  result.put("propertyName",new BaseNodePropertyGetter(){
    public Object execPropertyGet(    SNode node,    String propertyName,    IScope scope){
      String gn=BeanPropertyView_Behavior.call_getterName_8381258131358759705(node);
      if (gn == null) {
        return null;
      }
      if (gn.startsWith("is")) {
        return Introspector.decapitalize(gn.substring(2));
      }
      if (gn.startsWith("get")) {
        return Introspector.decapitalize(gn.substring(3));
      }
      return null;
    }
  }
);
  result.put("canRead",new BaseNodePropertyGetter(){
    public Object execPropertyGet(    SNode node,    String propertyName,    IScope scope){
      return (SLinkOperations.getTarget(node,"getter",false) != null);
    }
  }
);
  result.put("canWrite",new BaseNodePropertyGetter(){
    public Object execPropertyGet(    SNode node,    String propertyName,    IScope scope){
      String gn=BeanPropertyView_Behavior.call_setterName_8381258131358762400(node);
      for (      SNode imd : SLinkOperations.getTargets(SNodeOperations.as(SNodeOperations.getParent(SLinkOperations.getTarget(node,"getter",false)),"jetbrains.mps.baseLanguage.structure.Classifier"),"method",true)) {
        if (SPropertyOperations.getString(imd,"name").equals(gn) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(imd,"visibility",true),"jetbrains.mps.baseLanguage.structure.PublicVisibility") && ListSequence.fromList(SLinkOperations.getTargets(imd,"parameter",true)).count() == 1) {
          return MatchingUtil.matchNodes(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(imd,"parameter",true)).first(),"type",true),SLinkOperations.getTarget(SLinkOperations.getTarget(node,"getter",false),"returnType",true));
        }
      }
      return false;
    }
  }
);
  return result;
}
