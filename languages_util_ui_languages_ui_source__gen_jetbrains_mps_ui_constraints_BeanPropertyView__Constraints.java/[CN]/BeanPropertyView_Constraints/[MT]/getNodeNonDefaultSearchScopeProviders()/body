{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("getter",new BaseNodeReferenceSearchScopeProvider(){
    public boolean hasPresentation(){
      return true;
    }
    public String getPresentation(    final IOperationContext operationContext,    final PresentationReferentConstraintContext _context){
      String gn=SPropertyOperations.getString(_context.getParameterNode(),"name");
      if (gn == null) {
        return null;
      }
      if (gn.startsWith("is")) {
        return Introspector.decapitalize(gn.substring(2));
      }
      if (gn.startsWith("get")) {
        return Introspector.decapitalize(gn.substring(3));
      }
      return null;
    }
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode bt=TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getReferenceNode(),"jetbrains.mps.ui.structure.BeanPropertyView"),"bean",true));
      try {
        throw new NullPointerException();
      }
 catch (      NullPointerException e) {
      }
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(bt,"jetbrains.mps.baseLanguage.structure.ClassifierType"),"classifier",false),"method",true)).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode m){
          if (ListSequence.fromList(SLinkOperations.getTargets(m,"parameter",true)).isNotEmpty()) {
            return false;
          }
          if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m,"visibility",true),"jetbrains.mps.baseLanguage.structure.PublicVisibility"))) {
            return false;
          }
          String gn=SPropertyOperations.getString(m,"name");
          if (gn != null) {
            if (gn.startsWith("is")) {
              return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m,"returnType",true),"jetbrains.mps.baseLanguage.structure.BooleanType");
            }
 else             if (gn.startsWith("get")) {
              return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m,"returnType",true),"jetbrains.mps.baseLanguage.structure.VoidType"));
            }
          }
          return false;
        }
      }
);
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:383ba4d2-f4ec-41a6-8e7f-108e84a7c9f9(jetbrains.mps.ui.constraints)","8381258131358762999");
    }
  }
);
  return result;
}
