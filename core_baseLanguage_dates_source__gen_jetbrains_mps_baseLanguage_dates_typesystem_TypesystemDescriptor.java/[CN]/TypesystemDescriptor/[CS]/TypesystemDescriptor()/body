{
{
    InferenceRule_Runtime inferenceRule=new typeof_NowExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_UnaryDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FormatExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeCompareOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeWithPropertyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PeriodConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConvertToDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeMinusPeriodOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimePlusPeriodOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeMinusOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_NeverExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MathDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeZoneConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeZoneCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConstantTimeZone_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InlineFormatExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeZoneFromString_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PeriodInPropertyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_WithPropertyCompareExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ParseExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RoundDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InTimezone_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DateTimeType_unboxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DateTimeType_boxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DateTimeWithTZType_unboxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_21().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_22().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_23().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_25().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_26().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_24().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_27().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_28().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_29().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_31().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_30().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_32().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_33().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_34().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_35().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_49().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_50().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_51().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_52().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_53().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_54().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_58().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_59().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=false;
        this.myRightTypeIsExact=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_60().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_61().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_62().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=false;
        this.myRightTypeIsExact=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_63().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_64().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_65().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=false;
        this.myRightTypeIsExact=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_66().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_67().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_68().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=false;
        this.myRightTypeIsExact=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_69().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_71().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_72().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_70().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new _Quotations.QuotationClass_80().createNode();
        this.myRightOperandType=new _Quotations.QuotationClass_81().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=false;
        this.myRightTypeIsExact=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new _Quotations.QuotationClass_82().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
}
