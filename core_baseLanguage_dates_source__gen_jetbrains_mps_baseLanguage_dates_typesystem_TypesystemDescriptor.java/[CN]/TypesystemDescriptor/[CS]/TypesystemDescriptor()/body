{
{
    InferenceRule_Runtime inferenceRule=new typeof_NowExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_UnaryDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FormatExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeCompareOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeWithPropertyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PeriodConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConvertToDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeMinusPeriodOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimePlusPeriodOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeMinusOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_NeverExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_MathDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeZoneConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimeZoneCreator_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConstantTimeZone_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InlineFormatExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeZoneFromString_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PeriodInPropertyOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_WithPropertyCompareExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ParseExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_RoundDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InTimezone_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ParseDateTimeExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FormatDateTimeExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_InlineFormatDateTimeExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConvertToJavaCalendarOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConvertToJavaDateOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConvertToJodaDateTimeOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_DateTimePropetyReferenceOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_NotNullOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_NullOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ConvertToDurationOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_PeriodInPropertyExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_ScheduleLiteral_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_FormatPeriodExpression_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeZoneIdOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_TimeZoneNameOperation_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    InferenceRule_Runtime inferenceRule=new typeof_AllTimeZonesConstant_InferenceRule();
    this.myInferenceRules.add(inferenceRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DateTimeType_unboxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DateTimeType_boxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DurationType_boxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    SubtypingRule_Runtime subtypingRule=new DurationType_unboxing_SubtypingRule();
    this.mySubtypingRules.add(subtypingRule);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_1().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_2().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_0().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_4().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_5().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_3().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_7().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_8().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_6().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_10().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_11().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_9().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_13().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_14().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_12().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_16().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_17().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_15().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_19().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_20().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_18().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_22().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_23().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_21().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_25().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_26().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_24().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_28().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_29().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_27().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_31().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_32().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_30().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_34().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_35().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_33().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_37().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_38().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_36().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_40().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_41().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.MinusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_39().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_43().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_44().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.BinaryCompareOperation";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_42().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_46().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_47().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_45().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_49().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_50().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_48().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_52().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_53().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_51().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
{
    OverloadedOperationsTypesProvider provider=new OverloadedOperationsTypesProvider(){
{
        this.myLeftOperandType=new TypesystemDescriptor.QuotationClass_1832_55().createNode();
        this.myRightOperandType=new TypesystemDescriptor.QuotationClass_1832_56().createNode();
        this.myOperationConceptFQName="jetbrains.mps.baseLanguage.structure.PlusExpression";
        this.myLeftTypeIsExact=true;
        this.myRightTypeIsExact=true;
        this.myRightIsStrong=false;
        this.myLeftIsStrong=false;
      }
      public SNode getOperationType(      SNode operation,      SNode leftOperandType,      SNode rightOperandType){
        return new TypesystemDescriptor.QuotationClass_1832_54().createNode();
      }
    }
;
    this.myOverloadedOperationsTypesProviders.add(provider);
  }
}
