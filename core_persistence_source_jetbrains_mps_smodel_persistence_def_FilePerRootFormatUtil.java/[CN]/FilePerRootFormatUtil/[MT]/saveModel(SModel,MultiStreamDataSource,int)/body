{
  persistenceVersion=actualPersistenceVersion(persistenceVersion);
  SModelHeader modelHeader=null;
  int oldVersion=persistenceVersion;
  if (modelData instanceof DefaultSModel) {
    DefaultSModel dsm=(DefaultSModel)modelData;
    modelHeader=dsm.getSModelHeader();
    oldVersion=modelHeader.getPersistenceVersion();
    if (oldVersion != persistenceVersion) {
      modelHeader.setPersistenceVersion(persistenceVersion);
    }
  }
  if (persistenceVersion < 9) {
    modelData.getImplicitImportsSupport().calculateImplicitImports();
  }
  ModelPersistence.checkV8(persistenceVersion,modelHeader == null ? null : modelHeader.getModelReference(),source.getLocation());
  IModelPersistence persistence=ModelPersistence.getPersistence(persistenceVersion);
  if (persistence == null) {
    return false;
  }
  IModelWriter writer=persistence.getModelWriter(modelHeader);
  if (writer == null) {
    return false;
  }
  Map<String,Document> result=writer.saveModelAsMultiStream(modelData);
  Set<String> toRemove=new HashSet<String>();
  for (  String s : source.getAvailableStreams()) {
    if (!result.containsKey(s)) {
      toRemove.add(s);
    }
  }
  for (  Entry<String,Document> entry : result.entrySet()) {
    String fnameLower=entry.getKey().toLowerCase();
    Set<String> removed=new HashSet<String>();
    for (    String s : toRemove) {
      if (s.toLowerCase().equals(fnameLower)) {
        source.delete(s);
        removed.add(s);
      }
    }
    toRemove.removeAll(removed);
    JDOMUtil.writeDocument(entry.getValue(),source,entry.getKey());
  }
  for (  String r : toRemove) {
    source.delete(r);
  }
  if (oldVersion != persistenceVersion) {
    LOG.info("persistence upgraded: " + oldVersion + "->"+ persistenceVersion+ " "+ modelData.getReference());
    return true;
  }
  return false;
}
