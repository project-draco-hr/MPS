{
  boolean reverse=var.getDegree() > type.getDegree();
  if (reverse) {
    setParent(type,var);
    keepInequationsAndEffects(type,var,false);
  }
 else {
    setParent(var,type);
    keepInequationsAndEffects(var,type,false);
  }
  RuntimeTypeVariable typeVar=var.getVariable();
  if (typeVar instanceof RuntimeErrorType) {
    SNode nodeWithError=errorInfo.getNodeWithError();
    SimpleErrorReporter reporter=new SimpleErrorReporter(nodeWithError,((RuntimeErrorType)typeVar).getErrorText(),errorInfo.getRuleModel(),errorInfo.getRuleId());
    reporter.setIntentionProvider(errorInfo.getIntentionProvider());
    reporter.setAdditionalRulesIds(errorInfo.getAdditionalRulesIds());
    myTypeCheckingContext.reportMessage(nodeWithError,reporter);
  }
  if (reverse) {
    type.fireRepresentatorSet(var,this);
  }
 else {
    var.fireRepresentatorSet(type,this);
  }
}
