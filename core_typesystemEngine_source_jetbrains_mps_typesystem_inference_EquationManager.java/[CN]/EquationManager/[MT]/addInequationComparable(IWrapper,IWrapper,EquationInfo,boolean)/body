{
  IWrapper representator1=getRepresentatorWrapper(type1);
  IWrapper representator2=getRepresentatorWrapper(type2);
  if (NodeWrapper.fromWrapper(representator1) == NodeWrapper.fromWrapper(representator2))   return;
  boolean hasNonConcreteVars1=!isConcrete(representator1);
  boolean hasNonConcreteVars2=!isConcrete(representator2);
  if (hasNonConcreteVars1 || hasNonConcreteVars2) {
    if (isWeak) {
      addComparable(representator1,representator2,errorInfo);
    }
 else {
      addStrongComparable(representator1,representator2,errorInfo);
    }
    return;
  }
  if (representator1 instanceof NodeWrapper) {
    NodeWrapper subtypeNodeWrapper=(NodeWrapper)representator1;
    SModel typesModel=myTypeChecker.getRuntimeTypesModel();
    NodeWrapper representatorCopy=NodeWrapper.fromNode(CopyUtil.copy(subtypeNodeWrapper.getNode()),this);
    representator1=expandWrapper(null,representatorCopy,typesModel);
  }
  if (representator2 instanceof NodeWrapper) {
    NodeWrapper supertypeNodeWrapper=(NodeWrapper)representator2;
    SModel typesModel=myTypeChecker.getRuntimeTypesModel();
    NodeWrapper representatorCopy=NodeWrapper.fromNode(CopyUtil.copy(supertypeNodeWrapper.getNode()),this);
    representator2=expandWrapper(null,representatorCopy,typesModel);
  }
  if (myTypeChecker.getSubtypingManager().isComparableWRTRules(representator1,representator2,this,errorInfo,isWeak)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtypeByReplacementRules(representator1.getNode(),representator2.getNode())) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(representator1,representator2,this,errorInfo,isWeak)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtypeByReplacementRules(representator2.getNode(),representator1.getNode())) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(representator2,representator1,this,errorInfo,isWeak)) {
    return;
  }
  String ruleModel=errorInfo.getRuleModel();
  String ruleId=errorInfo.getRuleId();
  String errorString=errorInfo.getErrorString();
  IErrorReporter errorReporter;
  SNode nodeWithError=errorInfo.getNodeWithError();
  if (errorString == null) {
    String strongString=isWeak ? "" : " strongly";
    errorReporter=new EquationErrorReporter(nodeWithError,this,"type ",representator1," is not" + strongString + " comparable with ",representator2,"",ruleModel,ruleId);
  }
 else {
    errorReporter=new SimpleErrorReporter(nodeWithError,errorString,ruleModel,ruleId);
  }
  errorReporter.setIntentionProvider(errorInfo.getIntentionProvider());
  errorReporter.setAdditionalRulesIds(errorInfo.getAdditionalRulesIds());
  myTypeCheckingContext.reportMessage(nodeWithError,errorReporter);
}
