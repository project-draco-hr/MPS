{
  Set<IWrapper> nodes=new THashSet<IWrapper>(mySubtypesToSupertypesMap.keySet());
  Set<IWrapper> result=new THashSet<IWrapper>(1);
  for (  IWrapper node : nodes) {
    Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMap.get(node);
    if (map == null || map.isEmpty()) {
      mySubtypesToSupertypesMap.remove(node);
    }
 else {
      result.add(node);
    }
  }
  nodes=new THashSet<IWrapper>(mySupertypesToSubtypesMap.keySet());
  for (  IWrapper node : nodes) {
    Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMap.get(node);
    if (map == null || map.isEmpty()) {
      mySupertypesToSubtypesMap.remove(node);
    }
 else {
      result.add(node);
    }
  }
  nodes=new THashSet<IWrapper>(mySubtypesToSupertypesMapStrong.keySet());
  for (  IWrapper node : nodes) {
    Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMapStrong.get(node);
    if (map == null || map.isEmpty()) {
      mySubtypesToSupertypesMapStrong.remove(node);
    }
 else {
      result.add(node);
    }
  }
  nodes=new THashSet<IWrapper>(mySupertypesToSubtypesMapStrong.keySet());
  for (  IWrapper node : nodes) {
    Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMapStrong.get(node);
    if (map == null || map.isEmpty()) {
      mySupertypesToSubtypesMapStrong.remove(node);
    }
 else {
      result.add(node);
    }
  }
  return result;
}
