{
  Map<IWrapper,EquationInfo> supertypes=mySubtypesToSupertypesMap.remove(var);
  if (supertypes != null) {
    for (    final IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMap.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype));
    }
  }
  Map<IWrapper,EquationInfo> subtypes=mySupertypesToSubtypesMap.remove(var);
  if (subtypes != null) {
    for (    final IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMap.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype));
    }
  }
  supertypes=mySubtypesToSupertypesMapStrong.remove(var);
  if (supertypes != null) {
    for (    final IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMapStrong.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype),false);
    }
  }
  subtypes=mySupertypesToSubtypesMapStrong.remove(var);
  if (subtypes != null) {
    for (    final IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMapStrong.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype),false);
    }
  }
  supertypes=mySubtypesToSupertypesMap_check.remove(var);
  if (supertypes != null) {
    for (    final IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMap_check.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype),true,true,!avoidCheckonlyMaps);
    }
  }
  subtypes=mySupertypesToSubtypesMap_check.remove(var);
  if (subtypes != null) {
    for (    final IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMap_check.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype),true,true,!avoidCheckonlyMaps);
    }
  }
  supertypes=mySubtypesToSupertypesMapStrong_check.remove(var);
  if (supertypes != null) {
    for (    final IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySupertypesToSubtypesMapStrong_check.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype),false,true,!avoidCheckonlyMaps);
    }
  }
  subtypes=mySupertypesToSubtypesMapStrong_check.remove(var);
  if (subtypes != null) {
    for (    final IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,EquationInfo> map=mySubtypesToSupertypesMapStrong_check.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype),false,true,!avoidCheckonlyMaps);
    }
  }
  Map<IWrapper,EquationInfo> comparables=myComparableTypesMap.remove(var);
  if (comparables != null) {
    for (    final IWrapper comparable : comparables.keySet()) {
      Map<IWrapper,EquationInfo> map=myComparableTypesMap.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype));
    }
  }
  comparables=myComparableTypesMapStrong.remove(var);
  if (comparables != null) {
    for (    final IWrapper comparable : comparables.keySet()) {
      Map<IWrapper,EquationInfo> map=myComparableTypesMapStrong.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    final IWrapper subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype),false);
    }
  }
}
