{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("annotationLink",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      SNode ald=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AnnotationLinkDeclaration");
      List<SNode> annotationLinks=SConceptOperations.findConceptInstances(ald,operationContext.getScope());
      SNode operation=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.lang.smodel.structure.AttributeAccessOperation");
      final Wrappers._T<SNode> leftConcept=new Wrappers._T<SNode>(SNodeOperation_Behavior.getLeftNodeConcept_1213877508847(SNodeOperations.cast(SNodeOperations.getParent(operation),"jetbrains.mps.baseLanguage.structure.DotExpression")));
      if (leftConcept.value == null) {
        leftConcept.value=SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
      }
      List<SNode> nodeAttrLinks=ListSequence.fromList(annotationLinks).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return SPropertyOperations.hasValue(it,"stereotype","node","node") && SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(it,"source",false),NameUtil.nodeFQName(leftConcept.value));
        }
      }
).toListSequence();
      return nodeAttrLinks;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902fb(jetbrains.mps.lang.smodel.constraints)","1213104846017");
    }
  }
);
  return result;
}
