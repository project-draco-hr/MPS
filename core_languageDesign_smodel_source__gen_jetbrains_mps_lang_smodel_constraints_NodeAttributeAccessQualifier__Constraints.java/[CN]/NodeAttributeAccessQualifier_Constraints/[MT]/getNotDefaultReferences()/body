{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("annotationLink",new BaseReferenceConstraintsDescriptor("annotationLink",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode ald=SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AnnotationLinkDeclaration");
          List<SNode> annotationLinks=SConceptOperations.findConceptInstances(ald,operationContext.getScope());
          SNode operation=SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.lang.smodel.structure.AttributeAccessOperation");
          final Wrappers._T<SNode> leftConcept=new Wrappers._T<SNode>(SNodeOperation_Behavior.getLeftNodeConcept_1213877508847(SNodeOperations.cast(SNodeOperations.getParent(operation),"jetbrains.mps.baseLanguage.structure.DotExpression")));
          if (leftConcept.value == null) {
            leftConcept.value=SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
          }
          List<SNode> nodeAttrLinks=ListSequence.<SNode>fromList(annotationLinks).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SPropertyOperations.hasValue(it,"stereotype","node","node") && SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(it,"source",false),NameUtil.nodeFQName(leftConcept.value));
            }
          }
).toListSequence();
          return nodeAttrLinks;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_i26rr5_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  return references;
}
