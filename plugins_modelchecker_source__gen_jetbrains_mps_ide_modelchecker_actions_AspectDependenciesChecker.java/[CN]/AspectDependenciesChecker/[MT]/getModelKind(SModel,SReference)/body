{
  DataSource source=(model != null ? model.getSource() : null);
  IFile modelFile=(source instanceof FileDataSource ? ((FileDataSource)source).getFile() : null);
  if (modelFile != null) {
    String filePath=modelFile.getAbsolutePath().replace('\\','/');
    if (filePath.startsWith(languagesUtilPath)) {
      return OTHER;
    }
  }
  SModule module=model.getModule();
  if (module instanceof Language) {
    if (LanguageAspect.ACTIONS.is(model)) {
      return EDITOR;
    }
 else     if (LanguageAspect.BEHAVIOR.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.CONSTRAINTS.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.DATA_FLOW.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.EDITOR.is(model)) {
      return EDITOR;
    }
 else     if (LanguageAspect.FIND_USAGES.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.INTENTIONS.is(model)) {
      return EDITOR;
    }
 else     if (LanguageAspect.PLUGIN.is(model)) {
      return WORKBENCH;
    }
 else     if (LanguageAspect.REFACTORINGS.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.SCRIPTS.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.STRUCTURE.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.MIGRATION.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.TEST.is(model)) {
      return EDITOR;
    }
 else     if (LanguageAspect.TEXT_GEN.is(model)) {
      return CORE;
    }
 else     if (LanguageAspect.TYPESYSTEM.is(model)) {
      return CORE;
    }
 else {
      return CORE;
    }
  }
 else   if (module instanceof Solution) {
    String moduleFqName=module.getModuleName();
    if (moduleFqName.equals("JDK")) {
      return CORE;
    }
    if (moduleFqName.equals("MPS.Core")) {
      return CORE;
    }
    if (moduleFqName.equals("MPS.Editor")) {
      return EDITOR;
    }
    if (moduleFqName.equals("MPS.Workbench")) {
      return WORKBENCH;
    }
    if (moduleFqName.equals("MPS.Classpath")) {
      SNode refTargetRoot=reference.getTargetNode().getContainingRoot();
      if (SNodeOperations.isInstanceOf(refTargetRoot,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier"))) {
        String cName=SPropertyOperations.getString(SNodeOperations.cast(refTargetRoot,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"));
        String modelName=model.getModelName();
        if (findInModule(coreModule,modelName,cName)) {
          return CORE;
        }
        if (findInModule(editorModule,modelName,cName)) {
          return EDITOR;
        }
        return WORKBENCH;
      }
      return OTHER;
    }
    Solution sol=(Solution)module;
switch (sol.getKind()) {
case NONE:
      return OTHER;
case PLUGIN_CORE:
    return CORE;
case PLUGIN_EDITOR:
  return EDITOR;
case PLUGIN_OTHER:
return WORKBENCH;
default :
}
}
return OTHER;
}
