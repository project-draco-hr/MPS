{
  DataSource source=(model.getModelDescriptor() != null ? model.getModelDescriptor().getSource() : null);
  IFile modelFile=(source instanceof FileDataSource ? ((FileDataSource)source).getFile() : null);
  if (modelFile != null) {
    String filePath=modelFile.getAbsolutePath().replace('\\','/');
    if (filePath.startsWith(languagesUtilPath)) {
      return OTHER;
    }
  }
  SModule module=model.getModelDescriptor().getModule();
  if (module instanceof Language) {
    LanguageAspect aspect=Language.getModelAspect(model.getModelDescriptor());
    if (aspect != null) {
switch (aspect) {
case ACTIONS:
        return EDITOR;
case BEHAVIOR:
      return CORE;
case CONSTRAINTS:
    return CORE;
case DATA_FLOW:
  return CORE;
case EDITOR:
return EDITOR;
case FIND_USAGES:
return CORE;
case INTENTIONS:
return EDITOR;
case PLUGIN:
return WORKBENCH;
case REFACTORINGS:
return CORE;
case SCRIPTS:
return CORE;
case STRUCTURE:
return CORE;
case STUBS:
return CORE;
case TEST:
return EDITOR;
case TEXT_GEN:
return CORE;
case TYPESYSTEM:
return CORE;
default :
}
}
return CORE;
}
 else if (module instanceof Solution) {
String moduleFqName=module.getModuleName();
if (moduleFqName.equals("JDK")) {
return CORE;
}
if (moduleFqName.equals("MPS.Core")) {
return CORE;
}
if (moduleFqName.equals("MPS.Editor")) {
return EDITOR;
}
if (moduleFqName.equals("MPS.Workbench")) {
return WORKBENCH;
}
if (moduleFqName.equals("MPS.Classpath")) {
SNode refTargetRoot=reference.getTargetNode().getContainingRoot();
if (SNodeOperations.isInstanceOf(refTargetRoot,"jetbrains.mps.baseLanguage.structure.Classifier")) {
String cName=SPropertyOperations.getString(SNodeOperations.cast(refTargetRoot,"jetbrains.mps.baseLanguage.structure.Classifier"),"name");
String modelName=model.getModelDescriptor().getModelName();
if (findInModule(coreModule,modelName,cName)) {
return CORE;
}
if (findInModule(editorModule,modelName,cName)) {
return EDITOR;
}
return WORKBENCH;
}
return OTHER;
}
Solution sol=((Solution)module);
switch (sol.getModuleDescriptor().getKind()) {
case NONE:
return OTHER;
case PLUGIN_CORE:
return CORE;
case PLUGIN_EDITOR:
return EDITOR;
case PLUGIN_OTHER:
return WORKBENCH;
default :
}
}
return OTHER;
}
