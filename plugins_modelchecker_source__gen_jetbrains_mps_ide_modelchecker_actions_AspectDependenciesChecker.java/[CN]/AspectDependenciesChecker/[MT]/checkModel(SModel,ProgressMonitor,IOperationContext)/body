{
  List<SearchResult<ModelCheckerIssue>> results=ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
  String title="Checking " + SModelOperations.getModelName(model) + " for wrong aspect dependencies...";
  monitor.start(title,1);
  int modelKind=getModelKind(model,null);
  if (modelKind == OTHER) {
    monitor.done();
    return results;
  }
  for (  SNode node : ListSequence.fromList(SModelOperations.getNodes(model,null))) {
    if (monitor.isCanceled()) {
      break;
    }
    for (    final SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      if ((AttributeOperations.getAttribute(node,new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.ReferenceMacro"),SLinkOperations.getRole(ref))) != null)) {
        continue;
      }
      SNode targetNode=ref.getTargetNodeSilently();
      if (targetNode == null) {
        addIssue(results,node,"Unresolved reference: " + SLinkOperations.getResolveInfo(ref),ModelChecker.SEVERITY_ERROR,"unresolved reference",new IModelCheckerFix(){
          public boolean doFix(){
            return Resolver.resolve1(ref,operationContext);
          }
        }
);
        continue;
      }
      SModel targetModel=SNodeOperations.getModel(targetNode);
      int targetKind=getModelKind(targetModel,ref);
      if (targetKind > modelKind) {
        addIssue(results,node,"Wrong reference: " + SLinkOperations.getResolveInfo(ref) + ", reference from "+ kindToString(modelKind)+ " to "+ kindToString(targetKind),ModelChecker.SEVERITY_ERROR,"wrong aspect dependency (" + kindToString(modelKind) + ")",null);
      }
    }
  }
  monitor.done();
  return results;
}
