{
  myProject=project;
  setLayout(new BorderLayout());
  myModelsList=new JList();
  myModelsList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final SModelReference model=(SModelReference)value;
      final DefaultListCellRenderer ren=this;
      String modelName=model.getLongName();
      if (modelName == null) {
        modelName="<no name>";
      }
      Component result=super.getListCellRendererComponent(list,modelName,index,isSelected,cellHasFocus);
      if (isSelected) {
        return result;
      }
      ModelAccess.instance().runReadAction(new Runnable(){
        public void run(){
          boolean inProject=false;
          for (          SModelDescriptor projectModel : myProject.getComponent(MPSProject.class).getProjectModels()) {
            if (model.equals(projectModel.getSModelReference())) {
              inProject=true;
              break;
            }
          }
          if (inProject) {
            ren.setForeground(Color.BLACK);
          }
 else           if (SModelRepository.getInstance().getModelDescriptor(model) != null) {
            ren.setForeground(new Color(128,0,128));
          }
 else {
            ren.setForeground(Color.RED);
          }
        }
      }
);
      return result;
    }
  }
);
  JScrollPane scroller=new JScrollPane(myModelsList);
  add(scroller,BorderLayout.CENTER);
  ListAddAction addAction=new ListAddAction(myModelsList){
    @Override protected int doAdd(    AnActionEvent e){
      List<SModelDescriptor> models=myProject.getComponent(MPSProject.class).getProjectModels();
      SModelDescriptor sModelDescriptor=CommonChoosers.showDialogModelChooser(ModelsPanel.this,models,SModelRepository.getInstance().getModelDescriptors());
      if (sModelDescriptor == null) {
        return -1;
      }
      SModelReference modelRef=sModelDescriptor.getSModelReference();
      myModels.add(modelRef);
      if (!(myNamePanel.isConfigNameSet())) {
        String name=NameUtil.shortNameFromLongName(sModelDescriptor.getLongName());
        myNamePanel.setConfigName(name);
      }
      return myModels.indexOf(modelRef);
    }
  }
;
  ListRemoveAction removeAction=new ListRemoveAction(myModelsList){
    @Override protected void doRemove(    AnActionEvent e){
      for (      Object o : myModelsList.getSelectedValues()) {
        SModelReference model=(SModelReference)o;
        myModels.remove(model);
      }
    }
  }
;
  add(createToolbar(new AnAction[]{addAction,removeAction}),BorderLayout.EAST);
  bind();
}
