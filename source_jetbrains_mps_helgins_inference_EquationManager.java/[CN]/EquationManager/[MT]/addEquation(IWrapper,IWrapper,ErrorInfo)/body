{
  IWrapper lhsRepresentator=getRepresentatorWrapper(lhs);
  IWrapper rhsRepresentator=getRepresentatorWrapper(rhs);
  if (rhsRepresentator == lhsRepresentator)   return;
  RuntimeTypeVariable varRhs=rhsRepresentator == null ? null : rhsRepresentator.getVariable();
  RuntimeTypeVariable varLhs=lhsRepresentator == null ? null : lhsRepresentator.getVariable();
  if (varRhs != null) {
    processEquation(rhsRepresentator,lhsRepresentator,errorInfo);
    return;
  }
 else {
    if (varLhs != null) {
      processEquation(lhsRepresentator,rhsRepresentator,errorInfo);
      return;
    }
  }
  if (rhsRepresentator != null && rhsRepresentator.isCondition()) {
    processEquation(rhsRepresentator,lhsRepresentator,errorInfo);
  }
 else   if (lhsRepresentator != null && lhsRepresentator.isCondition()) {
    processEquation(lhsRepresentator,rhsRepresentator,errorInfo);
  }
  if (!compareWrappers(rhsRepresentator,lhsRepresentator,errorInfo)) {
    IErrorReporter errorReporter;
    SNode nodeWithError=errorInfo == null ? null : errorInfo.getNodeWithError();
    if (errorInfo != null && errorInfo.myErrorString != null) {
      errorReporter=new SimpleErrorReporter(errorInfo.myErrorString,errorInfo.myRuleModel,errorInfo.myRuleId);
    }
 else {
      String ruleModel=errorInfo == null ? null : errorInfo.myRuleModel;
      String ruleId=errorInfo == null ? null : errorInfo.myRuleId;
      errorReporter=new EquationErrorReporter(this,"incompatible types: ",rhsRepresentator," and ",lhsRepresentator,"",ruleModel,ruleId);
    }
    processErrorEquation(lhsRepresentator,rhsRepresentator,errorReporter,nodeWithError);
    return;
  }
}
