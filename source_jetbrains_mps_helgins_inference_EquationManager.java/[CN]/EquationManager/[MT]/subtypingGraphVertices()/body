{
  Set<SNode> nodes=new HashSet<SNode>(mySubtypesToSupertypesMap.keySet());
  Set<SNode> result=new HashSet<SNode>();
  for (  SNode node : nodes) {
    Map<SNode,ErrorInfo> map=mySubtypesToSupertypesMap.get(node);
    if (map == null || map.isEmpty()) {
      mySubtypesToSupertypesMap.remove(node);
    }
 else {
      result.add(node);
    }
  }
  nodes=new HashSet<SNode>(mySupertypesToSubtypesMap.keySet());
  for (  SNode node : nodes) {
    Map<SNode,ErrorInfo> map=mySupertypesToSubtypesMap.get(node);
    if (map == null || map.isEmpty()) {
      mySupertypesToSubtypesMap.remove(node);
    }
 else {
      result.add(node);
    }
  }
  nodes=new HashSet<SNode>(mySubtypesToSupertypesMapStrong.keySet());
  for (  SNode node : nodes) {
    Map<SNode,ErrorInfo> map=mySubtypesToSupertypesMapStrong.get(node);
    if (map == null || map.isEmpty()) {
      mySubtypesToSupertypesMapStrong.remove(node);
    }
 else {
      result.add(node);
    }
  }
  nodes=new HashSet<SNode>(mySupertypesToSubtypesMapStrong.keySet());
  for (  SNode node : nodes) {
    Map<SNode,ErrorInfo> map=mySupertypesToSubtypesMapStrong.get(node);
    if (map == null || map.isEmpty()) {
      mySupertypesToSubtypesMapStrong.remove(node);
    }
 else {
      result.add(node);
    }
  }
  return result;
}
