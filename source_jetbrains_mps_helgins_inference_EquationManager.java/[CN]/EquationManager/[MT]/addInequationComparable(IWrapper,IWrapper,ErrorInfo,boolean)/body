{
  IWrapper representator1=getRepresentatorWrapper(type1);
  IWrapper representator2=getRepresentatorWrapper(type2);
  if (fromWrapper(representator1) == fromWrapper(representator2))   return;
  RuntimeTypeVariable varSubtype=representator1.getVariable();
  RuntimeTypeVariable varSupertype=representator2.getVariable();
  if (varSubtype != null || varSupertype != null) {
    if (isWeak) {
      addComparable(representator1,representator2,errorInfo);
    }
 else {
      addStrongComparable(representator1,representator2,errorInfo);
    }
    return;
  }
  if (myTypeChecker.getSubtypingManager().isComparableWRTRules(fromWrapper(representator1),fromWrapper(representator2))) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(fromWrapper(representator1),fromWrapper(representator2),isWeak)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(fromWrapper(representator2),fromWrapper(representator1),isWeak)) {
    return;
  }
  if (errorInfo.getErrorString() != null) {
    myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorInfo.getErrorString());
    return;
  }
  String strongString=isWeak ? "" : " strongly";
  IErrorReporter errorReporter=new EquationErrorReporter(this,"type ",representator1," is not" + strongString + " comparable with ",representator2,"",errorInfo.myRuleModel,errorInfo.myRuleId);
  myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorReporter);
}
