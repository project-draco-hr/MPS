{
  IWrapper rhsRepresentator=getRepresentatorWrapper(lhs);
  IWrapper lhsRepresentator=getRepresentatorWrapper(rhs);
  if (rhsRepresentator == lhsRepresentator)   return;
  RuntimeTypeVariable varRhs=rhsRepresentator == null ? null : rhsRepresentator.getVariable();
  RuntimeTypeVariable varLhs=lhsRepresentator == null ? null : lhsRepresentator.getVariable();
  if (varRhs != null) {
    processEquation(rhsRepresentator,lhsRepresentator,nodeToCheck);
    return;
  }
 else {
    if (varLhs != null) {
      processEquation(lhsRepresentator,rhsRepresentator,nodeToCheck);
      return;
    }
  }
  if (!compareWrappers(rhsRepresentator,lhsRepresentator)) {
    IErrorReporter errorReporter;
    if (errorInfo != null && errorInfo.myErrorString != null) {
      errorReporter=new SimpleErrorReporter(errorInfo.myErrorString,errorInfo.myRuleModel,errorInfo.myRuleId);
    }
 else {
      String ruleModel=errorInfo == null ? null : errorInfo.myRuleModel;
      String ruleId=errorInfo == null ? null : errorInfo.myRuleId;
      errorReporter=new EquationErrorReporter(this,"incompatible types: ",rhsRepresentator," and ",lhsRepresentator,"",ruleModel,ruleId);
    }
    processErrorEquation(lhsRepresentator,rhsRepresentator,errorReporter,nodeToCheck);
    return;
  }
  Set<Pair<SNode,SNode>> childEQs=createChildEquations(rhsRepresentator,lhsRepresentator);
  for (  Pair<SNode,SNode> eq : childEQs) {
    addEquation(NodeWrapper.fromNode(eq.o2),NodeWrapper.fromNode(eq.o1),nodeToCheck,errorInfo);
  }
}
