{
  SNode representator1=getRepresentator(type1);
  SNode representator2=getRepresentator(type2);
  if (representator1 == representator2)   return;
  RuntimeTypeVariable varSubtype=RuntimeSupport.getTypeVar(representator1);
  RuntimeTypeVariable varSupertype=RuntimeSupport.getTypeVar(representator2);
  if (varSubtype != null || varSupertype != null) {
    if (isWeak) {
      addComparable(representator1,representator2,nodeToCheck);
    }
 else {
      addStrongComparable(representator1,representator2,nodeToCheck);
    }
    return;
  }
  if (myTypeChecker.getSubtypingManager().isComparableWRTRules(representator1,representator2)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(representator1,representator2,isWeak)) {
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(representator2,representator1,isWeak)) {
    return;
  }
  String strongString=isWeak ? "" : " strong";
  IErrorReporter errorReporter=new EquationErrorReporter(this,"type ",representator1," should be" + strongString + " comparable with ",representator2,"");
  myTypeChecker.reportTypeError(nodeToCheck,errorReporter);
}
