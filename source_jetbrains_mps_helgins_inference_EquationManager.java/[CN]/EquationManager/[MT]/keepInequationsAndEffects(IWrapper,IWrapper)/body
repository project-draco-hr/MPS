{
  if (myTypesWithEffects.get(var) != null) {
    Set effects=myTypesWithEffects.get(var);
    myTypesWithEffects.remove(var);
    for (    Object effect : effects) {
      addEffect(type,effect);
    }
  }
  if (mySubtypesToSupertypesMap.get(var) != null) {
    Map<IWrapper,ErrorInfo> supertypes=mySubtypesToSupertypesMap.get(var);
    mySubtypesToSupertypesMap.remove(var);
    for (    IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,ErrorInfo> map=mySupertypesToSubtypesMap.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype));
    }
  }
  if (mySupertypesToSubtypesMap.get(var) != null) {
    Map<IWrapper,ErrorInfo> subtypes=mySupertypesToSubtypesMap.get(var);
    mySupertypesToSubtypesMap.remove(var);
    for (    IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,ErrorInfo> map=mySubtypesToSupertypesMap.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype));
    }
  }
  if (mySubtypesToSupertypesMapStrong.get(var) != null) {
    Map<IWrapper,ErrorInfo> supertypes=mySubtypesToSupertypesMapStrong.get(var);
    mySubtypesToSupertypesMapStrong.remove(var);
    for (    IWrapper supertype : supertypes.keySet()) {
      Map<IWrapper,ErrorInfo> map=mySupertypesToSubtypesMapStrong.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype),false);
    }
  }
  if (mySupertypesToSubtypesMapStrong.get(var) != null) {
    Map<IWrapper,ErrorInfo> subtypes=mySupertypesToSubtypesMapStrong.get(var);
    mySupertypesToSubtypesMapStrong.remove(var);
    for (    IWrapper subtype : subtypes.keySet()) {
      Map<IWrapper,ErrorInfo> map=mySubtypesToSupertypesMapStrong.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype),false);
    }
  }
  if (myComparableTypesMap.get(var) != null) {
    Map<IWrapper,ErrorInfo> comparables=myComparableTypesMap.get(var);
    myComparableTypesMap.remove(var);
    for (    IWrapper comparable : comparables.keySet()) {
      Map<IWrapper,ErrorInfo> map=myComparableTypesMap.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype));
    }
  }
  if (myComparableTypesMapStrong.get(var) != null) {
    Map<IWrapper,ErrorInfo> comparables=myComparableTypesMapStrong.get(var);
    myComparableTypesMapStrong.remove(var);
    for (    IWrapper comparable : comparables.keySet()) {
      Map<IWrapper,ErrorInfo> map=myComparableTypesMapStrong.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    IWrapper subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype),false);
    }
  }
  WhenConcreteEntity varConditionWrapper=getWhenConcreteEntity(var);
  clearWhenConcreteEntity(var);
  if (varConditionWrapper != null) {
    addWhenConcreteEntity(type,varConditionWrapper);
  }
}
