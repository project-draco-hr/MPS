{
  SNode subtypeRepresentator=getRepresentator(subType);
  SNode supertypeRepresentator=getRepresentator(supertype);
  if (subtypeRepresentator == supertypeRepresentator)   return;
  RuntimeTypeVariable varSubtype=RuntimeSupport.getTypeVar(subtypeRepresentator);
  RuntimeTypeVariable varSupertype=RuntimeSupport.getTypeVar(supertypeRepresentator);
  if (varSubtype != null || varSupertype != null) {
    if (isWeak) {
      addSubtyping(subtypeRepresentator,supertypeRepresentator,errorInfo);
    }
 else {
      addStrongSubtyping(subtypeRepresentator,supertypeRepresentator,errorInfo);
    }
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(subtypeRepresentator,supertypeRepresentator,true,isWeak)) {
    return;
  }
  String strongString=isWeak ? "" : " strong";
  IErrorReporter errorReporter=new EquationErrorReporter(this,"type ",subtypeRepresentator," should be a" + strongString + " subtype of ",supertypeRepresentator,"");
  myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorReporter);
}
