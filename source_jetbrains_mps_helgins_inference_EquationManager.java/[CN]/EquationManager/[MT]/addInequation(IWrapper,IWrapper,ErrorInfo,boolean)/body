{
  IWrapper subtypeRepresentator=getRepresentatorWrapper(subType);
  IWrapper supertypeRepresentator=getRepresentatorWrapper(supertype);
  if (fromWrapper(subtypeRepresentator) == fromWrapper(supertypeRepresentator))   return;
  RuntimeTypeVariable varSubtype=subtypeRepresentator.getVariable();
  RuntimeTypeVariable varSupertype=supertypeRepresentator.getVariable();
  if (varSubtype != null || varSupertype != null) {
    if (isWeak) {
      addSubtyping(subtypeRepresentator,supertypeRepresentator,errorInfo);
    }
 else {
      addStrongSubtyping(subtypeRepresentator,supertypeRepresentator,errorInfo);
    }
    return;
  }
  if (myTypeChecker.getSubtypingManager().isSubtype(fromWrapper(subtypeRepresentator),fromWrapper(supertypeRepresentator),true,isWeak)) {
    return;
  }
  if (errorInfo.getErrorString() != null) {
    myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorInfo.getErrorString());
    return;
  }
  String strongString=isWeak ? "" : " strong";
  IErrorReporter errorReporter=new EquationErrorReporter(this,"type ",subtypeRepresentator," is not" + strongString + " subtype of ",supertypeRepresentator,"");
  myTypeChecker.reportTypeError(errorInfo.getNodeWithError(),errorReporter);
}
