{
  if (mySubtypesToSupertypesMap.get(var) != null) {
    Map<SNode,SNode> supertypes=mySubtypesToSupertypesMap.get(var);
    mySubtypesToSupertypesMap.remove(var);
    for (    SNode supertype : supertypes.keySet()) {
      Map<SNode,SNode> map=mySupertypesToSubtypesMap.get(supertype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    SNode supertype : supertypes.keySet()) {
      addInequation(type,supertype,supertypes.get(supertype));
    }
  }
  if (mySupertypesToSubtypesMap.get(var) != null) {
    Map<SNode,SNode> subtypes=mySupertypesToSubtypesMap.get(var);
    mySupertypesToSubtypesMap.remove(var);
    for (    SNode subtype : subtypes.keySet()) {
      Map<SNode,SNode> map=mySubtypesToSupertypesMap.get(subtype);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    SNode subtype : subtypes.keySet()) {
      addInequation(subtype,type,subtypes.get(subtype));
    }
  }
  if (myComparableTypesMap.get(var) != null) {
    Map<SNode,SNode> comparables=myComparableTypesMap.get(var);
    myComparableTypesMap.remove(var);
    for (    SNode comparable : comparables.keySet()) {
      Map<SNode,SNode> map=myComparableTypesMap.get(comparable);
      if (map != null) {
        map.remove(var);
      }
    }
    for (    SNode subtype : comparables.keySet()) {
      addInequationComparable(subtype,type,comparables.get(subtype));
    }
  }
}
