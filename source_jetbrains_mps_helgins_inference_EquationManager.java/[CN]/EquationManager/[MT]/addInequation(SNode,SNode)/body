{
  SNode subtypeRepresentator=getRepresentator(subType);
  SNode supertypeRepresentator=getRepresentator(supertype);
  if (subtypeRepresentator == supertypeRepresentator)   return;
  RuntimeTypeVariable varSubtype=TypeVariablesManager.getTypeVar(subtypeRepresentator);
  RuntimeTypeVariable varSupertype=TypeVariablesManager.getTypeVar(supertypeRepresentator);
  if (varSubtype != null || varSupertype != null) {
    addSubtyping(subtypeRepresentator,supertypeRepresentator);
    return;
  }
  if (SubtypingManager.getInstance().isSubtype(subtypeRepresentator,supertypeRepresentator)) {
    return;
  }
  ErrorReporter.getInstance().setErrorString(subtypeRepresentator,"type " + subtypeRepresentator + " should be a subtype of "+ supertypeRepresentator);
  if (subtypeRepresentator instanceof ClassConcept && subtypeRepresentator.getName().equals("String")) {
    if (supertypeRepresentator instanceof PrimitiveTypeDescriptor && supertypeRepresentator.getName().equals("Plusable")) {
      SubtypingManager.getInstance().isSubtype(subtypeRepresentator,supertypeRepresentator);
    }
  }
  TypeChecker.reportTypeError(subtypeRepresentator);
}
