{
  if (visited.contains(conceptNode)) {
    throw new CircularHierarchyException(conceptNode,"circular concept hierarchy");
  }
  Iterable<Language> languages=ModuleRepositoryFacade.getInstance().getAllModules(Language.class);
  Iterable<SModel> structures=Sequence.fromIterable(languages).select(new ISelector<Language,SModel>(){
    public SModel select(    Language it){
      return LanguageAspect.STRUCTURE.get(it);
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return it != null;
    }
  }
);
  Iterable<SNode> ancestors=Sequence.fromIterable(structures).translate(new ITranslator2<SModel,SNode>(){
    public Iterable<SNode> translate(    SModel it){
      return ListSequence.fromList(SModelOperations.roots(it,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))).where(new IWhereFilter<SNode>(){
        public boolean accept(        SNode it){
          return ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>)((Class)Object.class),it,"virtual_getImmediateSuperconcepts_1222430305282",new Object[]{})).contains(conceptNode);
        }
      }
);
    }
  }
);
  return SetSequence.fromSetWithValues(new HashSet<SNode>(),ancestors);
}
