{
  MapSequence.fromMap(myDescendantsCache).clear();
  Iterable<Language> languages=ModuleRepositoryFacade.getInstance().getAllModules(Language.class);
  Iterable<SModel> structures=Sequence.fromIterable(languages).select(new ISelector<Language,SModel>(){
    public SModel select(    Language it){
      return LanguageAspect.STRUCTURE.get(it);
    }
  }
).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return it != null;
    }
  }
);
  Iterable<SNode> concepts=Sequence.fromIterable(structures).translate(new ITranslator2<SModel,SNode>(){
    public Iterable<SNode> translate(    SModel it){
      return SModelOperations.roots(it,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
    }
  }
);
  Sequence.fromIterable(concepts).visitAll(new IVisitor<SNode>(){
    public void visit(    final SNode child){
      List<SNode> immediate=((List<SNode>)BHReflection.invoke(child,SMethodTrimmedId.create("getImmediateSuperconcepts",null,"hMuxyK2")));
      ListSequence.fromList(immediate).visitAll(new IVisitor<SNode>(){
        public void visit(        SNode parent){
          Set<SNode> desc=MapSequence.fromMap(myDescendantsCache).get(parent);
          if (desc == null) {
            desc=SetSequence.fromSet(new HashSet<SNode>());
            MapSequence.fromMap(myDescendantsCache).put(parent,desc);
          }
          SetSequence.fromSet(desc).addElement(child);
        }
      }
);
    }
  }
);
}
