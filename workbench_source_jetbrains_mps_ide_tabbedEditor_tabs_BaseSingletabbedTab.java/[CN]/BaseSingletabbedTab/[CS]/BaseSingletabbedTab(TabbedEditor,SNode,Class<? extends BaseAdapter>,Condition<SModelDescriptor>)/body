{
  myTabbedEditor=tabbedEditor;
  myBaseNode=new SNodePointer(baseNode);
  myClass=adapterClass;
  myListener=new SModelAdapter(){
    @Override public void rootRemoved(    SModelRootEvent event){
      if (myBaseNode.getNode() == null)       return;
      if (myBaseNode.getNode() == event.getRoot())       return;
      if (getLoadableNode() == event.getRoot()) {
        reinit();
      }
    }
    @Override public void rootAdded(    SModelRootEvent event){
      if (getLoadableNode() == null && tryToLoadNode() != null) {
        reinit();
      }
    }
    @Override public void referenceAdded(    SModelReferenceEvent event){
      SReference reference=event.getReference();
      INodeAdapter referentNode=reference.getSourceNode().getContainingRoot().getAdapter();
      if (!myClass.isInstance(referentNode))       return;
      if (getLoadableNode() == null && tryToLoadNode() != null) {
        reinit();
      }
    }
    @Override public void referenceRemoved(    SModelReferenceEvent event){
      SReference reference=event.getReference();
      INodeAdapter referentNode=reference.getSourceNode().getContainingRoot().getAdapter();
      if (!myClass.isInstance(referentNode))       return;
      if (getLoadableNode() != null && tryToLoadNode() == null) {
        reinit();
      }
    }
  }
;
  final SModelDescriptor nodeModelDescriptor=baseNode.getModel().getModelDescriptor();
  if (nodeModelDescriptor != null) {
    nodeModelDescriptor.addWeakModelListener(myListener);
  }
 else {
    myWeakSModelRepositoryListener=new SModelRepositoryAdapter(){
      public void modelAdded(      SModelDescriptor modelDescriptor){
        if (ProjectModels.isProjectModel(modelDescriptor.getSModelReference())) {
          return;
        }
        if (listenCondition.met(modelDescriptor)) {
          modelDescriptor.addWeakModelListener(myListener);
          SModelRepository.getInstance().removeModelRepositoryListener(this);
        }
      }
    }
;
    SModelRepository.getInstance().addWeakModelRepositoryListener(myWeakSModelRepositoryListener);
  }
}
