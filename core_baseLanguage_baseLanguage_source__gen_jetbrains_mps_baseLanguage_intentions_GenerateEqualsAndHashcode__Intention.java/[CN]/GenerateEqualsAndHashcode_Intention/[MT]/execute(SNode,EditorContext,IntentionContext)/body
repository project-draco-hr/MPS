{
  final SNode classConcept=SNodeOperations.cast(node,"jetbrains.mps.baseLanguage.structure.ClassConcept");
  final SNode thisExp=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression",null);
  final SNode equalsDeclaration=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a2a7().createNode(thisExp,thisExp,classConcept,classConcept);
  SNode thatDeclaration=SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(equalsDeclaration,"body",true),"statement",true)).last(),"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"),"localVariableDeclaration",true);
  SNode thatRef=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
  SLinkOperations.setTarget(thatRef,"variableDeclaration",thatDeclaration,false);
  SNode fieldRefOperation=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation",null);
  for (  SNode field : (List<SNode>)((List<SNode>)intentionContext.getContextParametersMap().get("selectedFields"))) {
    SLinkOperations.setTarget(fieldRefOperation,"fieldDeclaration",field,false);
    SNode checkStmt;
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.FloatType")) {
        checkStmt=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0a2a8a7().createNode(thatRef,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation));
      }
 else       if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.DoubleType")) {
        checkStmt=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0a0c0i0h().createNode(thatRef,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation));
      }
 else {
        checkStmt=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0a0c0i0h_0().createNode(thisExp,SNodeOperations.copyNode(fieldRefOperation),thatRef,SNodeOperations.copyNode(fieldRefOperation));
      }
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.ArrayType")) {
      checkStmt=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0c0i0h().createNode(thisExp,SNodeOperations.copyNode(fieldRefOperation),thatRef,SNodeOperations.copyNode(fieldRefOperation));
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      checkStmt=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a1c0i0h().createNode(thatRef,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),thatRef,SNodeOperations.copyNode(fieldRefOperation));
    }
 else {
      checkStmt=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0c0i0h_0().createNode(thatRef,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),thatRef,SNodeOperations.copyNode(fieldRefOperation));
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(equalsDeclaration,"body",true),"statement",true)).addElement(checkStmt);
  }
  SLinkOperations.addNewChild(SLinkOperations.getTarget(equalsDeclaration,"body",true),"statement","jetbrains.mps.baseLanguage.structure.Statement");
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(equalsDeclaration,"body",true),"statement",true)).addElement(new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0k0h().createNode());
  ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(equalsDeclaration);
  SNode hashCodeDeclaration=ListSequence.fromList(SLinkOperations.getTargets(classConcept,"method",true)).addElement(new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a31a7().createNode());
  SNode resultDeclaration=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a41a7().createNode();
  SNode resultReference=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
  SLinkOperations.setTarget(resultReference,"variableDeclaration",SLinkOperations.getTarget(resultDeclaration,"localVariableDeclaration",true),false);
  SNode tempDeclaration=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a71a7().createNode();
  SNode tempReference=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference",null);
  SLinkOperations.setTarget(tempReference,"variableDeclaration",SLinkOperations.getTarget(tempDeclaration,"localVariableDeclaration",true),false);
  if (ListSequence.fromList(SLinkOperations.getTargets(classConcept,"field",true)).any(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it,"type",true),"jetbrains.mps.baseLanguage.structure.DoubleType");
    }
  }
)) {
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration,"body",true),"statement",true)).addElement(tempDeclaration);
  }
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration,"body",true),"statement",true)).addElement(resultDeclaration);
  for (  final SNode field : ((List<SNode>)intentionContext.getContextParametersMap().get("selectedFields"))) {
    SLinkOperations.setTarget(fieldRefOperation,"fieldDeclaration",field,false);
    SNode calcStatement=SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Statement",null);
    SNode mulExpression=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a2a22a7().createNode(resultReference);
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.IntegerType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a3a22a7().createNode(resultReference,thisExp,field,mulExpression);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.LongType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0d0w0h().createNode(mulExpression,thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),resultReference);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.ByteType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.CharType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.ShortType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a1d0w0h().createNode(thisExp,SNodeOperations.copyNode(fieldRefOperation),mulExpression,resultReference);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.DoubleType")) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration,"body",true),"statement",true)).addElement(new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0c3a22a7().createNode(tempReference,thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation)));
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a1a2d0w0h().createNode(resultReference,mulExpression,tempReference,tempReference);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.FloatType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a3d0w0h().createNode(resultReference,mulExpression,thisExp,field,thisExp,field);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.StringType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a4d0w0h().createNode(resultReference,mulExpression,thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation));
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.ArrayType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a5d0w0h().createNode(mulExpression,thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),resultReference);
    }
 else     if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(field,"type",true),"jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a6d0w0h().createNode(thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),mulExpression,resultReference);
    }
 else {
      calcStatement=new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0a0d0w0h_0().createNode(thisExp,SNodeOperations.copyNode(fieldRefOperation),thisExp,SNodeOperations.copyNode(fieldRefOperation),mulExpression,resultReference);
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration,"body",true),"statement",true)).addElement(calcStatement);
  }
  ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(hashCodeDeclaration,"body",true),"statement",true)).addElement(new GenerateEqualsAndHashcode_Intention.QuotationClass_4qz7hx_a0a0x0h().createNode(resultReference));
  editorContext.select(equalsDeclaration);
}
