{
  final SNode gv=SLinkOperations.getTarget(new Classifier_add_GenerateVariant_Intention.QuotationClass_iyz6y8_a0a0a0f().createNode(),"classifier",false);
  SNode ann=ListSequence.fromList(SLinkOperations.getTargets(node,"annotation",true)).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode ann){
      return SLinkOperations.getTarget(ann,"annotation",false) == gv;
    }
  }
);
  if ((ann == null)) {
    ann=ListSequence.fromList(SLinkOperations.getTargets(node,"annotation",true)).addElement(new Classifier_add_GenerateVariant_Intention.QuotationClass_iyz6y8_a0a0a0a2a5().createNode());
  }
  ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(ann,"value",true)).first(),"value",true),"jetbrains.mps.baseLanguage.structure.ArrayLiteral"),"item",true)).addElement(new Classifier_add_GenerateVariant_Intention.QuotationClass_iyz6y8_a0a0d0f().createNode(this.myParameter));
  ModuleReference moduleRef=Variants.languageToGenerate(this.myParameter).getModuleReference();
  SNodeOperations.getModel(node).addEngagedOnGenerationLanguage(moduleRef);
}
