{
  final Wrappers._T<Iterable<? extends SModule>> _modules=new Wrappers._T<Iterable<? extends SModule>>(modules);
  project.getRepository().getModelAccess().runReadAction(new Runnable(){
    public void run(){
      if (wholeProject) {
        _modules.value=(Iterable<? extends SModule>)(Iterable<SModule>)project.getProjectModulesWithGenerators();
      }
      Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
        public boolean accept(        SModel it){
          return SNodeOperations.isGeneratable(it);
        }
      }
).visitAll(new IVisitor<SModel>(){
        public void visit(        SModel model){
          String outputPath=SModuleOperations.getOutputPathFor(model);
          String cachePath=FileGenerationUtil.getCachesPath(outputPath);
          IFile outputDir=FileGenerationUtil.getDefaultOutputDir(model,FileSystem.getInstance().getFileByPath(outputPath));
          IFile cachesDir=FileGenerationUtil.getDefaultOutputDir(model,FileSystem.getInstance().getFileByPath(cachePath));
          Iterable<IFile> outputItems=outputDir.getChildren();
          Sequence.fromIterable(outputItems).where(new IWhereFilter<IFile>(){
            public boolean accept(            IFile it){
              return !(it.isDirectory());
            }
          }
).visitAll(new IVisitor<IFile>(){
            public void visit(            IFile it){
              it.delete();
            }
          }
);
          Iterable<IFile> cachedItems=cachesDir.getChildren();
          Sequence.fromIterable(cachedItems).where(new IWhereFilter<IFile>(){
            public boolean accept(            IFile it){
              return !(it.isDirectory());
            }
          }
).visitAll(new IVisitor<IFile>(){
            public void visit(            IFile it){
              it.delete();
            }
          }
);
          JavaModuleFacet javaFacet=model.getModule().getFacet(JavaModuleFacet.class);
          if (javaFacet != null) {
            IFile classesRootPath=check_nf7729_a0a0n0a0a1a0a0e(javaFacet);
            IFile classesDir=FileGenerationUtil.getDefaultOutputDir(model,classesRootPath);
            Iterable<IFile> classesItems=classesDir.getChildren();
            Sequence.fromIterable(classesItems).where(new IWhereFilter<IFile>(){
              public boolean accept(              IFile it){
                return !(it.isDirectory());
              }
            }
).visitAll(new IVisitor<IFile>(){
              public void visit(              IFile it){
                it.delete();
              }
            }
);
          }
        }
      }
);
    }
  }
);
  Sequence.fromIterable(_modules.value).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
    public void visit(    AbstractModule module){
      IFile outputDir=module.getOutputPath();
      IFile testDir=check_nf7729_a0b0a0a1a4(module.getFacet(TestsFacet.class));
      IFile classesDir=check_nf7729_a0c0a0a1a4(module.getFacet(JavaModuleFacet.class));
      if (outputDir != null) {
        IFile cacheDir=FileGenerationUtil.getCachesDir(outputDir);
        outputDir.delete();
        cacheDir.delete();
      }
      if (testDir != null) {
        IFile testCacheDir=FileGenerationUtil.getCachesDir(testDir);
        testDir.delete();
        testCacheDir.delete();
      }
      if (classesDir != null) {
        classesDir.delete();
      }
    }
  }
);
}
