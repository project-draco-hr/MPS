{
  final Wrappers._T<List<SModel>> modelsToClean=new Wrappers._T<List<SModel>>();
  if (models == null && modules == null) {
    project.getRepository().getModelAccess().runReadAction(new Runnable(){
      public void run(){
        modelsToClean.value=ListSequence.fromListWithValues(new ArrayList<SModel>(),new ProjectScope(project).getModels());
      }
    }
);
  }
 else {
    modelsToClean.value=ListSequence.fromListWithValues(new ArrayList<SModel>(),ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SModel>(),models)).concat(Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
      public Iterable<SModel> translate(      SModule it){
        return it.getModels();
      }
    }
)));
  }
  ListSequence.fromList(modelsToClean.value).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return it instanceof GeneratableSModel && ((GeneratableSModel)it).isGeneratable();
    }
  }
).visitAll(new IVisitor<SModel>(){
    public void visit(    SModel it){
      GenerationDependenciesCache.getInstance().discard(it);
    }
  }
);
}
