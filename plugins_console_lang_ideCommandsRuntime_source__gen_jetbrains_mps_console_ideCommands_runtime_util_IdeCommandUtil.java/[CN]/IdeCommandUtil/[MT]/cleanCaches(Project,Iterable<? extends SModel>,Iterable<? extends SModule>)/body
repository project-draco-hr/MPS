{
  final Wrappers._T<List<SModel>> modelsToClean=new Wrappers._T<List<SModel>>();
  if (Sequence.fromIterable(models).isEmpty() && Sequence.fromIterable(modules).isEmpty()) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        modelsToClean.value=SModelRepository.getInstance().getModelDescriptors();
      }
    }
);
  }
 else {
    modelsToClean.value=ListSequence.fromListWithValues(new ArrayList<SModel>(),ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<SModel>(),models)).concat(Sequence.fromIterable(modules).translate(new ITranslator2<SModule,SModel>(){
      public Iterable<SModel> translate(      SModule it){
        return it.getModels();
      }
    }
)));
  }
  ListSequence.fromList(modelsToClean.value).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return SNodeOperations.isGeneratable(it);
    }
  }
).visitAll(new IVisitor<SModel>(){
    public void visit(    SModel it){
      IFile generatedFile=GenerationDependenciesCache.getInstance().getCacheFile(it);
      generatedFile.delete();
    }
  }
);
}
