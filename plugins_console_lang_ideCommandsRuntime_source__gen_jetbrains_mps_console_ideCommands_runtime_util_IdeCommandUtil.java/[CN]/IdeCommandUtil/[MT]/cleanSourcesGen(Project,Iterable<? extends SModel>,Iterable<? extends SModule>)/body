{
  final Wrappers._T<Iterable<? extends SModule>> _modules=new Wrappers._T<Iterable<? extends SModule>>(modules);
  if (Sequence.fromIterable(models).isEmpty() && Sequence.fromIterable(_modules.value).isEmpty()) {
    ModelAccess.instance().runReadAction(new Runnable(){
      public void run(){
        _modules.value=project.getModulesWithGenerators();
      }
    }
);
  }
  Sequence.fromIterable(models).where(new IWhereFilter<SModel>(){
    public boolean accept(    SModel it){
      return SNodeOperations.isGeneratable(it);
    }
  }
).visitAll(new IVisitor<SModel>(){
    public void visit(    SModel it){
      String outputPath=SModuleOperations.getOutputPathFor(it);
      String cachePath=FileGenerationUtil.getCachesPath(outputPath);
      IFile outputDir=FileGenerationUtil.getDefaultOutputDir(it,FileSystem.getInstance().getFileByPath(outputPath));
      IFile cachesDir=FileGenerationUtil.getDefaultOutputDir(it,FileSystem.getInstance().getFileByPath(cachePath));
      outputDir.delete();
      cachesDir.delete();
    }
  }
);
  Sequence.fromIterable(_modules.value).ofType(AbstractModule.class).visitAll(new IVisitor<AbstractModule>(){
    public void visit(    AbstractModule it){
      IFile outputDir=it.getOutputPath();
      IFile testDir=check_nf7729_a0b0a0a2a4(it.getFacet(TestsFacet.class));
      if (outputDir != null) {
        IFile cacheDir=FileGenerationUtil.getCachesDir(outputDir);
        outputDir.delete();
        cacheDir.delete();
      }
      if (testDir != null) {
        IFile testCacheDir=FileGenerationUtil.getCachesDir(testDir);
        testDir.delete();
        testCacheDir.delete();
      }
    }
  }
);
}
