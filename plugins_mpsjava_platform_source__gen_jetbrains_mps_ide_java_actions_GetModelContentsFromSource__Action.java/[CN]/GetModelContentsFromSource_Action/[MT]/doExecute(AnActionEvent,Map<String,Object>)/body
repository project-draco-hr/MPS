{
  try {
    IModule module=((SModel)MapSequence.fromMap(_params).get("model")).getModule();
    TreeFileChooser treeFileChooser=new TreeFileChooser();
    treeFileChooser.setDirectoriesAreAlwaysVisible(true);
    treeFileChooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
    final SModel sModel=((SModel)MapSequence.fromMap(_params).get("model"));
    String generatorOutputPath=module.getGeneratorOutputPath();
    File initial=null;
    File output=new File(generatorOutputPath);
    if (output.exists()) {
      initial=output;
      File sourceRoot=new File(initial.getParentFile(),"source");
      if (!(sourceRoot.exists())) {
        sourceRoot=new File(initial.getParentFile(),"src");
      }
      initial=sourceRoot;
      if (sourceRoot.exists()) {
        File modelSource=new File(sourceRoot,NameUtil.pathFromNamespace(SNodeOperations.getModelLongName(sModel)));
        if (modelSource.exists()) {
          initial=modelSource;
        }
      }
    }
    if (initial != null) {
      treeFileChooser.setInitialFile(FileSystem.getInstance().getFileByPath(initial.getAbsolutePath()));
    }
    IFile result=treeFileChooser.showDialog(((Frame)MapSequence.fromMap(_params).get("frame")));
    if (result != null) {
      DirParser dirParser=new DirParser(module,null,new File(result.getPath()));
      try {
        dirParser.parseDirs();
      }
 catch (      JavaParseException e) {
        throw new RuntimeException(e);
      }
    }
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "GetModelContentsFromSource",t);
  }
}
