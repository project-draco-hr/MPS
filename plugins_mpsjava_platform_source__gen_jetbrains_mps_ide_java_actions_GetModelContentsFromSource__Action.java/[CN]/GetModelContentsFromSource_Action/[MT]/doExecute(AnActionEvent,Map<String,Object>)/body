{
  try {
    Project ideaProject=((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getProject();
    FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,false,false,false,true);
    FileChooserDialog dialog=FileChooserFactory.getInstance().createFileChooser(descriptor,ideaProject,((Frame)MapSequence.fromMap(_params).get("frame")));
    VirtualFile[] chosen=dialog.choose(null,ideaProject);
    if (chosen.length == 0) {
      return;
    }
    List<IFile> chosenIFiles=ListSequence.fromList(new ArrayList<IFile>(chosen.length));
    for (    VirtualFile vfile : chosen) {
      ListSequence.fromList(chosenIFiles).addElement(FileSystem.getInstance().getFileByPath(vfile.getPath()));
    }
    final List<IFile> ifilesToParse=Sequence.fromIterable(JavaConvertUtil.openDirs(chosenIFiles)).toListSequence();
    final JavaToMpsConverter parser=new JavaToMpsConverter(((SModel)MapSequence.fromMap(_params).get("model")),((MPSProject)MapSequence.fromMap(_params).get("mpsProject")).getRepository());
    ProgressManager.getInstance().run(new Task.Modal(null,"Convert to MPS",false){
      public void run(      @NotNull ProgressIndicator indicator){
        try {
          parser.convertToMps(ifilesToParse,new ProgressMonitorAdapter(indicator));
        }
 catch (        JavaParseException e) {
          throw new RuntimeException(e);
        }
catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
 catch (  Throwable t) {
    if (LOG.isEnabledFor(Level.ERROR)) {
      LOG.error("User's action execute method failed. Action:" + "GetModelContentsFromSource",t);
    }
  }
}
