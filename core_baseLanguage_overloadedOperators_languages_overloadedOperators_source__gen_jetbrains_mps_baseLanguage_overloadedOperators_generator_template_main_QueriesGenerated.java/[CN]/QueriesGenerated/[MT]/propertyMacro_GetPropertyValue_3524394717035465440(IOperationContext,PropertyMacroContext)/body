{
  SNode op=BinaryOperationUtil.getNearestOverloaded(_context.getNode(),TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(),"leftExpression",true)),TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(),"rightExpression",true)),ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(_context.getNode()),_context.getScope(),"jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer")).<SNode>translate(new ITranslator2<SNode,SNode>(){
    public Iterable<SNode> translate(    SNode it){
      return SLinkOperations.getTargets(it,"operators",true);
    }
  }
).toListSequence());
  return OverloadedBinaryOperator_Behavior.call_getFunctionName_6677452554240637506(op);
}
