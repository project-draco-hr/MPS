{
  PersistenceFacade facade=PersistenceFacade.getInstance();
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  SNode quotedNode_12=null;
  SNode quotedNode_13=null;
  SNode quotedNode_14=null;
  SNode quotedNode_15=null;
  SNode quotedNode_16=null;
  SNode quotedNode_17=null;
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null,null,false);
  quotedNode_6=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression",null,null,false);
  quotedNode_7=(SNode)parameter_1;
  if (quotedNode_7 != null) {
    quotedNode_6.addChild("lValue",HUtil.copyIfNecessary(quotedNode_7));
  }
  quotedNode_8=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression",null,null,false);
  quotedNode_9=(SNode)parameter_2;
  if (quotedNode_9 != null) {
    quotedNode_8.addChild("leftExpression",HUtil.copyIfNecessary(quotedNode_9));
  }
  quotedNode_10=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null,null,false);
  quotedNode_11=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",null,null,false);
  quotedNode_12=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall",null,null,false);
  quotedNode_12.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",quotedNode_12,facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"),facade.createNodeId("~Float.floatToIntBits(float):int")));
  quotedNode_12.setReference("classConcept",SReference.create("classConcept",quotedNode_12,facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"),facade.createNodeId("~Float")));
  quotedNode_15=(SNode)parameter_3;
  if (quotedNode_15 != null) {
    quotedNode_12.addChild("actualArgument",HUtil.copyIfNecessary(quotedNode_15));
  }
  quotedNode_11.addChild("ifTrue",quotedNode_12);
  quotedNode_13=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_13,"value","0");
  quotedNode_11.addChild("ifFalse",quotedNode_13);
  quotedNode_14=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null,null,false);
  quotedNode_16=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_16,"value","0.0f");
  quotedNode_14.addChild("rightExpression",quotedNode_16);
  quotedNode_17=(SNode)parameter_4;
  if (quotedNode_17 != null) {
    quotedNode_14.addChild("leftExpression",HUtil.copyIfNecessary(quotedNode_17));
  }
  quotedNode_11.addChild("condition",quotedNode_14);
  quotedNode_10.addChild("expression",quotedNode_11);
  quotedNode_8.addChild("rightExpression",quotedNode_10);
  quotedNode_6.addChild("rValue",quotedNode_8);
  quotedNode_5.addChild("expression",quotedNode_6);
  return quotedNode_5;
}
