{
  PersistenceFacade facade=PersistenceFacade.getInstance();
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  SNode quotedNode_12=null;
  SNode quotedNode_13=null;
  SNode quotedNode_14=null;
  SNode quotedNode_15=null;
  SNode quotedNode_16=null;
  SNode quotedNode_17=null;
  SNode quotedNode_18=null;
  SNode quotedNode_19=null;
  SNode quotedNode_20=null;
  SNode quotedNode_21=null;
  SNode quotedNode_22=null;
  SNode quotedNode_23=null;
  SNode quotedNode_24=null;
  SNode quotedNode_25=null;
  SNode quotedNode_26=null;
  quotedNode_7=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement",null,null,false);
  quotedNode_8=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList",null,null,false);
  quotedNode_10=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement",null,null,false);
  quotedNode_14=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant",null,null,false);
  SNodeAccessUtil.setProperty(quotedNode_14,"value","false");
  quotedNode_10.addChild("expression",quotedNode_14);
  quotedNode_8.addChild("statement",quotedNode_10);
  quotedNode_7.addChild("ifTrue",quotedNode_8);
  quotedNode_9=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",null,null,false);
  quotedNode_11=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression",null,null,false);
  quotedNode_15=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,false);
  quotedNode_20=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null,null,false);
  quotedNode_20.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",quotedNode_20,facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"),facade.createNodeId("~String.equals(java.lang.Object):boolean")));
  quotedNode_24=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,false);
  quotedNode_25=(SNode)parameter_1;
  if (quotedNode_25 != null) {
    quotedNode_24.addChild("operand",HUtil.copyIfNecessary(quotedNode_25));
  }
  quotedNode_26=(SNode)parameter_2;
  if (quotedNode_26 != null) {
    quotedNode_24.addChild("operation",HUtil.copyIfNecessary(quotedNode_26));
  }
  quotedNode_20.addChild("actualArgument",quotedNode_24);
  quotedNode_15.addChild("operation",quotedNode_20);
  quotedNode_21=(SNode)parameter_3;
  if (quotedNode_21 != null) {
    quotedNode_15.addChild("operand",HUtil.copyIfNecessary(quotedNode_21));
  }
  quotedNode_11.addChild("expression",quotedNode_15);
  quotedNode_9.addChild("ifTrue",quotedNode_11);
  quotedNode_12=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null,null,false);
  quotedNode_16=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral",null,null,false);
  quotedNode_12.addChild("rightExpression",quotedNode_16);
  quotedNode_17=(SNode)parameter_4;
  if (quotedNode_17 != null) {
    quotedNode_12.addChild("leftExpression",HUtil.copyIfNecessary(quotedNode_17));
  }
  quotedNode_9.addChild("condition",quotedNode_12);
  quotedNode_13=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null,null,false);
  quotedNode_18=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral",null,null,false);
  quotedNode_13.addChild("rightExpression",quotedNode_18);
  quotedNode_19=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,false);
  quotedNode_22=(SNode)parameter_5;
  if (quotedNode_22 != null) {
    quotedNode_19.addChild("operand",HUtil.copyIfNecessary(quotedNode_22));
  }
  quotedNode_23=(SNode)parameter_6;
  if (quotedNode_23 != null) {
    quotedNode_19.addChild("operation",HUtil.copyIfNecessary(quotedNode_23));
  }
  quotedNode_13.addChild("leftExpression",quotedNode_19);
  quotedNode_9.addChild("ifFalse",quotedNode_13);
  quotedNode_7.addChild("condition",quotedNode_9);
  return quotedNode_7;
}
