{
  SNode quotedNode_5=null;
  SNode quotedNode_6=null;
  SNode quotedNode_7=null;
  SNode quotedNode_8=null;
  SNode quotedNode_9=null;
  SNode quotedNode_10=null;
  SNode quotedNode_11=null;
  SNode quotedNode_12=null;
  SNode quotedNode_13=null;
  SNode quotedNode_14=null;
  SNode quotedNode_15=null;
  SNode quotedNode_16=null;
  SNode quotedNode_17=null;
  SNode quotedNode_18=null;
  SNode quotedNode_19=null;
  SNode quotedNode_20=null;
  SNode quotedNode_21=null;
  quotedNode_5=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement",null,null,GlobalScope.getInstance(),false);
  quotedNode_6=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_7=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PlusExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_9=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_11=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_12=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant",null,null,GlobalScope.getInstance(),false);
  SNodeAccessUtil.setProperty(quotedNode_12,"value","0");
  quotedNode_11.addChild("ifFalse",quotedNode_12);
  quotedNode_13=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotEqualsExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_15=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral",null,null,GlobalScope.getInstance(),false);
  quotedNode_13.addChild("rightExpression",quotedNode_15);
  quotedNode_16=(SNode)parameter_1;
  if (quotedNode_16 != null) {
    quotedNode_13.addChild("leftExpression",HUtil.copyIfNecessary(quotedNode_16));
  }
  quotedNode_11.addChild("condition",quotedNode_13);
  quotedNode_14=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_17=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_19=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression",null,null,GlobalScope.getInstance(),false);
  quotedNode_20=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType",null,null,GlobalScope.getInstance(),false);
  quotedNode_20.setReference("classifier",SReference.create("classifier",quotedNode_20,SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"),jetbrains.mps.smodel.SNodeId.fromString("~Object")));
  quotedNode_19.addChild("type",quotedNode_20);
  quotedNode_21=(SNode)parameter_2;
  if (quotedNode_21 != null) {
    quotedNode_19.addChild("expression",HUtil.copyIfNecessary(quotedNode_21));
  }
  quotedNode_17.addChild("expression",quotedNode_19);
  quotedNode_14.addChild("operand",quotedNode_17);
  quotedNode_18=SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation",null,null,GlobalScope.getInstance(),false);
  quotedNode_18.setReference("baseMethodDeclaration",SReference.create("baseMethodDeclaration",quotedNode_18,SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"),jetbrains.mps.smodel.SNodeId.fromString("~Object.hashCode():int")));
  quotedNode_14.addChild("operation",quotedNode_18);
  quotedNode_11.addChild("ifTrue",quotedNode_14);
  quotedNode_9.addChild("expression",quotedNode_11);
  quotedNode_7.addChild("rightExpression",quotedNode_9);
  quotedNode_10=(SNode)parameter_3;
  if (quotedNode_10 != null) {
    quotedNode_7.addChild("leftExpression",HUtil.copyIfNecessary(quotedNode_10));
  }
  quotedNode_6.addChild("rValue",quotedNode_7);
  quotedNode_8=(SNode)parameter_4;
  if (quotedNode_8 != null) {
    quotedNode_6.addChild("lValue",HUtil.copyIfNecessary(quotedNode_8));
  }
  quotedNode_5.addChild("expression",quotedNode_6);
  return quotedNode_5;
}
