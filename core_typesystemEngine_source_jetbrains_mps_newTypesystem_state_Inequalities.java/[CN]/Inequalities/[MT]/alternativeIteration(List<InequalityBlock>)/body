{
  solveOnlyConcrete=false;
  Set<SNode> nodes=new LinkedHashSet<SNode>();
  ManyToManyMap<SNode,SNode> inputsToOutputs=new ManyToManyMap<SNode,SNode>();
  ManyToManyMap<SNode,InequalityBlock> nodesToBlocks=new ManyToManyMap<SNode,InequalityBlock>();
  for (  InequalityBlock inequality : inequalities) {
    SNode input=myState.getRepresentative(inequality.getInput());
    SNode output=myState.getRepresentative(inequality.getOutput());
    if (input != null) {
      if (input != output) {
        inputsToOutputs.addLink(input,output);
        nodesToBlocks.addLink(input,inequality);
        nodes.add(input);
        if (!TypesUtil.isVariable(input) && !TypesUtil.isVariable(output)) {
          for (          SNode inputVar : TypesUtil.getVariables(input)) {
            for (            SNode outputVar : TypesUtil.getVariables(output)) {
              inputsToOutputs.addLink(myState.getRepresentative(inputVar),myState.getRepresentative(outputVar));
            }
          }
        }
      }
      nodesToBlocks.addLink(output,inequality);
      nodes.add(output);
    }
  }
  if (nodes.isEmpty()) {
    return;
  }
}
