{
  myInputsToOutputs.clear();
  myNodesToBlocks.clear();
  myNodes.clear();
  for (  InequalityBlock inequality : inequalities) {
    SNode input=myState.getRepresentative(inequality.getInput());
    SNode output=myState.getRepresentative(inequality.getOutput());
    if (input != null) {
      if (TypesUtil.isVariable(input)) {
        myNodes.add(input);
      }
      if (TypesUtil.isVariable(output)) {
        myNodes.add(output);
      }
      if (input != output) {
        addVariablesLink(input,output);
        myNodesToBlocks.addLink(input,inequality);
        if (!TypesUtil.isVariable(input) && !TypesUtil.isVariable(output)) {
          for (          SNode inputVar : TypesUtil.getVariables(input)) {
            for (            SNode outputVar : TypesUtil.getVariables(output)) {
              addVariablesLink(myState.getRepresentative(inputVar),myState.getRepresentative(outputVar));
            }
          }
        }
      }
      myNodesToBlocks.addLink(output,inequality);
    }
  }
}
