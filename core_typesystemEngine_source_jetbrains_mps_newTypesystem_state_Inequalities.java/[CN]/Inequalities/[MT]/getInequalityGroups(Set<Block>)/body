{
  Map<SNode,Set<SNode>> components=new THashMap<SNode,Set<SNode>>();
  Map<Set<SNode>,Set<InequalityBlock>> groupsToInequalities=new THashMap<Set<SNode>,Set<InequalityBlock>>();
  Set<SNode> emptySet=new THashSet<SNode>();
  for (  Block block : inequalities) {
    InequalityBlock inequality=(InequalityBlock)block;
    List<SNode> variables=TypesUtil.getVariables(myState.expand(inequality.getRightNode()));
    variables.addAll(TypesUtil.getVariables(myState.expand(inequality.getLeftNode())));
    if (variables.size() == 0) {
      Set<InequalityBlock> emptyBlocks=groupsToInequalities.get(emptySet);
      if (emptyBlocks == null) {
        emptyBlocks=new THashSet<InequalityBlock>();
        groupsToInequalities.put(emptySet,emptyBlocks);
      }
      emptyBlocks.add(inequality);
      continue;
    }
    Set<SNode> currentResult=new THashSet<SNode>();
    Set<InequalityBlock> currentInequalities=new THashSet<InequalityBlock>();
    currentInequalities.add(inequality);
    for (    SNode var : variables) {
      var=myState.getRepresentative(var);
      currentResult.add(var);
      Set<SNode> varGroup=components.remove(var);
      if (varGroup != null) {
        currentResult.addAll(varGroup);
        for (        SNode var2 : varGroup) {
          if (!variables.contains(var2)) {
            components.put(var2,currentResult);
          }
        }
      }
      components.put(var,currentResult);
      Set<InequalityBlock> remove=groupsToInequalities.remove(varGroup);
      if (remove != null) {
        currentInequalities.addAll(remove);
      }
    }
    groupsToInequalities.put(currentResult,currentInequalities);
  }
  return groupsToInequalities;
}
