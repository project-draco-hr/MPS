{
  if (nodes.isEmpty())   return false;
  for (  Block block : myState.getBlocks(BlockKind.WHEN_CONCRETE)) {
    SNode node=myState.getRepresentative(((WhenConcreteBlock)block).getArgument());
    for (    SNode var : TypesUtil.getVariables(node,myState)) {
      if (nodes.contains(var) && myInputsToOutputsInc.getBySecond(var).isEmpty()) {
        if (solveRelationsForNode(var)) {
          return true;
        }
      }
    }
  }
  Set<SNode> usedNodes=new HashSet<SNode>();
  LinkedList<SNode> tempNodes=new LinkedList<SNode>(nodes);
  Collections.sort(tempNodes,new Comparator<SNode>(){
    @Override public int compare(    SNode a,    SNode b){
      return ((SNodeId)a.getNodeId()).compareTo((SNodeId)b.getNodeId());
    }
  }
);
  while (tempNodes.size() > 0) {
    SNode current=getNodeWithNoInput(tempNodes,usedNodes);
    if (solveRelationsForNode(current)) {
      return true;
    }
    tempNodes.remove(current);
    usedNodes.add(current);
  }
  return false;
}
