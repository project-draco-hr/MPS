{
  initializeMaps(inequalities);
  if (myNodes.size() == 0) {
    return false;
  }
  for (  Block block : myState.getBlocks(BlockKind.WHEN_CONCRETE)) {
    SNode node=myState.getRepresentative(((WhenConcreteBlock)block).getArgument());
    if (myNodes.contains(node) && myInputsToOutputs.getBySecond(node).isEmpty()) {
      if (solveRelationsForNode(node)) {
        return true;
      }
    }
  }
  while (myNodes.size() > 0) {
    SNode current=getNodeWithNoInput(myInputsToOutputs,myNodes);
    if (solveRelationsForNode(current)) {
      return true;
    }
    myNodes.remove(current);
    myInputsToOutputs.clearFirst(current);
  }
  for (  RelationBlock inequality : inequalities) {
    if (!(TypesUtil.isVariable(inequality.getLeftNode()) && TypesUtil.isVariable(inequality.getRightNode()))) {
      myState.executeOperation(new RemoveBlockOperation(inequality));
      return true;
    }
  }
  return false;
}
