{
  if (myNodesInc.size() == 0) {
    return false;
  }
  for (  Block block : myState.getBlocks(BlockKind.WHEN_CONCRETE)) {
    SNode node=myState.getRepresentative(((WhenConcreteBlock)block).getArgument());
    if (myNodesInc.contains(node) && myInputsToOutputsInc.getBySecond(node).isEmpty()) {
      if (solveRelationsForNode(node)) {
        return true;
      }
    }
  }
  Set<SNode> nodes=new HashSet<SNode>(myNodesInc);
  Set<SNode> usedNodes=new HashSet<SNode>();
  while (nodes.size() > 0) {
    SNode current=getNodeWithNoInput(myInputsToOutputsInc,nodes,usedNodes);
    if (solveRelationsForNode(current)) {
      return true;
    }
    nodes.remove(current);
    usedNodes.add(current);
  }
  if (!mySolveOnlyGreater) {
    mySolveOnlyGreater=true;
    return true;
  }
  for (  RelationBlock inequality : inequalities) {
    if (!(TypesUtil.isVariable(inequality.getLeftNode()) && TypesUtil.isVariable(inequality.getRightNode()))) {
      myState.executeOperation(new RemoveBlockOperation(inequality));
      return true;
    }
  }
  return false;
}
