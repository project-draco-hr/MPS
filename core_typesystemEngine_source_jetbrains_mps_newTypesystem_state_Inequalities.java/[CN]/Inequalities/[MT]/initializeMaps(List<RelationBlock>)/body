{
  myInputsToOutputs.clear();
  myNodesToBlocks.clear();
  myNodes.clear();
  for (  RelationBlock inequality : inequalities) {
    if (inequality.getRelationKind().isCheckOnly()) {
      continue;
    }
    for (    Pair<SNode,SNode> pair : inequality.getInputsAndOutputs()) {
      SNode input=myState.getRepresentative(pair.first);
      SNode output=myState.getRepresentative(pair.second);
      if (input != null) {
        if (TypesUtil.isVariable(input)) {
          myNodes.add(input);
        }
        if (TypesUtil.isVariable(output)) {
          myNodes.add(output);
        }
        if (input != output && output != null) {
          addVariablesLink(input,output);
          myNodesToBlocks.addLink(input,inequality);
          if (!TypesUtil.isVariable(input) && !TypesUtil.isVariable(output)) {
            List<SNode> inputVariables=TypesUtil.getVariables(input);
            List<SNode> outputVariables=TypesUtil.getVariables(output);
            myNodes.addAll(inputVariables);
            myNodes.addAll(outputVariables);
            for (            SNode inputVar : inputVariables) {
              for (              SNode outputVar : outputVariables) {
                addVariablesLink(myState.getRepresentative(inputVar),myState.getRepresentative(outputVar));
              }
            }
          }
        }
        if (output != null) {
          myNodesToBlocks.addLink(output,inequality);
        }
      }
    }
  }
}
