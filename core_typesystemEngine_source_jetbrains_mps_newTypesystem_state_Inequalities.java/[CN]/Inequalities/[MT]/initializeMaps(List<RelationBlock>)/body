{
  myInputsToOutputs.clear();
  myNodesToBlocks.clear();
  myNodes.clear();
  for (  RelationBlock inequality : inequalities) {
    if (inequality.isCheckOnly()) {
      continue;
    }
    for (    Pair<SNode,SNode> pair : inequality.getInputsAndOutputs()) {
      SNode input=myState.getRepresentative(pair.first);
      SNode output=myState.getRepresentative(pair.second);
      if (input == null || output == null)       continue;
      if (TypesUtil.isVariable(input)) {
        myNodes.add(input);
      }
      if (TypesUtil.isVariable(output)) {
        myNodes.add(output);
      }
      if (input != output) {
        for (        SNode inputVar : TypesUtil.getVariables(input,myState)) {
          for (          SNode outputVar : TypesUtil.getVariables(output,myState)) {
            addVariablesLink(myState.getRepresentative(inputVar),myState.getRepresentative(outputVar));
          }
        }
      }
      myNodesToBlocks.addLink(input,inequality);
      myNodesToBlocks.addLink(output,inequality);
    }
  }
}
