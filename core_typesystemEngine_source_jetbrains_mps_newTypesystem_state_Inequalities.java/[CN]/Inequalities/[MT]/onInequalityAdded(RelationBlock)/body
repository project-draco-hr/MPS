{
  if (!solvingInProcess)   return;
  if (inequality.isCheckOnly()) {
    return;
  }
  for (  Pair<SNode,SNode> pair : inequality.getInputsAndOutputs()) {
    SNode input=myState.getRepresentative(pair.o1);
    SNode output=myState.getRepresentative(pair.o2);
    if (input == null || output == null)     continue;
    for (    SNode inputVar : TypesUtil.getVariables(input,myState)) {
      if (TypesUtil.isVariable(inputVar)) {
        myNodesInc.add(inputVar);
        myNodesToBlocksInc.addLink(inputVar,inequality);
      }
    }
    for (    SNode outputVar : TypesUtil.getVariables(output,myState)) {
      if (TypesUtil.isVariable(outputVar)) {
        myNodesInc.add(outputVar);
        myNodesToBlocksInc.addLink(outputVar,inequality);
      }
    }
    if (input != output) {
      for (      SNode inputVar : TypesUtil.getVariables(input,myState)) {
        for (        SNode outputVar : TypesUtil.getVariables(output,myState)) {
          addVariablesLinkInc(myState.getRepresentative(inputVar),myState.getRepresentative(outputVar));
        }
      }
    }
  }
  SNode left=myState.getRepresentative(inequality.getLeftNode());
  SNode right=myState.getRepresentative(inequality.getRightNode());
  if (TypesUtil.isVariable(left)) {
    mySolvableLeft.add(left);
  }
  if (TypesUtil.isVariable(right)) {
    mySolvableRight.add(right);
  }
}
