{
  if (!solvingInProcess)   return;
  if (inequality.isCheckOnly()) {
    return;
  }
  for (  com.intellij.openapi.util.Pair<SNode,SNode> pair : inequality.getInputsAndOutputs()) {
    SNode input=myState.getRepresentative(pair.first);
    SNode output=myState.getRepresentative(pair.second);
    if (input == null || output == null)     continue;
    if (TypesUtil.isVariable(input)) {
      myNodesInc.add(input);
      myNodesToBlocksInc.addLink(input,inequality);
    }
    if (TypesUtil.isVariable(output)) {
      myNodesInc.add(output);
      myNodesToBlocksInc.addLink(output,inequality);
    }
    if (input != output) {
      for (      SNode inputVar : TypesUtil.getVariables(input,myState)) {
        for (        SNode outputVar : TypesUtil.getVariables(output,myState)) {
          addVariablesLinkInc(myState.getRepresentative(inputVar),myState.getRepresentative(outputVar));
        }
      }
    }
  }
  SNode left=myState.getRepresentative(inequality.getLeftNode());
  SNode right=myState.getRepresentative(inequality.getRightNode());
  if (TypesUtil.isVariable(left)) {
    mySolvableLeft.add(left);
  }
  if (TypesUtil.isVariable(right)) {
    mySolvableRight.add(right);
  }
}
