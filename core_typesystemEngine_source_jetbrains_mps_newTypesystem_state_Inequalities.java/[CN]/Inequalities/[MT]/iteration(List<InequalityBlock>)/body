{
  initializeMaps(inequalities);
  if (myNodes.size() == 0) {
    return false;
  }
  for (  Block block : myState.getBlocks(BlockKind.WHEN_CONCRETE)) {
    SNode node=myState.getRepresentative(((WhenConcreteBlock)block).getArgument());
    if (myNodes.contains(node) && myInputsToOutputs.getBySecond(node).isEmpty()) {
      if (solveInequalitiesForNode(node)) {
        return true;
      }
    }
  }
  List<SNode> sortedNodes=sort(myInputsToOutputs,myNodes);
  for (  SNode node : sortedNodes) {
    if (solveInequalitiesForNode(node)) {
      return true;
    }
  }
  for (  InequalityBlock inequality : inequalities) {
    if (inequality.processReplacementRules()) {
      myState.executeOperation(new RemoveBlockOperation(inequality));
      return true;
    }
  }
  return false;
}
