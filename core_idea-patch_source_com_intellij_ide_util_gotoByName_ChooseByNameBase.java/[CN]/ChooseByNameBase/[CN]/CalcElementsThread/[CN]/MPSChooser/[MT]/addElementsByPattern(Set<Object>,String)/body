{
  if (pattern.length() == 0 && !isShowListForEmptyPattern())   return;
  List<String> namesList=new ArrayList<String>();
  getNamesByPattern(myCheckboxState,CalcElementsThread.this,namesList,pattern);
  if (myCancelled) {
    throw new ProcessCanceledException();
  }
  Collections.sort(namesList,new MatchesComparator(pattern));
  boolean overflow=false;
  All:   for (  String name : namesList) {
    if (myCancelled) {
      throw new ProcessCanceledException();
    }
    final Object[] elements=myModel.getElementsByName(name,myCheckboxState,name);
    List<Object> sameNameElements=new SmartList<Object>();
    for (    final Object element : elements) {
      sameNameElements.add(element);
    }
    for (    Object element : sameNameElements) {
      elementsArray.add(element);
      if (elementsArray.size() >= myMaximumListSizeLimit) {
        overflow=true;
        break All;
      }
    }
  }
  if (overflow) {
    elementsArray.add(ChooseByNameBase.EXTRA_ELEM);
  }
}
