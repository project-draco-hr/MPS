{
  try {
    final Wrappers._T<SNode> baseMethod=new Wrappers._T<SNode>();
    final Wrappers._T<String> message=new Wrappers._T<String>("");
    ModelAccess.instance().runWriteAction(new Runnable(){
      public void run(){
        SModelRepository.getInstance().saveAll();
        baseMethod.value=BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),((SNode)MapSequence.fromMap(_params).get("method")),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","call_getBaseMethod_5014346297260519893",new Object[]{});
        if (baseMethod.value != null) {
          message.value="Method " + ((SNode)MapSequence.fromMap(_params).get("method")).getPresentation() + " overrides method from "+ SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(baseMethod.value),"jetbrains.mps.baseLanguage.structure.Classifier"),"name")+ ".\n";
          message.value+="Do you want to change signature of this method instead?";
        }
      }
    }
);
    final SNode methodToRefactor;
    if (baseMethod.value != null && Messages.showYesNoDialog(((Frame)MapSequence.fromMap(_params).get("frame")),message.value,"Warinig",null) == 0) {
      methodToRefactor=baseMethod.value;
    }
 else {
      methodToRefactor=((SNode)MapSequence.fromMap(_params).get("method"));
    }
    ChangeMethodSignatureDialog dialog=new ChangeMethodSignatureDialog(ProjectHelper.toIdeaProject(((MPSProject)MapSequence.fromMap(_params).get("project"))),methodToRefactor,((IOperationContext)MapSequence.fromMap(_params).get("context")));
    dialog.show();
    final List<ChangeMethodSignatureRefactoring> myRefactorings=dialog.getAllRefactorings();
    if (ListSequence.fromList(myRefactorings).isEmpty()) {
      return;
    }
    ModelAccess.instance().runReadInEDT(new Runnable(){
      public void run(){
        SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("method")));
        if (!(node.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)((SNode)MapSequence.fromMap(_params).get("method"))))) {
          return;
        }
        SNode node1=((SNode)methodToRefactor);
        if (!(node1.getModel() != null) || jetbrains.mps.util.SNodeOperations.isDisposed(((SNode)methodToRefactor))) {
          return;
        }
        RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.baseLanguage.refactorings.ChangeMethodSignature",Arrays.asList("myRefactorings"),Arrays.asList(myRefactorings),methodToRefactor,((MPSProject)MapSequence.fromMap(_params).get("project"))));
      }
    }
);
  }
 catch (  Throwable t) {
    LOG.error("User's action execute method failed. Action:" + "ChangeMethodSignature",t);
  }
}
