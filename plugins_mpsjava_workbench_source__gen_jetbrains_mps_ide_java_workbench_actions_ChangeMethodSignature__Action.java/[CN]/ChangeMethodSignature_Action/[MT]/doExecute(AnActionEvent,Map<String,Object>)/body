{
  final Wrappers._T<SNode> baseMethod=new Wrappers._T<SNode>();
  final Wrappers._T<String> message=new Wrappers._T<String>("");
  ModelAccess modelAccess=((MPSProject)MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
  modelAccess.runWriteAction(new Runnable(){
    public void run(){
      SModelRepository.getInstance().saveAll();
      baseMethod.value=BehaviorReflection.invokeNonVirtual((Class<SNode>)((Class)Object.class),((SNode)MapSequence.fromMap(_params).get("method")),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration","call_getBaseMethod_5014346297260519893",new Object[]{});
      if (baseMethod.value != null) {
        message.value="Method " + ((SNode)MapSequence.fromMap(_params).get("method")).getPresentation() + " overrides method from "+ SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent(baseMethod.value),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x101d9d3ca30L,"jetbrains.mps.baseLanguage.structure.Classifier")),MetaAdapterFactory.getProperty(0xceab519525ea4f22L,0x9b92103b95ca8c0cL,0x110396eaaa4L,0x110396ec041L,"name"))+ ".\n";
        message.value+="Do you want to change signature of this method instead?";
      }
    }
  }
);
  final SNode methodToRefactor;
  if (baseMethod.value != null && Messages.showYesNoDialog(((Frame)MapSequence.fromMap(_params).get("frame")),message.value,"Warinig",null) == 0) {
    methodToRefactor=baseMethod.value;
  }
 else {
    methodToRefactor=((SNode)MapSequence.fromMap(_params).get("method"));
  }
  ChangeMethodSignatureDialog dialog=new ChangeMethodSignatureDialog(ProjectHelper.toIdeaProject(((MPSProject)MapSequence.fromMap(_params).get("project"))),methodToRefactor,((IOperationContext)MapSequence.fromMap(_params).get("context")));
  dialog.show();
  final List<ChangeMethodSignatureRefactoring> myRefactorings=dialog.getAllRefactorings();
  if (ListSequence.fromList(myRefactorings).isEmpty()) {
    return;
  }
  modelAccess.runReadInEDT(new Runnable(){
    public void run(){
      SNode node=((SNode)((SNode)MapSequence.fromMap(_params).get("method")));
      if (!(SNodeUtil.isAccessible(node,MPSModuleRepository.getInstance()))) {
        return;
      }
      SNode node1=((SNode)methodToRefactor);
      if (!(SNodeUtil.isAccessible(node1,MPSModuleRepository.getInstance()))) {
        return;
      }
      RefactoringAccess.getInstance().getRefactoringFacade().execute(RefactoringContext.createRefactoringContextByName("jetbrains.mps.baseLanguage.refactorings.ChangeMethodSignature",Arrays.asList("myRefactorings"),Arrays.asList(myRefactorings),methodToRefactor,((MPSProject)MapSequence.fromMap(_params).get("project"))));
    }
  }
);
}
