{
  mySModelTreeNodes.clear();
  OperationContext operationContext=myIDE.getProjectOperationContext();
  if (myProject == null) {
    return new TextTreeNode("Empty");
  }
  ProjectTreeNode root=new ProjectTreeNode(operationContext);
  ProjectModelsTreeNode projectModelsNode=new ProjectModelsTreeNode(operationContext);
  for (  SModelDescriptor modelDescriptor : sortSemanticModels(new ArrayList<SModelDescriptor>(operationContext.getWorkingModelDescriptors()))) {
    projectModelsNode.add(createSModelTreeNode(modelDescriptor,null,operationContext));
  }
  DefaultMutableTreeNode libraryModelsNode=new LibraryModelsTreeNode(operationContext);
  for (  SModelDescriptor modelDescriptor : sortSemanticModels(new ArrayList<SModelDescriptor>(operationContext.getLibraryModelDescriptors()))) {
    libraryModelsNode.add(createSModelTreeNode(modelDescriptor,null,operationContext));
  }
  DefaultMutableTreeNode projectLanguagesNode=new ProjectLanguagesTreeNode(operationContext);
  for (  Language language : myProject.getProjectLanguages()) {
    ProjectLanguageTreeNode node=new ProjectLanguageTreeNode(language);
    projectLanguagesNode.add(node);
    initProjectLanguageNode(node,language);
  }
  DefaultMutableTreeNode languagesNode=new LanguagesTreeNode(operationContext);
  for (  Language language : myProject.getLanguages()) {
    LanguageTreeNode node=new LanguageTreeNode(language);
    languagesNode.add(node);
    initLanguageNode(node,language);
  }
  root.add(projectModelsNode);
  root.add(projectLanguagesNode);
  root.add(libraryModelsNode);
  root.add(languagesNode);
  return root;
}
