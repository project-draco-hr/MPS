{
  this.removeAllChildren();
  SModel model=myModelDescriptor.getSModel();
  Iterator<SemanticNode> iterator=model.roots();
  TreeSet<Object> sortedRoots=new TreeSet<Object>(new Comparator(){
    public int compare(    Object o,    Object o1){
      if (o == o1) {
        return 0;
      }
      String name1=((SemanticNode)o).getName();
      String name2=((SemanticNode)o1).getName();
      if (name1 == null)       name1="";
      if (name2 == null)       name2="";
      if (name1.equals(name2)) {
        return o.hashCode() < o1.hashCode() ? -1 : 1;
      }
      return name1.compareTo(name2);
    }
  }
);
  while (iterator.hasNext()) {
    sortedRoots.add(iterator.next());
  }
  Iterator iterator1=sortedRoots.iterator();
  while (iterator1.hasNext()) {
    SemanticNode semanticNode=(SemanticNode)iterator1.next();
    SemanticTreeNode treeNode=new SNodeTreeNode(semanticNode);
    add(treeNode);
    initTreeNode(treeNode,semanticNode);
  }
  isInitialized=true;
}
