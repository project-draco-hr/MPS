{
  final JMenu compareWith=new JMenu("Compare With");
  compareWith.setIcon(MPSAction.EMPTY_ICON);
  menu.add(compareWith);
  compareWith.addMenuListener(new MenuListener(){
    public static final int ITEM_LENGTH=60;
    public static final int LEVEL_SIZE=30;
    public void menuDeselected(    MenuEvent e){
    }
    public void menuCanceled(    MenuEvent e){
    }
    public void menuSelected(    MenuEvent e){
      try {
        compareWith.removeAll();
        final VersionControl vcs=model.getVersionControl();
        if (!vcs.isUnderVersionControl()) {
          JMenuItem dummy=new JMenuItem("<NOT VERSIONED>");
          dummy.setIcon(MPSAction.EMPTY_ICON);
          compareWith.add(dummy);
        }
 else {
          List<Revision> revs=vcs.getRevisions();
          JMenu current=compareWith;
          for (          final Revision r : revs) {
            String actionText=r.getRevision() + " " + r.getAuthor()+ " "+ r.getComment();
            if (actionText.length() > ITEM_LENGTH)             actionText=actionText.subSequence(0,ITEM_LENGTH - 3) + "...";
            current.add(new AbstractActionWithEmptyIcon(actionText){
              public void actionPerformed(              ActionEvent e){
                try {
                  SModel m1=model.getSModel();
                  SModel m2=vcs.getRevision(r.getRevision());
                  m2.setNamespace("");
                  m2.setName(r.getRevision());
                  new ModelDiffDialog(m2,m1);
                }
 catch (                Exception ex) {
                  LOG.error(ex);
                }
              }
            }
);
            if (current.getItemCount() >= LEVEL_SIZE) {
              JMenu moreMenu=new JMenu("More...");
              moreMenu.setIcon(MPSAction.EMPTY_ICON);
              current.add(moreMenu);
              current=moreMenu;
            }
          }
        }
      }
 catch (      Exception exc) {
        LOG.error(exc);
      }
    }
  }
);
}
