{
  final JMenu compareWith=new JMenu("Compare With");
  compareWith.setIcon(MPSAction.EMPTY_ICON);
  menu.add(compareWith);
  compareWith.addMenuListener(new MenuListener(){
    public void menuDeselected(    MenuEvent e){
    }
    public void menuCanceled(    MenuEvent e){
    }
    public void menuSelected(    MenuEvent e){
      try {
        compareWith.removeAll();
        final MPSPlugin plugin=MPSPlugin.getInstance();
        final String path=model.getModelFile().getAbsolutePath();
        if (!plugin.isVersionControlPresent(path)) {
          JMenuItem dummy=new JMenuItem("<NOT VERSIONED>");
          dummy.setIcon(MPSAction.EMPTY_ICON);
          compareWith.add(dummy);
        }
 else {
          List<Revision> revs=plugin.getRevisionsFor(path);
          for (          final Revision r : revs) {
            compareWith.add(new AbstractActionWithEmptyIcon(r.myRevision + " " + r.myAuthor+ " "+ r.myComment){
              public void actionPerformed(              ActionEvent e){
                try {
                  SModel m1=model.getSModel();
                  SModel m2=ModelPersistence.readModel(plugin.getContentsFor(path,r.myRevision));
                  new ModelDiffDialog(m1,m2);
                }
 catch (                Exception ex) {
                  LOG.error(ex);
                }
              }
            }
);
          }
        }
      }
 catch (      Exception exc) {
        LOG.error(exc);
      }
    }
  }
);
}
