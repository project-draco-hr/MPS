{
  vcsMenu.removeAll();
  final VersionControl vc=model.getVersionControl();
  if (!vc.isUnderVersionControl()) {
    vcsMenu.add(new AbstractActionWithEmptyIcon("<NO VCS AVAILABLE FOR MODEL>"){
      public void actionPerformed(      ActionEvent e){
      }
    }
);
  }
 else {
    vcsMenu.add(new AbstractActionWithEmptyIcon("Current Revision " + vc.getCurrentRevisionId()){
{
        setEnabled(false);
      }
      public void actionPerformed(      ActionEvent actionEvent){
      }
    }
);
    vcsMenu.addSeparator();
    vcsMenu.add(new AbstractActionWithEmptyIcon("Commit"){
      public void actionPerformed(      ActionEvent e){
        if (!vc.getCurrentRevisionId().equals(vc.getLatestRevisionId())) {
          JOptionPane.showMessageDialog(ProjectPane.this,"Can't commit. You Have to update.");
          return;
        }
        if (!vc.isChanged()) {
          JOptionPane.showMessageDialog(ProjectPane.this,"Can't commit. Model isn't changed.");
          return;
        }
        String message=JOptionPane.showInputDialog("Enter commit message : ");
        if (message == null)         return;
        vc.commit(message);
      }
    }
);
    vcsMenu.add(new AbstractActionWithEmptyIcon("Update"){
      public void actionPerformed(      ActionEvent e){
        vc.update();
      }
    }
);
    vcsMenu.add(new AbstractActionWithEmptyIcon("Checkout"){
      public void actionPerformed(      ActionEvent actionEvent){
        vc.checkout();
      }
    }
);
    vcsMenu.add(new AbstractActionWithEmptyIcon("Show History"){
      public void actionPerformed(      ActionEvent e){
        myIDE.getHistoryView().showHistoryFor(model);
      }
    }
);
  }
}
