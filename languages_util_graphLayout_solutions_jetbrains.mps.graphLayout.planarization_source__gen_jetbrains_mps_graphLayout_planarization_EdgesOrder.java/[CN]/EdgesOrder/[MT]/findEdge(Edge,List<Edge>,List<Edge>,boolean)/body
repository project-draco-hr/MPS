{
  Edge sideEdge;
  if (tryFirst == true) {
    sideEdge=ListSequence.<Edge>fromList(containingList).first();
  }
 else {
    sideEdge=ListSequence.<Edge>fromList(containingList).last();
  }
  if (edge == sideEdge) {
    if (ListSequence.<Edge>fromList(alternativeList).count() > 0) {
      if (tryFirst) {
        return ListSequence.<Edge>fromList(alternativeList).first();
      }
 else {
        return ListSequence.<Edge>fromList(alternativeList).last();
      }
    }
 else {
      if (tryFirst) {
        return ListSequence.<Edge>fromList(containingList).last();
      }
 else {
        return ListSequence.<Edge>fromList(containingList).first();
      }
    }
  }
 else {
    Iterator<Edge> edgeItr;
    if (tryFirst) {
      edgeItr=ListSequence.<Edge>fromList(containingList).reversedList().iterator();
    }
 else {
      edgeItr=ListSequence.<Edge>fromList(containingList).iterator();
    }
    while (edgeItr.hasNext()) {
      Edge cur=edgeItr.next();
      if (cur == edge) {
        return edgeItr.next();
      }
    }
  }
  throw new RuntimeException("findEdge failed with " + edge);
}
