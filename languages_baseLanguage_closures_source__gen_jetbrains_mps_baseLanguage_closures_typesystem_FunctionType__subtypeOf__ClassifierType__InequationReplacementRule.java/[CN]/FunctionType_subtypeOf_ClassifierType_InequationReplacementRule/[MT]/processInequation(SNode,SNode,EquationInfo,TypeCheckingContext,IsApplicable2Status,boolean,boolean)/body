{
  SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
  String errorMsg;
  Iterable<SNode> methods=Classifier_Behavior.call_methods_5292274854859311639(classifier);
  Iterable<SNode> cands=Sequence.fromIterable(methods).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode m){
      return !("equals".equals(SPropertyOperations.getString(m,"name"))) && SPropertyOperations.getBoolean(m,"isAbstract");
    }
  }
);
  Iterator<SNode> it=Sequence.fromIterable(cands).iterator();
  SNode mtd=(it.hasNext() ? it.next() : null);
  if (it.hasNext()) {
    errorMsg=": more than one abstract method";
  }
 else   if (mtd != null) {
    SNode md=Sequence.fromIterable(methods).first();
    if ((int)ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() == (int)ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).count()) {
      SNode retType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md,"returnType",true),supertype);
      if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
{
          SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
          EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1858552893540392470",0,null);
          _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
          typeCheckingContext.createGreaterThanInequality((SNode)retType,(SNode)SLinkOperations.getTarget(subtype,"resultType",true),false,true,_info_12389875345);
        }
      }
{
        Iterator<SNode> fpt_it=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
        Iterator<SNode> mpt_it=ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).iterator();
        SNode fpt_var;
        SNode mpt_var;
        while (fpt_it.hasNext() && mpt_it.hasNext()) {
          fpt_var=fpt_it.next();
          mpt_var=mpt_it.next();
{
            SNode _nodeToCheck_1029348928467=equationInfo.getNodeWithError();
            EquationInfo _info_12389875345=new EquationInfo(_nodeToCheck_1029348928467,null,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","8701449112292740706",0,null);
            _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
            typeCheckingContext.createLessThanInequality((SNode)ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt_var,"type",true),supertype),(SNode)fpt_var,false,true,_info_12389875345);
          }
        }
      }
      return;
    }
 else {
      errorMsg=": wrong parameter number";
    }
  }
 else {
    errorMsg=": no abstract method";
  }
{
    MessageTarget errorTarget=new NodeMessageTarget();
    IErrorReporter _reporter_2309309498=typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(),BehaviorReflection.invokeVirtual(String.class,subtype,"virtual_getPresentation_1213877396640",new Object[]{}) + " is not a subtype of " + BehaviorReflection.invokeVirtual(String.class,supertype,"virtual_getPresentation_1213877396640",new Object[]{})+ errorMsg,"r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)","1202742336483",null,errorTarget);
    HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498,equationInfo);
  }
}
