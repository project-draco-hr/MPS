{
  boolean result_14532009=true;
{
    SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
    String errorMsg=null;
    Iterable<SNode> methods=Classifier_Behavior.call_methods_5292274854859311639(classifier);
    Iterable<SNode> cands=Sequence.fromIterable(methods).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode m){
        return !("equals".equals(SPropertyOperations.getString(m,"name"))) && SPropertyOperations.getBoolean(m,"isAbstract");
      }
    }
);
    Iterator<SNode> it=Sequence.fromIterable(cands).iterator();
    SNode mtd=(it.hasNext() ? it.next() : null);
    if (it.hasNext()) {
      errorMsg=": more than one abstract method";
    }
 else     if (mtd != null) {
      if (ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() == ListSequence.fromList(SLinkOperations.getTargets(mtd,"parameter",true)).count()) {
        SNode retType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mtd,"returnType",true),supertype);
        if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(subtype,"resultType",true),"jetbrains.mps.baseLanguage.structure.VoidType")) {
            errorMsg=": no result type in function type";
          }
          if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.WildCardType"))) {
            result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)SLinkOperations.getTarget(subtype,"resultType",true),(SNode)retType,true);
          }
        }
{
          Iterator<SNode> fpt_it=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
          Iterator<SNode> mpt_it=ListSequence.fromList(SLinkOperations.getTargets(mtd,"parameter",true)).iterator();
          SNode fpt_var;
          SNode mpt_var;
          while (fpt_it.hasNext() && mpt_it.hasNext()) {
            fpt_var=fpt_it.next();
            mpt_var=mpt_it.next();
            result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt_var,"type",true),supertype),(SNode)fpt_var,true);
          }
        }
        if (errorMsg == null) {
          return result_14532009;
        }
      }
 else {
        errorMsg=": wrong parameter number";
      }
    }
 else {
      errorMsg=": no abstract method";
    }
    result_14532009=false;
  }
  return result_14532009;
}
