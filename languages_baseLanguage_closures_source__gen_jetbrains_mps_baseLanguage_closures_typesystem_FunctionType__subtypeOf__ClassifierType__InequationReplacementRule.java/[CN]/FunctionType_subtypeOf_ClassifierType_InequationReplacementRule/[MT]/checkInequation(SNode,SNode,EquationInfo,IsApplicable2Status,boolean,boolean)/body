{
  boolean result_14532009=true;
{
    SNode classifier=SLinkOperations.getTarget(supertype,"classifier",false);
    String errorMsg;
    List<SNode> methods=SLinkOperations.getTargets(classifier,"method",true);
    Iterable<SNode> cands=ListSequence.fromList(methods).where(new IWhereFilter<SNode>(){
      public boolean accept(      SNode m){
        return !("equals".equals(SPropertyOperations.getString(m,"name"))) && SPropertyOperations.getBoolean(m,"isAbstract");
      }
    }
);
    Iterator<SNode> it=Sequence.fromIterable(cands).iterator();
    SNode mtd=(it.hasNext() ? it.next() : null);
    if (it.hasNext()) {
      errorMsg=": more than one abstract method";
    }
 else     if (mtd != null) {
      SNode md=ListSequence.fromList(methods).getElement(0);
      if ((int)ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).count() == (int)ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).count()) {
        SNode retType=ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(md,"returnType",true),supertype);
        if (!(SNodeOperations.isInstanceOf(retType,"jetbrains.mps.baseLanguage.structure.VoidType"))) {
          result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)SLinkOperations.getTarget(subtype,"resultType",true),(SNode)retType,true);
        }
{
          Iterator<SNode> fpt_it=ListSequence.fromList(SLinkOperations.getTargets(subtype,"parameterType",true)).iterator();
          Iterator<SNode> mpt_it=ListSequence.fromList(SLinkOperations.getTargets(md,"parameter",true)).iterator();
          SNode fpt_var;
          SNode mpt_var;
          while (fpt_it.hasNext() && mpt_it.hasNext()) {
            fpt_var=fpt_it.next();
            mpt_var=mpt_it.next();
            result_14532009=result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode)ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mpt_var,"type",true),supertype),(SNode)fpt_var,true);
          }
        }
        return result_14532009;
      }
 else {
        errorMsg=": wrong parameter number";
      }
    }
 else {
      errorMsg=": no abstract method";
    }
    result_14532009=false;
  }
  return result_14532009;
}
