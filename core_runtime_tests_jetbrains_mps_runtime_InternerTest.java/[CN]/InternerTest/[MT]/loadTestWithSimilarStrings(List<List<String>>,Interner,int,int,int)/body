{
  final long start=System.currentTimeMillis();
  final long seed=System.currentTimeMillis();
  runInParallel(maxThreads,new Runnable(){
    public void run(){
      Random rnd=new Random(seed);
      StringBuilder sb=new StringBuilder();
      List<String> list=new ArrayList<String>();
      listOfLists.add(list);
      for (int count=maxObjects * 2; count > 0; --count) {
        sb.setLength(0);
        for (int size=Math.max(5,Math.min(200,(int)(rnd.nextGaussian() * 5 + MEAN_LENGTH))); size > 0; --size) {
          sb.append((char)(rnd.nextInt(127 - 32) + 32));
        }
        list.add((sb.toString()));
      }
      rnd=new Random();
      for (int count=maxRepetitions; count > 0; --count) {
        String s=list.get(rnd.nextInt(list.size()));
        Assert.assertEquals(s,interner.intern(s));
      }
    }
  }
);
  return System.currentTimeMillis() - start;
}
