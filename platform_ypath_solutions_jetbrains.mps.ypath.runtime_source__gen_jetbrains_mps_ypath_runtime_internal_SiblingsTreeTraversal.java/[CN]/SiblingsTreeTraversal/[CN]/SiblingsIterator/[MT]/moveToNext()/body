{
  this.nextNode=null;
  this.hasNextNode=false;
  do {
    while (!(hasCurrentSource) && sourceIterator.hasNext()) {
      this.currentSource=sourceIterator.next();
      if (!(getSiblingFilter().accept(currentSource))) {
        continue;
      }
      this.hasCurrentSource=true;
      this.currentParentsIterator=null;
      this.currentSiblingsIterator=null;
      break;
    }
    if (currentParentsIterator == null) {
      currentParentsIterator=getOppositeContents(currentSource).iterator();
    }
    if (currentSiblingsIterator == null || !(currentSiblingsIterator.hasNext())) {
      if (currentParentsIterator.hasNext()) {
        currentSiblingsIterator=getDirectContents(currentParentsIterator.next()).iterator();
      }
 else {
        currentSiblingsIterator=null;
      }
    }
    while (currentSiblingsIterator != null && currentSiblingsIterator.hasNext()) {
      T sibling=currentSiblingsIterator.next();
      if (!(getSiblingFilter().accept(sibling,currentSource))) {
        continue;
      }
      this.nextNode=sibling;
      this.hasNextNode=true;
      return;
    }
    this.hasCurrentSource=false;
  }
 while (sourceIterator.hasNext());
}
