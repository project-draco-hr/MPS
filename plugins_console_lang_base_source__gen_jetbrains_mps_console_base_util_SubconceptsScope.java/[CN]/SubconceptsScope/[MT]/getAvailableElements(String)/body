{
  Iterable<SNode> subConcepts=ListSequence.fromList(SConceptOperations.getAllSubConcepts(concept,model)).select(new ISelector<SAbstractConcept,SNode>(){
    public SNode select(    SAbstractConcept it){
      return SNodeOperations.asNode(it);
    }
  }
);
  if (prefix == null || prefix.isEmpty()) {
    return subConcepts;
  }
  return Sequence.fromIterable(subConcepts).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      String name=getName(it);
      return name != null && name.startsWith(prefix);
    }
  }
);
}
