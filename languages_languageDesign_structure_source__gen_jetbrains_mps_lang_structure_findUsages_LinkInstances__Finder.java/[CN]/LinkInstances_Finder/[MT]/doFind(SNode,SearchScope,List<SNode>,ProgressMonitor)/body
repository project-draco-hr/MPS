{
  try {
    Set<String> roles=SetSequence.fromSet(new HashSet<String>());
    SNode curNode=node;
    do {
      SetSequence.fromSet(roles).addElement(SPropertyOperations.getString(curNode,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599776563l,"role")));
      curNode=SLinkOperations.getTarget(curNode,MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599698500l,"specializedLink"));
    }
 while (curNode != null);
    SNode conceptDeclaration=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l,-8968368868337559369l),1169125787135l,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),false,false);
    if ((conceptDeclaration == null)) {
      return;
    }
    boolean isChild=SPropertyOperations.hasValue(node,MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l,-8968368868337559369l),1071489288298l,1071599937831l,"metaClass"),"aggregation","reference");
    for (    SNode instance : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder",conceptDeclaration,scope,monitor))) {
      for (      String role : roles) {
        if (isChild) {
          for (          SNode child : Sequence.fromIterable(instance.getChildren(role))) {
            ListSequence.fromList(_results).addElement(child);
          }
        }
 else {
          SReference reference=instance.getReference(role);
          if (reference != null) {
            ListSequence.fromList(_results).addElement(reference.getSourceNode());
          }
        }
      }
    }
  }
  finally {
    monitor.done();
  }
}
