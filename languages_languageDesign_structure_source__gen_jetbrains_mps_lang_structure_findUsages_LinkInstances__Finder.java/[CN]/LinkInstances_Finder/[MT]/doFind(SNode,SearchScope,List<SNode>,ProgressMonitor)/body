{
  try {
    Set<String> roles=SetSequence.fromSet(new HashSet<String>());
    SNode curNode=node;
    do {
      SetSequence.fromSet(roles).addElement(SPropertyOperations.getString(curNode,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98052f333L,"role")));
      curNode=SLinkOperations.getTarget(curNode,MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf98051c244L,"specializedLink"));
    }
 while (curNode != null);
    SNode conceptDeclaration=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getConcept(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0x1103553c5ffL,"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"),false,false);
    if ((conceptDeclaration == null)) {
      return;
    }
    boolean isChild=SPropertyOperations.hasValue(node,MetaAdapterFactory.getProperty(0xc72da2b97cce4447L,0x8389f407dc1158b7L,0xf979bd086aL,0xf980556927L,"metaClass"),"aggregation","reference");
    for (    SNode instance : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder",conceptDeclaration,scope,monitor))) {
      for (      String role : roles) {
        if (isChild) {
          for (          SNode child : Sequence.fromIterable(instance.getChildren(role))) {
            ListSequence.fromList(_results).addElement(child);
          }
        }
 else {
          SReference reference=instance.getReference(role);
          if (reference != null) {
            ListSequence.fromList(_results).addElement(reference.getSourceNode());
          }
        }
      }
    }
  }
  finally {
    monitor.done();
  }
}
