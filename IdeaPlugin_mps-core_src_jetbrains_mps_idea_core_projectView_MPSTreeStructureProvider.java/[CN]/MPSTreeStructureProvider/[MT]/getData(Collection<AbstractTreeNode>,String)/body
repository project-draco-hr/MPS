{
  if (selected == null) {
    return null;
  }
  if (MPSCommonDataKeys.CONTEXT_MODEL.is(dataName)) {
    if (selected.size() != 1)     return null;
    AbstractTreeNode node=selected.iterator().next();
    IFile modelFile=getModelFile(node);
    if (modelFile == null)     return null;
    return SModelRepository.getInstance().findModel(modelFile);
  }
  if (MPSCommonDataKeys.MODEL.is(dataName)) {
    if (selected.size() != 1)     return null;
    AbstractTreeNode node=selected.iterator().next();
    if (!(node instanceof PsiFileNode))     return null;
    IFile modelFile=getModelFile(node);
    if (modelFile == null)     return null;
    return SModelRepository.getInstance().findModel(modelFile);
  }
  if (MPSDataKeys.MODEL_FILES.is(dataName)) {
    return getModelFiles(selected);
  }
  if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataName)) {
    List<MPSProjectViewNode> projectViewNodes=new ArrayList<MPSProjectViewNode>();
    for (    AbstractTreeNode treeNode : selected) {
      if (treeNode instanceof MPSProjectViewNode) {
        projectViewNodes.add((MPSProjectViewNode)treeNode);
      }
    }
    if (!projectViewNodes.isEmpty()) {
      return new MPSProjectViewNodeDeleteProvider(projectViewNodes);
    }
  }
  return null;
}
