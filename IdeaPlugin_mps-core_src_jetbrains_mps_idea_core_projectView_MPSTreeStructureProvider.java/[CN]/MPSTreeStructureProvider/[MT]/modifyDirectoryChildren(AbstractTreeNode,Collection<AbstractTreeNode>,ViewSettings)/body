{
  List<AbstractTreeNode> updatedChildren=null;
  MPSPsiProvider mpsPsiProvider=MPSPsiProvider.getInstance(treeNode.getProject());
  for (  AbstractTreeNode child : children) {
    if (child instanceof PsiFileNode) {
      PsiFile value=((PsiFileNode)child).getValue();
      if (value instanceof FileSourcePsiFile) {
        SModelReference modelReference=((FileSourcePsiFile)value).getModelReference();
        MPSPsiModel psiModel=mpsPsiProvider.getPsi(modelReference);
        if (updatedChildren == null)         updatedChildren=new ArrayList<AbstractTreeNode>(children);
        int idx=updatedChildren.indexOf(child);
        updatedChildren.remove(idx);
        updatedChildren.add(idx,new MPSPsiModelTreeNode(treeNode.getProject(),psiModel,settings));
      }
 else       if (value instanceof MPSPsiRootNode) {
        if (updatedChildren == null)         updatedChildren=new ArrayList<AbstractTreeNode>(children);
        int idx=updatedChildren.indexOf(child);
        updatedChildren.remove(idx);
        updatedChildren.add(idx,new MPSPsiElementTreeNode(treeNode.getProject(),(MPSPsiRootNode)value,settings));
      }
    }
 else     if (child instanceof PsiDirectoryNode) {
      for (      AbstractTreeNode innerChild : ((PsiDirectoryNode)child).getChildren()) {
        if (!(innerChild instanceof PsiFileNode) || !(((PsiFileNode)innerChild).getValue() instanceof FilePerRootModelPsiFile))         continue;
        PsiFile value=((PsiFileNode)innerChild).getValue();
        SModelReference modelReference=((FileSourcePsiFile)value).getModelReference();
        MPSPsiModel psiModel=mpsPsiProvider.getPsi(modelReference);
        if (updatedChildren == null)         updatedChildren=new ArrayList<AbstractTreeNode>(children);
        int idx=updatedChildren.indexOf(child);
        updatedChildren.remove(idx);
        updatedChildren.add(idx,new PsiDirectoryNode(treeNode.getProject(),((PsiDirectoryNode)child).getValue(),settings){
          @Override public boolean canNavigate(){
            return true;
          }
          @Override public String getNavigateActionText(          boolean focusEditor){
            return super.getNavigateActionText(focusEditor);
          }
          @Override public void navigate(          boolean requestFocus){
            super.navigate(requestFocus);
          }
        }
);
        break;
      }
    }
  }
  return updatedChildren != null ? updatedChildren : children;
}
