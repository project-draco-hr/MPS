{
  final Ref<Collection<AbstractTreeNode>> result=new Ref<Collection<AbstractTreeNode>>(children);
  ProjectHelper.getProjectRepository(treeNode.getProject()).getModelAccess().runReadAction(new Runnable(){
    @Override public void run(){
      List<AbstractTreeNode> updatedChildren=null;
      final MPSPsiProvider mpsPsiProvider=MPSPsiProvider.getInstance(treeNode.getProject());
      for (      final AbstractTreeNode child : children) {
        if (child instanceof PsiFileNode) {
          PsiFile value=((PsiFileNode)child).getValue();
          final SModel sModel=SModelFileTracker.getInstance().findModel(VirtualFileUtils.toIFile(((PsiFileNode)child).getVirtualFile()));
          if (sModel != null) {
            if (updatedChildren == null)             updatedChildren=new ArrayList<AbstractTreeNode>(children);
            int idx=updatedChildren.indexOf(child);
            updatedChildren.remove(idx);
            updatedChildren.add(idx,new MPSPsiModelTreeNode(treeNode.getProject(),mpsPsiProvider.getPsi(sModel),settings));
            continue;
          }
          if (value instanceof FileSourcePsiFile) {
            SModelReference modelReference=((FileSourcePsiFile)value).getModelReference();
            MPSPsiModel psiModel=mpsPsiProvider.getPsi(modelReference);
            if (updatedChildren == null)             updatedChildren=new ArrayList<AbstractTreeNode>(children);
            int idx=updatedChildren.indexOf(child);
            updatedChildren.remove(idx);
            updatedChildren.add(idx,new MPSPsiModelTreeNode(treeNode.getProject(),psiModel,settings));
          }
 else           if (value instanceof MPSPsiRootNode) {
            if (updatedChildren == null)             updatedChildren=new ArrayList<AbstractTreeNode>(children);
            int idx=updatedChildren.indexOf(child);
            updatedChildren.remove(idx);
            updatedChildren.add(idx,new MPSPsiElementTreeNode(treeNode.getProject(),(MPSPsiRootNode)value,settings));
          }
        }
 else         if (child instanceof PsiDirectoryNode) {
          final SModel perRootModel=SModelFileTracker.getInstance().findModel(VirtualFileUtils.toIFile(((PsiDirectoryNode)child).getVirtualFile()));
          if (perRootModel != null) {
            if (updatedChildren == null)             updatedChildren=new ArrayList<AbstractTreeNode>(children);
            int idx=updatedChildren.indexOf(child);
            updatedChildren.remove(idx);
            updatedChildren.add(idx,new PsiDirectoryNode(treeNode.getProject(),((PsiDirectoryNode)child).getValue(),settings){
              @Override public boolean canNavigate(){
                return true;
              }
              @Override public String getNavigateActionText(              boolean focusEditor){
                return MPSBundle.message("open.model.properties.action");
              }
              @Override public void navigate(              boolean requestFocus){
                MPSPropertiesConfigurable configurable=new ModelPropertiesConfigurable(perRootModel,ProjectHelper.toMPSProject(myProject),true);
                final SingleConfigurableEditor dialog=new SingleConfigurableEditor(myProject,configurable);
                configurable.setParentForCallBack(dialog);
                SwingUtilities.invokeLater(new Runnable(){
                  @Override public void run(){
                    dialog.show();
                  }
                }
);
              }
              @Override public Collection<AbstractTreeNode> getChildrenImpl(){
                ArrayList<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
                children.addAll(super.getChildrenImpl());
                for (                PsiElement psiElement : MPSPsiProvider.getInstance(getProject()).getPsi(perRootModel).getChildren()) {
                  children.add(new MPSPsiElementTreeNode(treeNode.getProject(),(MPSPsiRootNode)psiElement,settings));
                }
                return children;
              }
            }
);
          }
        }
      }
      if (updatedChildren != null) {
        result.set(updatedChildren);
      }
    }
  }
);
  return result.get();
}
