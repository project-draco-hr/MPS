{
  final IFile modelFile=getModelFile(parent);
  if (!(parent instanceof PsiFileNode || parent instanceof PsiDirectoryNode))   return children;
  if (modelFile == null) {
    final List<AbstractTreeNode> modifiedChildren=new ArrayList<AbstractTreeNode>();
    for (    AbstractTreeNode childNode : children) {
      IFile childModelFile=getModelFile(childNode);
      if (childModelFile != null && childNode instanceof PsiFileNode) {
        modifiedChildren.add(new MPSProjectViewModelPsiFile((PsiFileNode)childNode,SModelFileTracker.getInstance().findModel(childModelFile)));
        continue;
      }
      modifiedChildren.add(childNode);
    }
    return modifiedChildren;
  }
  final List<AbstractTreeNode> newChildren=new ArrayList<AbstractTreeNode>(children);
  ModelAccess.instance().runReadAction(new Runnable(){
    public void run(){
      SModelDescriptor descr=SModelFileTracker.getInstance().findModel(modelFile);
      if (descr == null)       return;
      SModel model=descr.getSModel();
      if (model == null)       return;
      for (      SNode root : model.roots()) {
        newChildren.add(new MPSProjectViewNode(parent.getProject(),root,settings));
      }
    }
  }
);
  return newChildren;
}
