{
  return new IJob.Stub(){
    @Override public IResult execute(    final Iterable<IResource> rawInput,    final IJobMonitor monitor,    final IPropertiesAccessor pa,    @NotNull final ProgressMonitor progressMonitor){
      Iterable<IResource> _output_7crsqe_a0a=null;
      final Iterable<GResource> input=(Iterable<GResource>)(Iterable)rawInput;
switch (0) {
case 0:
        progressMonitor.start("Printing Images",5);
      try {
        progressMonitor.step("Validating input");
        Iterable<GResource> resourcesWithOutput=Sequence.fromIterable(input).where(new IWhereFilter<GResource>(){
          public boolean accept(          GResource it){
            return SModuleOperations.getOutputPathFor(it.model()) != null && it.status().getOutputModel() != null;
          }
        }
);
        progressMonitor.advance(1);
        final SRepository repository=Target_configure.vars(pa.global()).makeSession().getProject().getRepository();
        final Map<IFile,List<Tuples._2<String,SNodeReference>>> folder2PrintData=MapSequence.fromMap(new HashMap<IFile,List<Tuples._2<String,SNodeReference>>>());
        repository.getModelAccess().runReadAction(new Runnable(){
          public void run(){
            progressMonitor.step("Collecting models to print");
            Iterable<Tuples._2<SModel,SModel>> allModels=Sequence.fromIterable(input).select(new ISelector<GResource,Tuples._2<SModel,SModel>>(){
              public Tuples._2<SModel,SModel> select(              GResource gResource){
                SModel inputModel=gResource.model();
                SModel outputModel=gResource.status().getOutputModel();
                return MultiTuple.<SModel,SModel>from(inputModel,outputModel);
              }
            }
);
            progressMonitor.advance(1);
            ProgressMonitor collectingNodesMonitor=progressMonitor.subTask(1);
            collectingNodesMonitor.start("Collecting nodes to print",Sequence.fromIterable(allModels).count());
            for (            Tuples._2<SModel,SModel> modelsPair : Sequence.fromIterable(allModels)) {
              collectingNodesMonitor.step(SModelOperations.getModelName(modelsPair._0()));
              String output=SModuleOperations.getOutputPathFor(modelsPair._0());
              IFile outputRoot=Target_make.vars(pa.global()).pathToFile().invoke(output);
              IFile outputDir=FileGenerationUtil.getDefaultOutputDir(modelsPair._0(),outputRoot);
              if (!(MapSequence.fromMap(folder2PrintData).containsKey(outputDir))) {
                MapSequence.fromMap(folder2PrintData).put(outputDir,ListSequence.fromList(new ArrayList<Tuples._2<String,SNodeReference>>()));
              }
              for (              SNode imageGenerator : ListSequence.fromList(SModelOperations.roots(modelsPair._1(),MetaAdapterFactory.getConcept(0x1839bec5cea641dfL,0xb9e0c405ff35c41eL,0x20c051df23a9488cL,"jetbrains.mps.lang.editor.imageGen.structure.ImageGenerator")))) {
                SNodeId nodeId=PersistenceFacade.getInstance().createNodeId(SPropertyOperations.getString(imageGenerator,MetaAdapterFactory.getProperty(0x1839bec5cea641dfL,0xb9e0c405ff35c41eL,0x20c051df23a9488cL,0x2d0ad2528389ad26L,"id")));
                SNode node=modelsPair._0().getNode(nodeId);
                ListSequence.fromList(MapSequence.fromMap(folder2PrintData).get(outputDir)).addElement(MultiTuple.<String,SNodeReference>from(SPropertyOperations.getString(imageGenerator,MetaAdapterFactory.getProperty(0x1839bec5cea641dfL,0xb9e0c405ff35c41eL,0x20c051df23a9488cL,0x20c051df23a9da87L,"fileName")) + ".png",node.getReference()));
              }
              collectingNodesMonitor.advance(1);
            }
            collectingNodesMonitor.done();
          }
        }
);
        List<IDelta> deltaList=ListSequence.fromList(new ArrayList<IDelta>());
        List<Tuples._2<IFile,byte[]>> fileContentsToWrite=ListSequence.fromList(new ArrayList<Tuples._2<IFile,byte[]>>());
        ProgressMonitor printingFoldersMonitor=progressMonitor.subTask(1);
        printingFoldersMonitor.start("Printing folders",MapSequence.fromMap(folder2PrintData).count());
        for (        IFile folder : SetSequence.fromSet(MapSequence.fromMap(folder2PrintData).keySet())) {
          FilesDelta fd=new FilesDelta(folder);
          ListSequence.fromList(deltaList).addElement(fd);
          new StaleFilesCollector(folder).updateDelta(fd);
          ProgressMonitor printFilesMonitor=printingFoldersMonitor.subTask(1);
          printFilesMonitor.start("Printing files",ListSequence.fromList(MapSequence.fromMap(folder2PrintData).get(folder)).count());
          for (          Tuples._2<String,SNodeReference> printData : ListSequence.fromList(MapSequence.fromMap(folder2PrintData).get(folder))) {
            printFilesMonitor.step(printData._0());
            PrintNodeRunnable printNodeRunnable=new PrintNodeRunnable(printData._1(),repository);
            repository.getModelAccess().runWriteInEDT(printNodeRunnable);
            if (printNodeRunnable.waitForExecution()) {
              IFile outputFile=folder.getDescendant(printData._0());
              ListSequence.fromList(fileContentsToWrite).addElement(MultiTuple.<IFile,byte[]>from(outputFile,printNodeRunnable.getResult()));
              fd.written(outputFile);
            }
 else {
              monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(printNodeRunnable.getErrorMessage())));
            }
            printFilesMonitor.advance(1);
          }
          printFilesMonitor.done();
        }
        printingFoldersMonitor.done();
        _output_7crsqe_a0a=Sequence.fromIterable(_output_7crsqe_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltaList))));
        ProgressMonitor saveFilesMonitor=progressMonitor.subTask(1);
        saveFilesMonitor.start("Saving images",ListSequence.fromList(fileContentsToWrite).count());
        for (        Tuples._2<IFile,byte[]> fileContent : ListSequence.fromList(fileContentsToWrite)) {
          saveFilesMonitor.step(fileContent._0().getName());
          final IFile fileToWrite=fileContent._0();
          final byte[] bytes=fileContent._1();
          if (!(FileSystem.getInstance().runWriteTransaction(new Runnable(){
            public void run(){
              OutputStream stream=null;
              try {
                stream=fileToWrite.openOutputStream();
                stream.write(bytes);
              }
 catch (              IOException e) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(e.toString())));
              }
 finally {
                if (stream != null) {
                  try {
                    stream.close();
                  }
 catch (                  IOException ignored) {
                  }
                }
              }
            }
          }
))) {
            monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to save files")));
            return new IResult.FAILURE(_output_7crsqe_a0a);
          }
          saveFilesMonitor.advance(1);
        }
        saveFilesMonitor.done();
      }
  finally {
        progressMonitor.done();
      }
default :
    return new IResult.SUCCESS(_output_7crsqe_a0a);
}
}
}
;
}
