{
  IdeaPluginDescriptor mpsCorePlugin=PluginManager.getPlugin(PluginManager.getPluginByClassName(getClass().getName()));
  if (mpsCorePlugin == null) {
    return;
  }
  Set<IdeaPluginDescriptor> mpsPlugins=new HashSet<IdeaPluginDescriptor>();
  mpsPlugins.add(mpsCorePlugin);
  boolean changed;
  do {
    changed=false;
    for (    IdeaPluginDescriptor pluginDescriptor : PluginManager.getPlugins()) {
      if (mpsPlugins.contains(pluginDescriptor)) {
        continue;
      }
      for (      PluginId dependentId : pluginDescriptor.getDependentPluginIds()) {
        if (mpsPlugins.contains(PluginManager.getPlugin(dependentId))) {
          mpsPlugins.add(pluginDescriptor);
          changed=true;
          break;
        }
      }
    }
  }
 while (changed);
  List<IdeaPluginDescriptor> sortedMpsPlugins=new ArrayList<IdeaPluginDescriptor>(mpsPlugins);
  Collections.sort(sortedMpsPlugins,new Comparator<IdeaPluginDescriptor>(){
    @Override public int compare(    IdeaPluginDescriptor o1,    IdeaPluginDescriptor o2){
      return o1.getPluginId().getIdString().compareTo(o2.getPluginId().getIdString());
    }
  }
);
  for (  IdeaPluginDescriptor descriptor : sortedMpsPlugins) {
    String pluginId=descriptor.getPluginId().getIdString();
    String macro=MPS_PLUGIN_MACRO_PREFIX + pluginId;
    String value=myPathMacros.getValue(macro);
    if (value != null) {
    }
 else {
      String path=descriptor.getPath().getPath();
      myPathMacros.setMacro(macro,path);
      myPluginMacro.put(macro,path);
    }
  }
}
