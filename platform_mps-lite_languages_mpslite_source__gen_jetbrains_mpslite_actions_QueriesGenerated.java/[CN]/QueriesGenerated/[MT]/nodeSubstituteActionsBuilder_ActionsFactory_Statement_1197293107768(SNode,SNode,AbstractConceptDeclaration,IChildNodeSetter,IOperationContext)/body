{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration conceptToAdd=SModelUtil_new.findConceptDeclaration("jetbrains.mpslite.structure.AddEquationStatement",operationContext.getScope());
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,parentNode,currentTargetNode,childSetter,operationContext.getScope());
    result.addAll(defaultActions);
  }
{
    ConceptDeclaration conceptToAdd=SModelUtil_new.findConceptDeclaration("jetbrains.mpslite.structure.AddInequationStatement",operationContext.getScope());
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,parentNode,currentTargetNode,childSetter,operationContext.getScope());
    result.addAll(defaultActions);
  }
{
    ConceptDeclaration conceptToAdd=SModelUtil_new.findConceptDeclaration("jetbrains.mpslite.structure.AddComparableConstraintStatement",operationContext.getScope());
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,parentNode,currentTargetNode,childSetter,operationContext.getScope());
    result.addAll(defaultActions);
  }
{
    ConceptDeclaration conceptToAdd=SModelUtil_new.findConceptDeclaration("jetbrains.mpslite.structure.ReportErrorStatement",operationContext.getScope());
    List<INodeSubstituteAction> defaultActions=ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd,parentNode,currentTargetNode,childSetter,operationContext.getScope());
    result.addAll(defaultActions);
  }
  return result;
}
