{
  List<INodeSubstituteAction> result=new ArrayList<INodeSubstituteAction>();
{
    ConceptDeclaration concept=SModelUtil_new.findConceptDeclaration("null",operationContext.getScope());
    result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept),sourceNode){
      public SNode doSubstitute(      String pattern){
        SNode result=SModelOperations.createNewNode(model,"jetbrains.mpslite.structure.ConceptWhereOperation",null);
        SNode expr=SModelOperations.createNewNode(model,"jetbrains.mps.ypath.structure.TreePathOperationExpression",null);
        SNodeOperations.replaceWithAnother(sourceNode,expr);
        SLinkOperations.setTarget(expr,"expression",sourceNode,true);
        SLinkOperations.setTarget(expr,"operation",result,true);
        return expr;
      }
      public String getMatchingText(      String pattern){
        return ".isInstanceOf";
      }
    }
);
  }
  return result;
}
