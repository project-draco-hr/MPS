{
  ModelAccess.assertLegalRead();
  List<String> errors=new ArrayList<String>();
  if (myModel instanceof TransientSModel) {
    return errors;
  }
  if (jetbrains.mps.util.SNodeOperations.isModelDisposed(myModel)) {
    return errors;
  }
  if (myModel instanceof InvalidSModel) {
    Collection<IMessage> problems=((InvalidSModel)myModel).getProblems();
    if (problems != null) {
      for (      IMessage m : problems) {
        if (m.getKind() == MessageKind.ERROR) {
          errors.add(m.getText());
        }
      }
    }
    if (errors.isEmpty()) {
      errors.add("Couldn't read model.");
    }
    return errors;
  }
  for (  SModelReference reference : SModelOperations.getImportedModelUIDs(myModel)) {
    if (scope.getModelDescriptor(reference) == null) {
      errors.add("Can't find model: " + reference.getLongName());
    }
  }
  List<ModuleReference> langsToCheck=new ArrayList<ModuleReference>();
  langsToCheck.addAll(IterableUtil.asCollection(myModel.getModelDepsManager().getAllImportedLanguages()));
  langsToCheck.addAll(((ABCDE)myModel).engagedOnGenerationLanguages());
  for (  ModuleReference lang : langsToCheck) {
    if (scope.getLanguage(lang) == null) {
      errors.add("Can't find language: " + lang.getModuleFqName());
    }
  }
  for (  ModuleReference devKit : ((ABCDE)myModel).importedDevkits()) {
    if (scope.getDevKit(devKit) == null) {
      errors.add("Can't find devkit: " + devKit.getModuleFqName());
    }
  }
  return errors;
}
