{
  List<SNode> declAncestors=SNodeOperations.getAncestors(declaration,null,false);
  ListSequence.fromList(declAncestors).addElement(declaration);
  SNode commonList=SNodeOperations.getAncestor(node,"jetbrains.mps.baseLanguage.structure.StatementList",false,false);
  while ((commonList != null) && !(ListSequence.fromList(declAncestors).contains(commonList))) {
    commonList=SNodeOperations.getAncestor(commonList,"jetbrains.mps.baseLanguage.structure.StatementList",false,false);
  }
  if ((commonList != null)) {
    SNode firstAncestor=null;
    for (    SNode statement : ListSequence.fromList(SLinkOperations.getTargets(commonList,"statement",true))) {
      List<SNode> nodeAncestors=SNodeOperations.getAncestors(node,null,false);
      if (ListSequence.fromList(declAncestors).contains(statement) || ListSequence.fromList(nodeAncestors).contains(statement)) {
        firstAncestor=statement;
        break;
      }
    }
    if (firstAncestor != declaration) {
      SNodeOperations.insertPrevSiblingChild(firstAncestor,SNodeOperations.detachNode(declaration));
    }
  }
}
