{
  List<SNode> ancestors=SNodeOperations.getNodeAncestors(node,null,false);
  SNode statementListContainer=SNodeOperations.getNodeAncestor(node,MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11750ef8265L,"jetbrains.mps.baseLanguage.structure.IStatementListContainer"),false,false);
  SNode metaContainer=ListSequence.fromList(ancestors).findFirst(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return ((int)(Integer)BHReflection.invoke(it,SMethodTrimmedId.create("getMetaLevel",null,"3t0v3yFOD1A"))) != ((int)(Integer)BHReflection.invoke(node,SMethodTrimmedId.create("getMetaLevel",null,"3t0v3yFOD1A")));
    }
  }
);
  int statementListContainerIndex=ListSequence.fromList(ancestors).indexOf(statementListContainer);
  int metaContainerIndex=ListSequence.fromList(ancestors).indexOf(metaContainer);
  if (statementListContainerIndex >= 0 && metaContainerIndex >= 0) {
    ancestors=ListSequence.fromList(ancestors).take(Math.min(statementListContainerIndex,metaContainerIndex)).toListSequence();
  }
 else   if (statementListContainerIndex < 0 && metaContainerIndex >= 0) {
    ancestors=ListSequence.fromList(ancestors).take(metaContainerIndex).toListSequence();
  }
 else   if (statementListContainerIndex >= 0 && metaContainerIndex < 0) {
    ancestors=ListSequence.fromList(ancestors).take(statementListContainerIndex).toListSequence();
  }
  return Sequence.fromIterable(SNodeOperations.ofConcept(ancestors,MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xf8cc56b200L,"jetbrains.mps.baseLanguage.structure.StatementList"))).last();
}
