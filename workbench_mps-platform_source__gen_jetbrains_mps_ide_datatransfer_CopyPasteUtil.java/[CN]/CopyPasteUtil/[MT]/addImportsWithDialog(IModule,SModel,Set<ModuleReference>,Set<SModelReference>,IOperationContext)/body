{
  if (targetModel.getModelDescriptor().getModule() == null) {
    return null;
  }
  final List<ModuleReference> additionalLanguages=new ArrayList<ModuleReference>();
  final List<SModelReference> additionalModels=new ArrayList<SModelReference>();
  ModelAccess.instance().runReadAction(new Runnable(){
    @Override public void run(){
      List<SModelReference> allImportedModels=new ArrayList<SModelReference>();
      for (      SModelDescriptor sm : SModelOperations.allImportedModels(targetModel,context.getScope())) {
        allImportedModels.add(sm.getSModelReference());
      }
      for (      SModelReference modelReference : necessaryImports) {
        if (modelReference != null && !((allImportedModels.contains(modelReference))) && !((targetModel.getReference().equals(modelReference)))) {
          additionalModels.add(modelReference);
        }
      }
      necessaryImports.retainAll(additionalModels);
      for (      ModuleReference moduleReference : necessaryLanguages) {
        if (!(SModelOperations.hasLanguage(targetModel,moduleReference))) {
          additionalLanguages.add(moduleReference);
        }
      }
      necessaryLanguages.retainAll(additionalLanguages);
    }
  }
);
  if (necessaryImports.isEmpty() && necessaryLanguages.isEmpty()) {
    return null;
  }
  AddRequiredImportsDialog dialog=new AddRequiredImportsDialog(ProjectHelper.toIdeaProject(context.getProject()),necessaryImports.toArray(new SModelReference[necessaryImports.size()]),necessaryLanguages.toArray(new ModuleReference[necessaryLanguages.size()]));
  dialog.show();
  if (dialog.isOK()) {
    return addImports(context.getProject(),targetModel,dialog.getSelectedLanguages(),dialog.getSelectedImports());
  }
 else {
    return null;
  }
}
