{
{
    SAbstractConcept cncpt=c;
    Integer preIndex=indices_lpa09p_a0cb.get(cncpt);
    int switchIndex=(preIndex == null ? -1 : preIndex);
switch (switchIndex) {
case 0:
      if (true) {
        return props_XmlAttribute;
      }
    break;
case 1:
  if (true) {
    return props_XmlBaseAttribute;
  }
break;
case 2:
if (true) {
return props_XmlBaseElement;
}
break;
case 3:
if (true) {
return props_XmlBasePrologElement;
}
break;
case 4:
if (true) {
return props_XmlCDATA;
}
break;
case 5:
if (true) {
return props_XmlCharRef;
}
break;
case 6:
if (true) {
return props_XmlCharRefValue;
}
break;
case 7:
if (true) {
return props_XmlComment;
}
break;
case 8:
if (true) {
return props_XmlCommentLine;
}
break;
case 9:
if (true) {
return props_XmlContent;
}
break;
case 10:
if (true) {
return props_XmlDeclaration;
}
break;
case 11:
if (true) {
return props_XmlDoctypeDeclaration;
}
break;
case 12:
if (true) {
return props_XmlDocument;
}
break;
case 13:
if (true) {
return props_XmlElement;
}
break;
case 14:
if (true) {
return props_XmlEntityRef;
}
break;
case 15:
if (true) {
return props_XmlEntityRefValue;
}
break;
case 16:
if (true) {
return props_XmlExternalId;
}
break;
case 17:
if (true) {
return props_XmlFile;
}
break;
case 18:
if (true) {
return props_XmlNoSpaceValue;
}
break;
case 19:
if (true) {
return props_XmlPart;
}
break;
case 20:
if (true) {
return props_XmlProcessingInstruction;
}
break;
case 21:
if (true) {
return props_XmlProlog;
}
break;
case 22:
if (true) {
return props_XmlPrologElement;
}
break;
case 23:
if (true) {
return props_XmlText;
}
break;
case 24:
if (true) {
return props_XmlTextValue;
}
break;
case 25:
if (true) {
return props_XmlValuePart;
}
break;
case 26:
if (true) {
return props_XmlWhitespace;
}
break;
default :
}
}
throw new IllegalStateException();
}
