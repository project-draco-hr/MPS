{
switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b,conceptFqName)) {
case 0:
    return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.DebuggedType","jetbrains.mps.baseLanguage.structure.Type",false,new String[]{"jetbrains.mps.baseLanguage.structure.Type"},new String[]{"isHigh"},new String[]{});
case 1:
  return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.DoNotTransformAnnotation","jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation",false,new String[]{"jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation"},new String[]{},new String[]{});
case 2:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.DownCastToLowLevel","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression","jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"},new String[]{},new String[]{});
case 3:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.Evaluator","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.lang.core.structure.ScopeProvider"},new String[]{},new String[]{});
case 4:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorConcept","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept","jetbrains.mps.baseLanguage.structure.IMethodLike","jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept"},new String[]{"isShowContext"},new String[]{});
case 5:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsSuperMethodCall","jetbrains.mps.baseLanguage.structure.BaseMethodCall",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodCall"},new String[]{},new String[]{"instanceMethodDeclaration"});
case 6:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.EvaluatorsThisExpression","jetbrains.mps.baseLanguage.structure.Expression",false,new String[]{"jetbrains.mps.baseLanguage.structure.Expression"},new String[]{},new String[]{});
case 7:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation","jetbrains.mps.lang.core.structure.NodeAttribute",false,new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"},new String[]{},new String[]{});
case 8:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.IEvaluatorConcept",null,true,new String[]{},new String[]{},new String[]{});
case 9:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariable","jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"},new String[]{"isOutOfScope","highLevelNodeId","lowLevelName"},new String[]{});
case 10:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.LowLevelVariableReference","jetbrains.mps.baseLanguage.structure.BaseVariableReference",false,new String[]{"jetbrains.mps.baseLanguage.structure.BaseVariableReference"},new String[]{},new String[]{"variableDeclaration"});
case 11:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.ToEvaluateAnnotation","jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation",false,new String[]{"jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation"},new String[]{},new String[]{});
case 12:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.UnitNode","jetbrains.mps.lang.core.structure.BaseConcept",false,new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"},new String[]{"highLevelNodeId"},new String[]{});
case 13:
return new CompiledConceptDescriptor("jetbrains.mps.debugger.java.evaluation.structure.UnprocessedAnnotation","jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation",false,new String[]{"jetbrains.mps.debugger.java.evaluation.structure.GenerationHelperAnnotation"},new String[]{},new String[]{});
default :
return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
}
}
