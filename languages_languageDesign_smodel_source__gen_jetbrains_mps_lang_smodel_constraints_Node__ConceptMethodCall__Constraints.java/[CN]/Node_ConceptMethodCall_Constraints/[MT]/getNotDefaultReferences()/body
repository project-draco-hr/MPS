{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("baseMethodDeclaration",new BaseReferenceConstraintsDescriptor("baseMethodDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.DotExpression"),"operand",true);
          SNode type=TypeChecker.getInstance().getTypeOf(leftExpression);
          if (!(SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.smodel.structure.SNodeType")) && !(SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.smodel.structure.SConceptType"))) {
            return new EmptySearchScope();
          }
          SNode concept;
          final Wrappers._boolean isStatic=new Wrappers._boolean();
          if (SNodeOperations.isInstanceOf(type,"jetbrains.mps.lang.smodel.structure.SConceptType")) {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.lang.smodel.structure.SConceptType"),"conceptDeclaraton",false);
            isStatic.value=true;
          }
 else {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,"jetbrains.mps.lang.smodel.structure.SNodeType"),"concept",false);
            isStatic.value=false;
          }
          if ((concept == null)) {
            concept=SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
          }
          List<SNode> methods=ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(concept,_context.getEnclosingNode())).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SPropertyOperations.getBoolean(it,"isStatic") == isStatic.value;
            }
          }
).toListSequence();
          return new SimpleSearchScope(methods);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_zb7xc_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
