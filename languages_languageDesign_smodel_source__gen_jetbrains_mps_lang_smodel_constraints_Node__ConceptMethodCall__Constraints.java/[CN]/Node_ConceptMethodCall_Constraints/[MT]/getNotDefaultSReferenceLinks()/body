{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(new UUID(-935030926396207931l,-6610165693999523818l),1204053956946l,1068499141037l),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l,-6610165693999523818l),1197027756228l,1197027771414l,"operand"));
          SNode type=TypeChecker.getInstance().getTypeOf(leftExpression);
          if (!(SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1138055754698l,"jetbrains.mps.lang.smodel.structure.SNodeType"))) && !(SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1172420572800l,"jetbrains.mps.lang.smodel.structure.SConceptType")))) {
            return new EmptySearchScope();
          }
          SNode concept;
          final Wrappers._boolean isStatic=new Wrappers._boolean();
          if (SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1172420572800l,"jetbrains.mps.lang.smodel.structure.SConceptType"))) {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1172420572800l,"jetbrains.mps.lang.smodel.structure.SConceptType")),MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1172420572800l,1180481110358l,"conceptDeclaraton"));
            isStatic.value=true;
          }
 else {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(new UUID(8675788371017092295l,-9098312342032910879l),1138055754698l,"jetbrains.mps.lang.smodel.structure.SNodeType")),MetaAdapterFactory.getReferenceLink(new UUID(8675788371017092295l,-9098312342032910879l),1138055754698l,1138405853777l,"concept"));
            isStatic.value=false;
          }
          if ((concept == null)) {
            concept=SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
          }
          List<SNode> methods=ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getAvailableConceptMethods_1213877394200(concept,_context.getEnclosingNode())).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(new UUID(-5808042798135555774l,-8657779246725685839l),1225194472830l,5864038008284099149l,"isStatic")) == isStatic.value;
            }
          }
).toListSequence();
          return new SimpleSearchScope(methods);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_zb7xc_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
