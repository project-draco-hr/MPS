{
  Map<SReferenceLinkId,ReferenceConstraintsDescriptor> references=new HashMap<SReferenceLinkId,ReferenceConstraintsDescriptor>();
  references.put(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL),new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x11857355952L,0xf8c78301adL),this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          SNode leftExpression=SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,"jetbrains.mps.baseLanguage.structure.DotExpression")),MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0x116b46a08c4L,0x116b46a4416L,"operand"));
          SNode type=TypeChecker.getInstance().getTypeOf(leftExpression);
          if (!(SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,"jetbrains.mps.lang.smodel.structure.SNodeType"))) && !(SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x110f9b63680L,"jetbrains.mps.lang.smodel.structure.ConceptNodeType"))) && !(SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x5cab42cd97571ceeL,"jetbrains.mps.lang.smodel.structure.SConceptType")))) {
            return new EmptySearchScope();
          }
          SNode concept;
          final Wrappers._boolean isStatic=new Wrappers._boolean();
          if (SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x110f9b63680L,"jetbrains.mps.lang.smodel.structure.ConceptNodeType"))) {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x110f9b63680L,"jetbrains.mps.lang.smodel.structure.ConceptNodeType")),MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x110f9b63680L,0x112da284156L,"conceptDeclaraton"));
            isStatic.value=true;
          }
 else           if (SNodeOperations.isInstanceOf(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x5cab42cd97571ceeL,"jetbrains.mps.lang.smodel.structure.SConceptType"))) {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x5cab42cd97571ceeL,"jetbrains.mps.lang.smodel.structure.SConceptType")),MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x5cab42cd97571ceeL,0x5cab42cd97571cefL,"conceptDeclaraton"));
            isStatic.value=true;
          }
 else {
            concept=SLinkOperations.getTarget(SNodeOperations.cast(type,MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,"jetbrains.mps.lang.smodel.structure.SNodeType")),MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L,0x81bc4d213d9375e1L,0x108f968b3caL,0x1090e46ca51L,"concept"));
            isStatic.value=false;
          }
          if ((concept == null)) {
            concept=SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)","1133920641626");
          }
          List<SNode> methods=ListSequence.fromList(AbstractConceptDeclaration_BehaviorDescriptor.getAvailableConceptMethods_idhEwILGo.invoke(concept,_context.getEnclosingNode())).where(new IWhereFilter<SNode>(){
            public boolean accept(            SNode it){
              return SPropertyOperations.getBoolean(it,MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L,0x87d963a55f2a9db1L,0x11d4348057eL,0x51613f7fe129b24dL,"isStatic")) == isStatic.value;
            }
          }
).toListSequence();
          return new SimpleSearchScope(methods);
        }
        @Override public SNodeReference getSearchScopeValidatorNode(){
          return breakingNode_zb7xc_a0a1a0a0a1a0b0a1a1;
        }
      }
;
    }
  }
);
  return references;
}
