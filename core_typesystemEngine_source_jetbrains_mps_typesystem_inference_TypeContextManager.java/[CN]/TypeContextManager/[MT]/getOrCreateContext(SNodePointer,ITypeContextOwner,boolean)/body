{
  ModelAccess.assertLegalRead();
  if (nodePointer == null)   return null;
synchronized (myLock) {
    Pair<TypeCheckingContext,List<ITypeContextOwner>> contextWithOwners=myTypeCheckingContexts.get(nodePointer);
    if (contextWithOwners == null) {
      if (createIfAbsent) {
        TypeCheckingContext newTypeCheckingContext=createTypeCheckingContext(nodePointer.getNode());
        addModelListener(nodePointer.getNode());
        List<ITypeContextOwner> owners=new ArrayList<ITypeContextOwner>(1);
        contextWithOwners=new Pair<TypeCheckingContext,List<ITypeContextOwner>>(newTypeCheckingContext,owners);
        owners.add(owner);
        if (owners.size() > 100) {
          if (!myReported) {
            myReported=true;
            LOG.warning("Type checking context for node " + nodePointer.getNode().getPresentation() + " has too much owners");
          }
        }
        myTypeCheckingContexts.put(nodePointer,contextWithOwners);
        return newTypeCheckingContext;
      }
 else {
        return null;
      }
    }
 else {
      TypeCheckingContext context=contextWithOwners.o1;
      if (context.getNode().isDisposed()) {
        removeContextForNode(nodePointer);
        LOG.error("Type Checking Context had a disposed node inside. Node: " + nodePointer.getNode() + " model: "+ nodePointer.getModel());
        return getOrCreateContext(nodePointer,owner,createIfAbsent);
      }
      if (!contextWithOwners.o2.contains(owner)) {
        contextWithOwners.o2.add(owner);
      }
      return context;
    }
  }
}
