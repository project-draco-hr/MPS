{
  ModelAccess.assertLegalRead();
  if (node == null)   return null;
  ITypeContextOwner owner=new DEFAULT();
  SNode root=node.getTopmostAncestor();
  boolean isResolveMode=myResolveMode.get();
  Set<SNode> resolveNodes=getMyResolveNodes();
  if (isResolveMode) {
    if (resolveNodes.contains(node)) {
      return TypesUtil.createRuntimeErrorType();
    }
    resolveNodes.add(node);
    if (resolveNodes.size() > 10) {
      LOG.warning("There are too many nodes in resolve");
      return TypesUtil.createRuntimeErrorType();
    }
  }
  try {
    if (myTypeChecker.isGenerationMode()) {
      TypeCheckingContext context=myTypeChecker.hasPerformanceTracer() ? new TypeCheckingContext_Tracer(node,myTypeChecker) : new SingleTypecheckingContext(node,myTypeChecker);
      if (context == null)       return null;
      try {
        return context.getTypeOf_generationMode(node);
      }
  finally {
        context.dispose();
      }
    }
    TypeCheckingContext context=getOrCreateContext(root,owner,true);
    try {
      if (myComputeInNormalMode_resolverVooDoo && context != null && context.isCheckedRoot(false)) {
        myComputeInNormalMode_resolverVooDoo=false;
        SNode type=context.getTypeOf_normalMode(node);
        myComputeInNormalMode_resolverVooDoo=true;
        return type;
      }
      if (isResolveMode) {
        if (context == null || !context.isNonTypesystemComputation()) {
          TypeCheckingContext resolveContext=createTypeCheckingContextForResolve(node);
          SNode type=resolveContext.getTypeOf(node,myTypeChecker);
          resolveContext.dispose();
          return type;
        }
      }
      if (context == null)       return null;
      return context.getTypeOf(node,myTypeChecker);
    }
  finally {
      removeOwnerForRootNodeContext(root,owner);
    }
  }
  finally {
    resolveNodes.remove(node);
  }
}
