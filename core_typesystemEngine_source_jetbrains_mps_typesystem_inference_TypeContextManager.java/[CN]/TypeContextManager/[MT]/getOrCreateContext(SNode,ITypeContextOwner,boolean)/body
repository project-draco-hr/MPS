{
  ModelAccess.assertLegalRead();
  if (node == null)   return null;
  final SNode rootNode=node.getContainingRoot();
synchronized (myLock) {
    SNodePointer rootNodePointer=new SNodePointer(rootNode);
    List<TypecheckingContextHolder> contextWithOwners=myTypeCheckingContexts.get(rootNodePointer);
    if (contextWithOwners == null && !createIfAbsent)     return null;
    if (contextWithOwners == null) {
      contextWithOwners=new ArrayList<TypecheckingContextHolder>(4);
      myTypeCheckingContexts.put(rootNodePointer,contextWithOwners);
    }
    for (ListIterator<TypecheckingContextHolder> it=contextWithOwners.listIterator(); it.hasNext(); ) {
      TypecheckingContextHolder contextHolder=it.next();
      if (contextHolder.getOwner() == owner) {
        if (!owner.reuseTypecheckingContext()) {
          assert createIfAbsent;
          return contextHolder.acquire(node);
        }
 else {
          final TypeCheckingContext ctx=contextHolder.acquire(node);
          if (jetbrains.mps.util.SNodeOperations.isDisposed(ctx.getNode())) {
            removeContextForNode(rootNodePointer);
            LOG.error("Type Checking Context had a disposed node inside. Node: " + node + " model: "+ node.getModel());
            return getOrCreateContext(node,owner,createIfAbsent);
          }
          return ctx;
        }
      }
    }
    if (!owner.reuseTypecheckingContext()) {
      assert createIfAbsent;
      final NonReusableTypecheckingContextHolder contextHolder=new NonReusableTypecheckingContextHolder(owner);
      contextWithOwners.add(contextHolder);
      return contextHolder.acquire(node);
    }
 else     if (!createIfAbsent) {
      return null;
    }
 else {
      if (contextWithOwners.size() > 100) {
        if (!myReported) {
          myReported=true;
          LOG.warning("Type checking context for node " + node.getPresentation() + " has too much owners");
        }
      }
      final CountingTypecheckingContextHolder contextHolder=new CountingTypecheckingContextHolder(owner);
      contextWithOwners.add(contextHolder);
      return contextHolder.acquire(node);
    }
  }
}
