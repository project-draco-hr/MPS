{
  ModelAccess.assertLegalRead();
  if (node == null || node.getModel() == null)   return;
synchronized (myLock) {
    SNodePointer nodePointer=new SNodePointer(node);
    List<Triplet<TypeCheckingContext,ITypeContextOwner,Integer>> contextWithOwners=myTypeCheckingContexts.get(nodePointer);
    if (contextWithOwners != null) {
      for (ListIterator<Triplet<TypeCheckingContext,ITypeContextOwner,Integer>> it=contextWithOwners.listIterator(); it.hasNext(); ) {
        Triplet<TypeCheckingContext,ITypeContextOwner,Integer> p=it.next();
        ITypeContextOwner o=p.second();
        if (o == owner) {
          int count=p.third() - 1;
          if (count <= 0) {
            it.remove();
            p.first().dispose();
          }
 else {
            it.set(new Triplet<TypeCheckingContext,ITypeContextOwner,Integer>(p.first(),p.second(),count));
          }
          break;
        }
      }
      if (contextWithOwners.isEmpty()) {
        myTypeCheckingContexts.remove(nodePointer);
      }
    }
  }
}
