{
  jetbrains.mps.smodel.SModel model=new jetbrains.mps.smodel.SModel(descriptor.getReference(),new ForeignNodeIdMap());
  ModuleReference lang=MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("954c4d77-e24b-4e49-a5a5-5476c966c092")).getModuleReference();
  (model).addLanguage(lang);
  String pkg=model.getReference().getSModelFqName().getLongName();
  PathItem pi=GWTModulePathItem.getPathItem(path);
  List<Tuples._3<String,String,SNode>> modlst=ListSequence.fromList(new ArrayList<Tuples._3<String,String,SNode>>());
  SNode sample=SConceptOperations.createNewNode("jetbrains.mps.gwt.client.structure.GWTModule",null);
  for (  String modres : ListSequence.fromList(pi.resources(pkg))) {
    SNodeId id=GWTModuleReader.createId(pi.baseName(modres));
    SNode gwtModule=(SNode)model.getNode(id);
    if ((gwtModule == null)) {
      gwtModule=SConceptOperations.createNewNode(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.gwt.client.structure.GWTModule")),sample);
      ((jetbrains.mps.smodel.SNode)gwtModule).setId(id);
      SPropertyOperations.set(gwtModule,"name",pi.baseName(modres));
      SModelOperations.addRootNode(((SModel)model),gwtModule);
    }
    ListSequence.fromList(modlst).addElement(MultiTuple.<String,String,SNode>from(pkg,modres,gwtModule));
  }
  final StubModelDescriptors descs=new StubModelDescriptors(SModelStereotype.getStubStereotypeForId("gwt"),path,module){
    @Override public StubModelDataSource createStubsSource(    String path){
      return new GWTStubsSource(path);
    }
  }
;
  GWTModuleReader reader=new GWTModuleReader(new GWTModuleReader.Resolver(){
    public SModelReference stubModelReference(    String pk){
      return descs.javaStubRef(pk);
    }
  }
,new GWTModuleReader.Resolver(){
    public SModelReference stubModelReference(    String pk){
      return descs.smodelRefWithId(pk);
    }
  }
);
  for (  Tuples._3<String,String,SNode> modpair : ListSequence.fromList(modlst)) {
    InputStream is=null;
    try {
      is=pi.openResource(modpair._0(),modpair._1());
      SAXBuilder saxBuilder=JDOMUtil.createBuilder();
      reader.read(modpair._2(),saxBuilder.build(is));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    JDOMException e) {
      e.printStackTrace();
    }
catch (    GWTModuleFormatException e) {
      e.printStackTrace();
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  SNodeOperations.deleteNode(sample);
  return model;
}
