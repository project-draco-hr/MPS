{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("binaryOperation",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      List<SNode> result=new ArrayList<SNode>();
      for (      Language language : operationContext.getScope().getVisibleLanguages()) {
        SModelDescriptor strucModelDescriptor=LanguageAspect.STRUCTURE.get(language);
        SModel strucModel=strucModelDescriptor.getSModel();
        ListSequence.fromList(result).addSequence(ListSequence.fromList(SModelOperations.getRoots(strucModel,"jetbrains.mps.lang.structure.structure.ConceptDeclaration")).where(new IWhereFilter<SNode>(){
          public boolean accept(          SNode it){
            return SConceptOperations.isSubConceptOf(it,"jetbrains.mps.baseLanguage.structure.BinaryOperation") && !(SConceptPropertyOperations.getBoolean(it,"abstract"));
          }
        }
));
      }
      return result;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:9b7a7baa-7b52-4b41-8293-5aa14d41220f(jetbrains.mps.baseLanguage.overloadedOperators.constraints)","2838654975957288976");
    }
  }
);
  return result;
}
