{
  Iterable<SNode> filteredBuilders=Sequence.fromIterable(builders).where(new IWhereFilter<SNode>(){
    public boolean accept(    SNode it){
      return consume(it,side);
    }
  }
);
  if (Sequence.fromIterable(filteredBuilders).isEmpty()) {
    return;
  }
  SNode location=createLocation(side);
  SNode section=SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x6ec02d9918b4efbcL,"jetbrains.mps.lang.editor.structure.TransformationMenuSection"));
  ListSequence.fromList(SLinkOperations.getChildren(section,MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x6ec02d9918b4efbcL,0x6ec02d9918b4efbdL,"locations"))).addElement(location);
  ListSequence.fromList(SLinkOperations.getChildren(root,MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x4e0f93d8a0c11832L,0x16be955f384efffcL,"sections"))).addElement(section);
  for (  SNode builder : Sequence.fromIterable(filteredBuilders)) {
    List<SNode> parts=new SideTransformBuildersMigrationHelper(builder).createMenuParts();
    ListSequence.fromList(SLinkOperations.getChildren(section,MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L,0xa83a7ff23bde13baL,0x6ec02d9918b4efbcL,0x6ec02d9918b4efbfL,"parts"))).addSequence(ListSequence.fromList(parts));
  }
}
