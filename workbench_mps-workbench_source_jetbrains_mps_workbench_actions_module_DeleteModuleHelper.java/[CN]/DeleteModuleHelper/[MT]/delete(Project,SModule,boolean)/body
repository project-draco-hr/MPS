{
  if (!project.isProjectModule(module) && !deleteFiles) {
    throw new IllegalArgumentException("Non-project modules can only be deleted with files deletion enabled");
  }
  if (project.isProjectModule(module)) {
    project.removeModule(module.getModuleReference());
    ((StandaloneMPSProject)project).update();
    project.save();
  }
  if (deleteFiles) {
    for (    SModel model : module.getModels()) {
      DeleteModelHelper.delete(module,model,true);
    }
    if (module.getFacet(JavaModuleFacet.class) != null) {
      IFile classesGen=module.getFacet(JavaModuleFacet.class).getClassesGen();
      if (classesGen != null) {
        deleteFile(classesGen.getPath());
      }
    }
    if (module.getFacet(TestsFacet.class) != null) {
      deleteFile(module.getFacet(TestsFacet.class).getTestsOutputPath().getPath());
    }
    if (module instanceof AbstractModule) {
      AbstractModule curModule=(AbstractModule)module;
      String outputPath=curModule.getOutputPath().getPath();
      deleteFile(outputPath);
      deleteFile(FileGenerationUtil.getCachesPath(outputPath));
      curModule.getDescriptorFile().delete();
      if (curModule.getModuleSourceDir().getChildren().isEmpty()) {
        deleteFile(curModule.getModuleSourceDir().getPath());
      }
      IFile moduleFolder=curModule.getDescriptorFile().getParent();
      if (deleteDirIfEmpty(moduleFolder))       moduleFolder.delete();
    }
  }
  if (project.isProjectModule(module)) {
    project.removeModule(module.getModuleReference());
    ((StandaloneMPSProject)project).update();
    project.save();
  }
  if (deleteFiles)   ModuleRepositoryFacade.getInstance().removeModuleForced(module);
}
