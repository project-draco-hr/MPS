{
  if (!project.isProjectModule(module instanceof Generator ? ((Generator)module).getSourceLanguage() : module) && !deleteFiles) {
    throw new IllegalArgumentException("Non-project modules can only be deleted with files deletion enabled");
  }
  project.getRepository().saveAll();
  if (deleteFiles) {
    for (    SModel model : module.getModels()) {
      DeleteModelHelper.delete(module,model,true);
    }
    if (module.getFacet(JavaModuleFacet.class) != null) {
      IFile classesGen=module.getFacet(JavaModuleFacet.class).getClassesGen();
      if (classesGen != null) {
        deleteFile(classesGen.toPath().toString());
      }
    }
    if (module.getFacet(TestsFacet.class) != null) {
      final IFile testsOutputPath=module.getFacet(TestsFacet.class).getTestsOutputPath();
      if (testsOutputPath != null) {
        deleteFile(testsOutputPath.toPath().toString());
      }
    }
    if (module instanceof AbstractModule) {
      AbstractModule curModule=(AbstractModule)module;
      final IFile output=curModule.getOutputPath();
      if (output != null) {
        String outputPath=output.toPath().toString();
        deleteFile(outputPath);
        deleteFile(FileGenerationUtil.getCachesPath(outputPath));
      }
      if (curModule.getDescriptorFile() != null) {
        curModule.getDescriptorFile().delete();
      }
      if (curModule.getModuleSourceDir() != null && curModule.getModuleSourceDir().getChildren().isEmpty()) {
        deleteFile(curModule.getModuleSourceDir().toPath().toString());
      }
      if (curModule.getDescriptorFile() != null) {
        IFile moduleFolder=curModule.getDescriptorFile().getParent();
        if (moduleFolder != null && deleteDirIfEmpty(moduleFolder)) {
          moduleFolder.delete();
        }
      }
    }
  }
  if (project.isProjectModule(module)) {
    final SRepository repository=project.getRepository();
    if (repository instanceof SRepositoryExt) {
      ((SRepositoryExt)repository).unregisterModule(module,project);
    }
    project.removeModule(module);
    project.save();
    ((StandaloneMPSProject)project).update();
  }
  if (deleteFiles) {
    new ModuleRepositoryFacade(project.getRepository()).removeModuleForced(module);
  }
}
