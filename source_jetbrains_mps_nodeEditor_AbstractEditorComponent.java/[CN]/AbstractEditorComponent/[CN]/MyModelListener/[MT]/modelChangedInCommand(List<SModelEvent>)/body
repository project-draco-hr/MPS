{
  if (!EventUtil.isDramaticalChange(events)) {
    if (EventUtil.isPropertyChange(events)) {
      String propertyName=((SModelPropertyEvent)events.get(0)).getPropertyName();
      SNodeProxy nodeProxy=new SNodeProxy(((SModelPropertyEvent)events.get(0)).getNode());
      Pair<SNodeProxy,String> pair=new Pair<SNodeProxy,String>(nodeProxy,propertyName);
      Set<EditorCell_Property> editorCell_properties=myNodePropertiesAccessedCleanlyToDependentCellsMap.get(pair);
      Set<EditorCell> editorCells=myNodePropertiesAccessedDirtilyToDependentCellsMap.get(pair);
      if (editorCells != null) {
        rebuildEditorContent(events);
      }
 else       if (editorCell_properties != null) {
        for (        EditorCell_Property cell : editorCell_properties) {
          cell.synchronizeViewWithModel();
        }
        relayout();
      }
    }
 else {
      rebuildEditorContent(events);
    }
  }
 else {
    String cellRole=null;
    EditorCell selectedCell=AbstractEditorComponent.this.getSelectedCell();
    if (selectedCell != null) {
      cellRole=(String)selectedCell.getUserObject(EditorCell.ROLE);
    }
    rebuildEditorContent(events);
    SModelEvent lastAdd=null;
    SModelEvent lastRemove=null;
    for (    SModelEvent e : events) {
      if (e instanceof SModelChildEvent) {
        SModelChildEvent ce=(SModelChildEvent)e;
        if (ce.isAdded())         lastAdd=ce;
        if (ce.isRemoved())         lastRemove=ce;
      }
      if (e instanceof SModelReferenceEvent) {
        SModelReferenceEvent re=(SModelReferenceEvent)e;
        if (re.isAdded())         lastAdd=re;
        if (re.isRemoved())         lastRemove=re;
      }
    }
    if (lastAdd != null) {
      if (lastAdd instanceof SModelChildEvent) {
        SModelChildEvent ce=(SModelChildEvent)lastAdd;
        EditorCell error=findErrorOrEditableCell(findNodeCell(ce.getChild()));
        if (error == null) {
          selectNode(ce.getChild());
        }
 else {
          setSelection(error);
          if (error instanceof EditorCell_Label && !error.isErrorState()) {
            ((EditorCell_Label)error).getTextLine().end();
          }
        }
        return;
      }
      if (lastAdd instanceof SModelReferenceEvent) {
        SModelReferenceEvent re=(SModelReferenceEvent)lastAdd;
        selectRefCell(re.getReference(),cellRole);
        return;
      }
    }
    if (lastRemove != null) {
      if (lastRemove instanceof SModelChildEvent) {
        SModelChildEvent ce=(SModelChildEvent)lastRemove;
        int index=ce.getChildIndex();
        String role=ce.getChildRole();
        SNode parent=ce.getParent();
        if (parent.getChildCount() > index) {
          SNode child=parent.getChildAt(index);
          if (child.getRole_().equals(role)) {
            selectNode(child);
            return;
          }
        }
        if (index != 0) {
          SNode child=parent.getChildAt(index - 1);
          if (child.getRole_().equals(role)) {
            selectNode(child);
            return;
          }
        }
        EditorCell nullCell=findNodeCellWithRole(parent,role);
        if (nullCell == null) {
          selectNode(parent);
        }
 else {
          setSelection(nullCell);
        }
        return;
      }
      if (lastRemove instanceof SModelReferenceEvent) {
        SModelReferenceEvent re=(SModelReferenceEvent)lastRemove;
        SReference ref=re.getReference();
        SNode sourceNode=ref.getSourceNode();
        String role=ref.getRole();
        EditorCell nullCell=findNodeCellWithRole(sourceNode,role);
        if (nullCell == null) {
          selectNode(sourceNode);
        }
 else {
          setSelection(nullCell);
        }
      }
    }
  }
}
