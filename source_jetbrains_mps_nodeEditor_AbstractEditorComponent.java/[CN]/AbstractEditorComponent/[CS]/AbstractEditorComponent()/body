{
  setDoubleBuffered(true);
  setFocusTraversalKeysEnabled(false);
  myScrollPane=new JScrollPane();
  myScrollPane.setViewportView(this);
  myScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
  myScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  myContainer=new JPanel();
  myContainer.setLayout(new BorderLayout());
  myContainer.add(myScrollPane,BorderLayout.CENTER);
  myNodeSubstituteChooser=new NodeSubstituteChooser(this);
  myCellRangeSelection=new EditorCellRangeSelection(this);
  myKbdHandlersStack=new Stack<IKeyboardHandler>();
  myKbdHandlersStack.push(new EditorComponentKeyboardHandler());
  myActionMap=new HashMap();
  myActionMap.put(EditorCellAction.LEFT,new NodeEditorActions.LEFT());
  myActionMap.put(EditorCellAction.RIGHT,new NodeEditorActions.RIGHT());
  myActionMap.put(EditorCellAction.UP,new NodeEditorActions.UP());
  myActionMap.put(EditorCellAction.DOWN,new NodeEditorActions.DOWN());
  myActionMap.put(EditorCellAction.NEXT,new NodeEditorActions.NEXT());
  myActionMap.put(EditorCellAction.PREV,new NodeEditorActions.PREV());
  myActionMap.put(EditorCellAction.LEFT_SPECIAL,new NodeEditorActions.LEFT());
  myActionMap.put(EditorCellAction.RIGHT_SPECIAL,new NodeEditorActions.RIGHT());
  myActionMap.put(EditorCellAction.UP_SPECIAL,new NodeEditorActions.UP_SPECIAL());
  myActionMap.put(EditorCellAction.DOWN_SPECIAL,new NodeEditorActions.DOWN_SPECIAL());
  myActionMap.put(EditorCellAction.COPY,new CellAction_CopyNode());
  myActionMap.put(EditorCellAction.PASTE,new CellAction_PasteNode());
  myActionMap.put(EditorCellAction.PASTE_BEFORE,new CellAction_PasteNodeRelative(true));
  myActionMap.put(EditorCellAction.PASTE_AFTER,new CellAction_PasteNodeRelative(false));
  new SpeedSearchBase(this,true){
    protected int getSelectedIndex(){
      return getNamedNodes().indexOf(getSelectedCell().getSemanticNode());
    }
    protected Object[] getAllElements(){
      return getNamedNodes().toArray();
    }
    protected String getElementText(    Object element){
      return element.toString();
    }
    protected void selectElement(    Object element,    String selectedText){
      selectNode((SemanticNode)element);
    }
  }
;
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      processMousePressed(e);
    }
    public void mouseReleased(    MouseEvent e){
      if (e.isPopupTrigger()) {
        EditorCell selectedCell=getSelectedCell();
        if (selectedCell != null) {
          showPopupMenu(e);
        }
      }
      super.mouseReleased(e);
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    final KeyEvent e){
      processKeyPressed(e);
    }
    public void keyReleased(    final KeyEvent e){
      processKeyReleased(e);
    }
  }
);
  addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      EditorCell selectedCell=getSelectedCell();
      if (selectedCell == null) {
        EditorCell rootCell=getRootCell();
        if (rootCell instanceof EditorCell_Collection) {
          EditorCell firstSelectableLeaf=((EditorCell_Collection)rootCell).findFirstSelectableLeaf();
          if (firstSelectableLeaf != null) {
            changeSelection(firstSelectableLeaf);
            return;
          }
        }
        if (rootCell != null && rootCell.isSelectable()) {
          changeSelection(rootCell);
        }
      }
    }
    public void focusLost(    FocusEvent e){
      myNodeSubstituteChooser.setVisible(false);
    }
  }
);
}
