{
  if (keyEvent.getKeyCode() == KeyEvent.VK_Z && keyEvent.isControlDown()) {
    if (keyEvent.isShiftDown()) {
      if (UndoManager.instance().isRedoAvailable(getContext())) {
        UndoManager.instance().redo(getContext());
      }
    }
 else {
      if (UndoManager.instance().isUndoAvailable(getContext())) {
        UndoManager.instance().undo(getContext());
      }
    }
    keyEvent.consume();
    return;
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
    rebuildEditorContent();
    keyEvent.consume();
    return;
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_D && keyEvent.isControlDown()) {
    if (mySelectedCell != null) {
      System.out.println("--- Selected cell parents ---");
      EditorUtil.dumpCellsUp(mySelectedCell,0);
      System.out.println("--- Selected cell children ---");
      EditorUtil.dumpCellsDown(mySelectedCell,0);
      System.out.println("--- end dump ---");
      keyEvent.consume();
    }
  }
  if (keyEvent.getKeyCode() == KeyEvent.VK_T && keyEvent.isControlDown()) {
    if (mySelectedCell != null) {
      SemanticNode selectedNode=mySelectedCell.getSemanticNode();
      SemanticModelTypeChecker typeChecker=new SemanticModelTypeChecker(selectedNode.getSemanticModel(),IdeMain.instance().getProject());
      System.out.println("--- Type System Info:");
      System.out.println("--- Node: " + selectedNode.getDebugText());
      TSStatus status=typeChecker.checkNodeType(selectedNode);
      if (status.isOk()) {
        System.out.println("--- TYPE CHECK STATUS: OK");
        ITypeObject typeObject=status.getTypeObject();
        if (typeObject != null) {
          System.out.println("--- Type: " + typeObject);
        }
 else {
          System.out.println("--- NO TYPE");
        }
      }
 else       if (status.isErrorComposite()) {
        System.out.println("--- TYPE CHECK STATUS: ERROR COMPOSITE");
        List<TSStatus> errors=status.getAllErrors();
        for (int i=0; i < errors.size(); i++) {
          TSStatus error=errors.get(i);
          System.out.println((i + 1) + ". --- Message: " + error.getMessage());
        }
      }
 else {
        System.out.println("--- TYPE CHECK STATUS: ERROR");
        System.out.println("--- Message: " + status.getMessage());
      }
      System.out.println("--------------------------");
      keyEvent.consume();
    }
  }
  CommandProcessor.instance().executeCommand(getContext(),new Runnable(){
    public void run(){
      if (peekKeyboardHandler().processKeyPressed(getContext(),keyEvent) == true) {
        keyEvent.consume();
        return;
      }
    }
  }
,null);
  return;
}
