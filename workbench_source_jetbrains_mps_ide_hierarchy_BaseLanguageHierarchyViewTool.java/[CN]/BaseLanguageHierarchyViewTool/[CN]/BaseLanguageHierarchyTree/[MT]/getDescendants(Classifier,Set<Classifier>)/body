{
  Set<SReference> usages=myUsagesManager.findUsages(node.getNode(),GlobalScope.getInstance(),IAdaptiveProgressMonitor.NULL_PROGRESS_MONITOR);
  Set<Classifier> result=new HashSet<Classifier>();
  for (  SReference usage : usages) {
    SNode sourceNode=usage.getSourceNode();
    if (ClassifierType.CLASSIFIER.equals(usage.getRole())) {
      if (SNodeOperations.isInstanceOf(sourceNode,ClassifierType.concept)) {
        ClassifierType classifierType=(ClassifierType)sourceNode.getAdapter();
        if (classifierType.getParent() instanceof ClassConcept && ClassConcept.SUPERCLASS.equals(classifierType.getRole_())) {
          result.add((Classifier)classifierType.getParent());
        }
        if (classifierType.getParent() instanceof ClassConcept && ClassConcept.IMPLEMENTED_INTERFACE.equals(classifierType.getRole_())) {
          result.add((Classifier)classifierType.getParent());
        }
        if (classifierType.getParent() instanceof Interface && Interface.EXTENDED_INTERFACE.equals(classifierType.getRole_())) {
          result.add((Classifier)classifierType.getParent());
        }
      }
    }
    if (AnonymousClass.CLASSIFIER.equals(usage.getRole())) {
      if (SNodeOperations.isInstanceOf(sourceNode,AnonymousClass.concept)) {
        AnonymousClass anonymousClass=(AnonymousClass)sourceNode.getAdapter();
        result.add(anonymousClass);
      }
    }
  }
  return result;
}
