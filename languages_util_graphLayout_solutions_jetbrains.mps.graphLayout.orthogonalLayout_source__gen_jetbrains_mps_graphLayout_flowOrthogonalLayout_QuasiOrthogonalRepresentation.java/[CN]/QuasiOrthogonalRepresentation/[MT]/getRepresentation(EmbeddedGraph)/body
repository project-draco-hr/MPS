{
  Graph graph=embeddedGraph.getGraph();
  int c=100 * graph.getNumNodes();
  Graph network=new Graph();
  Node networkSource=network.createNode();
  Node networkTarget=network.createNode();
  Map<Edge,Integer> capacity=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  Map<Edge,Integer> cost=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  Map<Node,Node> nodeMap=MapSequence.<Node,Node>fromMap(new HashMap<Node,Node>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Node networkNode=network.createNode();
    MapSequence.<Node,Node>fromMap(nodeMap).put(node,networkNode);
    int deg=ListSequence.<Edge>fromList(node.getEdges()).count();
    Edge edge=null;
    if (deg < 4) {
      edge=network.connect(networkSource,networkNode);
    }
    if (deg > 4) {
      edge=network.connect(networkNode,networkTarget);
    }
    if (edge != null) {
      MapSequence.<Edge,Integer>fromMap(cost).put(edge,0);
      MapSequence.<Edge,Integer>fromMap(capacity).put(edge,Math.abs(deg - 4));
    }
  }
  Map<Face,Node> faceMap=MapSequence.<Face,Node>fromMap(new HashMap<Face,Node>());
  for (  Face face : ListSequence.<Face>fromList(embeddedGraph.getFaces())) {
    Node networkNode=network.createNode();
    MapSequence.<Face,Node>fromMap(faceMap).put(face,networkNode);
    int deg=ListSequence.<Dart>fromList(face.getDarts()).count();
    if (embeddedGraph.isOuterFace(face)) {
      Edge edge=network.connect(networkNode,networkTarget);
      MapSequence.<Edge,Integer>fromMap(cost).put(edge,0);
      MapSequence.<Edge,Integer>fromMap(capacity).put(edge,deg + 4);
    }
 else {
      Edge edge=null;
      if (deg < 4) {
        edge=network.connect(networkSource,networkNode);
      }
      if (deg > 4) {
        edge=network.connect(networkNode,networkTarget);
      }
      if (edge != null) {
        MapSequence.<Edge,Integer>fromMap(cost).put(edge,0);
        MapSequence.<Edge,Integer>fromMap(capacity).put(edge,Math.abs(deg - 4));
      }
    }
  }
  Map<Dart,Edge> dartBendMap=MapSequence.<Dart,Edge>fromMap(new HashMap<Dart,Edge>());
  Map<Dart,Edge> dartAngleMap=MapSequence.<Dart,Edge>fromMap(new HashMap<Dart,Edge>());
  for (  Face face : ListSequence.<Face>fromList(embeddedGraph.getFaces())) {
    Node faceNode=MapSequence.<Face,Node>fromMap(faceMap).get(face);
    for (    Dart dart : ListSequence.<Dart>fromList(face.getDarts())) {
      Edge graphEdge=dart.getEdge();
      Edge edge;
      edge=network.connect(MapSequence.<Node,Node>fromMap(nodeMap).get(dart.getSource()),faceNode);
      MapSequence.<Dart,Edge>fromMap(dartAngleMap).put(dart,edge);
      MapSequence.<Edge,Integer>fromMap(capacity).put(edge,INF);
      MapSequence.<Edge,Integer>fromMap(cost).put(edge,0);
      Dart oppositeDart=embeddedGraph.getOpposite(dart);
      Node oppositeFaceNode=MapSequence.<Face,Node>fromMap(faceMap).get(embeddedGraph.getFace(oppositeDart));
      edge=network.connect(faceNode,oppositeFaceNode);
      MapSequence.<Dart,Edge>fromMap(dartBendMap).put(dart,edge);
      MapSequence.<Edge,Integer>fromMap(capacity).put(edge,getCapacity(graphEdge));
      MapSequence.<Edge,Integer>fromMap(cost).put(edge,getCost(graphEdge));
    }
  }
  Map<Node,Map<Face,Edge>> faceToNodeEdges=MapSequence.<Node,Map<Face,Edge>>fromMap(new HashMap<Node,Map<Face,Edge>>());
  Map<Edge,Dart> tempEdgesToDart=MapSequence.<Edge,Dart>fromMap(new HashMap<Edge,Dart>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    if (this.isParallelEdgeNode(node)) {
      List<Dart> darts=embeddedGraph.getDartWithSource(node);
      Map<Face,Node> faceNodes=MapSequence.<Face,Node>fromMap(new HashMap<Face,Node>());
      Map<Face,Edge> faceEdges=MapSequence.<Face,Edge>fromMap(new HashMap<Face,Edge>());
      for (      Dart dart : ListSequence.<Dart>fromList(darts)) {
        Node faceNode=network.createNode();
        Face face=embeddedGraph.getFace(dart);
        MapSequence.<Face,Node>fromMap(faceNodes).put(face,faceNode);
        Edge edge;
        edge=network.connect(faceNode,MapSequence.<Node,Node>fromMap(nodeMap).get(node));
        MapSequence.<Edge,Integer>fromMap(cost).put(edge,0);
        MapSequence.<Edge,Integer>fromMap(capacity).put(edge,1);
        MapSequence.<Face,Edge>fromMap(faceEdges).put(face,edge);
      }
      for (      Dart dart : ListSequence.<Dart>fromList(darts)) {
        Face face=embeddedGraph.getFace(dart);
        Face leftFace=embeddedGraph.getFace(embeddedGraph.getOpposite(dart));
        Edge edge;
        edge=network.connect(MapSequence.<Face,Node>fromMap(faceMap).get(leftFace),MapSequence.<Face,Node>fromMap(faceNodes).get(face));
        MapSequence.<Edge,Integer>fromMap(cost).put(edge,1);
        MapSequence.<Edge,Integer>fromMap(capacity).put(edge,1);
        MapSequence.<Edge,Dart>fromMap(tempEdgesToDart).put(edge,dart);
      }
      MapSequence.<Node,Map<Face,Edge>>fromMap(faceToNodeEdges).put(node,faceEdges);
    }
  }
  Map<Edge,Integer> flow=MinCostMaxFlowWithPotentials.getFlow(network,networkSource,networkTarget,capacity,cost);
  Map<Dart,Integer> bends=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  for (  Face face : ListSequence.<Face>fromList(embeddedGraph.getFaces())) {
    for (    Dart dart : ListSequence.<Dart>fromList(face.getDarts())) {
      Node source=dart.getSource();
      int angle=MapSequence.<Edge,Integer>fromMap(flow).get(MapSequence.<Dart,Edge>fromMap(dartAngleMap).get(dart)) + 1;
      if (MapSequence.<Face,Edge>fromMap(MapSequence.<Node,Map<Face,Edge>>fromMap(faceToNodeEdges).get(source)).get(face) != null && MapSequence.<Edge,Integer>fromMap(flow).get(MapSequence.<Face,Edge>fromMap(MapSequence.<Node,Map<Face,Edge>>fromMap(faceToNodeEdges).get(source)).get(face)) > 0) {
        angle-=1;
      }
      MapSequence.<Dart,Integer>fromMap(angles).put(dart,angle);
    }
  }
  for (  Dart dart : SetSequence.<Dart>fromSet(MapSequence.fromMap(dartBendMap).keySet())) {
    MapSequence.<Dart,Integer>fromMap(bends).put(dart,MapSequence.<Edge,Integer>fromMap(flow).get(MapSequence.<Dart,Edge>fromMap(dartBendMap).get(dart)));
  }
  for (  Face face : ListSequence.<Face>fromList(embeddedGraph.getFaces())) {
    List<Dart> darts=face.getDarts();
    for (    Dart dart : ListSequence.<Dart>fromList(darts)) {
      Node node=dart.getSource();
      Edge edgeToNode=MapSequence.<Face,Edge>fromMap(MapSequence.<Node,Map<Face,Edge>>fromMap(faceToNodeEdges).get(node)).get(face);
      if (edgeToNode != null && MapSequence.<Edge,Integer>fromMap(flow).get(edgeToNode) > 0) {
        Dart dartWithBend=embeddedGraph.getOpposite(dart);
        MapSequence.<Dart,Integer>fromMap(bends).put(dartWithBend,MapSequence.<Dart,Integer>fromMap(bends).get(dartWithBend) + 1);
      }
    }
  }
  if (SHOW_INFO > 0) {
    for (    Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      System.out.println("node " + node);
      for (      Dart dart : ListSequence.<Dart>fromList(embeddedGraph.getDartWithSource(node))) {
        System.out.println(dart + " angle = " + MapSequence.<Dart,Integer>fromMap(angles).get(dart)+ ", bends = "+ MapSequence.<Dart,Integer>fromMap(bends).get(dart)+ ", opposite bends = "+ MapSequence.<Dart,Integer>fromMap(bends).get(embeddedGraph.getOpposite(dart)));
      }
    }
    int totalCost=0;
    for (    Edge edge : ListSequence.<Edge>fromList(network.getEdges())) {
      totalCost+=MapSequence.<Edge,Integer>fromMap(flow).get(edge) * MapSequence.<Edge,Integer>fromMap(cost).get(edge);
    }
    System.out.println("!!! total cost = " + totalCost);
    int totalBendsNumber=0;
    for (    Integer value : Sequence.<Integer>fromIterable(MapSequence.fromMap(bends).values())) {
      totalBendsNumber+=value;
    }
    System.out.println("!!! total bends number = " + totalBendsNumber);
    if (totalBendsNumber != totalCost) {
      throw new RuntimeException("total cost is not equal to bends number");
    }
  }
  return MultiTuple.<Map<Dart,Integer>,Map<Dart,Integer>>from(bends,angles);
}
