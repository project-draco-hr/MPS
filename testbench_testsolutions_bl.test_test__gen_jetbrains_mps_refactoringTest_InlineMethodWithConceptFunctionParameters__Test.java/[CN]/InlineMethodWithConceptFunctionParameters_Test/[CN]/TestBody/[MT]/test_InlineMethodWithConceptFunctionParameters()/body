{
  addNodeById("4412735672780107330");
  addNodeById("4412735672780109161");
  addNodeById("4412735672780116642");
  InlineMethodRefactoring ref=new InlineMethodRefactoring(SNodeOperations.cast(getNodeById("4412735672780109165"),MetaAdapterFactory.getConcept(0xf3061a5392264cc5L,0xa443f952ceaf5816L,0xfbbebabf09L,"jetbrains.mps.baseLanguage.structure.StaticMethodCall")));
  ref.doRefactor();
{
    List<SNode> nodesBefore=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("4412735672780109162"),MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L,0x8431763b0c3c9f20L,0x115b81bfaa7L,"jetbrains.mps.lang.intentions.structure.DescriptionBlock")));
    List<SNode> nodesAfter=ListSequence.fromListAndArray(new ArrayList<SNode>(),SNodeOperations.cast(getNodeById("4412735672780116650"),MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L,0x8431763b0c3c9f20L,0x115b81bfaa7L,"jetbrains.mps.lang.intentions.structure.DescriptionBlock")));
    Assert.assertNull("The nodes '" + nodesBefore + "' and '"+ nodesAfter+ "' do not match!",new NodesMatcher().match(nodesBefore,nodesAfter));
  }
}
