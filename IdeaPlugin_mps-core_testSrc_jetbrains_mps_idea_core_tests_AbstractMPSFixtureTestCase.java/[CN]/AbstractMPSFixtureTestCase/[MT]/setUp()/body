{
  super.setUp();
  myProjectBuilder=IdeaTestFixtureFactory.getFixtureFactory().createFixtureBuilder(getName());
  myFixture=JavaTestFixtureFactory.getFixtureFactory().createCodeInsightFixture(myProjectBuilder.getFixture());
  final JavaModuleFixtureBuilder moduleFixtureBuilder=myProjectBuilder.addModule(CustomJavaModuleFixtureBuilder.class);
  moduleFixtureBuilder.addSourceContentRoot(myFixture.getTempDirPath());
  tuneFixture(moduleFixtureBuilder);
  myFixture.setUp();
  myFixture.setTestDataPath(getTestDataPath());
  myModule=moduleFixtureBuilder.getFixture().getModule();
  CompilerWorkspaceConfiguration.class.getDeclaredField(ApplicationInfo.getInstance().getMajorVersion().equals("12") ? "USE_COMPILE_SERVER" : "USE_OUT_OF_PROCESS_BUILD").setBoolean(CompilerWorkspaceConfiguration.getInstance(myModule.getProject()),false);
  myFacet=addMPSFacet(myModule);
  if (TRACE_ON_HACK) {
    final Method method=ApplicationInfo.getInstance().getMajorVersion().equals("12") ? Logger.class.getDeclaredMethod("setFactory",Logger.Factory.class) : Logger.class.getDeclaredMethod("setFactory",Class.class);
    method.invoke(null,ApplicationInfo.getInstance().getMajorVersion().equals("12") ? LoggerFactory.class.getDeclaredMethod("getInstance").invoke(null) : LoggerFactory.class);
  }
}
