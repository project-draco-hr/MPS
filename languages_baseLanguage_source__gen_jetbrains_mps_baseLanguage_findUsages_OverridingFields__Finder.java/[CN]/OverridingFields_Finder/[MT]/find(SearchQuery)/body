{
  SearchResults global_results=new SearchResults();
{
    SNode searchedNode=(SNode)searchQuery.getNodePointer().getNode();
    global_results.getSearchedNodePointers().add(new SNodePointer(searchedNode));
    List<SNode> nodes=new ArrayList<SNode>();
    List<SearchResult> results=new ArrayList<SearchResult>();
    try {
      BaseFinder finder_8=(BaseFinder)Class.forName("jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder").newInstance();
      boolean rightConcept=finder_8.getConcept().equals(SNodeOperations.getParent(searchedNode,null,false,false).getConceptFqName());
      if (!(rightConcept)) {
        OverridingFields_Finder.LOG.error("Trying to use finder that is not applicable to the concept. Returning empty results." + "[finder: \"" + finder_8.getDescription() + "\" ; concept: "+ searchQuery.getNodePointer().getNode().getConceptFqName());
      }
 else {
        boolean isApplicable=finder_8.isApplicable(SNodeOperations.getParent(searchedNode,null,false,false));
        if (!(isApplicable)) {
          OverridingFields_Finder.LOG.error("Trying to use finder that is not applicable to the node. Returning empty results." + "[finder: \"" + finder_8.getDescription() + "\" ; node: "+ searchQuery.getNodePointer().getNode().toString());
        }
 else {
          SearchResults results_8=finder_8.find(new SearchQuery(SNodeOperations.getParent(searchedNode,null,false,false),searchQuery.getScope()));
          for (          SNodePointer nodePointer : results_8.getSearchedNodePointers()) {
            ListOperations.addElement(nodes,nodePointer.getNode());
          }
          for (          SearchResult result : results_8.getSearchResults()) {
            results.add(result);
          }
        }
      }
    }
 catch (    Throwable t) {
      OverridingFields_Finder.LOG.error("Error instantiating finder \"" + "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder" + "\"  Message:"+ t.getMessage());
    }
{
      ICursor<SearchResult> _zCursor2=CursorFactory.createCursor(results);
      try {
        while (_zCursor2.moveToNext()) {
          SearchResult result=_zCursor2.getCurrent();
{
            SNode classNode=(SNode)result.getNodePointer().getNode();
            Iterable<SNode> fields=SLinkOperations.getTargets(classNode,"field",true);
            fields=SequenceOperations.union(fields,SLinkOperations.getTargets(classNode,"staticField",true));
{
              ICursor<SNode> _zCursor3=CursorFactory.createCursor(SequenceOperations.union(SLinkOperations.getTargets(classNode,"field",true),SLinkOperations.getTargets(classNode,"staticField",true)));
              try {
                while (_zCursor3.moveToNext()) {
                  SNode sField=_zCursor3.getCurrent();
                  if (SPropertyOperations.getString(sField,"name").equals(SPropertyOperations.getString(searchedNode,"name")) && SLinkOperations.getTarget(sField,"type",true) == SLinkOperations.getTarget(searchedNode,"type",true)) {
                    boolean same=true;
                    for (int i=0; i < SLinkOperations.getCount(sField,"parameter"); i=i + 1) {
                      String searchedParamType=Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(ListOperations.getElement(SLinkOperations.getTargets(searchedNode,"parameter",true),i),"type",true));
                      String foundParamType=Type_Behavior.call_getErasureSignature_1199318924019(SLinkOperations.getTarget(ListOperations.getElement(SLinkOperations.getTargets(sField,"parameter",true),i),"type",true));
                      if (!(foundParamType.equals(searchedParamType))) {
                        same=false;
                      }
                    }
                    if (same) {
                      global_results.getSearchResults().add(new SearchResult(new SNodePointer(sField),"Overriding Methods"));
                    }
                  }
                }
              }
  finally {
                _zCursor3.release();
              }
            }
          }
        }
      }
  finally {
        _zCursor2.release();
      }
    }
  }
  return global_results;
}
