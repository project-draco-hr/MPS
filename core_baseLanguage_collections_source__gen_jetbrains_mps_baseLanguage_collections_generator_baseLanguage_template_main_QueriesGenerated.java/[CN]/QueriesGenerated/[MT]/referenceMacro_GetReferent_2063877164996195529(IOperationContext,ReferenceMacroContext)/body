{
  SNode componentType=SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()),"jetbrains.mps.baseLanguage.structure.ArrayType"),"componentType",true);
  if (SNodeOperations.isInstanceOf(componentType,"jetbrains.mps.lang.typesystem.structure.MeetType")) {
    List<SNode> arguments=SLinkOperations.getTargets(SNodeOperations.cast(componentType,"jetbrains.mps.lang.typesystem.structure.MeetType"),"argument",true);
    for (    SNode arg : arguments) {
      if (!(SNodeOperations.isInstanceOf(arg,"jetbrains.mps.baseLanguage.structure.VoidType")) && SNodeOperations.isInstanceOf(arg,"jetbrains.mps.baseLanguage.structure.Type")) {
        componentType=SNodeOperations.cast(arg,"jetbrains.mps.baseLanguage.structure.Type");
        break;
      }
    }
  }
{
    IMatchingPattern pattern_0=HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType");
    SNode coercedNode_0=TypeChecker.getInstance().getRuntimeSupport().coerce_(componentType,pattern_0);
    if (coercedNode_0 != null) {
      return SLinkOperations.getTarget(coercedNode_0,"classifier",false);
    }
 else {
    }
  }
  return SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_8087_0().createNode(),"classifier",false);
}
