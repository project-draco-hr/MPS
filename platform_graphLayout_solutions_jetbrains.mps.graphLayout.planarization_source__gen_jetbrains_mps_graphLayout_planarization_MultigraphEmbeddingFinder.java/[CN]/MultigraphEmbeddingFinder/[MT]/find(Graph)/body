{
  final Set<Edge> badEdges=SetSequence.fromSet(new HashSet<Edge>());
  Map<Node,Set<Node>> connected=MapSequence.fromMap(new HashMap<Node,Set<Node>>());
  for (  Node node : ListSequence.fromList(graph.getNodes())) {
    MapSequence.fromMap(connected).put(node,SetSequence.fromSetAndArray(new HashSet<Node>(),node));
  }
  for (  Edge edge : ListSequence.fromList(graph.getEdges())) {
    Node source=edge.getSource();
    Node target=edge.getTarget();
    if (source == target) {
      SetSequence.fromSet(badEdges).addElement(edge);
    }
 else {
      SetSequence.fromSet(MapSequence.fromMap(connected).get(source)).addElement(target);
      SetSequence.fromSet(MapSequence.fromMap(connected).get(target)).addElement(source);
    }
  }
  for (  Edge edge : SetSequence.fromSet(badEdges)) {
    edge.removeFromGraph();
  }
  EmbeddedGraph embeddedGraph=myInitialFinder.find(graph);
  for (  Edge edge : SetSequence.fromSet(badEdges)) {
    final Node source=edge.getSource();
    final Node target=edge.getTarget();
    Edge faceEdge;
    if (source == target) {
      faceEdge=ListSequence.fromList(source.getEdges()).first();
    }
 else {
      faceEdge=ListSequence.fromList(source.getEdges()).findFirst(new IWhereFilter<Edge>(){
        public boolean accept(        Edge it){
          return it.getOpposite(source) == target;
        }
      }
);
    }
    Face face=ListSequence.fromList(embeddedGraph.getAdjacentFaces(faceEdge)).first();
    embeddedGraph.splitFace(face,ListSequence.fromListAndArray(new ArrayList<Edge>(),edge),source,target);
    edge.addToGraph();
  }
  return embeddedGraph;
}
