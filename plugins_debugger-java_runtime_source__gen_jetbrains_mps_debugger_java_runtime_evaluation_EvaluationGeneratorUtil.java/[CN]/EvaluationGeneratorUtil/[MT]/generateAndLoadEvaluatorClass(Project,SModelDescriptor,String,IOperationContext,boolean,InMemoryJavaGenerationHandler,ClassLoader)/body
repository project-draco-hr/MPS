{
  try {
    final String fullClassName=modelDescriptor.getLongName() + "." + className;
    EvaluationGeneratorUtil.MyCompilationResultAdapter compilationResult=new EvaluationGeneratorUtil.MyCompilationResultAdapter();
    handler.setCompilationListener(compilationResult);
    DefaultMessageHandler messageHandler=new DefaultMessageHandler(ideaProject);
    ProgressWindow progressWindow=new ProgressWindow(false,ideaProject);
    boolean successful=GenerationFacade.generateModels(context.getProject(),Collections.singletonList(modelDescriptor),context,handler,new ProgressMonitorAdapter(progressWindow),messageHandler,GenerationOptions.getDefaults().incremental(new EvaluationGeneratorUtil.MyIncrementalGenerationStrategy()).saveTransientModels(saveTransientModels).rebuildAll(false).reporting(false,false,false,0).create(),context.getProject().getComponent(TransientModelsComponent.class));
    Disposer.dispose(progressWindow);
    String source=handler.getSources().get(fullClassName);
    if (successful && (source != null && source.length() > 0)) {
      return Class.forName(fullClassName,true,handler.getCompiler().getClassLoader(parentloader));
    }
 else     if ((source != null && source.length() > 0) && !(successful)) {
      String text="Errors during compilation";
      if (compilationResult.hasErrors()) {
        text+=":\n" + compilationResult.getMessage();
      }
 else {
        text+=".";
      }
      throw new EvaluationException(text);
    }
 else {
      throw new EvaluationException("Errors during generation.");
    }
  }
 catch (  EvaluationException e) {
    throw e;
  }
catch (  ClassNotFoundException e) {
    throw new EvaluationException(e);
  }
}
