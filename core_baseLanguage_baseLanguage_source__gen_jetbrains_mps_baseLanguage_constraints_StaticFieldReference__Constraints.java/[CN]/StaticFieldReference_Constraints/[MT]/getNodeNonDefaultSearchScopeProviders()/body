{
  HashMap<String,INodeReferentSearchScopeProvider> result=new HashMap<String,INodeReferentSearchScopeProvider>();
  result.put("variableDeclaration",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new ClassifierVisibleStaticMembersScope(SLinkOperations.getTarget(_context.getReferenceNode(),"classifier",false),((_context.getEnclosingNode() == null) ? _context.getReferenceNode() : _context.getEnclosingNode()),IClassifiersSearchScope.STATIC_FIELD);
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)","1213104847361");
    }
  }
);
  result.put("classifier",new BaseNodeReferenceSearchScopeProvider(){
    public void registerSelf(    ModelConstraintsManager manager){
    }
    public void unRegisterSelf(    ModelConstraintsManager manager){
    }
    public Object createSearchScopeOrListOfNodes(    final IOperationContext operationContext,    final ReferentConstraintContext _context){
      return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.CLASSIFFIER,operationContext.getScope()){
        @NotNull @Override public List<SNode> getClassifiers(){
          Set<SNode> enclosingClassifierAncestors=SetSequence.fromSet(new HashSet<SNode>());
          SetSequence.fromSet(enclosingClassifierAncestors).addSequence(ListSequence.fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Classifier",false)));
          List<SNode> result=new ArrayList<SNode>();
          for (          SNode classifier : ListSequence.fromList(super.getClassifiers())) {
            if (SPropertyOperations.getBoolean(classifier,"nonStatic")) {
              continue;
            }
            if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
              continue;
            }
            List<SNode> ancestors=SNodeOperations.getAncestors(classifier,null,true);
            if (ListSequence.fromList(ancestors).where(new IWhereFilter<SNode>(){
              public boolean accept(              SNode it){
                return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Classifier"));
              }
            }
).isNotEmpty() && ListSequence.fromList(ancestors).intersect(SetSequence.fromSet(enclosingClassifierAncestors)).isEmpty()) {
              continue;
            }
            result.add(classifier);
          }
          return result;
        }
      }
;
    }
    public SNodePointer getSearchScopeValidatorNodePointer(){
      return new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)","4074304533012411948");
    }
  }
);
  return result;
}
