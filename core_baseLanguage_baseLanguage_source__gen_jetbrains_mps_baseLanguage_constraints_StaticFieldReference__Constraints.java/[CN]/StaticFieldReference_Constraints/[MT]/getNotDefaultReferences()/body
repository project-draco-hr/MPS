{
  Map<String,ReferenceConstraintsDescriptor> references=new HashMap();
  references.put("variableDeclaration",new BaseReferenceConstraintsDescriptor("variableDeclaration",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new ClassifierVisibleStaticMembersScope(SLinkOperations.getTarget(_context.getReferenceNode(),"classifier",false),((_context.getEnclosingNode() == null) ? _context.getReferenceNode() : _context.getEnclosingNode()),IClassifiersSearchScope.STATIC_FIELD);
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_amrbnf_a0a1a0a0a1a0b0a1a0;
        }
      }
;
    }
  }
);
  references.put("classifier",new BaseReferenceConstraintsDescriptor("classifier",this){
    @Override public boolean hasOwnScopeProvider(){
      return true;
    }
    @Nullable @Override public ReferenceScopeProvider getScopeProvider(){
      return new BaseReferenceScopeProvider(){
        @Override public Object createSearchScopeOrListOfNodes(        final IOperationContext operationContext,        final ReferenceConstraintsContext _context){
          return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode()),IClassifiersSearchScope.CLASSIFFIER,operationContext.getScope()){
            @NotNull @Override public List<SNode> getClassifiers(){
              Set<SNode> enclosingClassifierAncestors=SetSequence.<SNode>fromSet(new HashSet<SNode>());
              SetSequence.fromSet(enclosingClassifierAncestors).addSequence(ListSequence.<SNode>fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.Classifier",false)));
              List<SNode> result=new ArrayList<SNode>();
              for (              SNode classifier : ListSequence.<SNode>fromList(super.getClassifiers())) {
                if (SPropertyOperations.getBoolean(classifier,"nonStatic")) {
                  continue;
                }
                if (SNodeOperations.isInstanceOf(classifier,"jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
                  continue;
                }
                List<SNode> ancestors=SNodeOperations.getAncestors(classifier,null,true);
                if (ListSequence.<SNode>fromList(ancestors).where(new IWhereFilter<SNode>(){
                  public boolean accept(                  SNode it){
                    return !(SNodeOperations.isInstanceOf(it,"jetbrains.mps.baseLanguage.structure.Classifier"));
                  }
                }
).isNotEmpty() && ListSequence.<SNode>fromList(ancestors).intersect(SetSequence.<SNode>fromSet(enclosingClassifierAncestors)).isEmpty()) {
                  continue;
                }
                result.add(classifier);
              }
              return result;
            }
          }
;
        }
        @Override public SNodePointer getSearchScopeValidatorNode(){
          return breakingNode_amrbnf_a0a1a0a0a1a0b0a2a0;
        }
      }
;
    }
  }
);
  return references;
}
