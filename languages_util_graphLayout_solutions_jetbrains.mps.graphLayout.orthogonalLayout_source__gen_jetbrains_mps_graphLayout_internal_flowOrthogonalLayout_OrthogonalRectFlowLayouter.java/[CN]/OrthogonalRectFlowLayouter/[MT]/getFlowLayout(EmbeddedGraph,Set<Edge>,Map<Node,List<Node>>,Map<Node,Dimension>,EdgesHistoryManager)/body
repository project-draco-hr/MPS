{
  EmbeddedGraphModifier modifier=new EmbeddedGraphModifier(embeddedGraph);
  Graph graph=embeddedGraph.getGraph();
  List<Edge> oldEdges=ListSequence.<Edge>fromList(new ArrayList<Edge>());
  ListSequence.<Edge>fromList(oldEdges).addSequence(ListSequence.<Edge>fromList(graph.getEdges()));
  Map<Dart,Integer> bends=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  Map<Dart,Integer> angles=MapSequence.<Dart,Integer>fromMap(new HashMap<Dart,Integer>());
  OrthogonalRepresentation.getRepresentation(embeddedGraph,edgesToBeStraight,bends,angles);
  if (OrthogonalRectFlowLayouter.SHOW_lOG > 0) {
    System.out.println("bends:");
    System.out.println(bends);
  }
  OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph,bends,angles);
  Map<Dart,Direction2D> directions=OrthogonalRepresentation.getDirections(embeddedGraph,angles);
  modifier.setDartDirections(directions);
  Map<Edge,Edge> modifiedEdges=modifier.makeRectanglesForNodes(nodeMap);
  for (  Edge edge : SetSequence.<Edge>fromSet(MapSequence.fromMap(modifiedEdges).keySet())) {
    Edge newEdge=MapSequence.<Edge,Edge>fromMap(modifiedEdges).get(edge);
    if (MapSequence.fromMap(modifiedEdges).containsKey(newEdge)) {
      MapSequence.<Edge,Edge>fromMap(modifiedEdges).put(edge,MapSequence.<Edge,Edge>fromMap(modifiedEdges).get(newEdge));
    }
  }
  modifier.makeRectangularFaces();
  modifier.makerInnerFaces();
  Map<Edge,Integer> nodeBorderLengths=MapSequence.<Edge,Integer>fromMap(new HashMap<Edge,Integer>());
  for (  Node node : SetSequence.<Node>fromSet(MapSequence.fromMap(nodeMap).keySet())) {
    for (    Dart dart : ListSequence.<Dart>fromList(modifier.getNodeFace(node).getDarts())) {
      Edge edge=dart.getEdge();
      if (MapSequence.<Dart,Direction2D>fromMap(directions).get(dart).isHorizontal()) {
        MapSequence.<Edge,Integer>fromMap(nodeBorderLengths).put(edge,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).width);
      }
 else {
        MapSequence.<Edge,Integer>fromMap(nodeBorderLengths).put(edge,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node).height);
      }
    }
  }
  Map<Edge,Integer> lengths=new EdgeLengthComputer().compute(embeddedGraph,directions,nodeBorderLengths);
  Map<Node,Point> coordinates=new CoordinatePlacer(embeddedGraph,lengths,directions).getCoordinates();
  GraphLayout nodesLayout=GraphLayoutFactory.createGraphLayout(graph);
  for (  Node node : SetSequence.<Node>fromSet(MapSequence.fromMap(nodeMap).keySet())) {
    Node[] corners=modifier.getCornerNodes(node);
    Rectangle rect=GeomUtil.getRectangle(MapSequence.<Node,Point>fromMap(coordinates).get(corners[0]),MapSequence.<Node,Point>fromMap(coordinates).get(corners[2]));
    nodesLayout.setLayoutFor(node,rect);
  }
  for (  Edge edge : ListSequence.<Edge>fromList(oldEdges)) {
    List<Edge> history=ListSequence.<Edge>fromList(new LinkedList<Edge>());
    for (    Edge historyEdge : ListSequence.<Edge>fromList(historyManager.getHistory(edge))) {
      if (MapSequence.fromMap(modifiedEdges).containsKey(historyEdge)) {
        ListSequence.<Edge>fromList(history).addElement(MapSequence.<Edge,Edge>fromMap(modifiedEdges).get(historyEdge));
      }
 else {
        ListSequence.<Edge>fromList(history).addElement(historyEdge);
      }
    }
    List<Point> edgeLayout=ListSequence.<Point>fromList(new ArrayList<Point>());
    Node cur=ListSequence.<Edge>fromList(history).first().getSource();
    ListSequence.<Point>fromList(edgeLayout).addElement(MapSequence.<Node,Point>fromMap(coordinates).get(cur));
    for (    Edge historyEdge : ListSequence.<Edge>fromList(history)) {
      Node next=historyEdge.getOpposite(cur);
      ListSequence.<Point>fromList(edgeLayout).addElement(MapSequence.<Node,Point>fromMap(coordinates).get(next));
      cur=next;
    }
    nodesLayout.setLayoutFor(edge,edgeLayout);
  }
  return nodesLayout;
}
