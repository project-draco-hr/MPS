{
  Graph copy=new Graph();
  Map<Node,Node> nodeMap=MapSequence.<Node,Node>fromMap(new HashMap<Node,Node>());
  Map<Edge,Edge> edgeMap=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    MapSequence.<Node,Node>fromMap(nodeMap).put(node,copy.createNode());
  }
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    MapSequence.<Edge,Edge>fromMap(edgeMap).put(edge,copy.connect(MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getSource()),MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getTarget())));
  }
  EdgesHistoryManager historyManager=new EdgesHistoryManager(copy);
  BiconnectAugmentation.smartMakeBiconnected(copy);
  EmbeddedGraph embeddedGraph=new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(copy);
  Map<Edge,List<Edge>> history=MapSequence.<Edge,List<Edge>>fromMap(new HashMap<Edge,List<Edge>>());
  for (  Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
    Edge copyEdge=MapSequence.<Edge,Edge>fromMap(edgeMap).get(edge);
    MapSequence.<Edge,List<Edge>>fromMap(history).put(edge,historyManager.getHistory(copyEdge));
    if (copyEdge.getSource() != MapSequence.<Node,Node>fromMap(nodeMap).get(edge.getSource())) {
      MapSequence.<Edge,List<Edge>>fromMap(history).put(edge,ListSequence.<Edge>fromList(MapSequence.<Edge,List<Edge>>fromMap(history).get(edge)).reversedList());
    }
  }
  Map<Node,List<Node>> newNodes=MapSequence.<Node,List<Node>>fromMap(new HashMap<Node,List<Node>>());
  Map<Edge,Edge> replacedEdges=MapSequence.<Edge,Edge>fromMap(new HashMap<Edge,Edge>());
  Set<Edge> newEdges=new EmbeddedGraphModifier(embeddedGraph).reduceNodesDegree(newNodes,replacedEdges);
  for (  List<Edge> list : Sequence.<List<Edge>>fromIterable(MapSequence.fromMap(history).values())) {
    Edge first=ListSequence.<Edge>fromList(list).first();
    if (MapSequence.fromMap(replacedEdges).containsKey(first)) {
      ListSequence.<Edge>fromList(list).setElement(0,MapSequence.<Edge,Edge>fromMap(replacedEdges).get(first));
    }
    if (ListSequence.<Edge>fromList(list).count() > 1) {
      Edge last=ListSequence.<Edge>fromList(list).last();
      if (MapSequence.fromMap(replacedEdges).containsKey(last)) {
        ListSequence.<Edge>fromList(list).setElement(ListSequence.<Edge>fromList(list).count() - 1,MapSequence.<Edge,Edge>fromMap(replacedEdges).get(last));
      }
    }
  }
  Map<Node,List<Node>> nodesToSplit=MapSequence.<Node,List<Node>>fromMap(new LinkedHashMap<Node,List<Node>>(16,(float)0.75,false));
  Map<Node,Dimension> copyNodeSizes=MapSequence.<Node,Dimension>fromMap(new HashMap<Node,Dimension>());
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Node copyNode=MapSequence.<Node,Node>fromMap(nodeMap).get(node);
    if (!(MapSequence.fromMap(newNodes).containsKey(copyNode))) {
      MapSequence.<Node,List<Node>>fromMap(nodesToSplit).put(copyNode,ListSequence.<Node>fromList(new ArrayList<Node>()));
    }
 else {
      MapSequence.<Node,List<Node>>fromMap(nodesToSplit).put(copyNode,MapSequence.<Node,List<Node>>fromMap(newNodes).get(copyNode));
    }
    MapSequence.<Node,Dimension>fromMap(copyNodeSizes).put(copyNode,MapSequence.<Node,Dimension>fromMap(nodeSizes).get(node));
  }
  GraphLayout copyLayout=getFlowLayout(embeddedGraph,newEdges,nodesToSplit,copyNodeSizes,historyManager);
  GraphLayout graphLayout=GraphLayoutFactory.createGraphLayout(graph);
  for (  Node node : ListSequence.<Node>fromList(graph.getNodes())) {
    Node copyNode=MapSequence.<Node,Node>fromMap(nodeMap).get(node);
    graphLayout.setLayoutFor(node,new Rectangle(copyLayout.getNodeLayout(copyNode)));
  }
  for (  Edge graphEdge : ListSequence.<Edge>fromList(graph.getEdges())) {
    List<Point> edgeLayout=ListSequence.<Point>fromList(new ArrayList<Point>());
    List<Edge> edgeHistory=MapSequence.<Edge,List<Edge>>fromMap(history).get(graphEdge);
    Node copySource=MapSequence.<Node,Node>fromMap(nodeMap).get(graphEdge.getSource());
    Node cur;
    Node firstSource=ListSequence.<Edge>fromList(edgeHistory).first().getSource();
    if (copySource == firstSource || ListSequence.<Node>fromList(MapSequence.<Node,List<Node>>fromMap(newNodes).get(copySource)).contains(firstSource)) {
      cur=firstSource;
    }
 else {
      cur=ListSequence.<Edge>fromList(edgeHistory).first().getTarget();
    }
    for (    Edge edge : ListSequence.<Edge>fromList(edgeHistory)) {
      if (cur == edge.getSource()) {
        ListSequence.<Point>fromList(edgeLayout).addSequence(ListSequence.<Point>fromList(copyLayout.getEdgeLayout(edge)));
      }
 else {
        ListSequence.<Point>fromList(edgeLayout).addSequence(ListSequence.<Point>fromList(copyLayout.getEdgeLayout(edge)).reversedList());
      }
      cur=edge.getOpposite(cur);
    }
    graphLayout.setLayoutFor(graphEdge,edgeLayout);
  }
  Rectangle containingRect=graphLayout.getContainingRectangle();
  graphLayout=graphLayout.shift(20 - containingRect.x,20 - containingRect.y);
  return graphLayout;
}
