{
  String namespace=NameUtil.namespaceFromConceptFQName(conceptFqName);
  if (namespace.equals("jetbrains.mps.lang.structure") && propertyName.equals(SNodeUtil.property_INamedConcept_name) && !conceptFqName.equals("jetbrains.mps.lang.structure.structure.AnnotationLinkDeclaration")) {
    return null;
  }
  if (conceptFqName.equals(RuntimeTypeVariable.concept)) {
    return null;
  }
  final Pair<String,String> originalKey=new Pair<String,String>(conceptFqName,propertyName);
  if (isSetter) {
    INodePropertySetter setter=myNodePropertySettersCache.get(originalKey);
    if (setter != null) {
      return setter == NULL_SETTER ? null : setter;
    }
  }
 else {
    INodePropertyGetter getter=myNodePropertyGettersCache.get(originalKey);
    if (getter != null) {
      return getter == NULL_GETTER ? null : getter;
    }
  }
  return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<IModelConstraints>(){
    public IModelConstraints compute(){
      SNode conceptDeclaration=SModelUtil.findConceptDeclaration(conceptFqName,GlobalScope.getInstance());
      List<SNode> hierarchy=SModelUtil_new.getConceptAndSuperConcepts(conceptDeclaration);
      for (      final SNode concept : hierarchy) {
        Language l=SModelUtil.getDeclaringLanguage(concept);
        ensureLanguageAdded(l);
        final String conceptFqName=NameUtil.nodeFQName(concept);
        final IModelConstraints result;
        if (isSetter) {
          result=myNodePropertySettersMap.get(new Pair<String,String>(conceptFqName,propertyName));
        }
 else {
          result=myNodePropertyGettersMap.get(new Pair<String,String>(conceptFqName,propertyName));
        }
        if (result != null) {
          if (isSetter) {
            myNodePropertySettersCache.put(originalKey,(INodePropertySetter)result);
          }
 else {
            myNodePropertyGettersCache.put(originalKey,(INodePropertyGetter)result);
          }
          return result;
        }
      }
      if (isSetter) {
        myNodePropertySettersCache.put(originalKey,NULL_SETTER);
      }
 else {
        myNodePropertyGettersCache.put(originalKey,NULL_GETTER);
      }
      return null;
    }
  }
);
}
