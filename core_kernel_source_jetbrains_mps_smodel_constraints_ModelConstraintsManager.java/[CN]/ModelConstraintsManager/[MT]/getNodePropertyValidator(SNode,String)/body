{
  if (node == null)   return null;
  final String nodeConceptFqName=node.getConceptFqName();
  final Pair<String,String> originalKey=new Pair<String,String>(nodeConceptFqName,propertyName);
synchronized (myLock) {
    INodePropertyValidator result=myNodePropertyValidatorsCache.get(originalKey);
    if (result != null || myNodePropertyValidatorsCache.containsKey(originalKey)) {
      return result;
    }
    return NodeReadAccessCasterInEditor.runReadTransparentAction(new Computable<INodePropertyValidator>(){
      public INodePropertyValidator compute(){
        List<SNode> hierarchy=SModelUtil_new.getConceptAndSuperConcepts(node.getConceptDeclarationNode());
        for (        SNode concept : hierarchy) {
          Language l=SModelUtil.getDeclaringLanguage(concept);
          ensureLanguageAdded(l);
          String conceptFqName=NameUtil.nodeFQName(concept);
          INodePropertyValidator result=myNodePropertyValidatorsMap.get(new Pair<String,String>(conceptFqName,propertyName));
          if (result != null) {
            myNodePropertyValidatorsCache.put(originalKey,result);
            return result;
          }
        }
        myNodePropertyValidatorsCache.put(originalKey,null);
        return null;
      }
    }
);
  }
}
