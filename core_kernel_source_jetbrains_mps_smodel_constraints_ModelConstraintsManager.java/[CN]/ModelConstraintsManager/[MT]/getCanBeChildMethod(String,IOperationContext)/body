{
synchronized (myCanBeChildMethods) {
    if (myCanBeChildMethods.containsKey(conceptFqName)) {
      return myCanBeChildMethods.get(conceptFqName);
    }
    IScope scope=context.getScope();
    AbstractConceptDeclaration topConcept=SModelUtil_new.findConceptDeclaration(conceptFqName,scope);
    if (topConcept != null) {
      List<AbstractConceptDeclaration> conceptAndSuperConcepts=SModelUtil_new.getConceptAndSuperConcepts(topConcept);
      for (      AbstractConceptDeclaration concept : conceptAndSuperConcepts) {
        String fqName=NameUtil.nodeFQName(concept);
        Language language=scope.getLanguage(NameUtil.namespaceFromConcept(concept));
        if (language == null) {
          continue;
        }
        Class behaviorClass=language.getClass(constraintsClassByConceptFqName(fqName));
        if (behaviorClass == null) {
          continue;
        }
        try {
          Method method=behaviorClass.getMethod(BehaviorConstants.CAN_BE_A_CHILD_METHOD_NAME,IOperationContext.class,CanBeAChildContext.class);
          myCanBeChildMethods.put(conceptFqName,method);
          return method;
        }
 catch (        NoSuchMethodException e) {
        }
      }
    }
    myCanBeChildMethods.put(conceptFqName,null);
    return null;
  }
}
