{
  String namespace=node.getNode().getLanguageNamespace();
  if (namespace.equals("jetbrains.mps.bootstrap.structureLanguage") && propertyName.equals(NamedConcept.NAME) && !node.getConceptFQName().equals("jetbrains.mps.bootstrap.structureLanguage.structure.AnnotationLinkDeclaration")) {
    return null;
  }
  if (namespace.equals("jetbrains.mps.projectLanguage")) {
    return null;
  }
  if (node instanceof RuntimeTypeVariable) {
    return null;
  }
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    builder.append('#');
    builder.append(propertyName);
    final String prefixedPropertyName=builder.toString();
    builder.setLength(0);
    final String nodeConceptFqName=node.getConceptFQName();
    builder.append(nodeConceptFqName);
    builder.append(prefixedPropertyName);
    String originalKey=builder.toString();
    if (isSetter) {
      if (myNodePropertySettersCache.containsKey(originalKey)) {
        return myNodePropertySettersCache.get(originalKey);
      }
    }
 else {
      if (myNodePropertyGettersCache.containsKey(originalKey)) {
        return myNodePropertyGettersCache.get(originalKey);
      }
    }
    List<AbstractConceptDeclaration> hierarchy=SModelUtil_new.getConceptAndSuperConcepts(node.getConceptDeclarationAdapter());
    for (    final AbstractConceptDeclaration concept : hierarchy) {
      Language l=SModelUtil_new.getDeclaringLanguage(concept,GlobalScope.getInstance());
      if (!myAddedLanguageNamespaces.containsKey(l.getNamespace())) {
        processLanguageAdded(l);
      }
      final String conceptFqName=NameUtil.nodeFQName(concept);
      final IModelConstraints result;
      builder.setLength(0);
      builder.append(conceptFqName);
      builder.append(prefixedPropertyName);
      if (isSetter) {
        result=myNodePropertySettersMap.get(builder.toString());
      }
 else {
        result=myNodePropertyGettersMap.get(builder.toString());
      }
      if (result != null) {
        if (isSetter) {
          myNodePropertySettersCache.put(originalKey,(INodePropertySetter)result);
        }
 else {
          myNodePropertyGettersCache.put(originalKey,(INodePropertyGetter)result);
        }
        return result;
      }
    }
    if (isSetter) {
      myNodePropertySettersCache.put(originalKey,null);
    }
 else {
      myNodePropertyGettersCache.put(originalKey,null);
    }
    return null;
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
