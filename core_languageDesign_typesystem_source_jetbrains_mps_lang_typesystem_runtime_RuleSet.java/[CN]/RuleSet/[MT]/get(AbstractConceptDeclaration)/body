{
  Set<T> cachedResult=myRulesCache.get(key);
  if (cachedResult != null) {
    return new HashSet<T>(cachedResult);
  }
  Set<T> result=new HashSet<T>();
  Set<AbstractConceptDeclaration> frontier=new HashSet<AbstractConceptDeclaration>();
  Set<AbstractConceptDeclaration> newFrontier=new HashSet<AbstractConceptDeclaration>();
  frontier.add(key);
  while (!frontier.isEmpty()) {
    for (    AbstractConceptDeclaration abstractConcept : frontier) {
      Set<T> rules=myRules.get(abstractConcept);
      boolean overrides=false;
      if (rules != null) {
        result.addAll(rules);
        for (        T rule : rules) {
          if (rule instanceof ICheckingRule_Runtime && ((ICheckingRule_Runtime)rule).overrides()) {
            overrides=true;
          }
        }
      }
      if (overrides) {
        continue;
      }
      if (abstractConcept instanceof ConceptDeclaration) {
        ConceptDeclaration conceptDeclaration=(ConceptDeclaration)abstractConcept;
        newFrontier.add(conceptDeclaration.getExtends());
        for (        InterfaceConceptReference interfaceConceptReference : conceptDeclaration.getImplementses()) {
          newFrontier.add(interfaceConceptReference.getIntfc());
        }
      }
      if (abstractConcept instanceof InterfaceConceptDeclaration) {
        InterfaceConceptDeclaration interfaceConcept=(InterfaceConceptDeclaration)abstractConcept;
        for (        InterfaceConceptReference interfaceConceptReference : interfaceConcept.getExtendses()) {
          newFrontier.add(interfaceConceptReference.getIntfc());
        }
      }
    }
    frontier=newFrontier;
    newFrontier=new HashSet<AbstractConceptDeclaration>();
  }
  myRulesCache.put(key,new HashSet<T>(result));
  return result;
}
