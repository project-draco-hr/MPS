{
  LOG.debug("Updating class path");
  if (myItems != null) {
    cacheOldItems(myItems,changeModule != null);
  }
  if (changeModule != null) {
    List<String> items=changeModule.getClassPathItems();
    for (    String item : items) {
      myCachedItems.remove(item);
    }
  }
  myItems=new CompositeClassPathItem();
  IClassPathItem rtJar=getRTJar();
  if (rtJar != null) {
    myItems.add(rtJar);
  }
  IClassPathItem mpsPath=getMPSPath();
  if (mpsPath != null) {
    myItems.add(mpsPath);
  }
  IClassPathItem supportPath=getMPSSupportPath();
  if (supportPath != null) {
    myItems.add(supportPath);
  }
  boolean useTimestamps=changeModule == null;
  if (myModuleRepository != null) {
    for (    IModule l : myModuleRepository.getAllModules()) {
      LOG.debug("Adding classpath from model " + l);
      for (      String s : l.getClassPathItems()) {
        LOG.debug("Add " + s);
        addClassPathItem(s,useTimestamps);
      }
    }
  }
  Set<String> classPath=new LinkedHashSet<String>();
  if (myProjects != null) {
    for (    MPSProject project : myProjects.getProjects()) {
      for (      String s : project.getClassPath()) {
        classPath.add(s);
      }
    }
  }
  for (  String s : classPath) {
    addClassPathItem(s,useTimestamps);
  }
  if (changeModule == null) {
    myRuntimeEnvironment.reloadAll();
  }
 else {
    myRuntimeEnvironment.replace(new Bundle(changeModule.getModuleUID(),changeModule.getByteCodeLocator()));
  }
  for (  IModule m : myModuleRepository.getAllModules()) {
    m.reloadStubs();
  }
  myCachedItems.clear();
  myAlreadyAdded.clear();
  LOG.debug("Done");
}
