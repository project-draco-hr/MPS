{
  this.addNodeById("2282909602806268543");
  this.addNodeById("2282909602806423211");
  Assert.assertTrue(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806423212"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).isNotEmpty());
  SNode toBeMoved=ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806423212"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).first();
  Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2282909602806423212"),"jetbrains.mps.lang.smodelTests.structure.Root"),SNodeOperations.getParent(toBeMoved));
  ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_0_n",true)).addElement(toBeMoved);
  Assert.assertTrue(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_0_n",true)).contains(toBeMoved));
  Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2282909602806268544"),"jetbrains.mps.lang.smodelTests.structure.Root"),SNodeOperations.getParent(toBeMoved));
  Assert.assertFalse(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(this.getNodeById("2282909602806423212"),"jetbrains.mps.lang.smodelTests.structure.Root"),"child_1_n",true)).contains(toBeMoved));
}
