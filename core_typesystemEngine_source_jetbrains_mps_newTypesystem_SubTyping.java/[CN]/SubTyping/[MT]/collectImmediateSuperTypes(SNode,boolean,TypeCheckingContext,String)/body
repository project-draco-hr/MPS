{
  Set<SNode> result=new HashSet<SNode>();
  if (term == null) {
    return result;
  }
  Set<Pair<SubtypingRule_Runtime,IsApplicableStatus>> subTypingRules=myTypeChecker.getRulesManager().getSubtypingRules(term,isWeak);
  boolean possiblyBlindAlley=false;
  if (superTypeConceptFQName != null && !(superTypeConceptFQName.equals(term.getConceptFqName()))) {
    possiblyBlindAlley=myTypeChecker.getRulesManager().subtypingRulesByNodeAreAllByConcept(term,isWeak);
  }
  if (subTypingRules != null) {
    for (    final Pair<SubtypingRule_Runtime,IsApplicableStatus> subTypingRule : subTypingRules) {
      if (possiblyBlindAlley && subTypingRule.o1.surelyKeepsConcept()) {
        continue;
      }
      List<SNode> superTypes=subTypingRule.o1.getSubOrSuperTypes(term,context,subTypingRule.o2);
      if (superTypes != null) {
        result.addAll(superTypes);
      }
    }
  }
  return result;
}
