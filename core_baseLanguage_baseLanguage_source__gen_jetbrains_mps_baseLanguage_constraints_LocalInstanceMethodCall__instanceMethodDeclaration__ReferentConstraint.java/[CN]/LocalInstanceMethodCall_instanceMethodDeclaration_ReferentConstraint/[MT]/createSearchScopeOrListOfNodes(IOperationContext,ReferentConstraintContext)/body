{
  List<SNode> result=new ArrayList<SNode>();
  if (SNodeOperations.isInstanceOf(SNodeOperations.getAncestor(_context.getEnclosingNode(),"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false),"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
    return result;
  }
  SNode classifier=ClassConcept_Behavior.getContextClass_8008512149545173402(_context.getEnclosingNode());
  int constraint=IClassifiersSearchScope.INSTANCE_METHOD;
  Set<String> names=SetSequence.fromSet(new HashSet<String>());
  while (classifier != null) {
    SNode context=((_context.getReferenceNode() == null) ? _context.getEnclosingNode() : _context.getReferenceNode());
    List<SNode> instanceMethodDeclarations=(List<SNode>)Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier,context,constraint);
    for (    SNode method : instanceMethodDeclarations) {
      if (!(SetSequence.fromSet(names).contains(SPropertyOperations.getString(method,"name")))) {
        ListSequence.fromList(result).addElement(method);
      }
    }
    for (    SNode method : instanceMethodDeclarations) {
      SetSequence.fromSet(names).addElement(SPropertyOperations.getString(method,"name"));
    }
    SNode method=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration",false,false);
    if (method != null && SNodeOperations.isInstanceOf(method,"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      return result;
    }
    classifier=SNodeOperations.getAncestor(classifier,"jetbrains.mps.baseLanguage.structure.Classifier",false,false);
  }
  return result;
}
